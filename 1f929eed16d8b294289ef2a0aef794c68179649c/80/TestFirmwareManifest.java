// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561383444258L), -63,
                                                                      "52b1736e-30dc-439a-a9a3-e627d2a92c1d",
                                                                      "27d39ab0-5000-42a7-86bf-76765833e455",
                                                                      "2e3a32d8-41b4-45df-a9f7-f886e6a7e1d3",
                                                                      "50d55330-961a-414a-b07c-5aa381fdac53",
                                                                      "730a7dd3-11b8-47cb-adb3-a2d72327b0e9",
                                                                      "c7666a2d-3980-4453-a2fe-7b5b8577b940",
                                                                      new Date(1561383440716L),
                                                                      new Date(1561383440867L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561383441234L), -14,
                                                                      "56a6817e-5816-44c9-a350-763777ad5365",
                                                                      "d3bf41c3-0021-462a-b08b-f8e1169e297e",
                                                                      "74976bd7-9ed2-40ed-8964-50e13d732f58",
                                                                      "462296ff-a1ee-48e1-b1f4-9e86406548ab",
                                                                      "1a21d4a7-ff54-46c2-a8b0-510c4494d9b0",
                                                                      "c15bd28f-d214-4638-bed9-1c7db1a72935",
                                                                      new Date(1561383445130L),
                                                                      new Date(1561383450366L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561383441234L), -14,
                                                                      "56a6817e-5816-44c9-a350-763777ad5365",
                                                                      "d3bf41c3-0021-462a-b08b-f8e1169e297e",
                                                                      "74976bd7-9ed2-40ed-8964-50e13d732f58",
                                                                      "462296ff-a1ee-48e1-b1f4-9e86406548ab",
                                                                      "1a21d4a7-ff54-46c2-a8b0-510c4494d9b0",
                                                                      "c15bd28f-d214-4638-bed9-1c7db1a72935",
                                                                      new Date(1561383445130L),
                                                                      new Date(1561383450366L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561383450499L), -121,
                                                                 "b391f82f-91c5-4e27-b0e4-3d21c6ee207b",
                                                                 "a40ec039-8eee-4916-9221-872d1cdb52db",
                                                                 "9496d314-c047-48db-90b5-9a49d1ca4c72",
                                                                 "b5b49a78-b5bb-477b-bd4d-2b20a52086b6",
                                                                 "06469be5-a5c2-4351-9a7a-669aa9dfd0d2",
                                                                 "fd2a2572-b3fe-47de-a3c0-8b6cf650b3cc",
                                                                 new Date(1561383450049L), new Date(1561383442301L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561383445838L), -34,
                                                                        "61e74872-3427-494b-8ab7-e489e493d61a",
                                                                        "b6f48f8a-2aa3-4b8e-b2e7-93439644eedd14030e2b-fee0-462e-8a43-1ec3ad92e5fd7485a876-42bd-40e2-ad16-42d98c8ef7ad0469005f-cb36-4228-9899-3a8736b7aeccbe903335-e665-47b5-854d-c00ca27aecb7de28d78c-b8d4-4c64-b303-688a17408409bb54a002-8515-4f58-98ae-85f76c23a70f8a005de7-161b-48ae-b4b3-2a7ecb29d7a5da6ce938-1f5c-4e7c-a839-dda4049ff355acef62b3-d5c9-46ec-a294-bb50fbe587259db165b5-bbde-496e-a037-e5fdb625dccdffe1a3b3-3d89-4663-8c5f-5891c288a035b9c45d70-19c3-4e8b-a57a-7185ddfca8ebd8103d13-1096-4a66-925c-11b9f34ff35bd26a1676-56ef-490f-a6cf-6c52d166d4a5cf6033bd-85c8-4e7d-b9af-ea4ac47610fca0efb085-4991-441d-a56b-ab6fcd8fc0e30f41b881-9491-4494-b7ec-8de54b91cf2a1e60fc69-09e6-421a-9c72-d729e3ed50bd94c4df47-ed8c-43bf-81b5-e42c974a4dd707c2f8f7-4061-4bff-91ac-e22522a0dbc980db2335-46f8-40d5-9dec-246ff49af0cb36771064-3747-4bae-a965-3a7f1a2c4ea7c1b51fda-b55e-4f84-8a91-d222cd3038d19880eb22-8cfa-4fbe-b8de-46b8782f53243988f56d-024f-4739-871f-d40a8cc06add1e618ac4-3acf-4709-8f8f-9f457e83139ab456f460-7aed-40a1-ab1f-8ef69d7657bfc1181550-a9a8-45e6-aeeb-a8ed41a400965e83869c-cf3d-413a-b404-37e0e22fb9d99b75ccdd-9c80-47c8-958d-992c7baa8560588998a4-6297-41c8-9454-4dedb2ba73a21d9c7079-4000-4199-912d-c4e0604e60a9c2384610-4547-41ff-a1b4-62a9bef7ba026aced929-e223-4143-800d-91d5c4f060b87c37dc43-32e1-4b0a-8a63-020591f8c5d2b3170f57-de02-44ad-abbd-64bb52d4eed3ca570e66-bedf-4368-acc2-087ffe5e366f6073318b-cd1a-4745-8eac-ce6f202c14f4b3a8ca05-42f3-4573-9cec-7fcc1c1889dffe585125-889a-45bd-8861-78bf5ab16cd3ccd28f5d-57a2-4450-9733-de393c332b350b90abc0-86d1-4b04-9fb0-6d144498bb8641012280-c42a-4204-afea-84345723321a3cc1bb29-192a-4e60-b96a-e8336ceae207302f0583-2268-4b68-b5e4-10cdd0445a83d2acd4d0-c16e-4492-833b-5150aeb601d96566f058-2b53-424f-9c0d-2b8686d27b9ac7444972-1851-46bd-a6db-1f49154f39910eb48bb7-b016-42ce-81c9-36f0a894dbc9835d812f-f1cb-4aa2-a8df-8e05fabda3bc7d84d7c1-5fa3-45ca-995d-4c31a39765cdd27e5257-30a3-44a4-bc63-a378f5524a3bb8b6df2a-3b50-4a0c-8186-3b44a56220af3c13cbb7-1062-4f85-9d7d-7c3e1b84765d031e06e2-6bf4-4160-8036-ecc304c96633",
                                                                        "f9325942-6eda-4e5e-8e8a-deffbded5c01",
                                                                        "5874f43b-2f05-45f2-a864-2a115d01b13a",
                                                                        "c44cce1d-a32f-4390-b2ac-b49534c1eb9f",
                                                                        "d7accbab-e49a-48ae-ac01-f4b9c8784a9a9cb6a60d-f8a0-4774-a329-5664d352f8a5cc110017-5ee1-467e-af65-47e1da81165843e617f8-9beb-4ec1-84d3-efde78a8485c",
                                                                        new Date(1561383449422L),
                                                                        new Date(1561383450514L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561383443356L), -28,
                                                                      "34392eed-12e0-4e57-9e86-78abbba502ae",
                                                                      "9d217447-9392-46ce-9384-6740202e376a",
                                                                      "4a17436b-1731-4a24-b77d-6fea534542b2",
                                                                      "2343583e-8ea3-4e43-a05e-71e5a315322f",
                                                                      "79b899f3-db80-411f-9ecf-11a329ef1f5c",
                                                                      "fa77c773-e414-49a8-a154-3267434bf1f5",
                                                                      new Date(1561383446088L),
                                                                      new Date(1561383442033L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561383443356L), -28,
                                                                      "34392eed-12e0-4e57-9e86-78abbba502ae",
                                                                      "9d217447-9392-46ce-9384-6740202e376a",
                                                                      "4a17436b-1731-4a24-b77d-6fea534542b2",
                                                                      "2343583e-8ea3-4e43-a05e-71e5a315322f",
                                                                      "79b899f3-db80-411f-9ecf-11a329ef1f5c",
                                                                      "fa77c773-e414-49a8-a154-3267434bf1f5",
                                                                      new Date(1561383446088L),
                                                                      new Date(1561383442033L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561383441621L), 15,
                                                                      "74eeec83-a5dd-43da-93f0-2c6df4046e23",
                                                                      "90d3476d-5019-4fa7-8f86-ecabaea28ed0",
                                                                      "f4f5f0be-6029-4311-b67a-5484b9dca169",
                                                                      "382159ba-36d1-4e49-8dc2-5943da7ae5f0",
                                                                      "b617f596-a4d0-4644-870f-947a3a0de97a",
                                                                      "ab65f1e9-8d85-4abf-a773-b9f3dc200c06",
                                                                      new Date(1561383442698L),
                                                                      new Date(1561383449386L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
