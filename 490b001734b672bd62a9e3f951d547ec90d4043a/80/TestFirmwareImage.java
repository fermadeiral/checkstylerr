// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1565006435548L),
                                                             "de5f6f51-1586-45c9-a762-5484f18bbab4", -101,
                                                             "59d64682-8066-4b0c-aed3-6c5f3c54013c",
                                                             "9ea294d7-9b81-48ec-9885-cd942d0566c9",
                                                             "817c7f5a-d994-4e22-ac92-50f4a4b216ec",
                                                             "cb2bf6b7-1381-4525-ba66-3ff77cad5f83",
                                                             new Date(1565006438741L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1565006432496L),
                                                             "7de1c999-f85f-4869-a114-ecfb72a952a5", 44,
                                                             "7b736ae4-031a-4785-8f34-09ba9a37a3eb",
                                                             "05d98dee-85d6-4786-b994-dc0dfb23bd1a",
                                                             "37b3a0f6-cb07-477d-9ca6-56fa3e429e92",
                                                             "db06dc99-b19e-4163-a319-4742de3af0a0",
                                                             new Date(1565006430808L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1565006432496L),
                                                             "7de1c999-f85f-4869-a114-ecfb72a952a5", 44,
                                                             "7b736ae4-031a-4785-8f34-09ba9a37a3eb",
                                                             "05d98dee-85d6-4786-b994-dc0dfb23bd1a",
                                                             "37b3a0f6-cb07-477d-9ca6-56fa3e429e92",
                                                             "db06dc99-b19e-4163-a319-4742de3af0a0",
                                                             new Date(1565006430808L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1565006436995L),
                                                        "14e1377d-efff-4468-8908-ff76d51b7fdf", -103,
                                                        "2a714902-d858-4902-afba-337057e81152",
                                                        "62c566f2-0e99-4584-9c8c-186c46d51f77",
                                                        "1760032a-21e8-4ee7-8806-c7c5db4ac7d0",
                                                        "83bc2f71-44c7-42b1-80ef-bd85ae53bf78",
                                                        new Date(1565006437265L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1565006433736L),
                                                               "50707e48-a1a8-4dcf-acb6-cc4fb871e1a1", 36,
                                                               "ff61c873-0265-4457-ba47-5d7dcf93ef59",
                                                               "cd968642-88cb-47bd-9334-4957cf677321e3d4a5f6-bfed-4c1e-871b-581029d968fca8e1ebf9-4957-4b53-9039-63729cc027aa6e2d3bfe-7892-4b31-a30e-46e2ca412868af910062-e77a-446a-858a-530b577e1878051fd73f-0161-4b7a-a549-311978052f24adb32353-f288-451c-b8d4-da989aaaed8b2ea0ee9d-5bce-466b-bba7-5d4571c1c120c59a474c-424a-401a-a423-1bdf3c8886ae0136ec53-45df-4773-bf34-92394a91b12cb214dd2a-e30c-4176-9453-c73a8fa210266edb7e1e-32f5-4d78-9167-b17fa9559b6a671f6411-0d08-4c27-8876-52595963afe8d23b7c05-136e-4b6b-ab1d-f914d1f2c7675efb11fd-74c9-4377-bba8-847d3134178202c301d8-aff8-4d58-8d51-6a657433873c0a056f27-5fef-4fa2-9454-f1ec55a1fce9f3dfd06a-f49f-4b43-8615-5777d262fd3331ca02bc-5b84-41b3-b878-08edd2eb09fd2054062b-4d8f-4527-a9c0-75200ea18e8e7206e704-7bc6-4581-b4e1-457fec00f3f7dfb2613e-c8b9-422b-81f1-6f712008b0a5d8907f1a-1689-4739-a39b-654d16466d71884f45fc-fcc5-4f70-ab81-f0e7c0f2a4aaae02d79e-e2ec-49b1-a3e8-c2bfd6ec0ce0c954480f-da15-41b4-be73-5a60ad5d849307732d1e-5b66-4665-92dc-938bac3d82069f09aa32-af74-441e-9ee9-bf9754045e3d77a5e2c0-9cc6-4309-a578-88a3b035f1484ebbc907-c0bc-4d98-82fa-5c4b0cb5b0fae6dc2dd3-7f19-4b0a-8a5a-69a3b8e14c952efaf495-9942-4574-9dc9-0c2e13b7cbf9b6ebd804-15a9-4760-a95c-e6c4f949ce04c9a1e5f3-f1b9-4b59-98d1-a0d3cb0757dcc6ab882a-fc3e-48a4-ae96-60485b49a7d4f62dafbb-28a9-4e3e-b6eb-35ddeff39e25907b11b8-b92d-47c8-abe8-66349f3feaea04f8ca0d-0b60-4be4-bcb9-c5405d1bf6c9c18bd6a7-f286-4544-9b73-7b2a7482cdf15d23375c-4527-4529-be45-d1838d03c33d64de24c5-97fe-43db-8738-350d9de09e13181bb5b8-b3a2-4c7e-8cee-17f085270bc0901f083c-e733-4bc8-97cf-b4b6a2cf45d455e30166-8cd2-43b9-91d3-bed022e7cc4886790df7-dcce-4282-bc27-4b3320b09e06f5af039f-5be4-4e3a-a5e9-92bb98cbe60e7f47fe46-e1ae-49e0-81fd-6b913befc2a9646b9402-2c3d-4066-a42c-cdde41e91be9cc3d248e-9771-4373-9d14-c63d8715d3619f09e733-20da-4c6d-9f4e-7aaf7a1396180f4f3337-6918-4f87-9690-5a0f730e07b65ebaa1af-b548-487f-8e49-dceade0fd789f9be886c-78d0-45c5-852f-298992cb9cea4c1f0d8c-9224-4fd2-bea0-4654ed8d066bb9dc984b-b37e-4486-b75f-8be3e59b142c37873569-8163-4daa-9112-b3c9a660f9af",
                                                               "ecbf0082-4305-40f3-bbad-296759fd788a",
                                                               "9b182ec3-377f-43f5-a263-a1e531a706e483b89c7e-f452-4422-990b-480aab400d97be85d56c-bb08-481a-a590-9f6fdcd73d90fe5142da-c0d5-4572-9b70-9cf26cc6848d",
                                                               new Date(1565006431299L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1565006431138L),
                                                             "b5e2b2dc-e1b2-427c-a6d0-b6bcbc6a6359", 115,
                                                             "fd43c013-a49c-4d05-9780-64d5777bd2c9",
                                                             "be8e75fc-0757-4539-9b38-461d8ed31267",
                                                             "67ffd74c-91ea-482f-b560-7ce16bab6a9e",
                                                             "2aa4e286-e362-44fb-be22-95c4a8eea64a",
                                                             new Date(1565006438118L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1565006431138L),
                                                             "b5e2b2dc-e1b2-427c-a6d0-b6bcbc6a6359", 115,
                                                             "fd43c013-a49c-4d05-9780-64d5777bd2c9",
                                                             "be8e75fc-0757-4539-9b38-461d8ed31267",
                                                             "67ffd74c-91ea-482f-b560-7ce16bab6a9e",
                                                             "2aa4e286-e362-44fb-be22-95c4a8eea64a",
                                                             new Date(1565006438118L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1565006436470L),
                                                             "1dc424ea-d2cb-4acf-8de8-d662101b689d", -56,
                                                             "03581a28-6e76-4c4b-9950-6daeaf132c6c",
                                                             "d275e1f7-f646-467e-8377-1be6cb22d5e9",
                                                             "a9284125-5513-4abb-9439-96dac009e667",
                                                             "db5dfc09-bee9-40c7-88e6-3ab24cb463f4",
                                                             new Date(1565006438837L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
