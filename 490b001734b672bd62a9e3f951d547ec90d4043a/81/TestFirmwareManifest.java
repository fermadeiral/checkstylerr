// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1565006438328L), 99,
                                                                      "60251894-e15e-47be-825b-8a050799e5db",
                                                                      "f9b51212-5bdd-4f58-aa4a-0e1aeb785bd0",
                                                                      "d237ef59-1633-4749-8a33-c3776a64d1e0",
                                                                      "cd501a4e-29c9-4f36-a4bd-aa36dd9f004a",
                                                                      "54fbd83f-fc9b-487d-a29b-35a990d5f14f",
                                                                      "efa36f12-14ca-49db-b00b-1898d20de36e",
                                                                      new Date(1565006436735L),
                                                                      new Date(1565006435197L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1565006436084L), 117,
                                                                      "7eb0962f-20d1-4b1c-8a68-991b30e04421",
                                                                      "ac13e619-fdb0-4c1f-abb4-816af4db98ef",
                                                                      "3df037f6-d3b0-42f6-96d0-2b9a8b1ef81a",
                                                                      "bd0fef4e-0f00-412d-87f5-b1f0c92e80ff",
                                                                      "5d58cd60-cde3-4183-a1fb-01ef8e60562f",
                                                                      "95a92f6b-47d9-4c2f-b2fd-22b293797de1",
                                                                      new Date(1565006434058L),
                                                                      new Date(1565006437848L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1565006436084L), 117,
                                                                      "7eb0962f-20d1-4b1c-8a68-991b30e04421",
                                                                      "ac13e619-fdb0-4c1f-abb4-816af4db98ef",
                                                                      "3df037f6-d3b0-42f6-96d0-2b9a8b1ef81a",
                                                                      "bd0fef4e-0f00-412d-87f5-b1f0c92e80ff",
                                                                      "5d58cd60-cde3-4183-a1fb-01ef8e60562f",
                                                                      "95a92f6b-47d9-4c2f-b2fd-22b293797de1",
                                                                      new Date(1565006434058L),
                                                                      new Date(1565006437848L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1565006437559L), -57,
                                                                 "4c28c1a0-817f-4c8e-b627-60a1ba48bd84",
                                                                 "c35c93ce-a1bc-4b93-a40b-f0ad36826ca4",
                                                                 "34eb44d7-6471-4a19-aeca-5a067da7ab86",
                                                                 "27d61810-abf4-403e-89c5-51f3bed1a20f",
                                                                 "13f11299-3f70-40ad-a81c-030a335f2ce1",
                                                                 "4792dedd-4951-4b0b-985e-15d1b01fef29",
                                                                 new Date(1565006434541L), new Date(1565006437992L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1565006436211L), -86,
                                                                        "b54b995d-69be-4ee7-832a-e4b6285bea11",
                                                                        "e6461638-c9d0-4dc7-b7b1-4a9133f8d4d2250a5a32-340b-45b1-a2f7-2c725d2d9e7499721128-ed99-4515-aaac-d1883a0aae82ae18444d-2f5b-4faf-84f4-7f46ba31f146d837eff5-2a30-4af8-b465-7200c9fb470d7ba5d354-b973-48ad-82e1-23a7f6fea29530c28fea-75b2-4b35-832d-4856c3bd74e027bcfb78-834e-4c04-8dc6-6d9bf085cabcec1d1781-772f-4352-b714-32b471811b2748223ffc-fb72-4da9-95fb-ee944f928e593e829f4a-41c4-4503-bd4a-47ecea8c09c923267def-2120-4ed9-8483-fd66773aa94819991d50-5f1f-4a18-862f-cf46325a08c6daf4e9d1-5824-4e35-8133-48b59160afefeba160b2-6067-47f3-82bf-2ee48f3eff12b74488a2-2763-49d5-9cf8-fa8eedccfdcb59fa5b77-da0b-40ed-996c-9878f06f47576fa22190-3fdd-4c17-abf2-ac3d20e6c01168d92d08-2452-42fb-a65c-3c0e893456bbefd1947f-eb34-47d7-8791-771a3cb0fa920e7751c9-f6f6-4be3-a535-62e1ae4bf417b1bc0365-75f3-46a3-8429-e915fe4bbb6ad4e14f9c-25b2-43f7-b4a4-717fccf4367590698da0-8b2b-4afa-a6f3-44280385ce8ac17addfb-4c27-4905-a237-0d0484d29dad3c8c971b-0006-4ff9-98c7-fcabbca0e43ec82d323a-c672-482e-bf92-e52ea7c62baa766340d4-8a60-48d0-afb9-04acc03330a11eab3f66-b94b-457e-8bca-9041e7c71a38f093c108-e8ec-4372-a052-9ffd722c75ee1c909a73-56e4-4098-b160-04843b4e2f80d600a5be-03db-4171-a10f-039a1f62d72c7825863f-5f59-4fdb-ae7c-6bbd25520008db81029b-7406-40bd-accc-4714387d17cbba021f66-67a1-42c7-bb54-b1292adcc1b093ff44a9-f83a-443d-bf7d-cdb25004a9f92cd41e1d-a38e-4391-b3d2-7a95a3bd7d8dc5013151-3353-416f-b964-a91576a4eff6b6a019de-c7a5-44f7-a867-030dbabd45857c87fb82-bb52-4b1d-a250-0f5f41e0dec996362b08-b32c-41cd-b025-1df8624b7ff72b030f46-61c1-42ae-94a4-255430b558aff15ef56a-0d1d-463c-a23c-c85067bec55493e53c60-69b9-4c03-9f1a-3b230d4ebb9a2d1081af-c1e8-4b58-9d51-971e3440ace6501276d1-0bae-4658-a2ba-3e9281072fcc055e1e3a-fe36-4244-8518-5204748a66664d8d5368-9f42-4bfb-8f2a-fe5f8a25c82d64d288d6-df0b-445c-b6b6-4ef336f5861d61d72fa1-f18d-4cfc-a4eb-9ecae2ad96cffa51af68-2779-4604-8bb4-a172960453706db0cd84-3eb9-4986-b57c-57bb8d9cd7ce36a9a538-fa43-4a1c-a2d4-fab6dce401289888e816-ff1a-45b7-ac4a-9e4564ed6c89293b4034-44a8-4515-bf3a-877ee31351399cb15212-f464-4e72-9932-bd3f97f92098",
                                                                        "3ee3ec92-1aae-4ce7-a016-5bfc8a99f7db",
                                                                        "e4e3e3a5-4142-4737-8ae1-de3ff9cc3828",
                                                                        "bf98ac62-67d4-4997-b455-3adf1329c1d3",
                                                                        "f882ab4f-3cfd-4903-b353-8b400c87486a0828bf8a-5d2c-4757-98ec-1ce16a8351cdcfdf5939-97c3-4a24-bd11-d2797d22a31f0a360ccc-f25f-4f43-988a-b486fc713816",
                                                                        new Date(1565006430594L),
                                                                        new Date(1565006434663L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1565006436075L), 62,
                                                                      "3eed6be4-a3ce-48a8-82e4-a9adcb0f05a5",
                                                                      "a4556650-896b-4f8a-b03f-fb259599209b",
                                                                      "7a1f760e-331f-4dbd-95eb-c477fb1bc370",
                                                                      "71b1e238-af7b-4b27-aad1-f8792afa5b8a",
                                                                      "3711f0df-6c45-46b6-aafe-0aefd2ef7a67",
                                                                      "02a88ec5-95b0-4f56-a8c7-181120a54911",
                                                                      new Date(1565006436916L),
                                                                      new Date(1565006432402L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1565006436075L), 62,
                                                                      "3eed6be4-a3ce-48a8-82e4-a9adcb0f05a5",
                                                                      "a4556650-896b-4f8a-b03f-fb259599209b",
                                                                      "7a1f760e-331f-4dbd-95eb-c477fb1bc370",
                                                                      "71b1e238-af7b-4b27-aad1-f8792afa5b8a",
                                                                      "3711f0df-6c45-46b6-aafe-0aefd2ef7a67",
                                                                      "02a88ec5-95b0-4f56-a8c7-181120a54911",
                                                                      new Date(1565006436916L),
                                                                      new Date(1565006432402L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1565006429756L), -26,
                                                                      "4f354233-7327-4f68-80ec-5af05abfaa5b",
                                                                      "93d8c40f-5623-4e75-aa9a-63d6fa03efb0",
                                                                      "1fe5641a-051f-473a-bd3d-58890ade7676",
                                                                      "02e78fd3-b219-4880-b359-a4aa6b2dd968",
                                                                      "da8797e9-ee95-4ae6-8a0d-5d338b0c6ea9",
                                                                      "9a42ab8e-ea8f-4782-ab90-bdf15fe84856",
                                                                      new Date(1565006431783L),
                                                                      new Date(1565006431711L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
