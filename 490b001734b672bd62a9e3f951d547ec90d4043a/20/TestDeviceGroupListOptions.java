// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(70),
                                                                                        Long.valueOf(-116),
                                                                                        Order.getDefault(),
                                                                                        "e2925a0a-1fde-4033-af10-199422bc160f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1565006435075L),
                                                                                                    new Date(1565006440102L),
                                                                                                    new Date(1565006443125L),
                                                                                                    new Date(1565006436772L),
                                                                                                    new Date(1565006434126L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1565006442937L),
                                                                                                       new Date(1565006439860L),
                                                                                                       new Date(1565006433879L),
                                                                                                       new Date(1565006434868L),
                                                                                                       new Date(1565006435953L),
                                                                                                       new Date(1565006443740L),
                                                                                                       new Date(1565006441776L)))
                                                                        .lessThanUpdatedAt(new Date(1565006436897L))
                                                                        .greaterThanUpdatedAt(new Date(1565006441000L))
                                                                        .equalToName("d36bfeed-837a-43a1-b632-644ade4802c1")
                                                                        .notEqualToName("1eec11a2-d336-49ad-ac3e-4bbb70554942")
                                                                        .inNames(Arrays.asList("03aac05e-44b2-4104-a370-eae369498389",
                                                                                               "a2070f60-f6ca-417c-8322-3d6c58445013",
                                                                                               "31a30b80-5130-4643-90fd-a04edc4beeed",
                                                                                               "383169f9-9aa8-49f0-83c8-b4b803b9f0e3",
                                                                                               "ad6f089b-c984-4220-b16b-46c5b01c543d",
                                                                                               "767d8714-4aaf-43fb-8ba8-83d62c89eb0f"))
                                                                        .notInNames(Arrays.asList("946807a6-0896-46a2-ab87-0db5a4b9f0e3"))
                                                                        .equalToDevicesCount(Integer.valueOf(-54))
                                                                        .notEqualToDevicesCount(Integer.valueOf(15))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(3),
                                                                                                       Integer.valueOf(-95)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-31),
                                                                                                          Integer.valueOf(42),
                                                                                                          Integer.valueOf(102),
                                                                                                          Integer.valueOf(84),
                                                                                                          Integer.valueOf(63),
                                                                                                          Integer.valueOf(112),
                                                                                                          Integer.valueOf(49),
                                                                                                          Integer.valueOf(-45),
                                                                                                          Integer.valueOf(-70)))
                                                                        .lessThanDevicesCount(Integer.valueOf(78))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-92))
                                                                        .inCreatedAts(Arrays.asList(new Date(1565006440957L),
                                                                                                    new Date(1565006438286L),
                                                                                                    new Date(1565006437432L),
                                                                                                    new Date(1565006442435L),
                                                                                                    new Date(1565006441400L),
                                                                                                    new Date(1565006434913L),
                                                                                                    new Date(1565006436950L),
                                                                                                    new Date(1565006442685L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1565006435719L),
                                                                                                       new Date(1565006435969L),
                                                                                                       new Date(1565006437858L),
                                                                                                       new Date(1565006439972L),
                                                                                                       new Date(1565006441045L),
                                                                                                       new Date(1565006434166L)))
                                                                        .lessThanCreatedAt(new Date(1565006442452L))
                                                                        .greaterThanCreatedAt(new Date(1565006435846L))
                                                                        .equalToId("de7073f2-f35c-4a5f-9338-4ed0dd9dcfb4")
                                                                        .notEqualToId("668d559d-ced1-4941-96f7-6cdc00506159")
                                                                        .inIds(Arrays.asList("109b7b22-b2b1-463f-b552-543938e43098",
                                                                                             "384fdec3-3cf9-4617-9a14-4c4ff6659a55",
                                                                                             "d9f6828d-bf76-4183-8690-47c58efada57",
                                                                                             "9f919364-171b-4747-a312-d2824732ad20",
                                                                                             "0159722d-10c0-41b8-b520-af6c74f874e5",
                                                                                             "3dd47f4d-2c4e-458c-a14c-a804ad5a8c80",
                                                                                             "610044ab-6511-4c95-aa36-c4ac7eddca05"))
                                                                        .notInIds(Arrays.asList("1ece3059-09fc-4f67-8589-ff228909f259",
                                                                                                "12554212-256a-4266-b142-56b4518084e4"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565006435075L), new Date(1565006440102L), new Date(1565006443125L),
                                       new Date(1565006436772L), new Date(1565006434126L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565006442937L), new Date(1565006439860L), new Date(1565006433879L),
                                       new Date(1565006434868L), new Date(1565006435953L), new Date(1565006443740L),
                                       new Date(1565006441776L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1565006436897L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1565006441000L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("d36bfeed-837a-43a1-b632-644ade4802c1",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("1eec11a2-d336-49ad-ac3e-4bbb70554942",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("03aac05e-44b2-4104-a370-eae369498389", "a2070f60-f6ca-417c-8322-3d6c58445013",
                                       "31a30b80-5130-4643-90fd-a04edc4beeed", "383169f9-9aa8-49f0-83c8-b4b803b9f0e3",
                                       "ad6f089b-c984-4220-b16b-46c5b01c543d", "767d8714-4aaf-43fb-8ba8-83d62c89eb0f"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("946807a6-0896-46a2-ab87-0db5a4b9f0e3"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-54),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(15),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(3), Integer.valueOf(-95)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-31), Integer.valueOf(42), Integer.valueOf(102),
                                       Integer.valueOf(84), Integer.valueOf(63), Integer.valueOf(112),
                                       Integer.valueOf(49), Integer.valueOf(-45), Integer.valueOf(-70)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(78),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-92),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565006440957L), new Date(1565006438286L), new Date(1565006437432L),
                                       new Date(1565006442435L), new Date(1565006441400L), new Date(1565006434913L),
                                       new Date(1565006436950L), new Date(1565006442685L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565006435719L), new Date(1565006435969L), new Date(1565006437858L),
                                       new Date(1565006439972L), new Date(1565006441045L), new Date(1565006434166L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1565006442452L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1565006435846L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("de7073f2-f35c-4a5f-9338-4ed0dd9dcfb4",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("668d559d-ced1-4941-96f7-6cdc00506159",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("109b7b22-b2b1-463f-b552-543938e43098", "384fdec3-3cf9-4617-9a14-4c4ff6659a55",
                                       "d9f6828d-bf76-4183-8690-47c58efada57", "9f919364-171b-4747-a312-d2824732ad20",
                                       "0159722d-10c0-41b8-b520-af6c74f874e5", "3dd47f4d-2c4e-458c-a14c-a804ad5a8c80",
                                       "610044ab-6511-4c95-aa36-c4ac7eddca05"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("1ece3059-09fc-4f67-8589-ff228909f259", "12554212-256a-4266-b142-56b4518084e4"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(79),
                                                                                        Long.valueOf(72),
                                                                                        Order.getDefault(),
                                                                                        "a494f210-0ce4-4a41-b8df-ebcd52b8ca3d",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(79),
                                                                                        Long.valueOf(72),
                                                                                        Order.getDefault(),
                                                                                        "a494f210-0ce4-4a41-b8df-ebcd52b8ca3d",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-75),
                                                                                        Long.valueOf(58),
                                                                                        Order.getDefault(),
                                                                                        "44bd7fbb-b519-4d0c-85fc-a68b896dfae9",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-75),
                                                                                        Long.valueOf(58),
                                                                                        Order.getDefault(),
                                                                                        "44bd7fbb-b519-4d0c-85fc-a68b896dfae9",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-31),
                                                                                        Long.valueOf(-32),
                                                                                        Order.getDefault(),
                                                                                        "1a546389-6aa3-4c83-9167-b91efa0f5e54",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
