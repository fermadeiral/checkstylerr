// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006436413L), -91,
                                        "403affc6fd3080e7dab854be02c43523", "fec3e779-245f-4ad9-a1ef-3035edb25b95", 119,
                                        "422d4664-8222-4bc5-855a-44781817114c", "403affc6fd3080e7dab854be02c43523",
                                        ApiKeyStatus.getDefault(), new Date(1565006430461L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006438416L), 37,
                                        "403affc6fd3080e7dab854be02c43523", "cdef3bc3-22b0-4189-840b-79ac47cd78e0", 58,
                                        "f2fe423e-23c1-4b89-848b-c4a4e13b8c41", "403affc6fd3080e7dab854be02c43523",
                                        ApiKeyStatus.getDefault(), new Date(1565006429529L));
            ApiKey apikey2 = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006438416L), 37,
                                        "403affc6fd3080e7dab854be02c43523", "cdef3bc3-22b0-4189-840b-79ac47cd78e0", 58,
                                        "f2fe423e-23c1-4b89-848b-c4a4e13b8c41", "403affc6fd3080e7dab854be02c43523",
                                        ApiKeyStatus.getDefault(), new Date(1565006429529L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006434718L), -41,
                                   "403affc6fd3080e7dab854be02c43523", "3f27afc1-e31d-448e-899c-4475be46dbab", 60,
                                   "b882627a-49d6-4885-81b1-686debf71ebd", "403affc6fd3080e7dab854be02c43523",
                                   ApiKeyStatus.getDefault(), new Date(1565006438691L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("1Lä†»1\u0017â¥¥1$$â‚™\u000fJî“™ë¾’î‰®Sï·™é‰‰+1B1P1`íš‘;ê¯ˆîƒ•X/M1\u001f\u001a\u000e\u0018â›«\u00071ï¼—#è§¨11M.\u0011ãœª1U1ï?¨è¼´\b1Sé¤€%L1ç”º\u0019",
                                          new Date(1565006435622L), -91,
                                          "1Lä†»1\u0017â¥¥1$$â‚™\u000fJî“™ë¾’î‰®Sï·™é‰‰+1B1P1`íš‘;ê¯ˆîƒ•X/M1\u001f\u001a\u000e\u0018â›«\u00071ï¼—#è§¨11M.\u0011ãœª1U1ï?¨è¼´\b1Sé¤€%L1ç”º\u0019",
                                          "63abd15d-2812-418b-a3aa-f0f6bf8e497f", -112, null,
                                          "1Lä†»1\u0017â¥¥1$$â‚™\u000fJî“™ë¾’î‰®Sï·™é‰‰+1B1P1`íš‘;ê¯ˆîƒ•X/M1\u001f\u001a\u000e\u0018â›«\u00071ï¼—#è§¨11M.\u0011ãœª1U1ï?¨è¼´\b1Sé¤€%L1ç”º\u0019",
                                          ApiKeyStatus.getDefault(), new Date(1565006437488L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006431750L), 107,
                                        "403affc6fd3080e7dab854be02c43523", "6058e6a2-2272-4044-931f-7a1bad2c7ba4", 108,
                                        "c346f770-b979-402f-9a5e-b348447c518a", "403affc6fd3080e7dab854be02c43523",
                                        ApiKeyStatus.getDefault(), new Date(1565006434561L));
            ApiKey apikey2 = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006431750L), 107,
                                        "403affc6fd3080e7dab854be02c43523", "6058e6a2-2272-4044-931f-7a1bad2c7ba4", 108,
                                        "c346f770-b979-402f-9a5e-b348447c518a", "403affc6fd3080e7dab854be02c43523",
                                        ApiKeyStatus.getDefault(), new Date(1565006434561L));
            ApiKey apikey3 = new ApiKey("403affc6fd3080e7dab854be02c43523", new Date(1565006438517L), -93,
                                        "403affc6fd3080e7dab854be02c43523", "61aab36f-97e2-40a0-a298-3c7b8baf9917", -24,
                                        "b5e8af37-4c12-457b-9709-009b0cd7e74a", "403affc6fd3080e7dab854be02c43523",
                                        ApiKeyStatus.getDefault(), new Date(1565006432702L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
