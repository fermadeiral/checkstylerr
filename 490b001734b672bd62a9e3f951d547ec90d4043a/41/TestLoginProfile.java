// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("49f1162f-883c-4d44-a448-0e1cd1bbfaa7",
                                                          "b3d1bdf5-5419-4285-b032-0b7ce7e63584");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("741e98c1-e28b-448c-a70a-d14762724aff",
                                                          "dc0b6b00-f90b-48a0-9a98-b4e072881f1c");
            LoginProfile loginprofile2 = new LoginProfile("741e98c1-e28b-448c-a70a-d14762724aff",
                                                          "dc0b6b00-f90b-48a0-9a98-b4e072881f1c");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("56a58ebe-9cd1-4862-926a-2643ebf1d6d5",
                                                     "0906be7b-b72e-4303-a943-9638a54c6129");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("590534be-8817-4a82-b603-2ec533e76d8d",
                                                          "01a9206c-a442-470b-9d7d-b86db6bb1bad");
            LoginProfile loginprofile2 = new LoginProfile("590534be-8817-4a82-b603-2ec533e76d8d",
                                                          "01a9206c-a442-470b-9d7d-b86db6bb1bad");
            LoginProfile loginprofile3 = new LoginProfile("d23c62ed-d866-468d-b775-a1ffe7360708",
                                                          "e15cdfa0-60a0-4f7e-8dc8-16194a577d17");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
