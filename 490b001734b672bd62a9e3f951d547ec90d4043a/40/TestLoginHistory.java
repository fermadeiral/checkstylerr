// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1565006439409L),
                                                          "7e949a79-9b23-4bfe-8ee2-ad074e22d0e7", false,
                                                          "979b6b7d-7c7e-4ec9-a8bf-d850f23fc289");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1565006439534L),
                                                          "1ff66f55-f96e-422c-8610-a83c16d61033", true,
                                                          "e8d22202-9840-4ff7-9ab3-69755ab76e87");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1565006439534L),
                                                          "1ff66f55-f96e-422c-8610-a83c16d61033", true,
                                                          "e8d22202-9840-4ff7-9ab3-69755ab76e87");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1565006436628L), "e446669c-29a6-41be-b4e6-a60313471137",
                                                     false, "cd05ea23-a59d-411a-9d4b-12070846beec");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1565006432058L),
                                                          "b14f2037-5bf6-4a26-8d5c-baf9af082407", true,
                                                          "db02d3ac-a30c-4569-992c-8de74ec77e05");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1565006432058L),
                                                          "b14f2037-5bf6-4a26-8d5c-baf9af082407", true,
                                                          "db02d3ac-a30c-4569-992c-8de74ec77e05");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1565006430863L),
                                                          "96c575f2-57bc-4bf4-b95b-990c987029b5", true,
                                                          "ff38bfec-e5b3-4205-a8b0-9d733e3adbae");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
