// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558096105907L),
                                                             "92bf3243-4cd4-46c2-b1d8-5d1331ea425e", -120,
                                                             "f3ac897e-993b-4132-895b-29a61f934137",
                                                             "c6c37dd3-9d91-4152-be89-60719ab3e284",
                                                             "0e15e6ba-5d77-4559-bce4-0d9345125ae1",
                                                             "39e5f84d-d516-4c69-a163-3b20db7b0463",
                                                             new Date(1558096101818L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558096106313L),
                                                             "a9c192c8-b62f-4674-8416-afff36076d68", -39,
                                                             "57c53e4b-10be-47db-9799-1e95da162214",
                                                             "c101a6ba-fa72-414c-afa7-a7489114ae5c",
                                                             "ecd743bb-4491-4d29-9b05-5fdae0678724",
                                                             "c9ccff3f-717a-44ef-9fcf-71fceb21a29d",
                                                             new Date(1558096107270L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1558096106313L),
                                                             "a9c192c8-b62f-4674-8416-afff36076d68", -39,
                                                             "57c53e4b-10be-47db-9799-1e95da162214",
                                                             "c101a6ba-fa72-414c-afa7-a7489114ae5c",
                                                             "ecd743bb-4491-4d29-9b05-5fdae0678724",
                                                             "c9ccff3f-717a-44ef-9fcf-71fceb21a29d",
                                                             new Date(1558096107270L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1558096107368L),
                                                        "fd144019-97d0-41a1-adba-a8d1e0edc1ad", -57,
                                                        "d050e5e9-6e5b-4895-aeb3-1a3df12a6a79",
                                                        "dbac524b-e5cb-4551-b1a6-9697979c4efa",
                                                        "9f3603e5-438e-464b-8455-6d6fcbe1a359",
                                                        "443fc844-2647-456c-b0a0-f998a4f14471",
                                                        new Date(1558096109010L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1558096105479L),
                                                               "c8eeba2d-4c8b-4fc7-89ce-20970c236fd9", 66,
                                                               "8355484e-e1e7-43ae-8b1c-07b0e970980d",
                                                               "92bcefdb-b375-4fc6-9b53-3eeace363fd9699f5666-ec0e-41a9-916e-3f82cea5065fcaec9829-2a95-49a9-a8f8-9f5e81017a2df1ef612f-7380-4e01-ae2e-2de85d6ea0dbc9323dbb-cac8-4da7-b6a6-df9c6246eeaa608f6775-a9b5-484e-a6f9-8ed072f7e917ad5622ab-aaea-4377-ab2f-036c099d70335ad3f688-a0e0-4552-ba6e-9c1e1cf346ae4b3a4135-8b35-441a-bc4a-970c6cf1eb5f3d856b18-90b0-4a2e-9cf6-8fb2ac7e76a745e378e4-754b-41e6-98e4-63afccf04e82879d6c22-89b4-45d0-b18f-0840ea0b54c01b825894-a2ef-4aae-8ba7-e67acaf8755feb645bae-3b00-4d3c-a8bd-cdc78cf7aefc0c425067-a4e3-4726-825b-36eb057983e8bb70db41-6292-4469-80a4-bd84eb2c401b03aa603e-3327-48d9-8d48-18432b4d2cc39ea95ab7-d054-4c78-9012-19a172d5d9deb708a1aa-8f17-4688-9033-0efd69c7389c7a582f84-80b0-4d52-9613-a277b676a239528f7fc1-87c7-48c7-b99a-c4626226496d4ce6b2ce-5524-4842-8dcf-ae25f312813a2c2a5597-c2f8-41dd-870d-c9bf713f8c08ded0c698-14fa-492c-b2f2-69e6d05e8e96d327b128-7404-44ae-87a8-32d1b2ab85cbd4787f68-0c2a-4894-b787-d0e9eb41777ae6e523fb-05ec-4adc-8a85-5211d70bc8973711191d-7ca5-4f9b-884a-a254c0c4a9ec64ff974f-7466-4885-8f39-c58ec0763f46c1939a3a-29a0-46bf-932c-1ac00187756986d401b7-dfcf-47ae-a6c4-9fbd821df0b1e1934bef-6d42-49a9-8d81-5cb329fa4c439e0d967c-3087-4e1b-a8c5-d118c9810cf2b7514168-e215-4b67-9258-cc0aecb7db97faac23b5-31d7-4e66-8c30-dd9e58e0f00b018812ac-a73e-494e-a3e1-611c9812677f6874a6af-75c7-4872-bec9-010fbc911dd0f5e4033f-e624-4836-b28d-e9620da66a3022626f94-2569-4573-928d-514c156c3b1c5a289e13-2082-45b7-abcc-fc246b349f386fa4d81f-4a52-4940-ab4c-1c5f89f14afd701b51d5-0cb7-4e24-ba81-4c715958338b621c5abe-6edb-4538-a14e-49cb4b9f05c9f8c4f228-7a01-42e5-86e9-84a4ef13f8502425f5af-5b00-4d6f-9971-85ecacd6d7215bd8842c-5d02-4f60-8b6a-470b6a70d429be22cbb4-bf67-40a3-89a2-a2fc10596cc6df659f23-ed5f-4188-ba49-3cc505cae45ecabebc47-7b00-429a-9b16-71ae83025f8422d33e1e-5553-41f1-9fe6-54530ad53beeb0f949eb-073f-497e-8e43-e6630eb33abb2c420ffd-7a49-4909-b281-ebe9c6ee69c0cb116f94-debd-479a-a69a-3f0c1143b553f9a3b4e0-a755-4fc9-898c-63fd9d6f821edc54a737-5293-4553-8de4-0972f4483604200e2ef2-092e-45b7-816b-7b1f9ccf02f5",
                                                               "f0643ff4-7bf1-4dd9-a4a1-6c16901104d9",
                                                               "478f3741-b10d-49f9-a509-3fba27f9522f2103b2e6-f406-43b4-a23a-c9a5bbd15bf67c834753-ece7-4f0e-bfeb-d6af4475f79c8e048cb7-9734-4e4e-86b0-ef2e9a7c360c",
                                                               new Date(1558096102977L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558096103926L),
                                                             "a29211bf-7d0a-45e2-a1b5-98519b00d348", -118,
                                                             "dacae0c7-134d-47ff-abd6-890b00ebb75a",
                                                             "534b183f-6da6-4f20-abf3-d2c0b9e3d31d",
                                                             "4f637cdb-6867-4d01-86b1-df57478de67c",
                                                             "9590093a-ea6e-4d4e-9fdd-caa38e0d6599",
                                                             new Date(1558096105067L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1558096103926L),
                                                             "a29211bf-7d0a-45e2-a1b5-98519b00d348", -118,
                                                             "dacae0c7-134d-47ff-abd6-890b00ebb75a",
                                                             "534b183f-6da6-4f20-abf3-d2c0b9e3d31d",
                                                             "4f637cdb-6867-4d01-86b1-df57478de67c",
                                                             "9590093a-ea6e-4d4e-9fdd-caa38e0d6599",
                                                             new Date(1558096105067L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1558096103464L),
                                                             "1deca21b-bb98-484e-8b07-67f3f6a86888", -39,
                                                             "9f6ddbd2-7f43-403a-940b-cadbc4c766b2",
                                                             "2ffc0803-25a0-44cf-bb6a-b77304a76d7f",
                                                             "a6487fbe-a00a-40aa-ade4-d58aa680cfaf",
                                                             "6d2430a2-13b8-4c6b-9d51-e2aed2b4fa96",
                                                             new Date(1558096105802L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
