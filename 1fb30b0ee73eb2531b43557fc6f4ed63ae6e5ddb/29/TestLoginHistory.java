// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558096101849L),
                                                          "fc219889-4949-4e92-ae0b-424f6b326405", false,
                                                          "ccca2b50-7bff-496f-a16a-0979490cfc1d");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558096107030L),
                                                          "f5ff0c9f-acd2-4ee1-9fa2-9cd078aab976", true,
                                                          "14c8b4c2-b061-44ec-aaec-6fb464a7f2bc");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558096107030L),
                                                          "f5ff0c9f-acd2-4ee1-9fa2-9cd078aab976", true,
                                                          "14c8b4c2-b061-44ec-aaec-6fb464a7f2bc");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1558096103619L), "c5e45664-a59e-49cd-b99c-a19434a9a5d8",
                                                     false, "e303f63e-61b1-4177-b2d0-116c524142f0");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558096105276L),
                                                          "8a404eb9-9faa-4c1d-930d-4cb5ee57b37d", false,
                                                          "fed616e8-8f2d-4c4a-aff5-a5ede8937c5b");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558096105276L),
                                                          "8a404eb9-9faa-4c1d-930d-4cb5ee57b37d", false,
                                                          "fed616e8-8f2d-4c4a-aff5-a5ede8937c5b");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1558096109592L),
                                                          "f312c90b-34cb-4a56-a626-2286912e861f", false,
                                                          "6f03c503-4a2a-4044-833b-02ab98889936");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
