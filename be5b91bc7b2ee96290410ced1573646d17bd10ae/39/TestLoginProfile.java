// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("3d92f292-4f4e-490e-b32b-2c49545c8a29",
                                                          "b7011bf2-2ee9-4e9e-9281-6e06a9376e67");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("15667dcb-660d-445e-9d31-7d36ced2df35",
                                                          "72ac7320-3cb4-4f08-bc1c-57da70d1b08c");
            LoginProfile loginprofile2 = new LoginProfile("15667dcb-660d-445e-9d31-7d36ced2df35",
                                                          "72ac7320-3cb4-4f08-bc1c-57da70d1b08c");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("15792946-7b54-4ffb-945e-c47dd65e9ab1",
                                                     "7b3430eb-67b8-41fc-99e7-0ba4321d9fa4");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("caa7f8ea-2f62-4870-b747-bc4bc8f1b94d",
                                                          "966fef02-d988-4c74-ab6c-e6154ae74cef");
            LoginProfile loginprofile2 = new LoginProfile("caa7f8ea-2f62-4870-b747-bc4bc8f1b94d",
                                                          "966fef02-d988-4c74-ab6c-e6154ae74cef");
            LoginProfile loginprofile3 = new LoginProfile("efa225fe-d953-4352-a50c-115cc362952b",
                                                          "7c9193fb-28c7-4000-ac63-a42b7295059f");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
