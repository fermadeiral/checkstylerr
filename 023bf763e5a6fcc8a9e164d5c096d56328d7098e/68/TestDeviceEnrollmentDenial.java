// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        new Date(1563275993334L),
                                                                                        "b64f9eef-36be-4ec3-82fb-78ad907d7d38",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        new Date(1563275984531L),
                                                                                        "0d79e3d3-28e0-4c0f-b080-755221d61e67",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        new Date(1563275984531L),
                                                                                        "0d79e3d3-28e0-4c0f-b080-755221d61e67",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                   new Date(1563275992849L),
                                                                                   "b3b53783-8e85-48a9-9291-577f5870ab1c",
                                                                                   "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                   "9e70a034c4e3cc5aa8682c95a95d2309");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("Uî‘”`á‘¡bÃ¬Më¬…bbì–´VVâ§’K<Dä“«\u0010b\u0016bbb1b\u0006'11[1è™‘1R!UDb\bbá¥¾11/\u0002\\\\bb\u001d\u00051à©”bPW11bb1bë??C",
                                                                                          new Date(1563275988208L),
                                                                                          "2b71b4ad-cc83-4b75-8f92-9d29adb9b57d",
                                                                                          "Uî‘”`á‘¡bÃ¬Më¬…bbì–´VVâ§’K<Dä“«\u0010b\u0016bbb1b\u0006'11[1è™‘1R!UDb\bbá¥¾11/\u0002\\\\bb\u001d\u00051à©”bPW11bb1bë??C",
                                                                                          "Uî‘”`á‘¡bÃ¬Më¬…bbì–´VVâ§’K<Dä“«\u0010b\u0016bbb1b\u0006'11[1è™‘1R!UDb\bbá¥¾11/\u0002\\\\bb\u001d\u00051à©”bPW11bb1bë??C");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        new Date(1563275987549L),
                                                                                        "ad17afe4-663b-47f8-993f-9fadc942575b",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        new Date(1563275987549L),
                                                                                        "ad17afe4-663b-47f8-993f-9fadc942575b",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        new Date(1563275988687L),
                                                                                        "0e806ef8-ca64-4693-8d76-23ba5b2c08c6",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309",
                                                                                        "9e70a034c4e3cc5aa8682c95a95d2309");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
