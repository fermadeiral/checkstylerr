// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(62),
                                                                                           Long.valueOf(5),
                                                                                           Order.getDefault(),
                                                                                           "1103b750-2a81-4092-ab46-8540bc93debd",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("b12110b2-f93e-46a7-8258-24a50a5ab70e")
                                                                          .notEqualToDeviceId("6fe6e505-ddc8-4cd2-854c-65aa9f5c7975")
                                                                          .inDeviceIds(Arrays.asList("19b48e9e-825a-4256-8d24-0a6143f660f7",
                                                                                                     "ec2e37f0-4bf1-43c8-9161-7ee8cf06ce66",
                                                                                                     "90f943cd-89a2-490f-ae9f-7081f4a282f7"))
                                                                          .notInDeviceIds(Arrays.asList("ad65b18a-95c9-4f9c-98c8-cbf412c62607",
                                                                                                        "971a097e-658e-495b-a246-1e6ff5f3a669",
                                                                                                        "69d80bff-0140-443c-b43b-cc5926336e22"))
                                                                          .equalToDescription("32df76c3-5c1b-4bfd-9819-c3433da5b049")
                                                                          .notEqualToDescription("57a72cad-3cdd-4d50-a93f-9a65617595be")
                                                                          .inDescriptions(Arrays.asList("4e6a65a5-06fc-44c1-9143-cf103ff93e16",
                                                                                                        "26a2f409-ca64-4fce-8a16-a4d837d5cc87",
                                                                                                        "bcebdd1e-93a7-4098-9d60-b207c9067692",
                                                                                                        "6efa898b-1291-4a01-8d8f-49651d2760f2",
                                                                                                        "c0d5d8eb-2a56-4864-bf6e-3f2b43c78b97",
                                                                                                        "ff9dd13f-aa1e-4b60-9c32-aab1f8d488a3",
                                                                                                        "2da25030-886d-4a02-bb41-54f017029fec",
                                                                                                        "fbea49bc-ec47-495f-b52d-b78446ac6e08",
                                                                                                        "c3ab8beb-3318-4d9c-928b-0f018c8143ad"))
                                                                          .notInDescriptions(Arrays.asList("a119fdd5-ed18-41ad-8a2e-3ef7a048625a",
                                                                                                           "499dd237-3c29-4851-9512-1c5637859e0d",
                                                                                                           "aba3df24-93f8-43a2-9e7e-22cfd0a31667",
                                                                                                           "898281c8-af2f-4baf-9a23-a2661af8b895"))
                                                                          .inDateTimes(Arrays.asList(new Date(1563275992135L),
                                                                                                     new Date(1563275993597L),
                                                                                                     new Date(1563275994121L),
                                                                                                     new Date(1563275988318L),
                                                                                                     new Date(1563275992619L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1563275994234L),
                                                                                                        new Date(1563275986425L),
                                                                                                        new Date(1563275987376L),
                                                                                                        new Date(1563275993332L)))
                                                                          .lessThanDateTime(new Date(1563275993072L))
                                                                          .greaterThanDateTime(new Date(1563275994532L))
                                                                          .equalToStateChange(Boolean.TRUE)
                                                                          .notEqualToStateChange(Boolean.FALSE)
                                                                          .equalToId("3bc14f54-23e6-4c5b-ba8c-fb4fb8cc9d5a")
                                                                          .notEqualToId("9217039e-1a26-4114-a42e-37590f83d1a0")
                                                                          .inIds(Arrays.asList("01d5e06f-d5e3-44f6-9877-b4c0fddb62a5",
                                                                                               "d57fdb1e-98b8-4f54-99a3-e6b16a9c672d",
                                                                                               "bf971c8d-9208-4379-8a46-3c777cd0965c"))
                                                                          .notInIds(Arrays.asList("779cd0ae-8470-488f-b04d-1ddddea79bb2",
                                                                                                  "a411b3c1-2d74-483c-a824-bd42c2fc0a2b",
                                                                                                  "c37e3e46-ac71-44de-8c34-3155bf1c30e2",
                                                                                                  "e1650da6-7297-408d-9b93-8a60c4be3417",
                                                                                                  "9b6ec660-8390-4c56-bc90-28787cf249e4"))
                                                                          .equalToEventType("18869431-a804-4739-8dee-fff65c11cbb7")
                                                                          .notEqualToEventType("61b46bee-e7bb-4676-a691-b5c7da8fba7f")
                                                                          .inEventTypes(Arrays.asList("1d678dfb-4c4b-443c-8d78-4f562ad78c5e",
                                                                                                      "fb167a4a-e111-4ed1-90b7-83ab5c9b5076"))
                                                                          .notInEventTypes(Arrays.asList("19562b5e-4f33-4e33-b0c0-551254051865",
                                                                                                         "a432f900-c166-498c-b342-d04915fff737",
                                                                                                         "3287e8f5-cd54-464f-a059-538a6aecd855"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("b12110b2-f93e-46a7-8258-24a50a5ab70e",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("6fe6e505-ddc8-4cd2-854c-65aa9f5c7975",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("19b48e9e-825a-4256-8d24-0a6143f660f7", "ec2e37f0-4bf1-43c8-9161-7ee8cf06ce66",
                                       "90f943cd-89a2-490f-ae9f-7081f4a282f7"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("ad65b18a-95c9-4f9c-98c8-cbf412c62607", "971a097e-658e-495b-a246-1e6ff5f3a669",
                                       "69d80bff-0140-443c-b43b-cc5926336e22"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("32df76c3-5c1b-4bfd-9819-c3433da5b049",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("57a72cad-3cdd-4d50-a93f-9a65617595be",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("4e6a65a5-06fc-44c1-9143-cf103ff93e16", "26a2f409-ca64-4fce-8a16-a4d837d5cc87",
                                       "bcebdd1e-93a7-4098-9d60-b207c9067692", "6efa898b-1291-4a01-8d8f-49651d2760f2",
                                       "c0d5d8eb-2a56-4864-bf6e-3f2b43c78b97", "ff9dd13f-aa1e-4b60-9c32-aab1f8d488a3",
                                       "2da25030-886d-4a02-bb41-54f017029fec", "fbea49bc-ec47-495f-b52d-b78446ac6e08",
                                       "c3ab8beb-3318-4d9c-928b-0f018c8143ad"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("a119fdd5-ed18-41ad-8a2e-3ef7a048625a", "499dd237-3c29-4851-9512-1c5637859e0d",
                                       "aba3df24-93f8-43a2-9e7e-22cfd0a31667", "898281c8-af2f-4baf-9a23-a2661af8b895"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1563275992135L), new Date(1563275993597L), new Date(1563275994121L),
                                       new Date(1563275988318L), new Date(1563275992619L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1563275994234L), new Date(1563275986425L), new Date(1563275987376L),
                                       new Date(1563275993332L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1563275993072L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1563275994532L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("3bc14f54-23e6-4c5b-ba8c-fb4fb8cc9d5a",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("9217039e-1a26-4114-a42e-37590f83d1a0",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("01d5e06f-d5e3-44f6-9877-b4c0fddb62a5", "d57fdb1e-98b8-4f54-99a3-e6b16a9c672d",
                                       "bf971c8d-9208-4379-8a46-3c777cd0965c"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("779cd0ae-8470-488f-b04d-1ddddea79bb2", "a411b3c1-2d74-483c-a824-bd42c2fc0a2b",
                                       "c37e3e46-ac71-44de-8c34-3155bf1c30e2", "e1650da6-7297-408d-9b93-8a60c4be3417",
                                       "9b6ec660-8390-4c56-bc90-28787cf249e4"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("18869431-a804-4739-8dee-fff65c11cbb7",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("61b46bee-e7bb-4676-a691-b5c7da8fba7f",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("1d678dfb-4c4b-443c-8d78-4f562ad78c5e", "fb167a4a-e111-4ed1-90b7-83ab5c9b5076"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("19562b5e-4f33-4e33-b0c0-551254051865", "a432f900-c166-498c-b342-d04915fff737",
                                       "3287e8f5-cd54-464f-a059-538a6aecd855"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(109),
                                                                                           Long.valueOf(-27),
                                                                                           Order.getDefault(),
                                                                                           "21681a82-f0be-43bf-8730-590ae15b6b31",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(109),
                                                                                           Long.valueOf(-27),
                                                                                           Order.getDefault(),
                                                                                           "21681a82-f0be-43bf-8730-590ae15b6b31",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(79),
                                                                                           Long.valueOf(-2),
                                                                                           Order.getDefault(),
                                                                                           "2e5817b9-274e-4d82-9708-613535afd429",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(79),
                                                                                           Long.valueOf(-2),
                                                                                           Order.getDefault(),
                                                                                           "2e5817b9-274e-4d82-9708-613535afd429",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(102),
                                                                                           Long.valueOf(26),
                                                                                           Order.getDefault(),
                                                                                           "eebd80d1-52de-47f7-a9a3-645fff2dad97",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
