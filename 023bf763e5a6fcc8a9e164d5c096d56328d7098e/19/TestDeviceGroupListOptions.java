// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-88),
                                                                                        Long.valueOf(70),
                                                                                        Order.getDefault(),
                                                                                        "975eb85c-4cd1-489a-ac65-3943ede6df9f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1563275987065L),
                                                                                                    new Date(1563275992698L),
                                                                                                    new Date(1563275987102L),
                                                                                                    new Date(1563275985911L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1563275987577L),
                                                                                                       new Date(1563275989081L),
                                                                                                       new Date(1563275993692L),
                                                                                                       new Date(1563275987886L),
                                                                                                       new Date(1563275989765L),
                                                                                                       new Date(1563275986451L),
                                                                                                       new Date(1563275992127L),
                                                                                                       new Date(1563275987480L),
                                                                                                       new Date(1563275989547L)))
                                                                        .lessThanUpdatedAt(new Date(1563275990318L))
                                                                        .greaterThanUpdatedAt(new Date(1563275994713L))
                                                                        .equalToName("c03780da-bb00-43f4-8ad7-6799c4d8a7af")
                                                                        .notEqualToName("cad2bb5b-1237-4d6a-a0ac-90a0bbe03b7e")
                                                                        .inNames(Arrays.asList("e6d34535-610a-4234-8495-48204eb9a8fe",
                                                                                               "abb60f8d-5306-4e16-859c-18662cd1c1db",
                                                                                               "f9ee7fe1-7b11-4e60-afd8-0d87f3273a3b",
                                                                                               "6c534c22-5b97-49e0-b7b8-d36536198da4",
                                                                                               "a3b3cecd-ca11-4388-8096-71d7721cb53d",
                                                                                               "b7699b85-d7a1-43ad-84dd-b2d996c0ac2a",
                                                                                               "61c5b870-18e5-4cbf-9447-ec6e1f37e585",
                                                                                               "8dc3cf94-40b1-40b0-ae58-38e52646fdf1",
                                                                                               "41a58dea-b4fc-4c59-a300-9031209dedb6"))
                                                                        .notInNames(Arrays.asList("c771e0ea-41fb-4ce8-bdac-29075a505298",
                                                                                                  "6b4a800b-323d-4797-ab01-336ab4e0a138",
                                                                                                  "bb025089-0673-412d-be42-51c3223d4965",
                                                                                                  "dc93b4b3-bafb-4c76-b993-016e6cb04637",
                                                                                                  "06547053-cd06-4a41-8efe-9217607b84bd",
                                                                                                  "9bb52ea0-6a3a-4daf-aa95-8e502386fa29",
                                                                                                  "e4bf0da4-7396-4c21-97d9-2cb81330915e",
                                                                                                  "dbda92c1-407a-4cc8-8649-316111be8337"))
                                                                        .equalToDevicesCount(Integer.valueOf(-39))
                                                                        .notEqualToDevicesCount(Integer.valueOf(32))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(23),
                                                                                                       Integer.valueOf(-26),
                                                                                                       Integer.valueOf(70),
                                                                                                       Integer.valueOf(-38),
                                                                                                       Integer.valueOf(-36),
                                                                                                       Integer.valueOf(120)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(92),
                                                                                                          Integer.valueOf(-97),
                                                                                                          Integer.valueOf(64),
                                                                                                          Integer.valueOf(-113),
                                                                                                          Integer.valueOf(79),
                                                                                                          Integer.valueOf(-71),
                                                                                                          Integer.valueOf(-118)))
                                                                        .lessThanDevicesCount(Integer.valueOf(96))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-123))
                                                                        .inCreatedAts(Arrays.asList(new Date(1563275993695L),
                                                                                                    new Date(1563275991752L),
                                                                                                    new Date(1563275985396L),
                                                                                                    new Date(1563275986001L),
                                                                                                    new Date(1563275987926L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1563275991372L),
                                                                                                       new Date(1563275987612L),
                                                                                                       new Date(1563275990749L)))
                                                                        .lessThanCreatedAt(new Date(1563275993049L))
                                                                        .greaterThanCreatedAt(new Date(1563275993400L))
                                                                        .equalToId("4a767162-ab4d-483e-8b28-4682e76d8b23")
                                                                        .notEqualToId("6d1e7816-7294-4a0e-b156-287a97dd4e33")
                                                                        .inIds(Arrays.asList("d965b502-bc13-4cac-9623-0c64d1ff4a6f",
                                                                                             "af43bcd4-3eaf-443d-a2e7-00e85b9d04a9",
                                                                                             "82c949bf-427e-4200-9ea6-9e998e224904"))
                                                                        .notInIds(Arrays.asList("60ab0d1f-794a-41c0-bdc4-9a526b35bcd5",
                                                                                                "0dffeed4-fdca-4fa8-8086-1c1926138072",
                                                                                                "84840c54-1598-4ed1-9af1-b1453c3e4278"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563275987065L), new Date(1563275992698L), new Date(1563275987102L),
                                       new Date(1563275985911L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563275987577L), new Date(1563275989081L), new Date(1563275993692L),
                                       new Date(1563275987886L), new Date(1563275989765L), new Date(1563275986451L),
                                       new Date(1563275992127L), new Date(1563275987480L), new Date(1563275989547L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1563275990318L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1563275994713L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("c03780da-bb00-43f4-8ad7-6799c4d8a7af",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("cad2bb5b-1237-4d6a-a0ac-90a0bbe03b7e",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("e6d34535-610a-4234-8495-48204eb9a8fe", "abb60f8d-5306-4e16-859c-18662cd1c1db",
                                       "f9ee7fe1-7b11-4e60-afd8-0d87f3273a3b", "6c534c22-5b97-49e0-b7b8-d36536198da4",
                                       "a3b3cecd-ca11-4388-8096-71d7721cb53d", "b7699b85-d7a1-43ad-84dd-b2d996c0ac2a",
                                       "61c5b870-18e5-4cbf-9447-ec6e1f37e585", "8dc3cf94-40b1-40b0-ae58-38e52646fdf1",
                                       "41a58dea-b4fc-4c59-a300-9031209dedb6"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("c771e0ea-41fb-4ce8-bdac-29075a505298", "6b4a800b-323d-4797-ab01-336ab4e0a138",
                                       "bb025089-0673-412d-be42-51c3223d4965", "dc93b4b3-bafb-4c76-b993-016e6cb04637",
                                       "06547053-cd06-4a41-8efe-9217607b84bd", "9bb52ea0-6a3a-4daf-aa95-8e502386fa29",
                                       "e4bf0da4-7396-4c21-97d9-2cb81330915e", "dbda92c1-407a-4cc8-8649-316111be8337"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-39),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(32),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(23), Integer.valueOf(-26), Integer.valueOf(70),
                                       Integer.valueOf(-38), Integer.valueOf(-36), Integer.valueOf(120)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(92), Integer.valueOf(-97), Integer.valueOf(64),
                                       Integer.valueOf(-113), Integer.valueOf(79), Integer.valueOf(-71),
                                       Integer.valueOf(-118)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(96),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-123),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563275993695L), new Date(1563275991752L), new Date(1563275985396L),
                                       new Date(1563275986001L), new Date(1563275987926L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563275991372L), new Date(1563275987612L), new Date(1563275990749L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1563275993049L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1563275993400L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("4a767162-ab4d-483e-8b28-4682e76d8b23",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("6d1e7816-7294-4a0e-b156-287a97dd4e33",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("d965b502-bc13-4cac-9623-0c64d1ff4a6f", "af43bcd4-3eaf-443d-a2e7-00e85b9d04a9",
                                       "82c949bf-427e-4200-9ea6-9e998e224904"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("60ab0d1f-794a-41c0-bdc4-9a526b35bcd5", "0dffeed4-fdca-4fa8-8086-1c1926138072",
                                       "84840c54-1598-4ed1-9af1-b1453c3e4278"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-41),
                                                                                        Long.valueOf(31),
                                                                                        Order.getDefault(),
                                                                                        "afd8ef3d-8e5b-420f-9ebb-7ab27a43e9f6",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-41),
                                                                                        Long.valueOf(31),
                                                                                        Order.getDefault(),
                                                                                        "afd8ef3d-8e5b-420f-9ebb-7ab27a43e9f6",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-98),
                                                                                        Long.valueOf(-118),
                                                                                        Order.getDefault(),
                                                                                        "7d769e92-c651-4215-aacd-b38c6d756ee9",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-98),
                                                                                        Long.valueOf(-118),
                                                                                        Order.getDefault(),
                                                                                        "7d769e92-c651-4215-aacd-b38c6d756ee9",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-83),
                                                                                        Long.valueOf(41),
                                                                                        Order.getDefault(),
                                                                                        "737083c2-e1fe-4fe9-b0f4-d88b6d0bcffc",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
