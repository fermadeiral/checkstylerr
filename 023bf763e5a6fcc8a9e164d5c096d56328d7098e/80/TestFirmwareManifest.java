// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1563275984983L), 71,
                                                                      "c01d3416-7140-4b66-990e-fa78093478cd",
                                                                      "1296e129-c556-410b-a6ba-9bf759342450",
                                                                      "46cf0150-6657-4eae-914a-2da57b27bb5f",
                                                                      "8fb77f24-15df-43a4-ba46-2b6d179eca5b",
                                                                      "83998f58-385b-4239-9166-3766b715826c",
                                                                      "bc712f33-0728-484f-83f6-a3886de7567d",
                                                                      new Date(1563275993051L),
                                                                      new Date(1563275984103L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1563275985880L), -64,
                                                                      "dda4c244-31d0-4647-aa39-6d4b0232ad97",
                                                                      "9176d444-9963-4d79-b540-a7badd8f6ce4",
                                                                      "34fdd892-b8c3-495e-896f-a04a1ae80635",
                                                                      "6356e5c4-8020-494c-9598-859b31cf18e3",
                                                                      "5827a74e-2cb2-42b2-a3bc-0e7b60158573",
                                                                      "237a69f2-b934-4caa-84b6-1a103a1e4ca5",
                                                                      new Date(1563275985351L),
                                                                      new Date(1563275986485L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1563275985880L), -64,
                                                                      "dda4c244-31d0-4647-aa39-6d4b0232ad97",
                                                                      "9176d444-9963-4d79-b540-a7badd8f6ce4",
                                                                      "34fdd892-b8c3-495e-896f-a04a1ae80635",
                                                                      "6356e5c4-8020-494c-9598-859b31cf18e3",
                                                                      "5827a74e-2cb2-42b2-a3bc-0e7b60158573",
                                                                      "237a69f2-b934-4caa-84b6-1a103a1e4ca5",
                                                                      new Date(1563275985351L),
                                                                      new Date(1563275986485L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1563275990234L), -3,
                                                                 "fc19eb73-87f0-4033-a6cd-43e35cb78fb5",
                                                                 "17e8a72d-0681-4d54-81ef-bbe3726db916",
                                                                 "b46e2f4a-8fd3-463e-aa8e-9a65dec52bdc",
                                                                 "22ee4879-b82c-4849-abd4-fa529283f249",
                                                                 "02f7b414-f24f-4a63-8ebd-52d67950d96e",
                                                                 "bbef51e6-5728-4ff6-afc5-bc1f6c99971c",
                                                                 new Date(1563275989899L), new Date(1563275988604L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1563275991877L), -9,
                                                                        "d654cb11-012b-4ae7-85bb-9bffea4622f0",
                                                                        "6b837077-c318-489a-b975-7b5a45ba6229bdc2a64f-c6ce-455a-9c85-a062df69bd88ad7146cb-ff8e-4f02-80c2-79dc33da00fcdfdd18ca-898a-4adb-8a65-d4b3dc7f8b35d19df572-47fb-45a1-bb18-c4438cf8628187831e71-1678-4c5e-9555-0d1c51e6524757e93e28-2eab-4dfe-b094-d4fe908796d0a81fdba5-e972-4aae-ad91-6c98e85f6ae827e7518f-232d-4cc7-ab7f-5ecf71388390d248e285-5c04-491c-83fd-bd93f783cbaafa67308a-aefe-40fe-957c-ede57138a32c0ac82ef1-7e15-4de5-a307-b88a6276a9c7edeac3fe-d5cd-4339-b1f1-605c67557b9ddc791c6f-7b71-4ef6-8b9f-4f6df48e782dd6f782ad-287b-4dad-9a84-6fae8282f7e1db9189a9-24f8-4101-9815-9afe14cd53aa105f758b-5ec8-4834-8831-c3f763079ba737d20060-3142-4425-a17d-2131b0bd97487c0a4afd-b943-452e-8fcd-c78141f5f7a4381d23a9-f6f6-4707-b3d7-0aca5b767cf76bb3b22f-57f5-4264-a969-bad172b80c8202ae6968-3432-4d83-aa16-ffd104fb76fc2493cf28-ace9-48b6-86d1-c5a7b272048de3db264e-22fa-4266-a291-ba0967991bf67eb77b62-9b1c-47ad-95d2-1b8c67013a0fa14c3b1c-259d-40de-aca4-f214c86cd7beedda9863-a880-4145-afbf-22ddd0128691d1d03580-43a1-41c6-b65c-9de6d1f86fb92442c4d5-3b9a-475b-86a8-9d1e273d15f756d91803-32a4-4eb0-8a2f-fb5fa31ffb64cd53cdc1-325c-447a-80b4-50ffd3387db5639c5ad4-6cc6-4db2-bedd-f422a10938b5e9675bf0-dc71-41b3-b177-019efea153b30beb80d9-d037-43ff-8c99-a337582efd4fedaaec42-c5c0-45d1-843e-6cdae719811587fdb497-4488-4636-aead-255c365c1b4e801642d6-11af-4eb3-8c8d-d25312f1c98d663fc53c-9e3c-4a4b-bb8d-2dac9bf2c2a14bc025f5-131e-4e68-8c7d-01f40169e81d76ac37c9-2015-473b-9743-1527af83624ac03b8edf-e528-4b58-a2ed-92c0435f3b1be09b5b57-bae3-45d3-ad90-65cc7a725e4d44dfc886-22b7-491a-9d40-73422ab92ffc5c53ad77-94fa-457f-a621-3fcef00e29b6eb7f8688-b667-496b-8857-5dc5f9741542c1500f44-267c-4761-a694-42b67bdfff761bcc6641-a5ae-4d5d-bcbe-1024ef7c7a97971834f8-8877-45c9-b471-b5ad3717e798a6ce24b2-b950-41e4-bd45-f639a3d70e57921aa50a-82e4-4921-b382-c63a5eb741df14a44791-debf-4da5-87e0-a412d1f6343bcf4d5221-4dd6-47f0-87fc-bfd05ddbfa1aa229d161-a92f-48b3-8818-c1b0ac60466f8c1cd3d7-acb8-4055-a1cd-e25f19f3fd3521edb447-70ee-4516-8eb4-5f50bd62867d0ae17c5e-a487-4e03-a558-93b0d038c4d9",
                                                                        "4534d92b-660d-481a-9744-d9b9c1662c3b",
                                                                        "1316e837-5ac9-4a1d-ab46-71cfe678cd78",
                                                                        "11de293b-f5d2-4984-bfa0-fff324607d10",
                                                                        "c29f0ff8-7cba-44aa-9253-c27e57dee4a8945a22d0-255b-4f90-9242-9a1a7babd8695e14bd49-523e-4dbc-b78e-a64e1765d49a207ebf92-25fe-40e7-bff9-83b44f0b588c",
                                                                        new Date(1563275987531L),
                                                                        new Date(1563275990103L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1563275988488L), -105,
                                                                      "1323b26b-a5b4-430f-b020-bd61bb357a9c",
                                                                      "e63a6a91-9790-4244-b77e-fef4661f6254",
                                                                      "58e550fc-7b06-41dc-90eb-1a8b88ad2ea9",
                                                                      "9c9e3e1a-1274-4a22-bb17-ad6ddbcba23d",
                                                                      "fe935690-3f5c-4eb0-b71b-6df0b87957fe",
                                                                      "0211f23a-73d7-413a-a382-e552fa0fbc35",
                                                                      new Date(1563275988074L),
                                                                      new Date(1563275990092L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1563275988488L), -105,
                                                                      "1323b26b-a5b4-430f-b020-bd61bb357a9c",
                                                                      "e63a6a91-9790-4244-b77e-fef4661f6254",
                                                                      "58e550fc-7b06-41dc-90eb-1a8b88ad2ea9",
                                                                      "9c9e3e1a-1274-4a22-bb17-ad6ddbcba23d",
                                                                      "fe935690-3f5c-4eb0-b71b-6df0b87957fe",
                                                                      "0211f23a-73d7-413a-a382-e552fa0fbc35",
                                                                      new Date(1563275988074L),
                                                                      new Date(1563275990092L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1563275989540L), -25,
                                                                      "91d3448f-eeef-4a7f-ada1-698cf0d7534d",
                                                                      "381ff2cb-c5f6-4833-9837-e20cdfb945db",
                                                                      "293b0afb-4c8b-41da-aec6-bba84b00a1d1",
                                                                      "715cbb8c-31d0-45a5-8e0a-1ee8d85f11e7",
                                                                      "934add25-8a63-4472-85dc-313d481adad6",
                                                                      "1c80e4ef-5c55-4b6c-b0d4-e0ff523699eb",
                                                                      new Date(1563275984071L),
                                                                      new Date(1563275985451L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
