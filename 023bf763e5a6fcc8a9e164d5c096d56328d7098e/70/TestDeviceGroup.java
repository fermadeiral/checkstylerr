// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1563275990176L), null,
                                                       "6345ab4d-6e2c-4bbc-a073-e886f6791be2", 55,
                                                       "709594ed-7848-4514-b90a-98fde568f3e7",
                                                       "bb35dfa6-90b8-4d89-8815-6e0ca00f3a75",
                                                       new Date(1563275988033L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1563275988076L), null,
                                                       "aefb4281-e6c4-47e2-a3aa-5fb676d47c44", 123,
                                                       "ac7af776-835e-44ee-be38-f6a4cba18ed5",
                                                       "52ff367d-0278-44df-bc20-4046f3732208",
                                                       new Date(1563275991239L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1563275988076L), null,
                                                       "aefb4281-e6c4-47e2-a3aa-5fb676d47c44", 123,
                                                       "ac7af776-835e-44ee-be38-f6a4cba18ed5",
                                                       "52ff367d-0278-44df-bc20-4046f3732208",
                                                       new Date(1563275991239L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1563275991488L), null,
                                                  "5df2a079-8769-41bb-a7a6-eb50a87ba210", -33,
                                                  "89c38906-c78d-4a8a-83d8-ec8c595fd67f",
                                                  "d8287ff3-e733-4537-9321-446ef8d4fe15", new Date(1563275991755L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1563275988512L), null,
                                                         "cb75fc49-6f29-472a-8867-05e179ae4293615aec9a-2c0f-45d9-a155-4bf9b5ab142ee014d92e-c79b-4a0c-a62c-fe9bfdaa81e997e55050-8660-4b5c-943c-ce899337c00238371372-9dba-467c-a28d-900de5738f49ec0210cd-ea6b-4c9e-9fb5-e259ee627a682680132d-a890-44c3-bed5-dc13c2d4b962e73efaa7-0b58-4fff-9188-e57e86385cd99c344f4d-42f7-468a-86ee-9fbfcecc76553ba856ab-3880-4b85-8511-1162f4f7c42088e77b95-7bdd-46e0-9787-9bdc89d8a0a0d80e8798-9343-48c1-9166-6575f702bc303ff40457-03ae-46d5-9159-a5232c5b24487449456d-5522-4ec0-be35-29dd1fc7571b23ad37af-421f-4d48-a702-39254824f2dd8f64d203-9e50-4e1b-8f29-216ab0167539d815eb96-e32f-4516-8e83-0632fe02a0388eead39b-7c28-4470-8c6a-0dbe521b7cb13029b6e0-9150-47ad-b05b-e4cd72ab01dd8324f3ac-1695-4787-8ba4-f81ee71bb9e52cfe32af-5957-4ffe-aff6-42685ffaa073505585f0-0796-401a-b810-90d14d9e64358f71fa86-0c9d-40ba-81fc-23bfd4aa6f37431d9dec-1e94-455c-bce3-9e7c1db068614fc3ddd5-41ec-4c7d-b526-b7d90dadef401fe1373a-1054-465c-a2aa-25e36a73fe1b7cb08652-01e7-4639-bb83-b452ffa2a7f1f1382089-05a7-4245-8812-a79ddb4479026c21da30-45a1-49ac-b475-66b4a2f87875ee411c44-f207-4346-a0d5-dc0a297ab1b1571f2662-ea7b-4a07-98a6-082db379d0b7efedbe58-7e40-48dc-ae83-3d17c2414b4b3edbac8d-4e44-4cc7-9d69-5ace4960309689fa5a2d-85bb-443e-b464-7d7eadff0ba0157bec7f-d977-41d8-8e1e-8d9a548b905ad6e52c5d-9644-46f8-bbc1-231e38767e7abaa335e2-a692-4221-a5b3-f72cd776e5f73cb88d76-72d6-4607-a8e5-8883dfed5a75b5d6cd06-2503-4ed2-bcdd-7734cb41674f5b806e8f-7ee8-4540-aead-a61ddf33d9bb21f08ad0-83cb-4993-9e78-ab0030dfe36d0581ec71-efd6-42de-8b9b-cf8007b78f771c8931f0-1d59-4fd4-acb8-fe8d34acf97e3f845b33-405f-473e-81ca-15687307590dd7cc7232-21ab-46e3-8c39-a1d1c5b993c6c44010cd-fbb2-4486-a8f1-d1da9d347cba7bbfa9a9-f963-4a2d-bdb0-86ed51c5f80ab2e13903-530d-4802-add4-8b6ab401ca54f017ea03-e0b8-4684-a4be-b5ad51488413f48cb7d7-e83d-49d4-affe-c1e69ffbbd663eca2b17-1904-4dfc-be0b-2b17dae88069b343bafb-51f1-4cdf-af2b-8d765c97ae67371be61e-9ad3-4b56-8a0b-e5e2173731302f4875f2-797d-41d2-aacd-a517eec3381588590328-d4b9-44bf-be39-3da1cceea29714b1c0a0-e52b-4da0-96dd-cef7b641498c",
                                                         -41, "d5222b67-fa75-43fa-8fd5-c84c6fd37b25",
                                                         "62d4577d-d30b-4f64-94cd-9372dc9ba1beddd66196-1444-4090-a592-9e65c1b1563e15bee7e6-280f-486d-b0db-4c2e4b959c69cb967dfe-4ac4-418f-9dfa-fe02ae065637",
                                                         new Date(1563275983506L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1563275991509L), null,
                                                       "e9e30dee-3606-4328-a535-e2f81527ce73", -72,
                                                       "a1bc5e06-a296-4fbc-8245-f9d2ca41375b",
                                                       "0fec7df1-d004-4214-850d-2e41526886ba",
                                                       new Date(1563275992559L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1563275991509L), null,
                                                       "e9e30dee-3606-4328-a535-e2f81527ce73", -72,
                                                       "a1bc5e06-a296-4fbc-8245-f9d2ca41375b",
                                                       "0fec7df1-d004-4214-850d-2e41526886ba",
                                                       new Date(1563275992559L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1563275991620L), null,
                                                       "81e3be17-91dc-46f0-8aeb-309128adb026", 108,
                                                       "0ef42e1c-54de-4ae8-9c27-0615dd1ca821",
                                                       "41af3071-3aa7-4fe3-80b1-f7a419f58c66",
                                                       new Date(1563275985759L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
