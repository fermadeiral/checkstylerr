// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1563275987242L),
                                                                         "3e31e752-6298-4d78-acc6-0d8d3bc2fdb2",
                                                                         "7390590d-8d02-45dd-adb9-666af2e368df",
                                                                         "388922a2-409e-474c-bca7-143f045143a3");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1563275984906L),
                                                                         "7c50c5b0-2dd5-4e94-af90-08c24b870d66",
                                                                         "603e5147-0b04-45cb-a2fb-0f9dd9e78557",
                                                                         "15c7fcef-ecb3-4bbd-a47d-13e9c1fbedfa");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1563275984906L),
                                                                         "7c50c5b0-2dd5-4e94-af90-08c24b870d66",
                                                                         "603e5147-0b04-45cb-a2fb-0f9dd9e78557",
                                                                         "15c7fcef-ecb3-4bbd-a47d-13e9c1fbedfa");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1563275984728L),
                                                                    "74d60d35-9058-489d-9d5c-0a5a2d80af0a",
                                                                    "4ec91e15-d501-42ca-8290-f6c695042686",
                                                                    "b9952b35-cca2-4fbe-b0ba-fae5f5c12ffa");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1563275990994L),
                                                                         "e9fb3397-f0a6-4018-be7f-bd4809b07c58",
                                                                         "c9cab6e2-dc53-49fb-97e0-36b036a8519b",
                                                                         "66e69f96-0e41-4bac-a3bf-316475190bc7");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1563275990994L),
                                                                         "e9fb3397-f0a6-4018-be7f-bd4809b07c58",
                                                                         "c9cab6e2-dc53-49fb-97e0-36b036a8519b",
                                                                         "66e69f96-0e41-4bac-a3bf-316475190bc7");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1563275983555L),
                                                                         "91eaa374-da0a-40b9-aa7c-f48adcddc029",
                                                                         "c1302560-9544-44a1-816f-5493563c2d87",
                                                                         "89147ecf-ca6f-4740-b785-39c68875c354");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
