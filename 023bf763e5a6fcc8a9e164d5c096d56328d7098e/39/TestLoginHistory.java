// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1563275988223L),
                                                          "1d7b80c3-d9a5-4504-b9e0-75d72ad2d4dc", true,
                                                          "583e52a4-61d9-4a40-b5d4-f2b3b3e53f8a");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1563275984517L),
                                                          "2dd7a454-185e-4943-b583-2bbf1bfb57d1", false,
                                                          "59e7a738-6a36-422e-b5c4-ee3bad028243");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1563275984517L),
                                                          "2dd7a454-185e-4943-b583-2bbf1bfb57d1", false,
                                                          "59e7a738-6a36-422e-b5c4-ee3bad028243");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1563275989376L), "8a43f834-645b-4463-9317-a610be92c41a",
                                                     false, "6913965a-e638-489e-8421-52b504a857c3");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1563275989912L),
                                                          "2d4129df-149f-4c20-a1ba-e0c41d70389c", false,
                                                          "35143175-0b46-41a9-8129-d31dcd30651f");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1563275989912L),
                                                          "2d4129df-149f-4c20-a1ba-e0c41d70389c", false,
                                                          "35143175-0b46-41a9-8129-d31dcd30651f");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1563275991836L),
                                                          "7b713175-0bb7-4c1a-93d0-51eca2abe3a2", false,
                                                          "9bc5e578-886d-413d-87d3-10a656e05a1d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
