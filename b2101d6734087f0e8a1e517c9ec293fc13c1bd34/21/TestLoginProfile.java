// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("ca2da385-fa12-4ecd-86d8-250c0e901cd2",
                                                          "71dac67a-70e5-4d91-8ab8-5c5d9279b129");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("174c5e2b-ec2c-4a16-95f7-314c8aeb4c70",
                                                          "ad613f87-0092-4e67-9b6e-f143cd58d29a");
            LoginProfile loginprofile2 = new LoginProfile("174c5e2b-ec2c-4a16-95f7-314c8aeb4c70",
                                                          "ad613f87-0092-4e67-9b6e-f143cd58d29a");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("d6e11f4c-d1dc-4a40-91d3-3dda7399923b",
                                                     "4d088716-e4fd-432e-a063-29c244bd6bb3");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("030becab-dd49-4738-824f-cd153e34b478",
                                                          "25e2faef-da2f-4e5a-a64e-7b371e5dd4cb");
            LoginProfile loginprofile2 = new LoginProfile("030becab-dd49-4738-824f-cd153e34b478",
                                                          "25e2faef-da2f-4e5a-a64e-7b371e5dd4cb");
            LoginProfile loginprofile3 = new LoginProfile("b02f1267-099e-4972-bcb2-84be18198e5c",
                                                          "1cb00272-2227-4651-82d4-04ac4dd9e976");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
