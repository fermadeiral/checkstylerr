// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566477457682L),
                                                                         "ea381070-f4f6-42c4-84c6-b386f5494ec0",
                                                                         "a455034c-c54f-4a2b-bfa1-b94ba463451b",
                                                                         "f710091a-090d-4e6e-b56c-cc24fe190992");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566477462033L),
                                                                         "5ed4a79c-4edb-48b0-b882-a8e6e5003ee4",
                                                                         "9af39fde-7c9a-4204-aa26-2b1200e47cdb",
                                                                         "08ee01ed-f3b3-46ec-9ed2-fb2113cb3423");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1566477462033L),
                                                                         "5ed4a79c-4edb-48b0-b882-a8e6e5003ee4",
                                                                         "9af39fde-7c9a-4204-aa26-2b1200e47cdb",
                                                                         "08ee01ed-f3b3-46ec-9ed2-fb2113cb3423");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1566477452296L),
                                                                    "9d3c2d56-4f8f-441c-b3f8-4fdc1f189615",
                                                                    "38f712d4-ecbe-469f-949c-acca452f179a",
                                                                    "83375ea9-bf11-4f83-ab7a-42dd7897c712");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566477455303L),
                                                                         "a77a3f4a-624e-469b-baa1-ba51ff1dbf58",
                                                                         "717f5513-3e5d-440f-9122-6713d0b2b2fa",
                                                                         "47d2b94d-d9d0-4abc-a455-4251dc86e57c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1566477455303L),
                                                                         "a77a3f4a-624e-469b-baa1-ba51ff1dbf58",
                                                                         "717f5513-3e5d-440f-9122-6713d0b2b2fa",
                                                                         "47d2b94d-d9d0-4abc-a455-4251dc86e57c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1566477462127L),
                                                                         "0ca6a3e2-7ba7-4741-a31a-862526d5b7e2",
                                                                         "d359ed43-3326-48a8-b2c9-4336f5516f07",
                                                                         "3694ea22-f848-473a-a491-732747b468f7");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
