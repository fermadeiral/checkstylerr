// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                             "97bc6ddc-3ad7-4309-a7ce-b803b0437265",
                                                             new Date(1566477458771L), 6, null, "b4a1c.35e36@7adc4.fr",
                                                             false, "7fa8225e-45be-4e4a-a291-4e69a845a68b", null,
                                                             "7eac9c4e9c53774dafadb1ee4efb11c1", true, false, true, -95,
                                                             null, null, "d09c96aa-cb37-42b7-97e1-b2b0bd6e9290", 59,
                                                             "93da004e-b16a-4248-b94f-cd11004a94b6",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1566477452668L), "_=fVs,");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                             "6df6dcc2-fbd3-4354-847f-6dc50b901371",
                                                             new Date(1566477454089L), 9, null, "34169.74c7c@2f6ee.me",
                                                             false, "e58bd15f-d72d-438f-b3c8-6a35edbbd267", null,
                                                             "7eac9c4e9c53774dafadb1ee4efb11c1", false, false, true, 48,
                                                             null, null, "3c946746-49ec-482c-bea4-0bc5f9bcd771", 89,
                                                             "aeab1803-badf-4dea-898b-120526c2a9fb",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1566477453990L), "_=fVs,");
            SubtenantUser subtenantuser2 = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                             "6df6dcc2-fbd3-4354-847f-6dc50b901371",
                                                             new Date(1566477454089L), 9, null, "34169.74c7c@2f6ee.me",
                                                             false, "e58bd15f-d72d-438f-b3c8-6a35edbbd267", null,
                                                             "7eac9c4e9c53774dafadb1ee4efb11c1", false, false, true, 48,
                                                             null, null, "3c946746-49ec-482c-bea4-0bc5f9bcd771", 89,
                                                             "aeab1803-badf-4dea-898b-120526c2a9fb",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1566477453990L), "_=fVs,");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                        "69224002-c6ac-46da-afdc-19aae319c6ca",
                                                        new Date(1566477453817L), 102, null, "ecf25.ee9d2@93ec5.fr",
                                                        true, "cd13871a-4f2d-4665-b788-b56aeb77a3ca", null,
                                                        "7eac9c4e9c53774dafadb1ee4efb11c1", true, false, false, 26,
                                                        null, null, "5bbef600-b6dd-4070-bb19-41626705e67d", -71,
                                                        "70511a96-b0b1-4827-83a3-ff77ec83b333",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1566477461747L), "_=fVs,");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "081c431b-0ea3-4001-ba17-59c73f847340",
                                                               new Date(1566477454300L), 55, null, null, false,
                                                               "80a72036-f3a0-4ea2-a791-03d5f715b38525e4cb11-8a63-4cb9-bed3-cd2d7f15e48d4e6f8f06-1051-47d6-ada7-ab4637ce478e",
                                                               null,
                                                               "6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                                               false, true, true, -101, null, null,
                                                               "fcaddfbc-96d8-4418-89b8-7ae4d2d4cad1", 50,
                                                               "9f3bffe9-ff46-455e-a00f-8513042d7f83f3dfcaa6-2ee1-4504-b4e6-f4cb484ecc1020abbcc3-edd0-4115-8462-da09395fdbaa",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1566477454857L),
                                                               "cê?‡\u0006<o\u00180k:Y)bJ;[r]a8]l[AcgF]oim\fej\u0007?\u001bpà¾¦\u001cë»‚d/ç£„IDed8^î° oh/r01g-&92XdA");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                             "5d72c3da-6b48-48c6-8352-2e3aeeedb125",
                                                             new Date(1566477461174L), 31, null, "1e92c.d69c3@6709a.me",
                                                             true, "0816bdb3-4955-459c-b26d-ee26419f3e1d", null,
                                                             "7eac9c4e9c53774dafadb1ee4efb11c1", true, false, false, 33,
                                                             null, null, "75a05cdb-f835-4e88-b2d0-def854098e48", 17,
                                                             "58e93c58-6c1e-402c-96d1-d6a5cf613999",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1566477461860L), "_=fVs,");
            SubtenantUser subtenantuser2 = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                             "5d72c3da-6b48-48c6-8352-2e3aeeedb125",
                                                             new Date(1566477461174L), 31, null, "1e92c.d69c3@6709a.me",
                                                             true, "0816bdb3-4955-459c-b26d-ee26419f3e1d", null,
                                                             "7eac9c4e9c53774dafadb1ee4efb11c1", true, false, false, 33,
                                                             null, null, "75a05cdb-f835-4e88-b2d0-def854098e48", 17,
                                                             "58e93c58-6c1e-402c-96d1-d6a5cf613999",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1566477461860L), "_=fVs,");
            SubtenantUser subtenantuser3 = new SubtenantUser("7eac9c4e9c53774dafadb1ee4efb11c1", null,
                                                             "c5ae2ac7-096f-4ff4-92ac-68f3a03dd180",
                                                             new Date(1566477458562L), -38, null,
                                                             "ad6e3.3faac@4e479.fr", true,
                                                             "4218657e-0a52-4c80-9e8d-f92d16e93133", null,
                                                             "7eac9c4e9c53774dafadb1ee4efb11c1", true, false, false,
                                                             -108, null, null, "14844644-caa2-48bb-b5f0-488a59c02622",
                                                             -111, "f6aa1a4f-e3ad-42b5-8223-fc5bc05a59e7",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1566477458383L), "_=fVs,");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
