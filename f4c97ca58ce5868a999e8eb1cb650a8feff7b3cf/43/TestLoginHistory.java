// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566477452589L),
                                                          "47e84e04-d6a1-4510-9d95-2840315d4f57", false,
                                                          "5c30a66f-4e0e-493b-9b89-94eb32914be2");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566477458016L),
                                                          "e0ae92da-fa8e-4fcf-919a-55812a4121ef", true,
                                                          "280785e8-eb43-4c92-90a5-eb701f2ecb02");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1566477458016L),
                                                          "e0ae92da-fa8e-4fcf-919a-55812a4121ef", true,
                                                          "280785e8-eb43-4c92-90a5-eb701f2ecb02");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1566477455634L), "e3d8b9e5-ab2b-4869-868c-cce082e39c0b",
                                                     true, "ac9ed258-3780-444b-97b2-26f24b382993");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566477459170L),
                                                          "1dcf6d94-d083-4665-b3b2-03cac63096af", false,
                                                          "c9f88c95-35be-4f05-9031-2d54f4515fc2");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1566477459170L),
                                                          "1dcf6d94-d083-4665-b3b2-03cac63096af", false,
                                                          "c9f88c95-35be-4f05-9031-2d54f4515fc2");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1566477453910L),
                                                          "7ef250eb-9db5-4976-b7cf-01b32e6ce8cd", false,
                                                          "a33c18e7-e458-4bd8-ad17-6ae6cef26f10");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
