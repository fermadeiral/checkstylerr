// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1566477461306L), -85,
                                                                      "02266fca-0893-494a-8c7b-8c1033f00056",
                                                                      "9064e9f0-6521-450f-9d04-2c3d4c6d7525",
                                                                      "72434425-cd9e-4074-b693-146011dfa097",
                                                                      "f9e12778-7700-4f4c-a934-006df794a42f",
                                                                      "6f9276c0-6c8d-40aa-b27d-a40a0297cd58",
                                                                      "714f4d4d-2af5-419b-8b06-16bf54911e50",
                                                                      new Date(1566477455051L),
                                                                      new Date(1566477452845L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1566477456570L), -95,
                                                                      "32b831d5-258a-4ef5-948e-351f8e1cff09",
                                                                      "3597d19f-0963-4b3d-b01b-5360a8e1a328",
                                                                      "c18153dc-032d-45db-ad48-4a74e93146f5",
                                                                      "df1d18ac-ee02-4e68-9b47-f3ba3090ab70",
                                                                      "993639bb-7a3b-4880-9b84-b7ec07c53100",
                                                                      "95489eef-653e-478e-a740-e00feac8cf67",
                                                                      new Date(1566477456714L),
                                                                      new Date(1566477453649L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1566477456570L), -95,
                                                                      "32b831d5-258a-4ef5-948e-351f8e1cff09",
                                                                      "3597d19f-0963-4b3d-b01b-5360a8e1a328",
                                                                      "c18153dc-032d-45db-ad48-4a74e93146f5",
                                                                      "df1d18ac-ee02-4e68-9b47-f3ba3090ab70",
                                                                      "993639bb-7a3b-4880-9b84-b7ec07c53100",
                                                                      "95489eef-653e-478e-a740-e00feac8cf67",
                                                                      new Date(1566477456714L),
                                                                      new Date(1566477453649L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1566477459502L), -65,
                                                                 "fbb426e2-2d3e-41c4-ab06-12644591b675",
                                                                 "254a70f0-30b9-494c-9615-75a3aa0e0d96",
                                                                 "ecb63dd6-cb49-41e2-8f6a-d10814263953",
                                                                 "593dbe03-fd26-4f99-8a05-99a1cff1964e",
                                                                 "3f27d4e1-ae30-436c-80ac-dc493b10b957",
                                                                 "4e9f94b8-ddb7-4b6b-9bea-145c434647fd",
                                                                 new Date(1566477456600L), new Date(1566477456124L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1566477453015L), 35,
                                                                        "0ad0be2c-07d1-49db-9e9f-73edc9d696b5",
                                                                        "3da72727-cd24-4025-9368-f5cbe49d81d135766aeb-9984-4754-a4be-1f8c1b63bd2f6cef7347-1828-40ee-9a21-b2153bd9e9081d6ab5ed-1a67-43ee-a5f3-27fa3fa256ea436a3ab4-7e48-4b61-b681-fd645930c4cb63f2179d-41d0-4ffa-a8db-b9d17a9ec80ab9f2bb12-5c74-4760-a7f7-a772f722b52fcc44378f-c42a-4ee7-bdc9-b2c0be9e10665073d8e5-9acb-43f0-af02-141cb17bcbce620be9ed-5341-45df-8645-705eea3d81c7b4a2fb4c-da67-4201-9201-7c521bb2991acb99cc2b-b127-4574-b15d-deccf67e518ccb6eec38-6a87-4531-b155-8ca9d16b3bc409e801ae-ea37-4f00-9b39-9f9eb786c4333f87f484-05e9-463e-9a27-09506b45c82f19817cf9-1cd4-4998-acde-44abb273b4ea95e0cef8-e4e2-4b8a-9e23-01451c914d75e981cabc-44cf-43eb-bea3-3107d2a8cefe6ec318b1-0dbc-4c0f-99ae-269855121988d408478d-8d89-4490-bde1-a1816e9b0bc7205f32d0-b7ad-4a37-9edb-7b920ebdbd4b5760953e-f946-4160-975c-8531d581d58a03fcbd88-c222-4edb-80a9-1d9c309174206da0796d-2611-45de-852a-bce71301077e8beb3357-57d8-4a94-b836-5e9b1c32792a7c47ad07-c3e3-41e3-a2dc-cb4f72ecdf18a3a446e1-a097-4163-b96f-a4ee2dd569185deab084-b436-418c-b81e-30cc64a7ccc838f9e6f5-d2fa-4b72-accc-6f0ad629d8bf5c48e05c-1019-480e-8d57-b0a560f0a997c8c9d105-c6ca-4fe7-b6a5-878404500ed467fa69d9-597d-4827-9dc4-8ea608c2be1da16e253a-bd81-4ae6-af70-5247ab36cc0464660f3b-27d4-47ed-aa79-f1bf2943e0bbd11514ad-0dd2-4145-b435-051146b422011124a69c-6edd-48c0-a4ec-f8057f1fd212727854d4-2d63-4034-9fb7-83e04a53e685475882c7-e9a6-4dfe-a0a4-fb3a19a02406f5a928b4-0546-41ba-9116-1946cbad586a941c7fc8-b21f-4e2c-a3ec-c08dfdda61f2b681da82-756f-45c6-8fe1-71f0ac759fc6b9f28e94-4d6e-4773-9c66-abe8c9d3aeb0fe6431ca-d90a-4e54-a90c-db8dc2d47b7e4d217e98-d68b-497b-871d-ee04701d57ad08f84b65-6239-44f7-a483-b723a9d61b444e82f430-ad91-455d-b06c-fcc34ae4ba3f6ee23936-1c79-43d0-a06e-8510a7fba77cbf292eba-8993-4800-a628-fecd2bd5c294cca2aff8-df16-402a-b672-cd98c5755b4667b593b6-9812-47ea-92af-d057b727e09884b5d3bf-3b8d-4419-b40e-9e40a622912d65f61ff1-7e33-4a02-ab7b-b69e7e8f7f115301f675-2bfe-49d0-b7a3-d01079d1717a359dab9a-04b3-4e95-a94e-dfcc71ad378927992da5-d9cb-4543-9089-4a33d88112b5052f5bc0-4bae-47f0-b166-cb575e0ac5f7",
                                                                        "1fd43a00-b19c-4f70-bfe1-074923d7ea2c",
                                                                        "8b690c73-229f-4a5b-b801-1ad17c3a345f",
                                                                        "ca5bc01b-fc41-4481-b2a8-f1b483eff9f7",
                                                                        "13146f34-56c6-4789-bd6b-7175c101808aa6173618-7f26-44a4-9d4b-e5309da5bf3a96a20596-7b55-49ef-9561-3a77daec2ac9b3b3638a-a27c-4157-b2f6-fa28cd01a82c",
                                                                        new Date(1566477457658L),
                                                                        new Date(1566477455586L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1566477453754L), -86,
                                                                      "0ad91175-98dd-459f-a05c-d42291f5e2c3",
                                                                      "097337b4-f6eb-4790-9505-c3dd6389e419",
                                                                      "ee7cdb31-dc68-42ab-a41a-9613159240c2",
                                                                      "89fd5c6c-4623-434c-b0fe-ba94f58161ea",
                                                                      "f4e9d655-d64d-4691-bedb-9e62abef772a",
                                                                      "916fac05-147f-414a-a676-0b1dd931f40d",
                                                                      new Date(1566477454709L),
                                                                      new Date(1566477458139L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1566477453754L), -86,
                                                                      "0ad91175-98dd-459f-a05c-d42291f5e2c3",
                                                                      "097337b4-f6eb-4790-9505-c3dd6389e419",
                                                                      "ee7cdb31-dc68-42ab-a41a-9613159240c2",
                                                                      "89fd5c6c-4623-434c-b0fe-ba94f58161ea",
                                                                      "f4e9d655-d64d-4691-bedb-9e62abef772a",
                                                                      "916fac05-147f-414a-a676-0b1dd931f40d",
                                                                      new Date(1566477454709L),
                                                                      new Date(1566477458139L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1566477461944L), -86,
                                                                      "01667f06-7dbb-4264-9267-f2c4427f2a37",
                                                                      "8e5be051-ca69-4b26-ab03-2a3c733a9bf7",
                                                                      "b74a2927-d91b-41fd-804f-7f5566a13dd9",
                                                                      "8b43156c-8616-498c-99bd-64e29c61fa8c",
                                                                      "0e30c322-8fc5-478c-85f4-f31f4f3f749f",
                                                                      "25934e6d-3bf2-4ffb-be47-6aedc7bfffd1",
                                                                      new Date(1566477456482L),
                                                                      new Date(1566477459273L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
