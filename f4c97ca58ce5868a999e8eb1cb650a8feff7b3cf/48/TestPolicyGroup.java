// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model PolicyGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicyGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", -27,
                                                       new Date(1566477456156L), "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                       "506f4ff5-a77c-4d78-846b-6a4636e178c8", new Date(1566477460418L),
                                                       36);
            PolicyGroup policygroup2 = policygroup1.clone();
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotSame(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", 106,
                                                       new Date(1566477452138L), "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                       "cd639312-9d55-49e5-aac3-68698725671b", new Date(1566477460890L),
                                                       19);
            PolicyGroup policygroup2 = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", 106,
                                                       new Date(1566477452138L), "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                       "cd639312-9d55-49e5-aac3-68698725671b", new Date(1566477460890L),
                                                       19);
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotSame(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup2.hashCode(), policygroup1.hashCode());
            int hashCode = policygroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policygroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        PolicyGroup policygroup = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", -63, new Date(1566477461368L),
                                                  "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                  "d4410e58-e38c-4443-a788-3ea334591369", new Date(1566477455961L),
                                                  -74);
        assertTrue(policygroup.isValid());
        PolicyGroup policygroupInvalid = new PolicyGroup("6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                                         96, new Date(1566477459293L),
                                                         "6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                                         "e468d68b-b84f-45aa-861c-7a7f6383304863aa9fa9-bacc-4a0f-ba35-96cdbcf3ff812f50f2c8-9ef4-47bf-9e1a-721999f4efb2",
                                                         new Date(1566477462036L), 107);
        assertFalse(policygroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", 84, new Date(1566477458990L),
                                                       "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                       "e7c32b8f-0321-43ab-b1f0-36fff53e2c22", new Date(1566477457044L),
                                                       -82);
            PolicyGroup policygroup2 = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", 84, new Date(1566477458990L),
                                                       "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                       "e7c32b8f-0321-43ab-b1f0-36fff53e2c22", new Date(1566477457044L),
                                                       -82);
            PolicyGroup policygroup3 = new PolicyGroup("7eac9c4e9c53774dafadb1ee4efb11c1", -71,
                                                       new Date(1566477461215L), "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                       "fe1de9b9-27b9-475d-9035-802b0dfe2962", new Date(1566477454729L),
                                                       -112);
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotNull(policygroup3);
            assertNotSame(policygroup2, policygroup1);
            assertNotSame(policygroup3, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup1, policygroup2);
            assertEquals(policygroup1, policygroup1);
            assertFalse(policygroup1.equals(null));
            assertNotEquals(policygroup3, policygroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
