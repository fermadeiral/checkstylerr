// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477452399L), 77, null,
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", "f008ebba-7d8b-4f17-a2b0-c7d14e9a4853", 34,
                                        "df371cfe-2445-4d49-ab44-f3603e2c39fe", "7eac9c4e9c53774dafadb1ee4efb11c1",
                                        ApiKeyStatus.getDefault(), new Date(1566477460921L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477461184L), 35, null,
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", "ba11e226-1534-4114-aa8c-bbea1eb50ee4",
                                        -116, "b10025c6-5684-4bd8-b14a-e97cc9441efc",
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", ApiKeyStatus.getDefault(),
                                        new Date(1566477457740L));
            ApiKey apikey2 = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477461184L), 35, null,
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", "ba11e226-1534-4114-aa8c-bbea1eb50ee4",
                                        -116, "b10025c6-5684-4bd8-b14a-e97cc9441efc",
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", ApiKeyStatus.getDefault(),
                                        new Date(1566477457740L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477453756L), 95, null,
                                   "7eac9c4e9c53774dafadb1ee4efb11c1", "e8b75927-4648-4927-a30f-ff698f33010b", -23,
                                   "8063fede-4d21-42b2-ad12-6b20e2a814a6", "7eac9c4e9c53774dafadb1ee4efb11c1",
                                   ApiKeyStatus.getDefault(), new Date(1566477455419L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                          new Date(1566477459622L), -9, null,
                                          "6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                          "e55336ed-580f-4f60-8d6d-846cbc869f7c", -120, null,
                                          "6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                          ApiKeyStatus.getDefault(), new Date(1566477461312L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477457755L), 5, null,
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", "82cbb0f2-c5a1-49a2-a15e-76dfab3f8065", -94,
                                        "f05b921b-09e1-42c0-8229-5fcd0abe3c0e", "7eac9c4e9c53774dafadb1ee4efb11c1",
                                        ApiKeyStatus.getDefault(), new Date(1566477454749L));
            ApiKey apikey2 = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477457755L), 5, null,
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", "82cbb0f2-c5a1-49a2-a15e-76dfab3f8065", -94,
                                        "f05b921b-09e1-42c0-8229-5fcd0abe3c0e", "7eac9c4e9c53774dafadb1ee4efb11c1",
                                        ApiKeyStatus.getDefault(), new Date(1566477454749L));
            ApiKey apikey3 = new ApiKey("7eac9c4e9c53774dafadb1ee4efb11c1", new Date(1566477455622L), 16, null,
                                        "7eac9c4e9c53774dafadb1ee4efb11c1", "30378f46-b723-495e-a3aa-48a695e043e9", 22,
                                        "1c1dee95-f4c0-4207-ad18-d3e4e044bbc9", "7eac9c4e9c53774dafadb1ee4efb11c1",
                                        ApiKeyStatus.getDefault(), new Date(1566477452571L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
