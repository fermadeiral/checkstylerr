// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        new Date(1566477456773L),
                                                                                        "613ae664-cdd4-4ff0-aae2-e4b06e918224",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        new Date(1566477455809L),
                                                                                        "be719149-9407-4d07-a554-376a9f6596c9",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        new Date(1566477455809L),
                                                                                        "be719149-9407-4d07-a554-376a9f6596c9",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                   new Date(1566477455726L),
                                                                                   "07221686-c5a0-4cde-ba2f-4455548d88b3",
                                                                                   "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                   "7eac9c4e9c53774dafadb1ee4efb11c1");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                                                                          new Date(1566477452398L),
                                                                                          "e2403ead-1ee2-4a23-aeb8-d9c81c5ee9fa",
                                                                                          "6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ",
                                                                                          "6\u00012\u001566á€?2ï„¶2\u00168á šâŽ†á»?K/68_YB8628æ·•A2\u001fî°®88-2\u0018.2à£©22RáŒ˜8\u001d\u000b2å´¾2_\u001c66ï®¢68626;\u0018L2á•µ");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        new Date(1566477456995L),
                                                                                        "75423424-eabd-4efb-9779-f559bcbb1c6e",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        new Date(1566477456995L),
                                                                                        "75423424-eabd-4efb-9779-f559bcbb1c6e",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        new Date(1566477460560L),
                                                                                        "39e52e06-9014-491d-a583-ae9864d4b805",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1",
                                                                                        "7eac9c4e9c53774dafadb1ee4efb11c1");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
