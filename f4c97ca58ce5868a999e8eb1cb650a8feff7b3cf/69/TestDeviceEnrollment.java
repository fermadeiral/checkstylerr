// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("d7dbb68c-b709-474a-b599-9dd56311479a",
                                                                      new Date(1566477457014L),
                                                                      new Date(1566477456935L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                      "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                      new Date(1566477460673L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("08e08f09-c7e8-4d67-b8f3-e87b735fd1d0",
                                                                      new Date(1566477454249L),
                                                                      new Date(1566477452481L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                      "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                      new Date(1566477460588L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("08e08f09-c7e8-4d67-b8f3-e87b735fd1d0",
                                                                      new Date(1566477454249L),
                                                                      new Date(1566477452481L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                      "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                      new Date(1566477460588L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("167b11d2-3c1f-4c2d-93d1-d2048dbaec19",
                                                                 new Date(1566477452946L), new Date(1566477452317L),
                                                                 "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                 "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                 new Date(1566477454078L),
                                                                 "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("208c7717-3898-45b6-891b-7fecc5ae4bb9",
                                                                        new Date(1566477460037L),
                                                                        new Date(1566477455461L),
                                                                        "nxrdDnj6uM^î–?dHDlnr[fL3xhdAJ6h6dns2idFlVLxlBPi;ã?ˆ\\\\FB\u0005d6qjã”“Mlu6PDI",
                                                                        null, new Date(1566477457462L),
                                                                        "nxrdDnj6uM^î–?dHDlnr[fL3xhdAJ6h6dns2idFlVLxlBPi;ã?ˆ\\\\FB\u0005d6qjã”“Mlu6PDI");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("8650bc04-bfdb-4b29-a568-f2d33f8b7ed6",
                                                                      new Date(1566477459165L),
                                                                      new Date(1566477460831L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                      "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                      new Date(1566477454113L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("8650bc04-bfdb-4b29-a568-f2d33f8b7ed6",
                                                                      new Date(1566477459165L),
                                                                      new Date(1566477460831L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                      "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                      new Date(1566477454113L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("bfa665a0-6c42-4826-abfb-5d8592fd1f8a",
                                                                      new Date(1566477456594L),
                                                                      new Date(1566477460682L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz",
                                                                      "A-39815o6m1GROhc61n8eCtAHS05S62e9zyCm0A85:U9361BId0aZAX8ghvkQcVD603smKdq6Tp4Z14LYO5jn1ur74miOHaB0",
                                                                      new Date(1566477454933L),
                                                                      "m5ct59Rp7QkK0CyGo9cve8N1Z547wkbz");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
