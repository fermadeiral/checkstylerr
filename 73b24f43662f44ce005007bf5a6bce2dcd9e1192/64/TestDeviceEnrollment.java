// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("326b04fb-d786-4379-b354-5776c4d58538",
                                                                      new Date(1570127621957L),
                                                                      new Date(1570127627352L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                      "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                      new Date(1570127626206L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("ae29db2a-4786-40de-a59b-5c8223d93d32",
                                                                      new Date(1570127619614L),
                                                                      new Date(1570127618466L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                      "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                      new Date(1570127626890L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("ae29db2a-4786-40de-a59b-5c8223d93d32",
                                                                      new Date(1570127619614L),
                                                                      new Date(1570127618466L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                      "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                      new Date(1570127626890L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("035dd290-1f5a-4926-bc8f-e9d55e526cc4",
                                                                 new Date(1570127625158L), new Date(1570127620993L),
                                                                 "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                 "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                 new Date(1570127624309L),
                                                                 "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("ebfd6c47-c0fd-472d-815c-1483edc74539",
                                                                        new Date(1570127618188L),
                                                                        new Date(1570127621342L),
                                                                        "\f5V#HyXqfyVXdDlDጛuKXZD\u0014sqfq?j131f\u0005dmD5m3LoLXoM`u饃Lfd-[yufhoo5>31",
                                                                        null, new Date(1570127617814L),
                                                                        "\f5V#HyXqfyVXdDlDጛuKXZD\u0014sqfq?j131f\u0005dmD5m3LoLXoM`u饃Lfd-[yufhoo5>31");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("6870dd61-a7dd-4a9a-8f2b-a4784f693af4",
                                                                      new Date(1570127620605L),
                                                                      new Date(1570127622478L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                      "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                      new Date(1570127626947L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("6870dd61-a7dd-4a9a-8f2b-a4784f693af4",
                                                                      new Date(1570127620605L),
                                                                      new Date(1570127622478L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                      "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                      new Date(1570127626947L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("f5a8f6f6-f940-451f-b837-e407965c8e8d",
                                                                      new Date(1570127617863L),
                                                                      new Date(1570127619321L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0",
                                                                      "A-IlOg06ScR8fO45674S90u1r3hci286qeRXctG6n64HGv4xO44s:7gUW6s67LqFGX60d7qN3Ej1927A:clbfcwPOn0:HUzfe",
                                                                      new Date(1570127618556L),
                                                                      "z8WzOgUPItn9b7wv29aEBt46xpciCYe0");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
