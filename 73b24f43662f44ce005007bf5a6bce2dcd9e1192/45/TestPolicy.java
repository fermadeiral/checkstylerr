// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("ed6916fd-989b-44c8-a9a7-cdec2a1c247d", true,
                                        "30b9f028-ee0b-4b36-876d-ed02157747d3", false,
                                        "45e0904c-7874-4836-8701-d7b1ff8debf5");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("4dba82af-8bdd-4543-9867-aa421a07381f", true,
                                        "a64fdb41-2fb7-44fc-9694-7499fa3b62d2", false,
                                        "91ae00a7-317a-480c-bcdd-c9be5ab6bae6");
            Policy policy2 = new Policy("4dba82af-8bdd-4543-9867-aa421a07381f", true,
                                        "a64fdb41-2fb7-44fc-9694-7499fa3b62d2", false,
                                        "91ae00a7-317a-480c-bcdd-c9be5ab6bae6");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("55c03e8c-7c45-4e04-9702-6ed1176e0e48", false,
                                   "72fec60c-155a-4995-ba00-58a2e15df284", true,
                                   "0a8ec5b5-3b04-4644-9ba5-0885f13e1c47");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("00fdf880-9df2-46d6-9369-05beae6065c7", false,
                                        "c4fb85fe-2cc7-4e9e-8961-1ff3aff1726b", true,
                                        "70f0e21a-2897-45df-aba9-11346ec811c7");
            Policy policy2 = new Policy("00fdf880-9df2-46d6-9369-05beae6065c7", false,
                                        "c4fb85fe-2cc7-4e9e-8961-1ff3aff1726b", true,
                                        "70f0e21a-2897-45df-aba9-11346ec811c7");
            Policy policy3 = new Policy("adc5c5b4-4f78-4d86-98c8-58275a888c4a", false,
                                        "04ebbd87-5319-4419-8d3d-8597a077a12c", true,
                                        "04b43021-b97d-4a28-a1c1-a004608b2109");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
