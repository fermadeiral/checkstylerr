// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1570127624220L), -91,
                                                                      "a4e92c20-3804-4923-b79c-a1369c289a12",
                                                                      "bdf0eabd-7e04-48bf-9092-58fc01288625",
                                                                      "9d28bd63-5288-4e09-800c-f8a58931d47e",
                                                                      "fc6f843c-0060-42cd-8a63-c09e663ce9ea",
                                                                      "3231845d-1a15-468f-b8a0-a350e877ebef",
                                                                      "bead37e6-9809-45ae-aa05-a92e9cacc608",
                                                                      new Date(1570127619390L),
                                                                      new Date(1570127621569L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1570127626882L), -6,
                                                                      "7d0f30f2-fa0f-4dbf-a886-dc93bdf1ff95",
                                                                      "32052520-8912-4c4b-87a6-567e7cfc625a",
                                                                      "9db7e9de-277d-43b1-9d72-6b0d88f9023c",
                                                                      "3d0c0c97-9c3b-4e26-b1dd-2038c8ad7156",
                                                                      "c297ebd6-c5a3-4d23-97da-5d9f6ea721b1",
                                                                      "1c0402d4-8767-423f-8f3d-e895a28f6a0b",
                                                                      new Date(1570127618477L),
                                                                      new Date(1570127619673L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1570127626882L), -6,
                                                                      "7d0f30f2-fa0f-4dbf-a886-dc93bdf1ff95",
                                                                      "32052520-8912-4c4b-87a6-567e7cfc625a",
                                                                      "9db7e9de-277d-43b1-9d72-6b0d88f9023c",
                                                                      "3d0c0c97-9c3b-4e26-b1dd-2038c8ad7156",
                                                                      "c297ebd6-c5a3-4d23-97da-5d9f6ea721b1",
                                                                      "1c0402d4-8767-423f-8f3d-e895a28f6a0b",
                                                                      new Date(1570127618477L),
                                                                      new Date(1570127619673L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1570127620219L), 76,
                                                                 "96519e28-da1f-4b4f-b879-2b64f58d4936",
                                                                 "178331bf-5c3d-4a9c-8f68-fc030e139b07",
                                                                 "b64b0e4f-4aed-48d5-a02d-12cdbf5a76c8",
                                                                 "2e1f21f6-1383-472e-a1b3-c04a78855704",
                                                                 "bd44489c-cc08-406e-a647-0eb08c8f81f0",
                                                                 "f314a4fd-674c-4af0-a672-59e4ff13c543",
                                                                 new Date(1570127627414L), new Date(1570127623358L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1570127620481L), -98,
                                                                        "d0f65a59-07a1-44b1-8a98-fd5cdf2201a9",
                                                                        "5773b7b9-14aa-4c98-b49f-d7d669034edfba5c4f39-b38f-41a5-a971-3fd2e17865ad5925d70e-373c-49bf-be8c-1a120c879bce4abb8d53-11c3-44c1-b2c5-c7c5879f5364e298a54b-7488-41d4-a669-7cd742a0628b80e20015-7c51-4872-8c87-9ba3707584d696190603-fd1d-4ffb-aaaf-5329b028154c1c56b051-b7f2-4596-85c0-661cf58fa5fa5e5e52f7-ed12-4f78-b694-dba75e01adbbd9e43983-7f38-4a25-a763-750752cf7aeebbf37d26-cfea-4210-abd8-a753db1b7c9c468ebb96-a04a-406e-82ed-4fa3a17c93bd14f4ab44-875c-477d-8855-f298012a64aac3e9256d-f355-49ab-8e22-c318fc081b5f93e68a93-2c31-4728-a30e-10324ba1aedb91e315cc-18f6-4eb5-a27b-3402497dd3db2aedbc8d-ab75-4c00-a746-693fe6d03d37a590540f-abdb-4860-b3a1-5766c5590f9fdf721946-d9f0-49a2-b485-5445c358e68a1025c93b-7b4e-4ef9-bf88-c9171497079b14ab6957-7951-4e4c-8ba8-1b2195a6bdbaea5b84e2-ef32-4612-ac5d-21de409a9697c1c81b5b-d3f8-4ecf-a537-252fe2de882e5cd3642b-13b2-4bde-95e6-5fe701334754648eeeda-3e00-443a-8600-86b26327518dcd78262f-81f8-4645-967f-b5089daad26f0887877f-6c6e-4f31-9d73-320017fb66c43d16ffaf-f5b4-42a2-9a1f-9eeef72fed10aef132c4-f22c-4169-950b-994628a5c8ac130d616b-50d5-41bc-9ff1-328f4bdb164945eb2614-b3b2-4a5a-8267-582ba2fc337aa4c6c8fb-73dd-4735-bd70-aa6079a0c203f5973269-f387-4ad5-8bf0-2fe4860754afd6d457c3-c77e-4c1c-9d8e-2aa29a63c1f5eda2eb1c-e005-44d6-b188-466d7ace1f1bd128cb1c-6cdc-4095-9b9b-3df2f2ab01d1b1d04418-9682-4f6a-b65e-d810090ff8391b9fe70a-34a3-431a-81bb-69d00cf917832dd6ae29-a2c8-44ad-9905-c9f9a071775f4ce00ba8-37ff-4a80-b73d-e1c9a4b106e70301a4e0-7f76-45ee-a601-1851ebfbae8e9e7a737d-1e30-43a6-93e3-a657c87a284569372d18-a549-409e-9f04-b19abfe0608592e0f973-5348-44a1-8a4a-1d932dd562342d264668-fce9-4e36-8606-1995af84e37abf4309c4-b3f1-40b8-9987-7ec314a4a8aa1ff34b6d-f88f-4731-b5a4-8b059102a97eb60ed04c-bd9b-41f5-9e3d-63adc91f5a5029dbf71a-ef7d-4f36-a564-a904444fea58d135fdc7-3d5b-4888-bdab-297ebf411c7d78087c65-50db-4272-80ba-3b6f11075ebcaf7a89d7-24ec-4af0-acea-330b29a895478024e9ce-e22b-4bb6-8264-013e9915e429e9891328-2802-4dd3-a306-c182e6368ad4d51bcfe1-3a02-4e95-9b14-0fc7938a9a5ce0427cfd-2f04-4909-827c-08a968d84234",
                                                                        "5594db07-5eb9-4447-b4a7-266bcedd745d",
                                                                        "95f447da-efb7-4271-a140-5358b1d2b770",
                                                                        "f298169a-58ab-4148-a620-9bec84b9cc4a",
                                                                        "b6688223-f64c-4c30-8b71-31dd89ac3489c77fe47b-c1ca-4c7e-93d8-d89fd74b12d086766656-2447-4a11-83a5-981fd7a790de3738f694-16fc-4f61-85b1-293ef592dab9",
                                                                        new Date(1570127626378L),
                                                                        new Date(1570127623885L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1570127627198L), -84,
                                                                      "2850c934-8e88-4caa-9f86-4e2adcdd9f84",
                                                                      "09b88bb8-fdb1-4919-b863-0582328ae432",
                                                                      "a1cfc9d4-9389-4124-b0d5-e795ff9b1af0",
                                                                      "2b3f81c8-0d22-427f-8751-0322b364bf7f",
                                                                      "cac62ccb-a29f-4404-b340-eba421d07ccd",
                                                                      "8fd4b89c-7f3a-4afd-9416-ad29f89549a4",
                                                                      new Date(1570127625330L),
                                                                      new Date(1570127627521L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1570127627198L), -84,
                                                                      "2850c934-8e88-4caa-9f86-4e2adcdd9f84",
                                                                      "09b88bb8-fdb1-4919-b863-0582328ae432",
                                                                      "a1cfc9d4-9389-4124-b0d5-e795ff9b1af0",
                                                                      "2b3f81c8-0d22-427f-8751-0322b364bf7f",
                                                                      "cac62ccb-a29f-4404-b340-eba421d07ccd",
                                                                      "8fd4b89c-7f3a-4afd-9416-ad29f89549a4",
                                                                      new Date(1570127625330L),
                                                                      new Date(1570127627521L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1570127619120L), 79,
                                                                      "7a649f12-d219-4772-92f7-6ac0fa9736d3",
                                                                      "b49e8a02-3503-4009-8932-84c1cf2da44e",
                                                                      "86acb742-9090-4350-81aa-826d8ebf242b",
                                                                      "a728be4f-5c53-429b-9560-76ce327f9b2c",
                                                                      "6dc2b28d-02c7-4f6e-a4fa-7149e35fb02e",
                                                                      "f3c017d9-8857-440d-8696-fb8930000de8",
                                                                      new Date(1570127623179L),
                                                                      new Date(1570127625067L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
