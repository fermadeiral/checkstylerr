// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1570127627454L),
                                                             "85cc00a5-c7d6-4807-b2de-258c32f85571", -59,
                                                             "2101206c-f6b8-4583-91ce-03020554b71e",
                                                             "9c00a33c-bae5-47af-9089-f6523789d758",
                                                             "b72a46b0-c3db-4797-bcbf-2dd8f35f9c32",
                                                             "bdfc6536-61b8-4cad-a01e-62119410be17",
                                                             new Date(1570127621403L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1570127622596L),
                                                             "97dd8dea-c3d9-4b89-8049-297a14716616", 60,
                                                             "cc7ae70a-31a1-4f2b-a6ea-6d02896f01d0",
                                                             "dca33c22-201d-4fd1-b772-c6c9acba4926",
                                                             "a4b84c59-985f-40e0-8d53-0ce274098152",
                                                             "db1c2bd6-853d-45a4-95fd-746da8495fae",
                                                             new Date(1570127621192L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1570127622596L),
                                                             "97dd8dea-c3d9-4b89-8049-297a14716616", 60,
                                                             "cc7ae70a-31a1-4f2b-a6ea-6d02896f01d0",
                                                             "dca33c22-201d-4fd1-b772-c6c9acba4926",
                                                             "a4b84c59-985f-40e0-8d53-0ce274098152",
                                                             "db1c2bd6-853d-45a4-95fd-746da8495fae",
                                                             new Date(1570127621192L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1570127620794L),
                                                        "a47212ee-de3f-4ad4-b8c8-4ad9ef34db43", 82,
                                                        "58a672e1-ceca-476e-b0cd-a89df07554a6",
                                                        "01d1671e-326b-448a-a406-3bcc3849b2b0",
                                                        "49973b2f-9024-484e-a934-55c6cc059936",
                                                        "cc28e3df-0bdc-4ed8-ac1f-dcae9f9ac461",
                                                        new Date(1570127620873L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1570127620700L),
                                                               "d3ec1000-1cf7-4add-bfae-85e65b32385d", 104,
                                                               "6cf18def-e644-42ef-b24c-c73d6239d272",
                                                               "fcee5a63-8da6-4dda-9d1c-428648172f4842f96bdd-5c91-462a-9ce7-0a612a818ffade36186a-c7ca-43a7-b2b8-193418929c1d404934f8-feca-4a0b-97c9-ac87d9090fe0aeba6362-9235-4e79-b1d8-5458f3c07050cb532dcb-7da2-47c2-9fac-02fe7c10911f1b8dab55-cb53-4693-9560-0f520d5b060be2338fa4-b9b0-414c-aefc-ad36b45425898ac9f77e-ccd6-4792-bc79-08e50e981bd5b5de36d8-ee6e-41fd-803b-01e698610577375cc5bc-8180-4a1d-b9fc-307d39acd150b4a7cb5a-068c-4bc7-a99e-36bdfc5b7d0c15272741-e2b3-424b-905d-35908e7e725ac69afc13-e33c-4a20-aa22-780889d22a413fec197a-fb5f-4ded-bde9-d4246baec34fafa15fe4-5eb9-4f98-ab8d-1417b07604262f82123d-40a0-412b-8917-1e6538e2d69edfe572f3-ed65-4db3-919f-6eab0315ac17628e42b5-d598-40ce-8588-c00e67e8f1234e874f22-c36b-4ebe-b2db-280219d1ea5a25bde40d-218e-40d1-ab05-015aa24cdbc2d2006d0b-e76c-47bd-9b2c-703b9647b71b74f3f870-955c-403b-adfd-b600d86730e40cd13bcc-3eb9-425f-af3b-3d36968c2f67015fbfb1-146f-4e2d-ac38-4f59f2ce4ae4e861171c-7821-4502-90fa-9c4caa307a248c2a51ee-0d9c-450b-9ffc-9ba59f643dd1d6acad74-caa8-4788-bf3b-ea1dcfef4aa1636890cc-fb41-43e5-b8ac-72910590cfa1b04a0d54-3cf6-4b71-bcf0-848068d16275b4ae89d4-f032-4858-b096-008512139a3a6498d22f-1faa-4bf7-87e4-6674e395b200c5f19113-1238-47b2-8eaa-33975238c27808bf9f24-fbca-452c-9a46-afb1086d93e9b0db44a7-7c2b-4014-bccd-314141f3d328afdc1025-cb88-40b6-b8a3-f688fdab4068b7b64241-3e1d-4eaf-b186-1c8c62d6a42b9eee71c9-dd1e-4c57-ab0a-fbcf0f29109ae7aaae27-583f-4b9a-9277-c10496a809df1c39a62e-2c84-403c-b001-8fdd2d7362529fa6a6bd-2b13-43f3-91bb-642e8ced7ea6a98e6ddc-ebe0-4c29-8011-f994ec78f0a0f27ebc65-43bb-499f-8de0-4060e19d66b6f4cfc8a4-9365-4f68-8ed8-35f5d06dc40c906cf45f-6c2c-40a7-a7d7-afce2911a2db72bce58b-200a-4341-b8cc-a72ca7ecfe43fa6713ce-b8cb-456d-bff9-931eb1219f6aeb23ce8e-267a-4ef9-8b0d-bdf2afb5b853dbf64552-2eb0-4881-b540-dca2d0603f10e65ce143-d927-4234-8963-bb77331a20282bcd6019-93b7-48c1-b4fd-e8a60e243d5ee1623659-f5f9-47d2-8b4f-e4ae74c6a4d66276f539-5743-4804-8c8f-cad8234b596986529cfa-3875-45c0-ba9d-fbce8217ee4bb0f69ad5-62c1-4b37-a4cd-880bb02c62004722f3de-e551-4bac-9bbd-68a4d32188b6",
                                                               "eeda8848-be75-4688-9550-5a6d1653beb0",
                                                               "35f0daf4-954e-4fe1-88d2-294665262ac702e7099c-06c5-4c6a-a2ac-2a3e825566970c4fc67b-5e60-41df-8380-c7dc8b1330903f8d8e7e-f37e-428e-b6f6-a01c0f233cef",
                                                               new Date(1570127625126L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1570127626038L),
                                                             "2254e4c4-af52-4437-aca0-d7e7b7af09e0", 85,
                                                             "098d9d21-29bb-41e6-bbd0-ccfc9e84eeaa",
                                                             "e46d00c0-7396-420e-8e26-08fae4de1e93",
                                                             "c0fab6d8-cc22-47a1-a6f5-f3077dcf87e7",
                                                             "70e66871-6f61-4ff0-8114-65406277c122",
                                                             new Date(1570127627320L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1570127626038L),
                                                             "2254e4c4-af52-4437-aca0-d7e7b7af09e0", 85,
                                                             "098d9d21-29bb-41e6-bbd0-ccfc9e84eeaa",
                                                             "e46d00c0-7396-420e-8e26-08fae4de1e93",
                                                             "c0fab6d8-cc22-47a1-a6f5-f3077dcf87e7",
                                                             "70e66871-6f61-4ff0-8114-65406277c122",
                                                             new Date(1570127627320L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1570127621940L),
                                                             "910a35b2-9922-425e-b797-af51aaa364ad", 66,
                                                             "5b93793e-53ba-4a3d-adad-ac84172e5d43",
                                                             "e132d50c-1d1d-4a88-bc73-a9e8e0009273",
                                                             "99fce784-4d9c-4072-867c-1244b5bdd2e5",
                                                             "77114d16-51b3-419c-bab9-2ef85cf7ee52",
                                                             new Date(1570127624841L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
