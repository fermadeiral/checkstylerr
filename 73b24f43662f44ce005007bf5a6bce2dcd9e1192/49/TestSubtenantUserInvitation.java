// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           new Date(1570127623269L),
                                                                                           "48bc9.065e0@dcd94.me",
                                                                                           new Date(1570127624749L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           null,
                                                                                           new Date(1570127623374L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           new Date(1570127626017L),
                                                                                           "9f28b.ba09e@131c6.me",
                                                                                           new Date(1570127622806L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           null,
                                                                                           new Date(1570127621725L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           new Date(1570127626017L),
                                                                                           "9f28b.ba09e@131c6.me",
                                                                                           new Date(1570127622806L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           null,
                                                                                           new Date(1570127621725L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                      new Date(1570127620508L),
                                                                                      "63b44.395eb@a988c.me",
                                                                                      new Date(1570127617972L),
                                                                                      "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                      null, new Date(1570127620657L),
                                                                                      "bd1f89fbddbde18d4244b748ca1d250b");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1570127619527L),
                                                                                             null,
                                                                                             new Date(1570127626499L),
                                                                                             "33D\u0007663渧3F!\u00003$$?R3Y៲636\u0011짢3㩺33઄6\u0014\u0001\u001cK'+뙽벙\u001c6\u0002\u0004䂅=O3\u00133 X\u0010࡛6_36F᫵\u001736",
                                                                                             null,
                                                                                             new Date(1570127619877L),
                                                                                             "33D\u0007663渧3F!\u00003$$?R3Y៲636\u0011짢3㩺33઄6\u0014\u0001\u001cK'+뙽벙\u001c6\u0002\u0004䂅=O3\u00133 X\u0010࡛6_36F᫵\u001736");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           new Date(1570127626170L),
                                                                                           "858d4.68e17@b3b20.fr",
                                                                                           new Date(1570127625492L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           null,
                                                                                           new Date(1570127620874L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           new Date(1570127626170L),
                                                                                           "858d4.68e17@b3b20.fr",
                                                                                           new Date(1570127625492L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           null,
                                                                                           new Date(1570127620874L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           new Date(1570127620782L),
                                                                                           "26736.501b5@80275.fr",
                                                                                           new Date(1570127626681L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b",
                                                                                           null,
                                                                                           new Date(1570127625260L),
                                                                                           "bd1f89fbddbde18d4244b748ca1d250b");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
