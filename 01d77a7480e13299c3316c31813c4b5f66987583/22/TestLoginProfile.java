// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("24cc7ad0-e6d6-4ad1-90a1-1c624f8f3124",
                                                          "b9290a88-451b-4ff2-9759-0b56ca9ed051");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("6f85cc3f-df76-4708-b922-9b63d63bbe6f",
                                                          "14bfd4ae-3e67-4ef6-bd02-dc2692183c4f");
            LoginProfile loginprofile2 = new LoginProfile("6f85cc3f-df76-4708-b922-9b63d63bbe6f",
                                                          "14bfd4ae-3e67-4ef6-bd02-dc2692183c4f");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("c47f5d0c-d6b9-4646-aec8-2a8ebc773316",
                                                     "9323454d-8814-4dae-83f3-c7ebe1ff7744");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("9bfb5270-3e40-40e1-a3e2-74ce42fb1a86",
                                                          "4aa0d15d-a3b9-4df4-b6a6-b76e452c00ff");
            LoginProfile loginprofile2 = new LoginProfile("9bfb5270-3e40-40e1-a3e2-74ce42fb1a86",
                                                          "4aa0d15d-a3b9-4df4-b6a6-b76e452c00ff");
            LoginProfile loginprofile3 = new LoginProfile("ba461adf-ed7c-4c23-8b00-66958abe8b91",
                                                          "3bee8d22-d5c3-47cd-a13b-1147ed122a06");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
