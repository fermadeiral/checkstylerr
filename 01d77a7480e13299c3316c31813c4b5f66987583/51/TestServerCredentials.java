// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553793333246L),
                                                                         "3034cbd6-7f70-475c-976c-e9b73379bed8",
                                                                         "39b2e4f3-67af-4c05-8bc7-056b6c764576",
                                                                         "6af49900-092a-4616-9f58-960e5f635213");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553793336641L),
                                                                         "7290254f-1696-468c-943c-2c4ae6f70bcf",
                                                                         "3a7678ed-e086-46d3-aa8a-2d1bff882ccb",
                                                                         "8362d5f8-9e72-44ab-bad0-562717d4c40b");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553793336641L),
                                                                         "7290254f-1696-468c-943c-2c4ae6f70bcf",
                                                                         "3a7678ed-e086-46d3-aa8a-2d1bff882ccb",
                                                                         "8362d5f8-9e72-44ab-bad0-562717d4c40b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1553793333894L),
                                                                    "0592eb36-446a-473d-bd27-049ae52207d8",
                                                                    "f098f8f3-2ba4-4878-9321-3643709554b3",
                                                                    "e0d59e50-c434-4abc-9fe5-4229885ec825");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553793333383L),
                                                                         "d923c9b8-27b8-47ef-8606-88c9de2b2648",
                                                                         "f602a979-dd3a-4ae0-af95-314733915275",
                                                                         "b2602f7b-128b-460e-b6cf-29fcdab9df10");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553793333383L),
                                                                         "d923c9b8-27b8-47ef-8606-88c9de2b2648",
                                                                         "f602a979-dd3a-4ae0-af95-314733915275",
                                                                         "b2602f7b-128b-460e-b6cf-29fcdab9df10");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1553793327368L),
                                                                         "347dbe98-1197-42d8-b3bc-bb3b9ca2ed31",
                                                                         "1ca73a89-3ba2-492e-8136-6dd86a5cdc0b",
                                                                         "8053ecad-c658-4319-88a0-e375fbb9165e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
