// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553793327245L),
                                                          "f490d300-8182-42fe-9732-9d8ff4b361e2", false,
                                                          "77489f60-76ce-4420-84c7-e408b3998fd2");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553793331895L),
                                                          "1c4df220-92af-4ba0-bb96-a8a975f0d7b7", false,
                                                          "04dd9a9b-5806-4bac-b3dd-98734b99828b");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553793331895L),
                                                          "1c4df220-92af-4ba0-bb96-a8a975f0d7b7", false,
                                                          "04dd9a9b-5806-4bac-b3dd-98734b99828b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553793336639L), "58b48fc9-05b5-4dc0-9b10-1bee3acd4782",
                                                     true, "04f04f31-2d2d-4f5c-9a41-9a645c92dacf");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553793336679L),
                                                          "68f0e817-8710-47ce-98c5-504d8f76fb72", true,
                                                          "d8aec4c4-34fa-4147-a721-afe2402dfc5e");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553793336679L),
                                                          "68f0e817-8710-47ce-98c5-504d8f76fb72", true,
                                                          "d8aec4c4-34fa-4147-a721-afe2402dfc5e");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553793329791L),
                                                          "bf372c5b-59b9-4a44-ae15-6c31c1f00858", true,
                                                          "a0ecd04d-3f74-470e-875e-cb340de07eff");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
