// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("fc540234-effd-4d44-8c16-e1d22adf3068",
                                                                                           new Date(1553793334624L),
                                                                                           "b2b10b9a-4963-487d-b833-72c4f6841e83",
                                                                                           new Date(1553793332226L),
                                                                                           "875563c4-fbde-4307-a1ed-61c7d67ecbad",
                                                                                           null,
                                                                                           new Date(1553793327867L),
                                                                                           "c5315fcf-5f13-4973-93b7-89b87e1d8965");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("083b1504-777f-463f-a094-07bc370b4f2d",
                                                                                           new Date(1553793336392L),
                                                                                           "03a59fd9-938a-4300-b388-34f7f7476c99",
                                                                                           new Date(1553793331312L),
                                                                                           "da7f6644-5edc-4c32-b166-603a5613bbd1",
                                                                                           null,
                                                                                           new Date(1553793328551L),
                                                                                           "f9cfeda5-8ffb-47eb-8022-44b11459deb8");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("083b1504-777f-463f-a094-07bc370b4f2d",
                                                                                           new Date(1553793336392L),
                                                                                           "03a59fd9-938a-4300-b388-34f7f7476c99",
                                                                                           new Date(1553793331312L),
                                                                                           "da7f6644-5edc-4c32-b166-603a5613bbd1",
                                                                                           null,
                                                                                           new Date(1553793328551L),
                                                                                           "f9cfeda5-8ffb-47eb-8022-44b11459deb8");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("f915f0c8-3b88-4247-b411-cc144804b67d",
                                                                                      new Date(1553793333485L),
                                                                                      "f8ab1307-0f86-4482-8889-be67694dc19a",
                                                                                      new Date(1553793328632L),
                                                                                      "623ebe15-ca41-4d9b-8534-6f7c61dd0071",
                                                                                      null, new Date(1553793335744L),
                                                                                      "a213168c-22c2-45e5-b19a-f24d38b8e0e2");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553793332962L),
                                                                                             null,
                                                                                             new Date(1553793336719L),
                                                                                             "0661a282-5ae3-4ea0-8f63-ef64cfafb72f",
                                                                                             null,
                                                                                             new Date(1553793336509L),
                                                                                             "b59fd6ca-27f8-46af-9dad-64622b423ed4");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("1658c03a-476f-462b-a95d-7096604276b5",
                                                                                           new Date(1553793330144L),
                                                                                           "8213ab9b-ff07-4b43-983f-0358e021e8eb",
                                                                                           new Date(1553793334819L),
                                                                                           "bfbcffa9-5b19-480b-82ac-d75c4379a54d",
                                                                                           null,
                                                                                           new Date(1553793328892L),
                                                                                           "5e916c6b-9e9f-496c-bc78-335a91fb6742");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("1658c03a-476f-462b-a95d-7096604276b5",
                                                                                           new Date(1553793330144L),
                                                                                           "8213ab9b-ff07-4b43-983f-0358e021e8eb",
                                                                                           new Date(1553793334819L),
                                                                                           "bfbcffa9-5b19-480b-82ac-d75c4379a54d",
                                                                                           null,
                                                                                           new Date(1553793328892L),
                                                                                           "5e916c6b-9e9f-496c-bc78-335a91fb6742");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("254b1905-81bc-4b0c-a219-a23144d695c3",
                                                                                           new Date(1553793329452L),
                                                                                           "2d0e353a-c733-4293-9cb2-4de1a2ff7f41",
                                                                                           new Date(1553793332172L),
                                                                                           "f0a5c559-aa20-4002-a180-587fcb936415",
                                                                                           null,
                                                                                           new Date(1553793334458L),
                                                                                           "7f569108-3ed7-4e68-bb97-6efa5fbeaa1c");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
