// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("e0e56999-0224-48ab-ad3c-230229924d44",
                                                                      new Date(1553793327291L),
                                                                      new Date(1553793332438L),
                                                                      "iR0nWqeqTtt0Z7gI5i6bjaJvp9AMX4GS",
                                                                      "A-L6JRWIQS05DeY3o9319Nnsdw26OfgGpM53pv9mGfIFIJia8MuXGEWw6Q8zEuSf:M6qgnnOJUkIQdr7mol443r7:460VGiez",
                                                                      new Date(1553793327496L),
                                                                      "KGLIzllnCZ9A2ufk2MGn2yNe0O6Lc2qg");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("957060b6-d173-44b9-b229-dd4182e58a96",
                                                                      new Date(1553793336201L),
                                                                      new Date(1553793328531L),
                                                                      "F2QsUZi6lFV6li0O20Iz7NQWbBP4Ix1x",
                                                                      "A-ZpXRGaxR:QPALKze7osAJ:FOT9TQ5T3VR4o6tPZA5jML82TykIR8ZYwLhLn1F5F8xrKFfjyAHjXFh41bsLtxF3s291:salg",
                                                                      new Date(1553793336354L),
                                                                      "BL2GuA07Du9bDc4us7z5JY21xsNBRg1J");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("957060b6-d173-44b9-b229-dd4182e58a96",
                                                                      new Date(1553793336201L),
                                                                      new Date(1553793328531L),
                                                                      "F2QsUZi6lFV6li0O20Iz7NQWbBP4Ix1x",
                                                                      "A-ZpXRGaxR:QPALKze7osAJ:FOT9TQ5T3VR4o6tPZA5jML82TykIR8ZYwLhLn1F5F8xrKFfjyAHjXFh41bsLtxF3s291:salg",
                                                                      new Date(1553793336354L),
                                                                      "BL2GuA07Du9bDc4us7z5JY21xsNBRg1J");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("e213badd-b9f3-47c3-ae63-916261a7ccf1",
                                                                 new Date(1553793326958L), new Date(1553793332274L),
                                                                 "fLDIaRtWopJ6kZd931QWUI0hi4aCh284",
                                                                 "A-S89L11ldX6Nlk1SPPpI5tL6h1xc2W96PR:sc7n:543LilPp7vf7::w5Qr5lv20o:F0Wx87V12i2WsAc54vU6svGhRD82tqx",
                                                                 new Date(1553793331310L),
                                                                 "X868Egs643Zag0eyHqpNCaw80rD9Ne5F");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("8ad6861e-211f-46ff-b54b-f6b27c8a7aa4",
                                                                        new Date(1553793331921L),
                                                                        new Date(1553793333724L),
                                                                        "<\u0001GVG#?궣IYuLt齭V臤纒jLe[e\tvkOdee\f㺿ipu6UeUthMU#oUR騙UM\u0010Ld\u0011Z6\u000bHtd\u0002Yt6S",
                                                                        null, new Date(1553793329075L),
                                                                        "1gQȒGWp\bu7m_ScW75㜩khimBpLk1u`䈲o%ofm1`cm?F5k15pESupm7\t[>kEt17uaZ");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("7ec0bc29-c5ae-441e-80c2-a85be982219d",
                                                                      new Date(1553793329071L),
                                                                      new Date(1553793332072L),
                                                                      "V20Aq5x2d5M6rDT0pxHo87itARbSIzjR",
                                                                      "A-HmH23w:I8BWtr3IU7512hQLV1J3iLRe2XLU2fdEYY441kixdh850Y71XtppY6q75i0gV3sIV0V911Ywd96wLfJQ:2Q4E:Xf",
                                                                      new Date(1553793336337L),
                                                                      "BPQj3559D0V81D8QsWq04vwE453JelKX");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("7ec0bc29-c5ae-441e-80c2-a85be982219d",
                                                                      new Date(1553793329071L),
                                                                      new Date(1553793332072L),
                                                                      "V20Aq5x2d5M6rDT0pxHo87itARbSIzjR",
                                                                      "A-HmH23w:I8BWtr3IU7512hQLV1J3iLRe2XLU2fdEYY441kixdh850Y71XtppY6q75i0gV3sIV0V911Ywd96wLfJQ:2Q4E:Xf",
                                                                      new Date(1553793336337L),
                                                                      "BPQj3559D0V81D8QsWq04vwE453JelKX");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("36ff4dd4-5d65-471b-86ff-8c39ef20702b",
                                                                      new Date(1553793332895L),
                                                                      new Date(1553793330469L),
                                                                      "TPaUjDVU92u79gta2EyFg895v19M91by",
                                                                      "A-w6PqV2bm25X2zAB:3C3k49Wdk6ggw9nucIFjIp42Rx670xZk1s5QonCHCioFM96u9c8F5BTl9E7Ffos0t3vVTTBiDu9QB53",
                                                                      new Date(1553793327532L),
                                                                      "fdB03TdrK7IqW2TjI2E90k89v1oV294h");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
