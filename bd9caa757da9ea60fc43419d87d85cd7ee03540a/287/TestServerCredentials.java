// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1557959067276L),
                                                                         "f68f3d5f-f00e-42f6-bb26-af704ae2d1cd",
                                                                         "c5636b44-714f-4935-a746-bbc98c752a3a",
                                                                         "484dde50-ca84-4d25-bba8-7cfce113ec55");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1557959071836L),
                                                                         "bef584a1-f314-4892-872b-bd027c6016ba",
                                                                         "eee1964f-ce33-42cf-ab52-6620fe25f812",
                                                                         "99eeb823-d832-4351-8e56-39d015d77156");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1557959071836L),
                                                                         "bef584a1-f314-4892-872b-bd027c6016ba",
                                                                         "eee1964f-ce33-42cf-ab52-6620fe25f812",
                                                                         "99eeb823-d832-4351-8e56-39d015d77156");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1557959072282L),
                                                                    "2e50e214-48b8-4745-a671-e92b8a8d9a69",
                                                                    "42c4853c-bd70-49db-96b6-a7826df674e9",
                                                                    "b7b4e37e-82c8-4e94-8f34-4633f7108a9a");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1557959068540L),
                                                                         "2c7463bc-3952-49cf-a19d-b6f2d70003e8",
                                                                         "b8794869-d2e7-4ea9-953b-2e48faa6e919",
                                                                         "cfc2c0ee-06b1-4adf-aee5-6e910e0d87fa");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1557959068540L),
                                                                         "2c7463bc-3952-49cf-a19d-b6f2d70003e8",
                                                                         "b8794869-d2e7-4ea9-953b-2e48faa6e919",
                                                                         "cfc2c0ee-06b1-4adf-aee5-6e910e0d87fa");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1557959072097L),
                                                                         "e16f0619-bb69-4cef-94b4-e94cc8b0ebac",
                                                                         "b8bd8cae-bb85-4446-8c67-7a28297ff883",
                                                                         "b7071f1b-347a-4440-9ddd-b4a1aa9eea30");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
