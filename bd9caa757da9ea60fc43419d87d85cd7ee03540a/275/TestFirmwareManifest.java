// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1557959066392L), -116,
                                                                      "e12eac79-1ddb-475b-b23e-a51c72633c6d",
                                                                      "99e21899-3a18-4d2b-9f33-172f869b6d64",
                                                                      "94bbdb56-2fbc-464f-8f89-6b21b76fe6a4",
                                                                      "e1453c9f-2894-4d2c-a49f-94d7c9e128b7",
                                                                      "80d6f1a0-6c10-4743-85b8-7dcb2cf59131",
                                                                      "809d70e5-67f5-496e-94a2-c370d691e572",
                                                                      new Date(1557959073349L),
                                                                      new Date(1557959067434L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1557959064849L), -60,
                                                                      "d0c2a927-cec5-4aef-9567-fb2410d2b14b",
                                                                      "b79f06db-555d-489e-97e7-7427a1d33966",
                                                                      "e5c596e0-e9e0-423b-bf29-27ca3cb52d0b",
                                                                      "5cf70b29-2b3c-4530-8c96-d3defb77af1b",
                                                                      "7fa82cd6-4911-4b35-aee8-3abff639220e",
                                                                      "de06bd58-9402-4e1b-89fd-29e0c030f54b",
                                                                      new Date(1557959065731L),
                                                                      new Date(1557959071394L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1557959064849L), -60,
                                                                      "d0c2a927-cec5-4aef-9567-fb2410d2b14b",
                                                                      "b79f06db-555d-489e-97e7-7427a1d33966",
                                                                      "e5c596e0-e9e0-423b-bf29-27ca3cb52d0b",
                                                                      "5cf70b29-2b3c-4530-8c96-d3defb77af1b",
                                                                      "7fa82cd6-4911-4b35-aee8-3abff639220e",
                                                                      "de06bd58-9402-4e1b-89fd-29e0c030f54b",
                                                                      new Date(1557959065731L),
                                                                      new Date(1557959071394L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1557959068542L), -84,
                                                                 "f120e9a6-fa9c-4653-ab2d-2988d88f771a",
                                                                 "080bf30e-2d03-4468-bb27-d46445f2e689",
                                                                 "c3599e59-d991-4172-a660-34c7237bb1b6",
                                                                 "66fdba96-5b7c-4748-8fd4-3ad2315bbd1b",
                                                                 "d6ad307e-5eba-4ca3-bfcc-2453e24a9bd7",
                                                                 "ab48496d-64e9-405d-802c-48e924ddbcbd",
                                                                 new Date(1557959066463L), new Date(1557959073327L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1557959070794L), 35,
                                                                        "a9988193-61fc-4852-930e-d28238749dbb",
                                                                        "b648fddc-ee55-4dd6-83a6-2cab1b39b4269070a06a-d205-403f-8ee3-fd7204670567bfc54a93-e2c8-4c2c-b700-8bf49596c354ea6bf43e-8132-408f-b5e0-acc196f837697fc3dceb-962c-4043-bb95-24625c58baef68152322-2055-4b6c-beab-b7685e71c1822b6c1422-42ca-45ee-b7e4-0687f05b580df3a67622-42a6-4add-b007-2112872f63da097308f5-3bd6-448a-a622-3ba60d75a87ec93c2447-1b8c-4ac4-bfd8-52be7a5c633e000a3c7f-4054-4897-9a92-3053dc0aba83d8e2ce58-2267-4ea9-960b-5ba11e1d1dd20d788ba4-4cd4-41ed-a508-93ff58edc2bd332bfacf-1288-44a5-b0de-ef240d5ca28b614f5226-afd4-482d-afcc-f273b4aaa4426c3ff157-8caf-4728-9311-b0dbdaeb62e381cfa42b-5f9b-446c-bc06-9bce7547c84c4205235a-0caf-4361-88eb-f219137cb1b5efbcb2fc-388d-409b-80c4-976ce1b624bae503572d-bbb4-4959-8391-177a7af29c03c206b802-2dfb-4936-b5c1-88e3655c6dbf3f3392b7-be22-484c-9409-273402e132b1a7c8499a-e0f4-45a3-a2ab-0732e350507a9bdb89ff-d131-4f07-8a30-38ab6c09ad32e0eecec4-b5fb-4483-abf5-19888832e28ccf6a2af4-b089-49df-ab2e-65219e6b8399c4e1867d-99bf-4ff9-92fc-98003113c6949f8fb42a-4392-4134-8ac3-fd2e1062e0d0dab7c55b-3f09-484a-93eb-b985ec4f2422455a0295-e38f-4146-946f-3b9c95e76c9b278cf505-c937-45c7-86fc-62fe11445ed14aaaa50a-a60a-4e48-a5dd-16a07c9feb5c82a2e846-91f2-4427-9be4-2d0cdecfd32f64493894-b585-4c11-961e-4f8e074356a23b6a209d-aa88-4ee9-8d88-ee39a64febc0a53a59d3-9873-4d4d-977e-84ad807cd1eda29cac64-9644-497b-8406-6c72ab93e4cd97b1099d-1491-4160-869e-f240f91a1c1d22a2a444-f0b9-4849-9c67-545187ebbedd31b870e3-07e8-4eda-9afb-3c3a520ef2e99e3b1735-176d-44f8-9f4c-f9da20130d4b96de0632-0733-49c3-aa21-cd255bec3659610b3ebd-dd19-487a-8bcc-01441569bd0b704c41c9-a66f-49e4-820c-fef5c5a6e38353e213d9-70b9-4b18-b006-4539041cd2ded7cff389-f003-48e6-b753-694f878e9aced722ab75-9aee-408e-84ff-bb1e65b895021443cca5-a4c6-4c11-8cbc-51863f3a380a09277a64-06cc-41f5-9628-14e8da6271ade3c6dccc-0711-49e0-88d6-155cb16e0358b9977ccf-d377-4fa6-af67-1723c383e8b993af0e30-8114-4457-9dbc-f1cf3285da9c7d21e697-82fb-40bb-84d3-46e80c5bab0f01c01125-2dda-4dee-adeb-fd284d501fe2167afb5a-a142-429f-bee4-caaba0104113f6b1db6a-7287-41d5-adf4-ddeceddf0188",
                                                                        "1cd4c636-cb7a-4974-82f7-5a5a29182b8c",
                                                                        "8b8cbb4e-1be3-4704-945c-e615420d5ec2",
                                                                        "18ed8339-b3a0-4f50-a1ba-2776c26bed63",
                                                                        "121e3054-578b-426a-8589-92a3edea84755a258ea2-ec5a-4a77-909a-8a6bba1f7ab6874c19a7-7f0d-453a-9d39-52f0fa6bb9d0aecccbb6-3bfe-4c5f-a56d-8abe31c8a898",
                                                                        new Date(1557959068722L),
                                                                        new Date(1557959072205L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1557959066896L), -76,
                                                                      "7bfb75af-cfac-484b-ad71-ce780b8fe104",
                                                                      "9aedb25a-ac05-43af-bce3-fa7cdb25c2e9",
                                                                      "ae13a976-4e09-4025-b1bf-a0a404172a96",
                                                                      "f3e18491-b248-402f-91fc-95b651676bbf",
                                                                      "746dad17-f457-47bd-a54a-e779fdb87129",
                                                                      "58860839-bb2a-487f-b362-8ecf27b330e1",
                                                                      new Date(1557959073500L),
                                                                      new Date(1557959066768L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1557959066896L), -76,
                                                                      "7bfb75af-cfac-484b-ad71-ce780b8fe104",
                                                                      "9aedb25a-ac05-43af-bce3-fa7cdb25c2e9",
                                                                      "ae13a976-4e09-4025-b1bf-a0a404172a96",
                                                                      "f3e18491-b248-402f-91fc-95b651676bbf",
                                                                      "746dad17-f457-47bd-a54a-e779fdb87129",
                                                                      "58860839-bb2a-487f-b362-8ecf27b330e1",
                                                                      new Date(1557959073500L),
                                                                      new Date(1557959066768L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1557959066912L), 104,
                                                                      "3a6bdf26-7a92-4368-9c4e-770f55e291b2",
                                                                      "6f9a4d7b-b204-442c-93e9-96f25ac2de17",
                                                                      "5d3ea9ec-a931-4bf8-a959-825c4e68c97e",
                                                                      "80b114c5-3acb-4b7b-a133-e3ce041c4c29",
                                                                      "3188ebee-1a4a-4065-bd22-6e583d50c02f",
                                                                      "57397bf7-4b28-47a5-84e9-1d8d03e0e934",
                                                                      new Date(1557959065424L),
                                                                      new Date(1557959063742L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
