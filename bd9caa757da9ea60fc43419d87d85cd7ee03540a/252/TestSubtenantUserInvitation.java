// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                           new Date(1557959068170L),
                                                                                           "5ac93.01269@d0d25.fr",
                                                                                           new Date(1557959067104L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e",
                                                                                           null,
                                                                                           new Date(1557959065037L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                           new Date(1557959069172L),
                                                                                           "d4fe4.c6f4c@e278a.me",
                                                                                           new Date(1557959067441L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e",
                                                                                           null,
                                                                                           new Date(1557959069630L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                           new Date(1557959069172L),
                                                                                           "d4fe4.c6f4c@e278a.me",
                                                                                           new Date(1557959067441L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e",
                                                                                           null,
                                                                                           new Date(1557959069630L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                      new Date(1557959070255L),
                                                                                      "de6d0.b5e62@25473.fr",
                                                                                      new Date(1557959073412L),
                                                                                      "e5bbd029672c41116bdebdc8edf9007e",
                                                                                      null, new Date(1557959073543L),
                                                                                      "e5bbd029672c41116bdebdc8edf9007e");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1557959066812L),
                                                                                             null,
                                                                                             new Date(1557959072773L),
                                                                                             "î‘¿33\u001a3\u00183Z\\\\E!ì¤?3ëŠ?â‰’æ“•\u001aî§›3@ìš¬ç£?3.$$W3à¡›3\u0015M+ê?‘\u0016\\\\3==W,\u0014ä²ªîˆ£A\u0019ì«µ\u00073ç™‡3ç›†î·³Iæ™ƒ\u0012.\u0006Pä²ŠB/Qá¶‡",
                                                                                             null,
                                                                                             new Date(1557959073752L),
                                                                                             "î‘¿33\u001a3\u00183Z\\\\E!ì¤?3ëŠ?â‰’æ“•\u001aî§›3@ìš¬ç£?3.$$W3à¡›3\u0015M+ê?‘\u0016\\\\3==W,\u0014ä²ªîˆ£A\u0019ì«µ\u00073ç™‡3ç›†î·³Iæ™ƒ\u0012.\u0006Pä²ŠB/Qá¶‡");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                           new Date(1557959069576L),
                                                                                           "da4ce.98d0c@ecd5e.fr",
                                                                                           new Date(1557959066940L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e",
                                                                                           null,
                                                                                           new Date(1557959065183L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                           new Date(1557959069576L),
                                                                                           "da4ce.98d0c@ecd5e.fr",
                                                                                           new Date(1557959066940L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e",
                                                                                           null,
                                                                                           new Date(1557959065183L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("e5bbd029672c41116bdebdc8edf9007e",
                                                                                           new Date(1557959072329L),
                                                                                           "73bfa.1fcb8@da46b.fr",
                                                                                           new Date(1557959068477L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e",
                                                                                           null,
                                                                                           new Date(1557959073570L),
                                                                                           "e5bbd029672c41116bdebdc8edf9007e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
