// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1557959070241L),
                                                          "63e677bb-0c2e-437b-93f1-3ba492ec317d", true,
                                                          "4e678362-9538-4fd9-97fe-edb27c24930c");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1557959070466L),
                                                          "ad9144b9-9333-475f-a5bf-2fcd260382e4", true,
                                                          "4a51e329-3f6e-4202-945a-5bccc0ea0682");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1557959070466L),
                                                          "ad9144b9-9333-475f-a5bf-2fcd260382e4", true,
                                                          "4a51e329-3f6e-4202-945a-5bccc0ea0682");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1557959065232L), "52853493-2a21-480c-83df-b29a7e5dee7b",
                                                     false, "0638ec7d-efb6-4320-91ff-18432a62e119");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1557959069141L),
                                                          "c884f547-5322-4a7c-b253-b7a0bc47e34b", true,
                                                          "d6ef06b4-6717-4697-b66c-9503fb4fb0e9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1557959069141L),
                                                          "c884f547-5322-4a7c-b253-b7a0bc47e34b", true,
                                                          "d6ef06b4-6717-4697-b66c-9503fb4fb0e9");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1557959069378L),
                                                          "80ef451b-1ccc-4220-9b86-87bd8fd77c50", true,
                                                          "40bca6ce-fd0c-4186-b654-40289651d536");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
