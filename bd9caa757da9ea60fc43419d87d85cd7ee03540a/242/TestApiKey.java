// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959068846L), -29,
                                        "e5bbd029672c41116bdebdc8edf9007e", "63005d07-9f8e-4ff9-af69-88bd407361d6", 3,
                                        "0395e1da-bccd-4ea6-8fcf-46322c0dcf7f", "e5bbd029672c41116bdebdc8edf9007e",
                                        ApiKeyStatus.getDefault(), new Date(1557959063687L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959063743L), -5,
                                        "e5bbd029672c41116bdebdc8edf9007e", "d43c12ed-e10b-4ee7-85b4-5153d120615a", -80,
                                        "3829ccfa-c703-484a-a155-b3e6f197a8b7", "e5bbd029672c41116bdebdc8edf9007e",
                                        ApiKeyStatus.getDefault(), new Date(1557959067936L));
            ApiKey apikey2 = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959063743L), -5,
                                        "e5bbd029672c41116bdebdc8edf9007e", "d43c12ed-e10b-4ee7-85b4-5153d120615a", -80,
                                        "3829ccfa-c703-484a-a155-b3e6f197a8b7", "e5bbd029672c41116bdebdc8edf9007e",
                                        ApiKeyStatus.getDefault(), new Date(1557959067936L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959070693L), -71,
                                   "e5bbd029672c41116bdebdc8edf9007e", "e635f27a-a6e8-4bad-8f7a-f4c72f0fa5b2", 38,
                                   "1d8ff7ac-ab8d-465f-aaea-69bb625c5ad5", "e5bbd029672c41116bdebdc8edf9007e",
                                   ApiKeyStatus.getDefault(), new Date(1557959068348L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("î‘¿33\u001a3\u00183Z\\\\E!ì¤?3ëŠ?â‰’æ“•\u001aî§›3@ìš¬ç£?3.$$W3à¡›3\u0015M+ê?‘\u0016\\\\3==W,\u0014ä²ªîˆ£A\u0019ì«µ\u00073ç™‡3ç›†î·³Iæ™ƒ\u0012.\u0006Pä²ŠB/Qá¶‡",
                                          new Date(1557959064290L), -35,
                                          "î‘¿33\u001a3\u00183Z\\\\E!ì¤?3ëŠ?â‰’æ“•\u001aî§›3@ìš¬ç£?3.$$W3à¡›3\u0015M+ê?‘\u0016\\\\3==W,\u0014ä²ªîˆ£A\u0019ì«µ\u00073ç™‡3ç›†î·³Iæ™ƒ\u0012.\u0006Pä²ŠB/Qá¶‡",
                                          "315b2398-0296-47d0-8726-e50ca3448c79", -126, null,
                                          "î‘¿33\u001a3\u00183Z\\\\E!ì¤?3ëŠ?â‰’æ“•\u001aî§›3@ìš¬ç£?3.$$W3à¡›3\u0015M+ê?‘\u0016\\\\3==W,\u0014ä²ªîˆ£A\u0019ì«µ\u00073ç™‡3ç›†î·³Iæ™ƒ\u0012.\u0006Pä²ŠB/Qá¶‡",
                                          ApiKeyStatus.getDefault(), new Date(1557959065412L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959069242L), 42,
                                        "e5bbd029672c41116bdebdc8edf9007e", "675b0d39-8d82-47f1-a605-6fa0866cc9b6", -55,
                                        "88f88903-1765-4395-af09-f7285e3a6652", "e5bbd029672c41116bdebdc8edf9007e",
                                        ApiKeyStatus.getDefault(), new Date(1557959066099L));
            ApiKey apikey2 = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959069242L), 42,
                                        "e5bbd029672c41116bdebdc8edf9007e", "675b0d39-8d82-47f1-a605-6fa0866cc9b6", -55,
                                        "88f88903-1765-4395-af09-f7285e3a6652", "e5bbd029672c41116bdebdc8edf9007e",
                                        ApiKeyStatus.getDefault(), new Date(1557959066099L));
            ApiKey apikey3 = new ApiKey("e5bbd029672c41116bdebdc8edf9007e", new Date(1557959073148L), 44,
                                        "e5bbd029672c41116bdebdc8edf9007e", "66155816-c3a8-4bd0-81ed-27f755e46e86", 35,
                                        "b1b6b8e7-b527-414c-b56d-b6a3a72fb3f6", "e5bbd029672c41116bdebdc8edf9007e",
                                        ApiKeyStatus.getDefault(), new Date(1557959072422L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
