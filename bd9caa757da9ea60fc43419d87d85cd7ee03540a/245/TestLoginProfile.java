// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("ee5cd8c9-b88f-4218-9bfb-360179a47323",
                                                          "5bf1a158-163a-44b2-ad93-0c271fc1f2d0");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("7b66f108-b2a8-47bb-b3e1-cdc79465a1f8",
                                                          "ee70281c-582b-4625-bf85-93f33fa4287a");
            LoginProfile loginprofile2 = new LoginProfile("7b66f108-b2a8-47bb-b3e1-cdc79465a1f8",
                                                          "ee70281c-582b-4625-bf85-93f33fa4287a");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("2a3e522f-940c-4182-ac32-9c1987c9272b",
                                                     "0f240159-2470-4b57-b688-5ed7e10da8a0");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("199fccec-d22c-4fa2-af21-a235fafe7196",
                                                          "355e59d3-74c3-4f21-b4f2-2d246aaa054a");
            LoginProfile loginprofile2 = new LoginProfile("199fccec-d22c-4fa2-af21-a235fafe7196",
                                                          "355e59d3-74c3-4f21-b4f2-2d246aaa054a");
            LoginProfile loginprofile3 = new LoginProfile("04af9e80-dc9b-44e0-b973-5e72bca4fe1d",
                                                          "b9b40a8b-8878-4959-94c7-201cad0c137c");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
