// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("2b454576-23ba-439d-878d-3dec7ae5c64e", true,
                                        "6e1f0f62-5b39-431e-a3ad-7c4b5aabd2d1", false,
                                        "635ded0a-1572-48cd-b0fc-0f3bea57cd19");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("81b962f1-064c-4b89-8cd9-2dc977b2a95f", false,
                                        "67550a35-7034-456b-9cda-64d0c842c0bf", false,
                                        "28e49690-8540-416d-9a40-02a1ba3cf9a4");
            Policy policy2 = new Policy("81b962f1-064c-4b89-8cd9-2dc977b2a95f", false,
                                        "67550a35-7034-456b-9cda-64d0c842c0bf", false,
                                        "28e49690-8540-416d-9a40-02a1ba3cf9a4");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("4def8bac-7a5c-46cc-9464-f1c80a5f90c1", false,
                                   "236946ac-3ec5-4de4-9d5c-edd1a1550e2a", true,
                                   "f65054f8-fec9-4590-9364-d33547ba92a1");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("a7c3c53d-56c2-4349-8c3b-8f6f78eaaee7", false,
                                        "644056fc-f8a9-42b3-b063-76795ca04816", true,
                                        "a7ffdf1a-1dd6-4825-9ca3-2a72946ccc32");
            Policy policy2 = new Policy("a7c3c53d-56c2-4349-8c3b-8f6f78eaaee7", false,
                                        "644056fc-f8a9-42b3-b063-76795ca04816", true,
                                        "a7ffdf1a-1dd6-4825-9ca3-2a72946ccc32");
            Policy policy3 = new Policy("5df4fa5e-b57c-42ce-80a2-f72a3560ad2f", false,
                                        "a1138b5e-b5b6-4712-b2aa-085dd0397ad0", true,
                                        "588224f0-50a7-4448-9d7b-d90bf538dd43");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
