// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1557959066910L),
                                                             "29eabd45-9f19-47f4-8e4c-bf943e4b7081", -68,
                                                             "aa9da17e-3058-4764-bf46-8ff1438a7dd3",
                                                             "8c50e55b-f060-434b-a5fd-529e69e0a624",
                                                             "10b95a36-620c-4891-93ea-8b91c349acbb",
                                                             "4f683221-fb1c-4b04-bad8-21910a9d3139",
                                                             new Date(1557959068488L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1557959068040L),
                                                             "a6011b9c-8b7a-4ce5-8954-a912fab1c74d", 11,
                                                             "f0851885-e0b1-4c21-93e9-e14e9f6bc79c",
                                                             "54e7dbc3-3769-4917-aa1f-c066b1b57a76",
                                                             "77b1d042-0b6e-42f5-8073-ab9f5e7d96c6",
                                                             "f35c10b1-1b2b-4e20-88df-68f5a24f7e6c",
                                                             new Date(1557959066571L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1557959068040L),
                                                             "a6011b9c-8b7a-4ce5-8954-a912fab1c74d", 11,
                                                             "f0851885-e0b1-4c21-93e9-e14e9f6bc79c",
                                                             "54e7dbc3-3769-4917-aa1f-c066b1b57a76",
                                                             "77b1d042-0b6e-42f5-8073-ab9f5e7d96c6",
                                                             "f35c10b1-1b2b-4e20-88df-68f5a24f7e6c",
                                                             new Date(1557959066571L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1557959071323L),
                                                        "85924025-a78b-40aa-977e-5373c8189b7f", 50,
                                                        "481a4114-ca26-4a6e-9e62-147b8668ddea",
                                                        "1ba92aca-bf9f-477b-a61b-bdfd53098686",
                                                        "71b88375-75c0-425e-93f3-87b07345b072",
                                                        "808f6d3a-3477-474f-a9f5-c25c66aa891c",
                                                        new Date(1557959063990L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1557959065089L),
                                                               "27c9e5d6-a5c4-424b-8eba-af70e70d2ba7", 85,
                                                               "c2a13f26-f3cb-495c-a780-cbe6d2bc00e0",
                                                               "17c76e9f-9e6b-42fc-bd0e-3524c742e389b8c36d09-d13f-47ad-8bad-b089f09cc845a40cdc4d-ce6b-48e5-be2a-a06b0fd14a6cdbb8808d-7108-4c0c-95f3-02c355da8f758a20546c-9003-4435-aee9-681e62871012b50b7c1e-e8f7-4722-ad7b-556e3e6f410545303bd1-3667-49a6-a2ed-6fe3d6b5e8a1b3796b7c-f5e2-45ad-b3e8-a0488e3ee459f5c421af-c803-4114-8175-716b58fc147a2a5b70a5-b874-4ab9-828a-4d3cbfc09579dd434db0-3061-4cf6-b87f-06f7da81073652e5362c-e18d-4563-87e1-7cf06457d886429ddf2f-3870-4f1e-aa7b-91b52038b34e774d8ccf-7e07-40cc-b6de-f0fa0ac6947e1d03ecf4-c2da-4b6e-bd45-50db926303cd92ac5189-b89d-4c88-b8c6-58158f1468273b58bd5f-ed4d-40ee-8578-c8bbd4bef6a03e789bcf-5ef9-435f-9cc3-1b58351b21dac78ca766-7ef3-4a12-a0ce-db1d960679d07278d61a-cc42-4aec-ade8-aed4b8f02ef78856e5ed-973c-466e-9705-e363b67ca9d6757c248a-8a82-4c91-bf19-50a132b5b7ced590ba56-f420-4c8f-83e9-639ebf41a669483fb668-8243-47f9-b208-4508c09ac4c708dcc05b-d9eb-4075-b7ac-2fd166d72ee6ad1a623e-2c6f-48bc-a950-8763c43075cbdde43d36-6bf9-4660-94e2-64c0f1dfb1f39df5cd4b-3b33-4482-be0a-06519050791257f94582-5188-4265-8bf6-c6eb67f9fd320d248377-d448-452b-ba67-f86c381256f82c314508-09ef-4947-9a52-12c6c2bee6de58ce0399-d81f-4bce-949f-92cb4dcb665bd59e74e3-cacd-4367-bdcb-5458bbbb904f78dd1b10-48f4-4a9a-a7e6-7b723d77c8ab94aeb446-0c24-41e3-86e4-95a5dbc4fe2fbec44daa-adb5-415f-b487-d90a28c54991157d80e3-97b3-41bb-a4b7-c206bb947e4a1662ee7d-6e45-4a90-958f-daaecb028e3b278c5588-046f-4b5f-adb2-f733bfc0768e7a53ac46-a377-4813-b25a-32e4a3fddff7acfc9d37-703e-48ab-99e7-9fb5b912c45536252913-3c5c-45a8-bcf5-01e8b76c61252dcc8040-aa42-4e06-9dad-01748de897a417d1c116-64b4-4413-b648-1b33284611811916f4df-19e6-47cf-acf3-41e7297b07885bc916e6-10a1-4c26-a9fc-36d088bd34393ddd3499-64a8-401f-a64a-3cdb6527408eb66aeae4-4d35-46d8-a6f2-6f9264aa79c81ee86452-8867-4f5e-a4cd-bb2f7ba4545ba8d8f15a-a098-4454-abab-15fc55008c3baebe9f0b-4426-4458-9dc5-4a66a371de7e2da2e711-8442-4d2f-a5e9-284f80700b92767920e3-8d4e-404d-bd01-7f4cd2a50a9021543e20-51e1-498e-a55f-04f10c20ef50f1c8e940-35a2-4bfb-a16f-a622c92950ea1df9c5a0-f007-45e4-b35a-b70aea0a1623",
                                                               "13239005-9be7-4245-bf21-6aea744fb2aa",
                                                               "13031224-c697-4508-ae27-ee38001f3871e7eed37f-ab0d-4fe2-9411-b3da43ff25fb1ea89152-c6ad-4ed9-878a-9c64385b789b665952e0-30ca-4555-b2d0-11f9c6a99be6",
                                                               new Date(1557959065188L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1557959070757L),
                                                             "243079fb-a266-428d-85ae-3a8ca3d42a1c", -124,
                                                             "5ffd1afc-f4a1-4765-8afd-acd197758444",
                                                             "8aaba7d4-54ae-4c3e-bcb8-9a36e9ab9cb8",
                                                             "b33b744c-ca41-4906-abd5-f4a4bee451d9",
                                                             "835814ed-bb55-4fa6-bcaf-1653451da641",
                                                             new Date(1557959063802L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1557959070757L),
                                                             "243079fb-a266-428d-85ae-3a8ca3d42a1c", -124,
                                                             "5ffd1afc-f4a1-4765-8afd-acd197758444",
                                                             "8aaba7d4-54ae-4c3e-bcb8-9a36e9ab9cb8",
                                                             "b33b744c-ca41-4906-abd5-f4a4bee451d9",
                                                             "835814ed-bb55-4fa6-bcaf-1653451da641",
                                                             new Date(1557959063802L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1557959067492L),
                                                             "fa8c24f6-8666-4353-aa96-9fc74acba0bb", -109,
                                                             "1bf5aa32-1d18-4815-b9e3-5d791ee624e2",
                                                             "1a137b74-60ee-464a-9ddb-92857c3be02f",
                                                             "ec7088d7-e624-492b-abcf-e793bcabfefc",
                                                             "1510e041-9bd7-40ad-874c-5735d5e39e7c",
                                                             new Date(1557959072580L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
