// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("2ee36272-f3be-4377-b700-b320d565b5a0",
                                                                      new Date(1557959073546L),
                                                                      new Date(1557959070757L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                      "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                      new Date(1557959070501L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("a5ad8336-786b-4eb5-a623-9f4e03b5aa15",
                                                                      new Date(1557959066377L),
                                                                      new Date(1557959068032L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                      "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                      new Date(1557959068506L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("a5ad8336-786b-4eb5-a623-9f4e03b5aa15",
                                                                      new Date(1557959066377L),
                                                                      new Date(1557959068032L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                      "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                      new Date(1557959068506L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("275c4b8e-2f92-498c-9789-d9ca44599a4e",
                                                                 new Date(1557959071363L), new Date(1557959068956L),
                                                                 "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                 "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                 new Date(1557959070533L),
                                                                 "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("573f4a85-a4f4-4ec9-bafd-46ba6afda280",
                                                                        new Date(1557959064620L),
                                                                        new Date(1557959064980L),
                                                                        "]?f踵Mddq\u0011qUC2D>oum⽫mOuii\u0003Wq\u0019&u2bf22Cqgiؼ2biIbgYW\tUNiGbWJtC2;n_Cf",
                                                                        null, new Date(1557959073334L),
                                                                        "]?f踵Mddq\u0011qUC2D>oum⽫mOuii\u0003Wq\u0019&u2bf22Cqgiؼ2biIbgYW\tUNiGbWJtC2;n_Cf");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("5b816b00-0045-4914-88b9-093d155cfc47",
                                                                      new Date(1557959067527L),
                                                                      new Date(1557959073493L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                      "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                      new Date(1557959070071L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("5b816b00-0045-4914-88b9-093d155cfc47",
                                                                      new Date(1557959067527L),
                                                                      new Date(1557959073493L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                      "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                      new Date(1557959070071L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("95e381d5-6650-4189-bc64-1c3208878d6d",
                                                                      new Date(1557959064006L),
                                                                      new Date(1557959064544L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa",
                                                                      "A-ZLO7cy9lJL1B9W02UVC:8I236mo07QawV9arlQ9:BXunhKCg3X75u3oGa10FQ2pC0z3m6Ge2TwsoGMU:YckQyg0v:DOtuF2",
                                                                      new Date(1557959065532L),
                                                                      "cKwSXej3V4p6xr10se5B4hx3TeBE0eLa");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
