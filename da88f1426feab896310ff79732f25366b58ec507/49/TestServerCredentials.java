// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1552477765731L),
                                                                         "1397c728-d6a6-4b7d-82ad-82ad5cfb5693",
                                                                         "5eb22a1b-5fad-467e-8769-052af79c123c",
                                                                         "5ec82e1e-b3aa-4a16-a967-8b24cd31356b");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1552477767406L),
                                                                         "82a910e8-5479-430b-a782-abe629cdea58",
                                                                         "d2590885-1f43-45f1-a072-c4975a4661a2",
                                                                         "ab2df38a-a683-46fa-a9ed-b1a6383215c2");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1552477767406L),
                                                                         "82a910e8-5479-430b-a782-abe629cdea58",
                                                                         "d2590885-1f43-45f1-a072-c4975a4661a2",
                                                                         "ab2df38a-a683-46fa-a9ed-b1a6383215c2");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1552477765474L),
                                                                    "4e2f6b83-3a06-4d98-a9bc-8c2fc099daca",
                                                                    "b6156e1d-512e-4849-91a8-cbf91a2b3cc6",
                                                                    "de960112-4054-4bcd-a6f1-f8631d58ee44");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1552477758290L),
                                                                         "93aaf234-fea7-470a-9148-e33c49a1c5e9",
                                                                         "3c1e318a-31ff-4db3-90b7-fc88c9ed0fb1",
                                                                         "d1920f6d-a543-46d8-8dd1-5db2c1582934");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1552477758290L),
                                                                         "93aaf234-fea7-470a-9148-e33c49a1c5e9",
                                                                         "3c1e318a-31ff-4db3-90b7-fc88c9ed0fb1",
                                                                         "d1920f6d-a543-46d8-8dd1-5db2c1582934");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1552477764360L),
                                                                         "27611442-0628-4a91-87f7-3b7007ef9786",
                                                                         "f47af943-a5b2-49d7-af05-2d353f9c9d10",
                                                                         "74c9daaa-ff09-4aa6-a6ad-43919aad7b86");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
