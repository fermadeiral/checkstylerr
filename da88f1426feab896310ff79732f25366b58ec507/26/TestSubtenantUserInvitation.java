// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("0d6225e6-7c2c-44a8-8a8d-c5fbd90632fb",
                                                                                           new Date(1552477759517L),
                                                                                           "52f5cae6-74fc-4223-aac0-6c298dc7f113",
                                                                                           new Date(1552477763178L),
                                                                                           "de119e6b-8df4-4b84-89a8-6944f4d76793",
                                                                                           null,
                                                                                           new Date(1552477761421L),
                                                                                           "82bbef39-7201-457c-aa4b-5fe52adf1d3a");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("50046635-6791-4ad3-b074-84c5523f0539",
                                                                                           new Date(1552477766279L),
                                                                                           "d04bfea5-64dc-4b9f-95e9-492b45e0a837",
                                                                                           new Date(1552477765026L),
                                                                                           "b016014e-360e-4746-a7c2-8ec9ced8f442",
                                                                                           null,
                                                                                           new Date(1552477760236L),
                                                                                           "cb589164-87fa-4ebd-a914-c96cd7b3304d");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("50046635-6791-4ad3-b074-84c5523f0539",
                                                                                           new Date(1552477766279L),
                                                                                           "d04bfea5-64dc-4b9f-95e9-492b45e0a837",
                                                                                           new Date(1552477765026L),
                                                                                           "b016014e-360e-4746-a7c2-8ec9ced8f442",
                                                                                           null,
                                                                                           new Date(1552477760236L),
                                                                                           "cb589164-87fa-4ebd-a914-c96cd7b3304d");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("402b7bed-4c78-4fbe-b2c4-4cb6ee6b706a",
                                                                                      new Date(1552477764734L),
                                                                                      "955d7b93-b013-4895-a597-706ec122ce23",
                                                                                      new Date(1552477760028L),
                                                                                      "a5c729db-7d33-422e-8fe0-806eae63c1c3",
                                                                                      null, new Date(1552477766195L),
                                                                                      "2380f81c-ff2f-4433-b283-c263c0c0efd9");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1552477762941L),
                                                                                             null,
                                                                                             new Date(1552477766198L),
                                                                                             "38022a5c-f232-4118-92e3-39c6807e425a",
                                                                                             null,
                                                                                             new Date(1552477767489L),
                                                                                             "bf62b50e-7610-41f2-b3cc-72c4ccd2cd4c");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("9489dfe9-fa64-4b0d-9c52-4ca5eaa60d3d",
                                                                                           new Date(1552477765740L),
                                                                                           "42cb47ff-f659-4bd3-9f31-78f4d8e338b8",
                                                                                           new Date(1552477767169L),
                                                                                           "324156eb-ff2d-4f30-88c2-684f26278226",
                                                                                           null,
                                                                                           new Date(1552477763917L),
                                                                                           "a516d3f3-d807-496a-9230-cadb580f4745");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("9489dfe9-fa64-4b0d-9c52-4ca5eaa60d3d",
                                                                                           new Date(1552477765740L),
                                                                                           "42cb47ff-f659-4bd3-9f31-78f4d8e338b8",
                                                                                           new Date(1552477767169L),
                                                                                           "324156eb-ff2d-4f30-88c2-684f26278226",
                                                                                           null,
                                                                                           new Date(1552477763917L),
                                                                                           "a516d3f3-d807-496a-9230-cadb580f4745");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("61436928-fa85-4407-93c8-badc644769ad",
                                                                                           new Date(1552477761646L),
                                                                                           "7451b749-d4ec-4254-82ce-ab58f6b509e2",
                                                                                           new Date(1552477764082L),
                                                                                           "1be06c93-bcb4-4b14-ac36-91cb731996eb",
                                                                                           null,
                                                                                           new Date(1552477766683L),
                                                                                           "05fd7d2e-6aca-4e80-ad7e-2ff796b0e87a");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
