// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("0cc4b51f-e9a0-4c40-8577-200cc51e79ab", false,
                                        "423b8e9e-51f5-40ed-8803-a44eae8e1e64", true,
                                        "6e161070-6e6c-4be5-aac3-4e7c116d1ebb");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("379eb372-e990-4a5f-a994-f0367cc49ec0", false,
                                        "53da370c-b9f9-4faa-bdb6-67d12afdc38e", false,
                                        "77469f45-1267-4b73-bcea-1a4121d4949a");
            Policy policy2 = new Policy("379eb372-e990-4a5f-a994-f0367cc49ec0", false,
                                        "53da370c-b9f9-4faa-bdb6-67d12afdc38e", false,
                                        "77469f45-1267-4b73-bcea-1a4121d4949a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("39d4c18d-3661-4bae-971e-8e31c956e141", false,
                                   "a9cd05ee-4329-4ae1-aea8-19cbbdb907d0", false,
                                   "95f90ec2-360d-4dda-8971-442227881737");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("c6a983ff-6c93-4df1-bc5b-38f818348e5a", true,
                                        "e6403796-76a9-4ffa-bf65-b0dcbb38ff30", false,
                                        "5573fb28-7850-43a6-9ea3-794bb8660e52");
            Policy policy2 = new Policy("c6a983ff-6c93-4df1-bc5b-38f818348e5a", true,
                                        "e6403796-76a9-4ffa-bf65-b0dcbb38ff30", false,
                                        "5573fb28-7850-43a6-9ea3-794bb8660e52");
            Policy policy3 = new Policy("8b5056e1-6a1d-4a64-83a6-d988af759422", true,
                                        "d6702aa9-30e9-4b44-bc0f-ab08764f14e0", false,
                                        "7a5a43d2-574d-4b51-b761-f3553283455a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
