// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("ab46c44c-dba7-4487-9fa8-33ccdfe20ffd",
                                                          "38bd466a-7869-4b93-a149-9e791dbdf051");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("aca55c57-4f54-4521-810c-4ed2a7ae169b",
                                                          "55364fc6-45ed-4e32-8818-e854dfb3b59f");
            LoginProfile loginprofile2 = new LoginProfile("aca55c57-4f54-4521-810c-4ed2a7ae169b",
                                                          "55364fc6-45ed-4e32-8818-e854dfb3b59f");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("f39be8fb-ac7e-4e77-97f1-abbef766cc15",
                                                     "7cfa575e-04ca-4e86-980e-efee59cb13dd");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("84f9532e-bcf2-4a72-8a63-fef3fd213458",
                                                          "8e31012a-2798-43fa-9b8a-cef6af7727a9");
            LoginProfile loginprofile2 = new LoginProfile("84f9532e-bcf2-4a72-8a63-fef3fd213458",
                                                          "8e31012a-2798-43fa-9b8a-cef6af7727a9");
            LoginProfile loginprofile3 = new LoginProfile("3778fcdf-fc52-4c68-9ea6-98774ce72772",
                                                          "1cc96759-02c1-4271-a170-892a6f60760d");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
