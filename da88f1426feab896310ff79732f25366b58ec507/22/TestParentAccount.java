// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("8e0a933c-0c3b-4905-9f59-871c92fdfc41",
                                                             "2d24054b-5b16-4415-9f78-8b59be7708f0",
                                                             "3156067f-1dd6-4ffc-acf1-1e63c862d673");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("152d16ca-9c61-449c-a215-667809f970bb",
                                                             "3df887ab-5ed8-427a-8c0d-d05583adb5c9",
                                                             "8e95fd11-e1f7-41b9-a4c6-b5a0835e7a98");
            ParentAccount parentaccount2 = new ParentAccount("152d16ca-9c61-449c-a215-667809f970bb",
                                                             "3df887ab-5ed8-427a-8c0d-d05583adb5c9",
                                                             "8e95fd11-e1f7-41b9-a4c6-b5a0835e7a98");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("e5167040-a07a-4e1a-b995-6959783db8fc",
                                                        "d0666318-3c56-4100-9258-80664850927c",
                                                        "da905787-ed2f-44e5-a6d8-545dac75ae8e");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("72c5d84c-0879-4a75-9545-f75f5ad0a441",
                                                             "e7d25da5-097a-495a-ad04-2b7a76dfadde",
                                                             "000abc49-4f2c-44d6-9932-c2a746562beb");
            ParentAccount parentaccount2 = new ParentAccount("72c5d84c-0879-4a75-9545-f75f5ad0a441",
                                                             "e7d25da5-097a-495a-ad04-2b7a76dfadde",
                                                             "000abc49-4f2c-44d6-9932-c2a746562beb");
            ParentAccount parentaccount3 = new ParentAccount("efdf922e-c4c4-457b-8d32-b8480aeb4611",
                                                             "0b1dbb8e-f95e-483d-baa1-1f34d6ae627f",
                                                             "7bdb3460-f87e-4b51-a75a-f0ab0bc5f34e");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
