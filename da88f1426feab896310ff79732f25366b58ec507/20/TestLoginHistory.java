// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1552477758116L),
                                                          "72e61df7-f2c8-4533-b6bd-61592add37e9", true,
                                                          "0aa3540f-d5b0-44ad-a024-84a14b750736");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1552477759665L),
                                                          "82792d5e-0dfe-4274-9d23-eb58c69eef3c", false,
                                                          "b0e99b65-2991-4e0d-90a0-568da71220c9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1552477759665L),
                                                          "82792d5e-0dfe-4274-9d23-eb58c69eef3c", false,
                                                          "b0e99b65-2991-4e0d-90a0-568da71220c9");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1552477766672L), "195d8b81-9fcf-493e-81d1-19f18976643f",
                                                     true, "31ccfc65-1541-4b2f-8a55-eaa00e43b84e");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1552477763081L),
                                                          "1a9bd561-40be-41be-82b8-33708ce134b8", true,
                                                          "2cc4142e-4429-48b5-9135-52e964d57c39");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1552477763081L),
                                                          "1a9bd561-40be-41be-82b8-33708ce134b8", true,
                                                          "2cc4142e-4429-48b5-9135-52e964d57c39");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1552477767107L),
                                                          "a2fcbadd-8a7a-4e85-9590-2e9f1cef0640", true,
                                                          "513047ec-d842-4774-bc9d-ddef96cce93f");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
