// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("fbe32c2eab87ea264bae1bf7a3e9d40c", new Date(1552477758428L), -120,
                                        "919a1c61-259b-4376-a9ad-97bdd5a079c0", "3b7e8f22-6ca4-4c1d-b505-95dc9f3ee0a9",
                                        -40, "86fabeff-c856-46a8-9ba6-639720278e8a",
                                        "07ee757b-cb3c-45fe-86d3-6a8cffcae5fe", ApiKeyStatus.getDefault(),
                                        new Date(1552477758868L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("790fd72c15fdd6eec36e3ac8f79de90c", new Date(1552477763094L), -29,
                                        "37bd890a-3d04-404e-bde7-de587d87dde7", "12f19387-febd-4370-ac7d-1b5aabcab3c7",
                                        83, "4a7dfb37-6155-471a-ae4f-7aaf15dd1936",
                                        "06905dd6-6152-44c5-a848-0901685d7e93", ApiKeyStatus.getDefault(),
                                        new Date(1552477763577L));
            ApiKey apikey2 = new ApiKey("790fd72c15fdd6eec36e3ac8f79de90c", new Date(1552477763094L), -29,
                                        "37bd890a-3d04-404e-bde7-de587d87dde7", "12f19387-febd-4370-ac7d-1b5aabcab3c7",
                                        83, "4a7dfb37-6155-471a-ae4f-7aaf15dd1936",
                                        "06905dd6-6152-44c5-a848-0901685d7e93", ApiKeyStatus.getDefault(),
                                        new Date(1552477763577L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("e9f3a512165f63d22214783de0353f29", new Date(1552477765051L), 103,
                                   "11fdeb84-18af-4927-b253-b89e6bd01e59", "6479406e-0543-4dda-abdf-f75e9e06d064", -49,
                                   "510c38ee-ba4c-4c17-903c-490328d4b327", "c4408605-7d2d-496e-b9a9-e58ac3ed3c87",
                                   ApiKeyStatus.getDefault(), new Date(1552477762791L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey(":54\u0005åž­N7åˆ™\u0005éˆ°,Z\u0007L?ç§˜\u0013_<K7444=â®¿è…Ÿ7Q577è??ãœ’\u001f7Z7ë?£ã¨…\u0018í†ˆ\u0010\u0002\u000bÞ?Lê†­I5\u0018,éµƒ.5í€‚5Z5N54)",
                                          new Date(1552477759792L), -34, "ab882904-9dc9-46c6-9c01-ad359e6c7a79",
                                          "3c18d886-3828-407d-b147-6604a0aa4ef5", 84, null,
                                          "2b1dc09a-5390-424e-b1f9-1e87d2ad2f6c", ApiKeyStatus.getDefault(),
                                          new Date(1552477757733L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("65cf25ddab117939668dc3e2aee63b9b", new Date(1552477758027L), 82,
                                        "ca1bd37c-848c-4242-b1d7-d31c015cd0ff", "45f0a444-6f02-4d99-964a-af8bfe417207",
                                        -124, "673b10d8-c27f-4977-82b4-05b2f679cd99",
                                        "94507339-b4bf-4b41-b1dc-81ef9e9652d5", ApiKeyStatus.getDefault(),
                                        new Date(1552477757149L));
            ApiKey apikey2 = new ApiKey("65cf25ddab117939668dc3e2aee63b9b", new Date(1552477758027L), 82,
                                        "ca1bd37c-848c-4242-b1d7-d31c015cd0ff", "45f0a444-6f02-4d99-964a-af8bfe417207",
                                        -124, "673b10d8-c27f-4977-82b4-05b2f679cd99",
                                        "94507339-b4bf-4b41-b1dc-81ef9e9652d5", ApiKeyStatus.getDefault(),
                                        new Date(1552477757149L));
            ApiKey apikey3 = new ApiKey("8d77f9b9ef1a3eadaa897da58a72d94a", new Date(1552477759266L), -124,
                                        "6586c809-535b-4f6d-8896-192ba5f0fb15", "f64c748d-6891-4a30-a85b-5dee404618ce",
                                        52, "b6083aec-7598-4815-b40c-c32803f14509",
                                        "4ab68dc6-c37d-4521-bc5f-f6c5dd441956", ApiKeyStatus.getDefault(),
                                        new Date(1552477762646L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
