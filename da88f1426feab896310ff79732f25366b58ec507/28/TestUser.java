// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("baa2950a-8dc9-459e-a563-d7e9b97c128b", null, "970413e9-d2a6-4c8b-a26d-bf7226b4c288",
                                  new Date(1552477762422L), -100, null, "fcd4008e-4782-49a3-8270-52daf9d8ee5e", true,
                                  "f191fb08-e001-4699-add4-7ca7f53bd46b", "985e1c82-b170-4737-95b7-2a3c0f8bb2b8", 20,
                                  null, null, true, "4418263d-0706-4cad-83cf-cd15d915ad1b", 95,
                                  "cfd9aa75-039b-48db-a04d-256d30402ede", UserStatus.getDefault(), false, null, false,
                                  new Date(1552477759508L), "fb9e40fd-e538-4f4c-9ed0-4da633f7343b");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("d4697bbe-826a-43fd-8d3f-d6df7e22fc07", null, "a3e0ee23-949b-49ee-8f89-15df12e9881b",
                                  new Date(1552477761830L), -14, null, "6c1f7300-02ca-46e3-a8fb-f7bd9c85a4d4", true,
                                  "ff02d4a1-96fd-4851-93b8-80c64ba8d59e", "ca7ed584-cbc2-4563-b471-eec3c888d54d", 51,
                                  null, null, false, "5e117a2f-d520-4a86-a13d-1fc9705c47c2", 10,
                                  "9e802b8d-15a1-4480-965c-322dbe5f8f94", UserStatus.getDefault(), false, null, false,
                                  new Date(1552477765719L), "bbbc124d-c135-4c07-a446-6649bd42f779");
            User user2 = new User("d4697bbe-826a-43fd-8d3f-d6df7e22fc07", null, "a3e0ee23-949b-49ee-8f89-15df12e9881b",
                                  new Date(1552477761830L), -14, null, "6c1f7300-02ca-46e3-a8fb-f7bd9c85a4d4", true,
                                  "ff02d4a1-96fd-4851-93b8-80c64ba8d59e", "ca7ed584-cbc2-4563-b471-eec3c888d54d", 51,
                                  null, null, false, "5e117a2f-d520-4a86-a13d-1fc9705c47c2", 10,
                                  "9e802b8d-15a1-4480-965c-322dbe5f8f94", UserStatus.getDefault(), false, null, false,
                                  new Date(1552477765719L), "bbbc124d-c135-4c07-a446-6649bd42f779");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("cddee8e3-f6ab-4c7c-86d5-0f730e0756aa", null, "0c53e104-3fab-46f2-94ef-0ac455dfffd7",
                             new Date(1552477761617L), -107, null, "276077eb-1f24-41a4-a18a-d6b53e056cec", false,
                             "e47538d1-a3ef-4bd9-af36-cb9422db2497", "b1385aae-6064-466e-a051-cb6b9710a8c9", 48, null,
                             null, false, "046513cf-0655-4c90-a470-44ed463de472", 44,
                             "65537a42-9daa-40e7-9667-2274bde18771", UserStatus.getDefault(), true, null, false,
                             new Date(1552477757852L), "6d63f141-c678-4adc-8e05-c485def60fd9");
        assertTrue(user.isValid());
        User userInvalid = new User("49db3789-4fad-4e50-8e04-ff002c98b8c8", null,
                                    "5ae4606d-e9b3-48c1-860e-9d6826bff38a", new Date(1552477764989L), -83, null, null,
                                    false, "692e46db-70e3-40d7-94b7-f2f4a3387953",
                                    "8d191d42-75db-4725-9003-3402972829b0", -52, null, null, true,
                                    "d519996c-32da-4319-b7f1-c42223e66e58", -26, "66fd6acb-343d-4910-8490-93ec935e1cf1",
                                    UserStatus.getDefault(), false, null, true, new Date(1552477758385L),
                                    "b6eb4427-3b48-445a-97a9-867a02bc4453");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("94b66361-c36c-402e-a3fa-7c82d3ad4113", null, "ad506742-a86d-47a6-8d24-4383425fec22",
                                  new Date(1552477761852L), -7, null, "1b5aa024-0676-4cef-954e-77c2384c6640", true,
                                  "9966a648-7672-47bd-897f-238db248dfca", "38b9b969-f3e6-4b8e-914d-ecb454a5efd0", -14,
                                  null, null, false, "6822fefa-9471-4acc-ad68-c630846db3d8", 68,
                                  "90781b52-dc30-430e-b1e6-0e8c18eab820", UserStatus.getDefault(), false, null, false,
                                  new Date(1552477764098L), "fb89b714-adf3-4d64-a28d-38aaa611e75b");
            User user2 = new User("94b66361-c36c-402e-a3fa-7c82d3ad4113", null, "ad506742-a86d-47a6-8d24-4383425fec22",
                                  new Date(1552477761852L), -7, null, "1b5aa024-0676-4cef-954e-77c2384c6640", true,
                                  "9966a648-7672-47bd-897f-238db248dfca", "38b9b969-f3e6-4b8e-914d-ecb454a5efd0", -14,
                                  null, null, false, "6822fefa-9471-4acc-ad68-c630846db3d8", 68,
                                  "90781b52-dc30-430e-b1e6-0e8c18eab820", UserStatus.getDefault(), false, null, false,
                                  new Date(1552477764098L), "fb89b714-adf3-4d64-a28d-38aaa611e75b");
            User user3 = new User("f728bd7f-4b25-4f88-9b65-673fd27c262d", null, "e21e24a0-a7bb-4eff-8abd-2a51fd17d08e",
                                  new Date(1552477763013L), -117, null, "ff737d4f-39c8-4290-859d-dc5c45042e17", true,
                                  "09326441-5e4a-487e-a22c-ea29ff901830", "4cdd060f-af21-4009-a84d-8d20a9550ab2", 123,
                                  null, null, false, "63ccf5f4-7f1f-4d82-8075-0fa55c419027", 63,
                                  "c1cc9f91-adb1-4bcc-933b-6087c6f1054c", UserStatus.getDefault(), false, null, false,
                                  new Date(1552477760696L), "7dce4f5e-0bf8-4209-8fcf-03d5c64eb12b");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
