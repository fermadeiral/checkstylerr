// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("9554eaaf-1caa-4756-ad33-845e3eeef299", false,
                                        "8c5116d3-d3d3-4df3-96da-7d29dc00e601", true,
                                        "1456752c-f831-4188-827a-3c7b8c8fb9ca");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("5cb6b8f9-7d55-40ce-9b48-c06405016f1a", true,
                                        "2fc2b2f1-a333-4859-8576-b65cf4ec1a0b", false,
                                        "d2a6b7b9-b5f6-46a1-93ae-edc816ec49cc");
            Policy policy2 = new Policy("5cb6b8f9-7d55-40ce-9b48-c06405016f1a", true,
                                        "2fc2b2f1-a333-4859-8576-b65cf4ec1a0b", false,
                                        "d2a6b7b9-b5f6-46a1-93ae-edc816ec49cc");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("e983a6ea-9be9-4f25-a778-7ff607df49b4", false,
                                   "72f8b404-0169-4774-96ea-15b9c24d0a5d", false,
                                   "ab1446cc-83d0-4da0-9d66-f924e532ccde");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("ed578439-e81c-47be-a391-fe444aed8140", false,
                                        "e647a79a-4558-4ad1-b2ae-da24a3c90185", false,
                                        "57502fdc-e5b5-418e-a7aa-f231d4da86b3");
            Policy policy2 = new Policy("ed578439-e81c-47be-a391-fe444aed8140", false,
                                        "e647a79a-4558-4ad1-b2ae-da24a3c90185", false,
                                        "57502fdc-e5b5-418e-a7aa-f231d4da86b3");
            Policy policy3 = new Policy("c825697b-09b1-4634-9892-c2520ef9e3c9", false,
                                        "7ebce0c1-33b4-41e2-ac63-fc5dba56dfec", false,
                                        "fe519ea1-0fc7-4102-9d49-d2a7dc34b8a3");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
