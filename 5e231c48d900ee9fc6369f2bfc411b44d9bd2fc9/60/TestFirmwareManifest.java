// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558093219924L), 65,
                                                                      "dd32a98c-528b-434b-8a9a-e022dab73cc7",
                                                                      "42a5f263-2198-432d-a219-244731e610b6",
                                                                      "67dac07a-71c2-455b-900e-077c64eed5c8",
                                                                      "e4dff856-624c-4749-bc62-732bbc20c133",
                                                                      "2e3589db-c286-48e5-a649-149d90278408",
                                                                      "76520a50-e963-4a37-9cc4-d613b8bee7ab",
                                                                      new Date(1558093224297L),
                                                                      new Date(1558093219225L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558093223894L), 12,
                                                                      "b815e04a-c993-4970-81e5-182aafd73572",
                                                                      "40587a60-4a7d-4665-98fa-09d33d4e80c2",
                                                                      "bc487b07-8029-4ad1-98c4-10e5e9a275ac",
                                                                      "b540aaa8-3f64-422d-a587-9edb04396edb",
                                                                      "6f3984ae-4032-4377-988f-3db7f49fe4a7",
                                                                      "931255ec-9e94-4274-ab62-ad528fd893e4",
                                                                      new Date(1558093225248L),
                                                                      new Date(1558093227671L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558093223894L), 12,
                                                                      "b815e04a-c993-4970-81e5-182aafd73572",
                                                                      "40587a60-4a7d-4665-98fa-09d33d4e80c2",
                                                                      "bc487b07-8029-4ad1-98c4-10e5e9a275ac",
                                                                      "b540aaa8-3f64-422d-a587-9edb04396edb",
                                                                      "6f3984ae-4032-4377-988f-3db7f49fe4a7",
                                                                      "931255ec-9e94-4274-ab62-ad528fd893e4",
                                                                      new Date(1558093225248L),
                                                                      new Date(1558093227671L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1558093219922L), 107,
                                                                 "d110956a-ece1-420d-8a4e-2a25bae07743",
                                                                 "4ecf504f-0655-45c3-9113-c2571b35049b",
                                                                 "53b01837-1376-41c8-968d-5de6958bd591",
                                                                 "b50648f2-287d-4019-9d68-1f070615bc80",
                                                                 "76abaf6f-60f1-4679-a536-29ef54dfb85d",
                                                                 "92c49f3f-8e3e-45f8-a016-ab697d7367c5",
                                                                 new Date(1558093224438L), new Date(1558093222825L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1558093225232L), 9,
                                                                        "18b94a70-bc21-4efd-9388-669aab9f3c07",
                                                                        "167d81c0-f62c-41b3-a87a-5c8d74f0e0782e5ee33f-1681-4645-8e0c-09d0d3d388b9db4d2b3a-ac29-4459-bd11-5bc75af55521b057279d-ca65-42bb-bb10-96f75ba754d2173f15d4-8376-42e4-a7af-b5ed1a2dec5ce5371342-d555-4630-8ec5-8dff482fff1419b35d81-9ae3-4e0b-a70b-68984e32f81ba934a983-2b6d-43ae-bd59-3983f4ce247f06a08faf-729e-4c8b-a5c8-2e60167ee84464ed3a64-711d-4057-8198-b3221984d357cfa4f4e3-3f0e-4b64-a4f2-bd13a65d1109ab4102d1-c1a0-4e37-ab2d-24fdeb2d97131b528ce0-15d0-4a57-82f9-e64cdb4946f320a7bb7e-71bb-4f4a-9b24-f90fbb9b996ff850203b-a342-4759-89fb-099e63e2470e42fdfa99-16d2-43d0-87ff-ab6b1faf766b45823cc1-192d-4129-b475-813de9ce6742b7a617b6-7fe6-4905-8c44-d949fbbdad60926ade19-21d8-47e7-a5e9-c76df212185435303327-d274-4d30-b017-9d6b450d3fabf889b6da-4625-438f-827a-120f03aeffff00fc61ab-a1be-497c-a931-1e07cc1c5fb2f9a670a0-a71b-4449-a5ff-b6862075da1ca68405ca-87a8-40d9-a01b-5a4e9c4d62bf0e81415c-b250-4e72-809d-af436ca23a23ac0a69e6-be53-47f2-a347-de006d352074a9547a22-cfc3-494a-8ca2-583355843a1b246263ce-8097-4034-ae1e-5653f1784302d1b9d7ba-5fc9-4f2e-8bf6-d2e9766c35761e1fcac4-001a-4a71-9bd4-16f5f45266b25f410af6-2fdd-490f-9ca9-509aeb800cd59f244773-f6e0-418c-9650-36493cabb3807d130248-3c34-462a-8652-99a259dbbfc52df9c6ed-fe5d-4f2a-b298-d312549eb894a038c7bf-ed29-4f82-84e8-5673dd26a730344a7ab8-2978-493b-9be8-8d7fcb8ac0e14c99d920-02a8-4214-a112-71df329b6650a3eafa22-7d2b-40be-b010-170a1168c32e36c42945-b6f8-4a66-aeba-4578784fb905939f5f42-7d8b-4748-8650-17839c9ee46588f51cc7-1a45-4817-a6f3-591a500cb0f0daef0e84-6cb7-4510-b439-2acc691e3ef08d59ddd7-6ed5-4dfc-8841-742adc8f30c4c755b3e0-25bf-47c9-bd73-186f721ad5bc0114d2c5-2660-4843-a06b-4731ce0c3520a5dcc43a-b107-43b8-8b51-b41ff851a7d8597de9b7-f471-4ed8-b717-6daa184c639e734cf343-f72c-4c5e-bb5f-776a12abda5fd23f65a1-b78f-4446-8a8d-b9d116f61a864a543b16-e1d4-4a21-bf11-f8a462df44f13efe2125-8afd-4ca1-8722-1fb60ff3eef443d3bf19-fbf0-4734-a4c7-e35c95f60521fca9ebdb-caa7-48e5-b000-8ac218e91331c1c6be8a-8f3c-4bc5-9887-167bc7260f556d065251-15e1-4f45-990c-b8e33da4168ae7579002-eb90-4534-a453-ca807daf56e9",
                                                                        "cf55b914-525e-434b-ba9d-d893d4eb6658",
                                                                        "081e5237-275b-4f5b-b14d-2937e02744ef",
                                                                        "87c431ac-b493-4cc9-9d5f-cf2fb94dd6b0",
                                                                        "e3e1c152-9a9d-4c97-bf55-c4c3615db737d0ac3756-7e73-4c2c-89dc-031992df4e3f680cd8ca-4b13-4547-8c9c-3bcd2513bf5df2af463d-dd80-4b86-b34f-f86d21a5b4eb",
                                                                        new Date(1558093224960L),
                                                                        new Date(1558093226476L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558093221666L), 34,
                                                                      "668d250a-962d-433f-9eb2-ca74101dda0f",
                                                                      "b9ec6d31-895c-45f1-8b9c-45f3268d83da",
                                                                      "47bba6c2-2c7a-48cb-8608-4e75c2778291",
                                                                      "583b7079-e494-4e1f-a86b-b971f9175e04",
                                                                      "88aba349-d2c8-4e10-bc38-966bcf026874",
                                                                      "4a6b9023-f41c-4938-99cd-bfd6e23109c7",
                                                                      new Date(1558093221191L),
                                                                      new Date(1558093228261L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558093221666L), 34,
                                                                      "668d250a-962d-433f-9eb2-ca74101dda0f",
                                                                      "b9ec6d31-895c-45f1-8b9c-45f3268d83da",
                                                                      "47bba6c2-2c7a-48cb-8608-4e75c2778291",
                                                                      "583b7079-e494-4e1f-a86b-b971f9175e04",
                                                                      "88aba349-d2c8-4e10-bc38-966bcf026874",
                                                                      "4a6b9023-f41c-4938-99cd-bfd6e23109c7",
                                                                      new Date(1558093221191L),
                                                                      new Date(1558093228261L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1558093220037L), 79,
                                                                      "7961a94f-8a83-45d3-8bdf-56ed0d090f87",
                                                                      "b6e24358-82e7-4204-ad6b-a954fd34775a",
                                                                      "63911881-4a73-46f0-bc1f-f5aeef76bee0",
                                                                      "e4b6a44f-e04d-40fa-bc97-61bf98863097",
                                                                      "268adf9c-7cd5-4089-9675-bac96e6cc6af",
                                                                      "9cbd3311-4c6c-47db-981a-3d2b49b04cd4",
                                                                      new Date(1558093225150L),
                                                                      new Date(1558093227502L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
