// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1570127625357L),
                                                                         "c53e1a6e-8a29-4439-886d-7c46158a2a54",
                                                                         "4236dc29-5168-4184-833b-4735671899fe",
                                                                         "b078fb73-091e-404e-af2a-79515353b0a9");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1570127625735L),
                                                                         "e3e8af02-a72d-4de0-a0ba-053a489d3f31",
                                                                         "62796de7-c6b4-43d1-812a-f60f93c3552f",
                                                                         "a46c0bff-8c75-4321-bccb-3cb2c5786eb2");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1570127625735L),
                                                                         "e3e8af02-a72d-4de0-a0ba-053a489d3f31",
                                                                         "62796de7-c6b4-43d1-812a-f60f93c3552f",
                                                                         "a46c0bff-8c75-4321-bccb-3cb2c5786eb2");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1570127626930L),
                                                                    "4b4442f6-9c49-4f52-b74d-23ee87e3d6bb",
                                                                    "dde34156-5c1f-4503-bcf7-f11f62e878a1",
                                                                    "473bdfba-8978-4eb4-88d2-50cf06e77e03");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1570127617594L),
                                                                         "d5b4492c-d769-45ea-bd4d-c2774d186de1",
                                                                         "2787d86a-9134-4606-acf6-edb6d7267403",
                                                                         "1d853eda-70da-42b3-9f22-4d53ac577e06");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1570127617594L),
                                                                         "d5b4492c-d769-45ea-bd4d-c2774d186de1",
                                                                         "2787d86a-9134-4606-acf6-edb6d7267403",
                                                                         "1d853eda-70da-42b3-9f22-4d53ac577e06");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1570127617894L),
                                                                         "ce1b9be5-6982-49c1-902f-648b1cb2969c",
                                                                         "a8e48a06-3a07-49e4-8393-cd5762863919",
                                                                         "c7b69b57-7ab7-4079-bf4b-5a762a7e4bfd");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
