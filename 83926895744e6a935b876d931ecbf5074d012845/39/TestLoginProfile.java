// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("eef28c47-3e6f-4821-8212-9a4278420189",
                                                          "f445b7f7-a81f-49b4-b086-f49cf22bb967");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("2cd61312-1287-4dd9-a846-8e101907ef87",
                                                          "8272b403-dddf-4dbb-8c14-657945e4e69e");
            LoginProfile loginprofile2 = new LoginProfile("2cd61312-1287-4dd9-a846-8e101907ef87",
                                                          "8272b403-dddf-4dbb-8c14-657945e4e69e");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("0eea704d-b06d-4c10-ae45-8c3b61d7f93b",
                                                     "8b8a89f3-a617-4f4b-aa1c-7350647dc5d0");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("b15a987f-3ca9-4d01-a5a4-e1fdc312381e",
                                                          "9446b175-6414-4b3a-a0ee-a574d2316e8f");
            LoginProfile loginprofile2 = new LoginProfile("b15a987f-3ca9-4d01-a5a4-e1fdc312381e",
                                                          "9446b175-6414-4b3a-a0ee-a574d2316e8f");
            LoginProfile loginprofile3 = new LoginProfile("190ad0c7-aff9-4947-9d08-70cb39fe8367",
                                                          "1c910080-cdff-40a6-9342-15fcdd52ca33");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
