// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           new Date(1559833509598L),
                                                                                           "c9580.ddd2b@9f5fa.fr",
                                                                                           new Date(1559833513481L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           null,
                                                                                           new Date(1559833511369L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           new Date(1559833513847L),
                                                                                           "0084f.594d3@ccc15.me",
                                                                                           new Date(1559833510015L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           null,
                                                                                           new Date(1559833511396L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           new Date(1559833513847L),
                                                                                           "0084f.594d3@ccc15.me",
                                                                                           new Date(1559833510015L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           null,
                                                                                           new Date(1559833511396L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                      new Date(1559833505646L),
                                                                                      "0e98d.f7e96@89ef8.me",
                                                                                      new Date(1559833511015L),
                                                                                      "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                      null, new Date(1559833512717L),
                                                                                      "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559833508688L),
                                                                                             null,
                                                                                             new Date(1559833511420L),
                                                                                             "13Z3@ëœ¼D,Rá¸ª3ä¼°ç¾™P3ë¢?-è™?31%à²ªDç—ªí—?_\u0003êª¯\u001fà«½1Wåª‰ç»¥[3<\u0007ì? æµ™11\u00061313#\u0016113_ä¤?C3é…©31æ¿˜U111",
                                                                                             null,
                                                                                             new Date(1559833513201L),
                                                                                             "13Z3@ëœ¼D,Rá¸ª3ä¼°ç¾™P3ë¢?-è™?31%à²ªDç—ªí—?_\u0003êª¯\u001fà«½1Wåª‰ç»¥[3<\u0007ì? æµ™11\u00061313#\u0016113_ä¤?C3é…©31æ¿˜U111");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           new Date(1559833512435L),
                                                                                           "b4e57.c5437@73487.me",
                                                                                           new Date(1559833507914L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           null,
                                                                                           new Date(1559833515080L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           new Date(1559833512435L),
                                                                                           "b4e57.c5437@73487.me",
                                                                                           new Date(1559833507914L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           null,
                                                                                           new Date(1559833515080L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           new Date(1559833512327L),
                                                                                           "7be19.b3c1a@4db83.fr",
                                                                                           new Date(1559833509209L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8",
                                                                                           null,
                                                                                           new Date(1559833510133L),
                                                                                           "50c4d27a9ffc08ee2efd6a9c2bd4a4d8");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
