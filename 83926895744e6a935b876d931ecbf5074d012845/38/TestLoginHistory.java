// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559833510395L),
                                                          "8377bdd4-cc2b-44ac-9ffe-e827951be2c6", true,
                                                          "597f0d86-44e4-4f8a-a739-013970436db4");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559833513754L),
                                                          "1f7c8ba3-9de7-4cc1-8c2c-3defedd2efd1", true,
                                                          "80888e2e-c1df-4f81-89a7-b62e0a922d64");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559833513754L),
                                                          "1f7c8ba3-9de7-4cc1-8c2c-3defedd2efd1", true,
                                                          "80888e2e-c1df-4f81-89a7-b62e0a922d64");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559833512424L), "baef2aa8-3e18-42fb-864b-6eca12b6fe5b",
                                                     false, "938a5e3e-d53c-462b-b7a2-053b6a5391fa");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559833514385L),
                                                          "e2d24090-48b0-4918-949e-0a484dadd8c1", false,
                                                          "d07e6b28-c9c7-42ea-a9b0-ee89437d560c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559833514385L),
                                                          "e2d24090-48b0-4918-949e-0a484dadd8c1", false,
                                                          "d07e6b28-c9c7-42ea-a9b0-ee89437d560c");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559833506953L),
                                                          "733dc43c-78f6-4acd-8925-3321917b4d02", false,
                                                          "899f0ad3-82ec-431e-82a3-aeeff180d422");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
