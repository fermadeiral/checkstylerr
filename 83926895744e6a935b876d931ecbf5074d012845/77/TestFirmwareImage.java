// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559833509746L),
                                                             "fab8252c-92f7-4cbb-9470-259da072f92b", -110,
                                                             "35c251bd-caf0-4a83-af58-ab4a27e71a61",
                                                             "14f0fe52-60ea-492b-be57-6a59042cbbcd",
                                                             "32304d11-e51b-4e34-a922-88ad02370c93",
                                                             "1d9ded44-5bcd-4d9a-a618-1cab2581f7dc",
                                                             new Date(1559833507888L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559833510749L),
                                                             "e0419f88-a8e2-4fe1-bb62-42582a63d6f0", 21,
                                                             "cace746b-a157-4ab6-8721-cafada79ed3e",
                                                             "e1e5d81a-cd5f-49ee-b46a-78fa679becf5",
                                                             "b17eac7c-e40b-4b28-98c5-3387998f0599",
                                                             "19c2adb3-49a2-4139-aa86-65ebe89029ab",
                                                             new Date(1559833513665L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559833510749L),
                                                             "e0419f88-a8e2-4fe1-bb62-42582a63d6f0", 21,
                                                             "cace746b-a157-4ab6-8721-cafada79ed3e",
                                                             "e1e5d81a-cd5f-49ee-b46a-78fa679becf5",
                                                             "b17eac7c-e40b-4b28-98c5-3387998f0599",
                                                             "19c2adb3-49a2-4139-aa86-65ebe89029ab",
                                                             new Date(1559833513665L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559833515241L),
                                                        "935dc02f-e923-40cc-ae41-e914970afae7", 114,
                                                        "a169909b-9e02-40c0-93cc-799c628328be",
                                                        "f30b4599-b884-4a28-b53d-51971cf86d38",
                                                        "5a8398c3-8774-45aa-9662-1ecc7b942948",
                                                        "561e2230-6835-455d-84ba-5e0aeeee4fa5",
                                                        new Date(1559833511588L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559833506805L),
                                                               "e89b74c1-ce45-4b88-92d0-6a85200b65b6", 69,
                                                               "caac46ba-0226-4171-a7f2-516113cbf741",
                                                               "f8f26863-4ce9-497f-aa49-8920ddc8e5487fd57d95-6ade-4cb6-9434-f567de4dc9a68960ea21-e0a1-471f-af29-d5697180a130b47b7c82-b31a-4e1e-9f85-44e261e110aff04e9b68-8565-4be8-9509-6d91bde252a1a551e16f-ce1a-48d3-986e-b381adbdb73c7098797f-b0a2-4d3a-9c49-d1a2490ba4bdcedd29e4-e3c0-43c9-b9ca-8cf1e62cc33f1a03579e-c844-4a13-82d9-c27c83e32f8c774a9dc2-a32a-406c-b63c-b4e1e8f1c4f48a904c4b-b02f-49c3-a403-90a2c9fc4d2c62ee2744-88fa-49f3-852c-4474c595a7b800b9cc96-84a8-4255-9ae7-dcee41cf203fe05d051e-0ac6-40e4-9659-9d7d4e258c5fae8f406b-ba8f-4067-98a7-d3e73dbb678414ecea28-6f02-431f-b3f0-44db439814e7e99db454-ffd9-4ebf-ba96-dc7a41a17de3996f4021-0b70-42f9-a23e-d42051659eca7cab97a4-f833-4974-ad72-3c1f9c8887852c023742-e3b6-4775-a735-91f01314f8983fc5a6b9-7c28-4176-8124-c84ad220160c623f0153-e8b2-4628-ab5e-687411b36ba46470482c-c797-4dbe-ad9d-6d4b7249a9ead3c60a26-b6a0-4e88-9f4a-785c130638cdf3993ed0-2566-4880-8102-b501040e360ad8d60120-1e58-4d68-9997-e2f05564cefdf11cc636-80e8-4175-bc92-44c647b6c2167a8b6239-f90b-4f6b-b937-886b0c56f944bb4d75ce-81f2-4b55-a312-7249237cff7163e01756-6a32-4bea-a40f-17c76361ec3f6d2ed5a7-59e2-4ca4-b62d-ca417babd5e32756fdd7-4251-4ea7-b647-784b8897c4633b339b84-7b77-439a-b805-825327498ffeb9da93e5-7058-4d63-8e45-5ddb68880c6029688403-34d2-4b8d-9c60-057c9b1ba4b1e5966b4c-fbf5-43e9-b967-0282fa4dfd00688f7072-9d0b-4007-a123-927fd972bebbfe51ae0a-7397-4c65-8ae1-c13a9f5ef2629340a698-1ea5-4bcd-ac44-360bfa0df073b4a61c04-6f82-4418-a899-a87f4d141bc5da30d1b5-ea5b-403e-85c4-583835c14a99ecd7d615-2dea-4d7e-bde1-275a1d46439ae8c5e419-4ffd-4af7-a779-0585964c368f577d213d-b7b4-45d7-adee-aba5796c4e8f259a6bdb-b6ef-4055-8370-3d1ec4bbbb2cca9cef7a-abc7-4d84-be31-d81f9c15aa8fef4140fe-2f27-4713-b18d-99d92052276da631f191-cff0-42e4-9be0-747435fead2b8b634c0b-2535-4e85-a701-f63e4a2c19d12698b201-a8b5-43ac-92ce-efd6a1eab2a47f9372fb-88ed-4e21-b90d-517a3a66239a031f90ff-95ce-42d1-9068-445b8610d959b23da1a9-1dfe-4a3a-8e05-2153b23e6f21332d55f2-810b-48a6-8efc-33acad05940ea34c9205-b56d-49e7-b498-9a5fb3a40e3828f529cc-ab60-4b5c-9242-093561cba23d",
                                                               "d5f23fe4-4859-4906-a473-7989895c1a93",
                                                               "7eb361e6-5876-4014-9b34-ca8df240618ed75049af-3e99-491d-86d1-33efbacb9a78ddabfc82-d198-41cf-a3fd-06831ad14e90ba5f4345-37c9-44e4-ba15-c6dbdbbac770",
                                                               new Date(1559833512659L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559833511761L),
                                                             "da007d61-642c-4138-9724-2f443899c9b9", -106,
                                                             "9d54ccff-3fdc-4e5a-a9d7-308447db7d13",
                                                             "c2603869-127a-4690-b04b-8d94c071d528",
                                                             "8906cf8f-c732-4d99-b951-b9f5f1631a01",
                                                             "af3ad6c8-c8cb-477a-af54-48a7de6a778d",
                                                             new Date(1559833511756L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559833511761L),
                                                             "da007d61-642c-4138-9724-2f443899c9b9", -106,
                                                             "9d54ccff-3fdc-4e5a-a9d7-308447db7d13",
                                                             "c2603869-127a-4690-b04b-8d94c071d528",
                                                             "8906cf8f-c732-4d99-b951-b9f5f1631a01",
                                                             "af3ad6c8-c8cb-477a-af54-48a7de6a778d",
                                                             new Date(1559833511756L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559833510830L),
                                                             "43b86bb0-c19d-4a2f-a4d3-7debab5584fe", 103,
                                                             "860c77fa-7840-486a-ad08-58f7f098d999",
                                                             "5359a6e9-3d98-4cf6-add8-9214118bf6e4",
                                                             "15736b46-1e9a-4377-8dc3-916740787fc0",
                                                             "727681af-ce36-49ae-a4b4-2c35addfea5e",
                                                             new Date(1559833508011L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
