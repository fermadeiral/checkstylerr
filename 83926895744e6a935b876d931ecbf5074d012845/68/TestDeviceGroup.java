// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559833512490L), null,
                                                       "b7b52fe6-20b2-4ab7-9271-b2bd7e86b268", 89,
                                                       "54f5a3e9-eb73-4806-8c69-dfea50088194",
                                                       "acb2f6f7-4e28-4927-9889-73adb00a8b96",
                                                       new Date(1559833508542L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559833508834L), null,
                                                       "cfdae2cd-58a1-4842-b54a-2bc4d939f8fb", 65,
                                                       "4d902e28-d887-4f32-9d82-942534f728b8",
                                                       "661bcb59-49ae-45bf-8ed5-b916209c03b0",
                                                       new Date(1559833508582L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559833508834L), null,
                                                       "cfdae2cd-58a1-4842-b54a-2bc4d939f8fb", 65,
                                                       "4d902e28-d887-4f32-9d82-942534f728b8",
                                                       "661bcb59-49ae-45bf-8ed5-b916209c03b0",
                                                       new Date(1559833508582L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1559833512295L), null,
                                                  "11c4eda5-9986-4714-8650-2e2c16b13f5e", 10,
                                                  "3339472d-eb7b-4ffa-9058-fb278f5cc5a2",
                                                  "9c65caed-3449-42c4-8687-febe2aad75dd", new Date(1559833507877L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1559833515226L), null,
                                                         "19d84e3e-281a-4782-85e7-12443b2d0556cec17050-732d-46f3-8fd6-92d108f0834be7195786-2f7d-4c84-88a2-f631a825aee22955e441-ea14-46a0-998a-d3974e087cd96ebe6e4b-92a0-4ca2-b830-7c3af02867fdc800c29a-8377-40bb-ae8e-78cf9647fff6edf76057-c866-4e1a-ada6-0c63b233f283153380a9-6076-41ef-9c31-b6ef190f359fd115a72c-2bb0-4f8a-8129-3b757266fbe035c437d0-6154-4540-bc57-033a45d3bb26c71bef32-1282-4e33-8cf2-7a9b763f1fb69cc81479-ce7f-42a9-9449-77cf6cd970dcc37a5235-6a8f-4f7d-a03d-4fed1e1838bc1c077472-ca61-4dea-a048-d7b7fc0f3df61b5bcefa-7455-4d02-87db-efe435cb87c991c72308-d912-4d26-9cf2-b0dfaa350fb26350224f-438d-48b0-b474-ed8af781de2fad090aa5-2160-481c-bc63-f6b19e24884384d68c82-b4d4-47a8-9ff2-fd46eb59a8eb73319064-dedd-4821-ab30-f437eb44351663eeaa81-a94d-4e5b-a141-f3d999089b66541355b3-625a-4116-aecc-95af3de2340315b2501a-653d-4c5e-a600-4038571a2cd29be84284-d212-45e1-9530-69a16896b02b9b6046f9-310e-41a1-a8c6-80d02fb81a735061b2c1-022d-4871-ba72-87b253e44c08be078d90-4054-499f-9792-9db409922262cde3c53c-9cfd-4a9e-a7c8-c51019d94338d78f58bb-4477-4dc0-9b1c-5ec1bbb91a946e7ece36-1b51-4a7f-805c-46578e0595f5176d431d-9e65-4293-9974-2d1f8cbc23439d760ee8-b80d-4928-971f-d1ea7654f5391b1dea97-1ff4-4dcd-a3ca-a94375c07ad3c07d102a-0d18-418d-bd6d-42ef4ab7d86087c962ba-9c89-451f-bea8-fa2de9870ac8d4301081-7f0b-4d88-8981-aebc1796afc95ff2813d-22e8-4a58-9b70-0201af745fab9b779168-cf86-4462-b5ee-b6e2b099c8d91b6d856a-1a1b-4d81-9a70-8c3d899edfe7cfed83dc-91c8-49b4-a3cb-da7449647c9c5a0b9718-3cba-47c2-b5cc-fff5724f3d5b3f0b9526-19f8-45cd-bdec-f10db4d52cc340886d77-303e-4c52-a041-7aa715e2dac552d933a5-6ee3-43e4-82e9-90d2df052551952adbc4-4f39-489b-a246-b89461d546bff46ab9d9-a84e-4c3d-a3c5-64c6194d7fcef39245c4-64e9-4a4f-80bd-e3c5a11520b6cdfd7e48-1935-44bf-9bee-2af7f4ac8cfe4ca10c54-8d99-4042-bde4-2b6a940faa699dfc7fe9-259a-492c-ab6b-6182207d578efbb7d902-3cef-46d2-b845-8c568cd16a494eec13f2-c5fc-48bf-8bda-ef4d70e1738693666098-0045-4f50-9eff-85b06373f8810a7ab308-4403-4233-9b57-1787655b5d64925a38d1-da11-49a4-9f98-e60033bb40ae1f7a5500-1f96-478b-89f6-2f87c37344bb",
                                                         -93, "0e417b7b-b602-406a-9558-682be5d2d785",
                                                         "a0adc2fb-8e25-4b45-9f13-17bbdc4cf3bcf1dad6da-e76b-4183-ba72-24a5ccb6a279021c132c-57e1-480f-8f0b-ba88c0e67fc3b6631442-a5f4-489f-8cc4-bbab2fb2fd98",
                                                         new Date(1559833511727L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1559833506753L), null,
                                                       "345638b8-acbb-4a90-a58e-12753487bdc3", 64,
                                                       "9140ba0f-4f50-4b99-95e3-75db5cb91f19",
                                                       "1fadaf1c-d8ed-49bc-a5cf-53d9e4a604d3",
                                                       new Date(1559833513648L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1559833506753L), null,
                                                       "345638b8-acbb-4a90-a58e-12753487bdc3", 64,
                                                       "9140ba0f-4f50-4b99-95e3-75db5cb91f19",
                                                       "1fadaf1c-d8ed-49bc-a5cf-53d9e4a604d3",
                                                       new Date(1559833513648L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1559833506370L), null,
                                                       "d5738c45-8485-4747-a405-6b418867022e", -108,
                                                       "841cb11a-84ce-4f5d-aac9-fd6dec4eaf4c",
                                                       "c30b882b-f42a-4e2d-99d0-f689a54f444e",
                                                       new Date(1559833508456L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
