// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559833508957L),
                                                                         "22be8db7-1e66-4ec2-b8f3-30539da7288e",
                                                                         "d6a114f1-baad-491c-9445-949dda238818",
                                                                         "c7a3eb29-37df-496d-bc92-951168b53aab");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559833508218L),
                                                                         "c8adf7da-936b-4b48-ac99-a783457a17b1",
                                                                         "9e4b0463-94ee-4c4f-b919-0eacdf7a5e1a",
                                                                         "998addbb-fa10-47a4-94de-48f308a004dc");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559833508218L),
                                                                         "c8adf7da-936b-4b48-ac99-a783457a17b1",
                                                                         "9e4b0463-94ee-4c4f-b919-0eacdf7a5e1a",
                                                                         "998addbb-fa10-47a4-94de-48f308a004dc");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559833515343L),
                                                                    "e1c839e6-47c5-4521-9564-a1b1b68c07fe",
                                                                    "f575bc10-1598-47a2-8993-fe42f7072784",
                                                                    "159d3145-85e1-4cc9-bdaf-aaacf618de60");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559833506932L),
                                                                         "0c74db15-18f5-4af9-92bd-30301514e5af",
                                                                         "8fe4d91d-f3bd-4691-8f03-387b1184adee",
                                                                         "6870d705-3899-4f4b-892d-203b1f490ca2");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559833506932L),
                                                                         "0c74db15-18f5-4af9-92bd-30301514e5af",
                                                                         "8fe4d91d-f3bd-4691-8f03-387b1184adee",
                                                                         "6870d705-3899-4f4b-892d-203b1f490ca2");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559833513572L),
                                                                         "0035214c-248b-4e43-b2db-ceb1d430837c",
                                                                         "c28b0992-cb31-4fdf-af2b-98d8b80ac036",
                                                                         "f6b8ad7c-58a0-471c-a3fd-6047d8a8eb9a");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
