// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559833514788L), null,
                                                          new Date(1559833510886L),
                                                          "015e6899-256b-49cc-bb35-a4152589a172",
                                                          "b64f773e-8827-45ec-a2bf-0c0ae6d67655",
                                                          "6bc4a3fe-25e0-4c67-a0ac-27e1c33fb24c",
                                                          "26197d2f-2b75-401b-8711-86514dfef5aa",
                                                          "b9f79c6a-3c16-44c2-8821-e217599c4ea2",
                                                          "56743617-0402-4a65-9258-76ae54f597b4", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559833512705L), null,
                                                          new Date(1559833509598L),
                                                          "83752e2f-1998-4b94-b5d7-4ddf9324c95a",
                                                          "4aa2ae47-f7f9-40d5-8e65-62b2f930cff3",
                                                          "ec0e9f53-6c78-4a87-9366-f0c91d7c040a",
                                                          "43aad68a-158d-44c7-9de1-b68735419a6d",
                                                          "1e4c818a-9832-47e4-9c9f-b83f12af8bb4",
                                                          "77e015a5-b679-48da-9310-c0fdddd96b58", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1559833512705L), null,
                                                          new Date(1559833509598L),
                                                          "83752e2f-1998-4b94-b5d7-4ddf9324c95a",
                                                          "4aa2ae47-f7f9-40d5-8e65-62b2f930cff3",
                                                          "ec0e9f53-6c78-4a87-9366-f0c91d7c040a",
                                                          "43aad68a-158d-44c7-9de1-b68735419a6d",
                                                          "1e4c818a-9832-47e4-9c9f-b83f12af8bb4",
                                                          "77e015a5-b679-48da-9310-c0fdddd96b58", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1559833511096L), null, new Date(1559833515120L),
                                                     "006eb9e5-add2-4437-b8fc-53620a22547e",
                                                     "a5c7bf72-7bbe-45da-b3b2-f40b3b882af9",
                                                     "f3aae041-c5a7-46bd-b05b-9af209fa47e0",
                                                     "c42dfa9c-7b28-4261-af62-6cd66f96a5a2",
                                                     "c1ee2398-9a80-4b44-8f7d-8d0ada303261",
                                                     "c0436acb-eae0-41d3-ad0f-67c1e2f9c909", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559833513107L), null,
                                                          new Date(1559833512811L),
                                                          "7b0a0bbc-f338-467c-a3f7-031dec667e96",
                                                          "bca43172-d093-4207-af43-1c37e5eb7b56",
                                                          "eed8e517-b39a-4c18-a0c6-5f56abbe4955",
                                                          "26f5b1ae-90ef-44fb-8652-070d55af057f",
                                                          "f8f92a72-9749-4f56-9d47-38a29e4d42a8",
                                                          "87686b94-de99-4b6e-b9c9-1a26f3b3d43e", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1559833513107L), null,
                                                          new Date(1559833512811L),
                                                          "7b0a0bbc-f338-467c-a3f7-031dec667e96",
                                                          "bca43172-d093-4207-af43-1c37e5eb7b56",
                                                          "eed8e517-b39a-4c18-a0c6-5f56abbe4955",
                                                          "26f5b1ae-90ef-44fb-8652-070d55af057f",
                                                          "f8f92a72-9749-4f56-9d47-38a29e4d42a8",
                                                          "87686b94-de99-4b6e-b9c9-1a26f3b3d43e", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1559833507506L), null,
                                                          new Date(1559833511414L),
                                                          "744feb35-b957-4fe2-bc45-849d0f362ba6",
                                                          "971ecfb0-8a23-4686-8760-7f29e914dd65",
                                                          "00cf9c8e-0085-4a3c-9d23-9cb0178cf63d",
                                                          "9ceccd0b-f2cf-4d09-8373-ef2918a20c57",
                                                          "b79e8c34-74e9-4f72-9943-eea5058b9aa4",
                                                          "9db6f502-64a8-478e-9cf1-00ed2bb55523", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
