// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559148831159L), -39,
                                                                      "f083b6e4-871f-4d84-a518-0b3990383af8",
                                                                      "c283f4b2-d860-4743-878e-a875d0f0d210",
                                                                      "61be05a7-62a7-45e2-a892-5a2aca57055c",
                                                                      "e453089f-7d1d-453d-a1aa-a28742158fa5",
                                                                      "e781d313-921d-411d-83ee-532211e0bc47",
                                                                      "28d563d4-937f-46d5-ad34-31bd5cae90d9",
                                                                      new Date(1559148832494L),
                                                                      new Date(1559148835321L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559148830238L), 91,
                                                                      "9bfd4dd6-5144-4cf1-85d3-51dd6e7fa9fa",
                                                                      "e52e1611-55e4-4a06-8e66-23075fb38ef3",
                                                                      "3bb4a7a8-1722-4de6-9fcc-3450c25e6e91",
                                                                      "1eeda123-e3a6-4548-b3ba-e6bb575e8c71",
                                                                      "6bc8fee6-c9ab-4333-b3ac-f381fb121eb9",
                                                                      "131189dc-eb41-4dd1-9eda-464e46ed0cfc",
                                                                      new Date(1559148830465L),
                                                                      new Date(1559148832922L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559148830238L), 91,
                                                                      "9bfd4dd6-5144-4cf1-85d3-51dd6e7fa9fa",
                                                                      "e52e1611-55e4-4a06-8e66-23075fb38ef3",
                                                                      "3bb4a7a8-1722-4de6-9fcc-3450c25e6e91",
                                                                      "1eeda123-e3a6-4548-b3ba-e6bb575e8c71",
                                                                      "6bc8fee6-c9ab-4333-b3ac-f381fb121eb9",
                                                                      "131189dc-eb41-4dd1-9eda-464e46ed0cfc",
                                                                      new Date(1559148830465L),
                                                                      new Date(1559148832922L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559148830023L), 19,
                                                                 "b5b93b34-ea23-4852-9ebe-a92ce1c8754d",
                                                                 "29cb991a-0d23-4c2e-b65f-83d6e65bc901",
                                                                 "4c36559f-9295-4112-9cb5-69bf2d91c9a7",
                                                                 "61d73f42-06ee-4e00-9737-0b252c2b7142",
                                                                 "0bdaa047-ce39-45aa-b89b-e11bf4287604",
                                                                 "f022e68e-170c-48f5-9cdd-d9e104618a64",
                                                                 new Date(1559148825782L), new Date(1559148833605L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559148833930L), -75,
                                                                        "d7cd547a-2adb-4635-b27d-2fc91b87c4b8",
                                                                        "1c445a9d-0d5a-4ca3-92a7-0eff73d67c8e43f4d62e-f5ee-4de3-b359-278f8c6ae78a4aeb0600-0516-4fb0-97f6-e01b7c7143c178be1951-6705-40ae-9f1d-1d3117ab5c1b8129b301-0a7b-4391-80d5-6e1ab8ebbb9323ca249b-37db-49f3-92de-cd8fedc9c59786f35aef-3156-4ee2-8cec-22b21a33d4795ea2ce6e-dc1f-4a57-85ca-e44cb4072aa32a44d12f-b02b-4e68-9d23-5202dc622dae6c939fbb-e0cd-4ea4-9257-181a49790727756dd197-40d0-4c0b-9c00-38423af24bf80290d88b-8748-4513-8a6a-82eab7a4ee3116e35e07-80da-4b1c-b2b7-f0e6e459013f97e8efab-cf5d-4ab0-97a2-814616a2faf93016882b-87f6-478a-ab4c-c69825e953c452dce066-f411-4843-bb5c-c5b2e84a221294496f91-613a-41c6-bcb4-cdc6cc5265aa2f7c67a2-66ad-4294-88b9-3ece810249868f6bfb5b-af44-4c35-9a57-764ddfac15d1077db4e9-3bad-4c24-ac78-139a093d8481fb1affdd-00c0-46f6-af24-88abdbded4644688b4ff-56ef-40db-89f0-bb6d36ca1c2de58eee0c-db35-4dd9-bbe6-41c8939e4ee67fb43b6b-9a2f-414d-8de0-206873523aa851c6f208-c6f9-4c85-b61f-cd2e5d234c09d59ec76e-1e5d-4559-85d8-3d8686801c6967720ae8-bdf7-431d-8e5c-043f3816ac7e08d89094-8ea9-4b56-a410-41444f4863a7ad6af42f-7f49-46a6-ad3e-cc641b841ce01ffb1b7d-e3fb-43bf-9995-49df447a99ff4af8864f-34c6-459d-8e07-560b956324d306e57ba9-901b-4548-94b8-03d9f97c6993cb31b368-9d15-4664-ac7a-9dcbd54e3a49ef4c3a56-b488-48bb-97f0-b8e2d62210e1e9686790-0778-4879-b6f5-1bffa9ad3fa7547d4ae7-25be-4b75-9455-9a1a9e7eed0552760061-aef9-40d1-8923-f6a4df552f6cf5384426-b619-448b-a47f-5b5ff00c380d4d097c1d-2735-4feb-9f82-1b84e2246ac21276e533-0c49-4bc8-b2f8-c93975347c44432920b9-83fb-4d02-9e12-7ff722f9487d815e999d-ce8f-4721-867c-67daca17977400f7b1c6-606a-4707-a07c-435ab5c7de7f7b8e1d80-8d86-4299-abb0-2fbf766167aff238ba6f-a7ed-462f-9e06-0da0848f25f235f99db5-5fd8-4f7e-b9d1-57a09de1693b76fa38fb-a836-4b55-81b5-f6b29c5669304426817e-49be-48fc-9743-9d117c5573171d103048-b41c-430e-bfde-049adceb2a150b1e5a12-5c05-4786-a2f9-8c66ca60aebe2c540e55-9abb-450e-bf16-75a75961c34369b3eabc-9aaa-473b-919f-f87df8c02735f50cc4e1-7d86-4c01-ae11-47d782bb11063e6b98da-cb38-4737-ba0f-98ba67164980382785aa-fc14-42e0-8f15-b7126d0a6ab68c77de44-13d7-4298-b6f7-afd08e807aed",
                                                                        "cecaea84-252b-456d-a455-39a9729d089a",
                                                                        "91eb1b5d-6780-4b97-ae07-8eb713188a41",
                                                                        "8bc9616d-f49e-43b2-95c7-0cc5d890d75f",
                                                                        "8766a517-27fe-4f0c-817f-7d6856544a3f5b23edef-e0a7-4e0d-a32d-b0499c191b373198d557-2f6b-40c0-aa4e-34c8290afb4072dc9306-2cf3-43a1-850a-6832c52ec4e9",
                                                                        new Date(1559148833003L),
                                                                        new Date(1559148827140L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559148826077L), -51,
                                                                      "1649c2b4-c43a-4807-902b-37144b9b1dcd",
                                                                      "7d9b0ba3-5fa5-4bea-9972-5445792c8114",
                                                                      "34154f3c-c143-4f84-909f-5c644a3c4396",
                                                                      "f8386a6c-be79-4206-9064-6629c438c681",
                                                                      "993753e7-1e8a-4632-a309-44544e91b1e6",
                                                                      "59a28859-7f53-4d5a-820e-e1a47c945e13",
                                                                      new Date(1559148826040L),
                                                                      new Date(1559148831963L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559148826077L), -51,
                                                                      "1649c2b4-c43a-4807-902b-37144b9b1dcd",
                                                                      "7d9b0ba3-5fa5-4bea-9972-5445792c8114",
                                                                      "34154f3c-c143-4f84-909f-5c644a3c4396",
                                                                      "f8386a6c-be79-4206-9064-6629c438c681",
                                                                      "993753e7-1e8a-4632-a309-44544e91b1e6",
                                                                      "59a28859-7f53-4d5a-820e-e1a47c945e13",
                                                                      new Date(1559148826040L),
                                                                      new Date(1559148831963L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559148835260L), -113,
                                                                      "511a290b-79e5-474b-b82e-c89416db2858",
                                                                      "97a1a15b-ac66-4107-ba52-bf324c0a08ea",
                                                                      "46a3cc24-e864-4155-9ca7-bf180455dce1",
                                                                      "e817bd64-8521-4667-a59c-763112751f50",
                                                                      "74ca2090-bd81-4060-9200-56b5178ca467",
                                                                      "2cccb020-2ce3-4871-a285-97871a2c4ad3",
                                                                      new Date(1559148833561L),
                                                                      new Date(1559148835317L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
