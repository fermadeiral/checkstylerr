// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                             "c1d18b5a-86b0-4b3a-839e-26f149641d6d",
                                                             new Date(1559148831669L),
                                                             "89feaa22-c11b-4a38-b3db-3beb0eb51c83",
                                                             "24b89b6b-8ca3-4cb9-932e-8116d75e8e38");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                             "cd42ee69-119e-4263-8cd9-12861b4ef8b0",
                                                             new Date(1559148832301L),
                                                             "d0e7c1c8-b0e4-4fe7-b70b-dafb3350dd0b",
                                                             "ba5de2d3-7af0-46cd-a617-af495136f663");
            ActiveSession activesession2 = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                             "cd42ee69-119e-4263-8cd9-12861b4ef8b0",
                                                             new Date(1559148832301L),
                                                             "d0e7c1c8-b0e4-4fe7-b70b-dafb3350dd0b",
                                                             "ba5de2d3-7af0-46cd-a617-af495136f663");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                        "cd137e5f-8611-48b3-b2cb-71795f63e8fe",
                                                        new Date(1559148834530L),
                                                        "394e9eae-ff17-4a9a-9b92-7ab032209677",
                                                        "96093eca-7c20-4680-80b3-a98ab1d5034d");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                             "30b3cf73-5aac-42c0-b2ac-beb3aff2c2e6",
                                                             new Date(1559148833534L),
                                                             "fda7b2e2-84f3-4e50-bb27-8d5cab3ce6f1",
                                                             "1c3e46ae-9555-4c72-ac55-b377cb0fe79d");
            ActiveSession activesession2 = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                             "30b3cf73-5aac-42c0-b2ac-beb3aff2c2e6",
                                                             new Date(1559148833534L),
                                                             "fda7b2e2-84f3-4e50-bb27-8d5cab3ce6f1",
                                                             "1c3e46ae-9555-4c72-ac55-b377cb0fe79d");
            ActiveSession activesession3 = new ActiveSession("ae7a4e096c0cf61badbe341c63408ff3",
                                                             "0af088f6-52bd-407e-99f8-ea3a6f2f9598",
                                                             new Date(1559148832458L),
                                                             "586bc015-2a4d-45c0-ad75-f481a99ba209",
                                                             "a9810f47-a384-41f0-9328-3e4c5594c8e4");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
