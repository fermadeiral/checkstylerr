// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559148835220L),
                                                                         "0a6a4087-b1dc-4284-909e-50f7276f7503",
                                                                         "03951a91-8be2-486b-911b-98f7391d06e5",
                                                                         "f6a89d45-ea80-4a8b-b65a-004bc99b09cf");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559148828411L),
                                                                         "ad174288-8e1c-444c-94dc-b98909dd8cb0",
                                                                         "add6035b-66ab-4880-bff1-195c86659cd8",
                                                                         "e2094467-9e98-4442-aaee-0cbafdfc4765");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559148828411L),
                                                                         "ad174288-8e1c-444c-94dc-b98909dd8cb0",
                                                                         "add6035b-66ab-4880-bff1-195c86659cd8",
                                                                         "e2094467-9e98-4442-aaee-0cbafdfc4765");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559148834093L),
                                                                    "441cd8d3-6345-43bf-91c8-5b1e01b9c635",
                                                                    "ac0519a5-3c8d-4e3b-9b77-b1fa264dc420",
                                                                    "a640feee-eae1-45bc-a3f4-5f7161f24657");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559148829705L),
                                                                         "5fee3302-e412-4301-8994-ac1b930e2888",
                                                                         "e29783e2-4d37-4a0f-92d0-934b20d0034b",
                                                                         "2d809982-0ce6-444b-b933-44dd3124f72c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559148829705L),
                                                                         "5fee3302-e412-4301-8994-ac1b930e2888",
                                                                         "e29783e2-4d37-4a0f-92d0-934b20d0034b",
                                                                         "2d809982-0ce6-444b-b933-44dd3124f72c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559148831257L),
                                                                         "6ae253d8-245b-449f-bb49-e0ddff9b3307",
                                                                         "8937895c-2ff1-48ca-ada0-d3b891c4a591",
                                                                         "815194a1-709d-47eb-a93b-9e4f7e587940");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
