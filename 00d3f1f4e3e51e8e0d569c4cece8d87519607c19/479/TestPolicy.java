// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("f1fe6eb0-3a44-476a-9d64-4c0d190866f3", false,
                                        "5c4331d7-6a13-4361-a6ef-d4bd52e7464f", true,
                                        "c65f6749-ffe4-4507-b7a5-c4ad11d494ba");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("bd11af51-92f5-46e3-be66-bb64d04c909a", true,
                                        "2eff9edb-22ab-4f9e-a663-c00b1b152bd3", true,
                                        "7747149e-21a8-4552-8bb4-dfa3bc91ed20");
            Policy policy2 = new Policy("bd11af51-92f5-46e3-be66-bb64d04c909a", true,
                                        "2eff9edb-22ab-4f9e-a663-c00b1b152bd3", true,
                                        "7747149e-21a8-4552-8bb4-dfa3bc91ed20");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("23c41a93-5ef6-4612-a87e-ab102dc3bdc0", false,
                                   "0973535b-2e2b-43ef-9efb-1cbff5d2da5c", true,
                                   "5166f937-45ea-448e-a38a-05a99a6be107");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("335c28ac-9a14-47f2-9fb7-827877b2eb37", true,
                                        "65bcc157-349f-461d-9671-7d8cb7dcd4d0", true,
                                        "68a3575e-addf-4483-bbaf-7bfbe5a9e50e");
            Policy policy2 = new Policy("335c28ac-9a14-47f2-9fb7-827877b2eb37", true,
                                        "65bcc157-349f-461d-9671-7d8cb7dcd4d0", true,
                                        "68a3575e-addf-4483-bbaf-7bfbe5a9e50e");
            Policy policy3 = new Policy("70f0a0eb-1027-4972-bbb1-94c31cdabf82", true,
                                        "19f63934-81a5-4cf5-82f0-f4a66b9a908d", true,
                                        "e52fc69f-ee7b-497b-888b-ea6ef85259d0");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
