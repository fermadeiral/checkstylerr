// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000754834L), -56,
                                        "96151c6cca95ea57eac2ba8ede214aed", "468cec8d-dc15-4ac3-8354-5b51a23f2c8b", 55,
                                        "70782e96-2483-4d16-82df-c10ced942224", "96151c6cca95ea57eac2ba8ede214aed",
                                        ApiKeyStatus.getDefault(), new Date(1558000748661L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000755431L), -82,
                                        "96151c6cca95ea57eac2ba8ede214aed", "8eed9735-825e-401c-841b-9051b93d1c9f", -55,
                                        "8f39228c-0be5-4784-a1cd-ee97f239cb3d", "96151c6cca95ea57eac2ba8ede214aed",
                                        ApiKeyStatus.getDefault(), new Date(1558000748469L));
            ApiKey apikey2 = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000755431L), -82,
                                        "96151c6cca95ea57eac2ba8ede214aed", "8eed9735-825e-401c-841b-9051b93d1c9f", -55,
                                        "8f39228c-0be5-4784-a1cd-ee97f239cb3d", "96151c6cca95ea57eac2ba8ede214aed",
                                        ApiKeyStatus.getDefault(), new Date(1558000748469L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000748594L), -75,
                                   "96151c6cca95ea57eac2ba8ede214aed", "363138af-ab37-4494-9ce3-ac4eff9e807f", -88,
                                   "013f80ee-0529-4373-963a-d341e790101e", "96151c6cca95ea57eac2ba8ede214aed",
                                   ApiKeyStatus.getDefault(), new Date(1558000746090L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("Z333î‚‘\u0007Q^D;3ìƒ?\u0010(ë±Ž0A333<3Zéµ…æ?µ3U3\u001d]3îŠ»3<3H3áŒƒ%3ä·¼3\u00053\u0001á‰–?`3\u0016(3ì¾™îˆ?3é¦›3S@Z3#3",
                                          new Date(1558000755401L), 67,
                                          "Z333î‚‘\u0007Q^D;3ìƒ?\u0010(ë±Ž0A333<3Zéµ…æ?µ3U3\u001d]3îŠ»3<3H3áŒƒ%3ä·¼3\u00053\u0001á‰–?`3\u0016(3ì¾™îˆ?3é¦›3S@Z3#3",
                                          "bdb30266-0514-4308-b00a-b9a1b7db24e9", 42, null,
                                          "Z333î‚‘\u0007Q^D;3ìƒ?\u0010(ë±Ž0A333<3Zéµ…æ?µ3U3\u001d]3îŠ»3<3H3áŒƒ%3ä·¼3\u00053\u0001á‰–?`3\u0016(3ì¾™îˆ?3é¦›3S@Z3#3",
                                          ApiKeyStatus.getDefault(), new Date(1558000746381L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000752130L), -25,
                                        "96151c6cca95ea57eac2ba8ede214aed", "531e8bf4-4f89-4a96-b3bc-49c7a743158f",
                                        -111, "0329ff04-fc28-457c-9910-7339e844dffe",
                                        "96151c6cca95ea57eac2ba8ede214aed", ApiKeyStatus.getDefault(),
                                        new Date(1558000751437L));
            ApiKey apikey2 = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000752130L), -25,
                                        "96151c6cca95ea57eac2ba8ede214aed", "531e8bf4-4f89-4a96-b3bc-49c7a743158f",
                                        -111, "0329ff04-fc28-457c-9910-7339e844dffe",
                                        "96151c6cca95ea57eac2ba8ede214aed", ApiKeyStatus.getDefault(),
                                        new Date(1558000751437L));
            ApiKey apikey3 = new ApiKey("96151c6cca95ea57eac2ba8ede214aed", new Date(1558000754342L), 90,
                                        "96151c6cca95ea57eac2ba8ede214aed", "81bb6d4f-f4d8-4353-a79a-cb53fa001d4e", -35,
                                        "03de0533-ed7a-4c41-9cd8-d7fcac46d0c7", "96151c6cca95ea57eac2ba8ede214aed",
                                        ApiKeyStatus.getDefault(), new Date(1558000754213L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
