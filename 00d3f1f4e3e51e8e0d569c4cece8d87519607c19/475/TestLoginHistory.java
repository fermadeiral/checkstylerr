// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558000751875L),
                                                          "06276fa0-4d16-40b0-ae19-2eeedd666327", true,
                                                          "d4a6f4e7-ee31-451b-90b5-3c03e4091a8d");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558000752806L),
                                                          "c28d99e3-994d-4541-a39a-66c7249a0724", false,
                                                          "05c1a5e1-a098-4a0f-9410-2067b0a84136");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558000752806L),
                                                          "c28d99e3-994d-4541-a39a-66c7249a0724", false,
                                                          "05c1a5e1-a098-4a0f-9410-2067b0a84136");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1558000747071L), "5db83643-48a7-418a-ba39-4cae87b7032c",
                                                     false, "7dba0669-d720-496b-96e4-37dbb60e0ef4");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558000752253L),
                                                          "72248922-30da-48c1-aefd-7ff74ed39f25", true,
                                                          "104e3c15-011b-461e-9451-7f905b75dc21");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558000752253L),
                                                          "72248922-30da-48c1-aefd-7ff74ed39f25", true,
                                                          "104e3c15-011b-461e-9451-7f905b75dc21");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1558000752670L),
                                                          "88fa8b48-ea4b-428a-8e2e-242e592d5f9e", true,
                                                          "9e6b0b17-10ed-4028-b042-3a7e219c87ce");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
