// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(58),
                                                                                        Long.valueOf(-103),
                                                                                        Order.getDefault(),
                                                                                        "855a8c8d-cfd4-4fdb-add0-5a2fe4aa44a1",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1561379520842L),
                                                                                                    new Date(1561379519112L),
                                                                                                    new Date(1561379516776L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1561379516177L),
                                                                                                       new Date(1561379513753L)))
                                                                        .lessThanUpdatedAt(new Date(1561379519653L))
                                                                        .greaterThanUpdatedAt(new Date(1561379514613L))
                                                                        .equalToName("f70b43e8-b1f0-4134-a328-6fd9d8a62d78")
                                                                        .notEqualToName("6fb5853d-2799-4e2f-b010-e471aebd8dad")
                                                                        .inNames(Arrays.asList("ecb3204c-6ab7-4c2e-9180-eb814ad872a5",
                                                                                               "1dd14b69-e144-4d16-95e0-43ba8b3cc998",
                                                                                               "f8d08d24-79a2-4d43-a4e2-2b7ec062270b",
                                                                                               "abfb4eea-ccdb-4361-9fe6-8322a243d840"))
                                                                        .notInNames(Arrays.asList("8cd85d1e-2a24-4189-8427-13a92f38f748"))
                                                                        .equalToDevicesCount(Integer.valueOf(-85))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-29))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(-57),
                                                                                                       Integer.valueOf(-100),
                                                                                                       Integer.valueOf(-8),
                                                                                                       Integer.valueOf(-64),
                                                                                                       Integer.valueOf(49),
                                                                                                       Integer.valueOf(19),
                                                                                                       Integer.valueOf(118)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-112),
                                                                                                          Integer.valueOf(-60)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-104))
                                                                        .greaterThanDevicesCount(Integer.valueOf(104))
                                                                        .inCreatedAts(Arrays.asList(new Date(1561379521011L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1561379519439L),
                                                                                                       new Date(1561379516363L),
                                                                                                       new Date(1561379519362L),
                                                                                                       new Date(1561379523363L),
                                                                                                       new Date(1561379515040L),
                                                                                                       new Date(1561379518017L),
                                                                                                       new Date(1561379519150L),
                                                                                                       new Date(1561379516473L)))
                                                                        .lessThanCreatedAt(new Date(1561379516924L))
                                                                        .greaterThanCreatedAt(new Date(1561379523237L))
                                                                        .equalToId("bc76cf53-7252-4a07-a29a-4eb78803745c")
                                                                        .notEqualToId("dea15c3e-38f4-4dc7-8d74-70cdc98f44c2")
                                                                        .inIds(Arrays.asList("236acb0a-f4ac-4424-8cbc-f72185832960",
                                                                                             "2ce0ca20-ce30-4dcf-b590-ed6d3476eb3e",
                                                                                             "d7d21ede-85e4-4ab7-8e60-6de98fe5c330",
                                                                                             "4a36d1b7-75f6-4150-9bc3-1840b6f308d8",
                                                                                             "815f263f-be4f-4d42-a3ac-3ca05c3a10f3",
                                                                                             "ca6b1157-120c-4688-a5f9-5d32e557becc",
                                                                                             "2483cfb0-2f85-4468-95dc-6eeaf5ec604b",
                                                                                             "e99e1ac1-7c6e-42c7-8aaa-f5de3a1179d3",
                                                                                             "185251a4-7e02-45b7-bfd3-352484972dc9"))
                                                                        .notInIds(Arrays.asList("cf04571a-3d9b-4853-85a0-ca50d2958251",
                                                                                                "05d5d073-d53e-4604-8f95-a615ad55696e",
                                                                                                "b7248860-508f-4ca4-9366-98aad37159bc",
                                                                                                "a3383749-25e9-44a9-88ca-20fcde5435e3",
                                                                                                "30633c9c-39db-47d5-84d4-bd1407d8845b"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561379520842L), new Date(1561379519112L), new Date(1561379516776L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561379516177L), new Date(1561379513753L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561379519653L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561379514613L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("f70b43e8-b1f0-4134-a328-6fd9d8a62d78",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("6fb5853d-2799-4e2f-b010-e471aebd8dad",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("ecb3204c-6ab7-4c2e-9180-eb814ad872a5", "1dd14b69-e144-4d16-95e0-43ba8b3cc998",
                                       "f8d08d24-79a2-4d43-a4e2-2b7ec062270b", "abfb4eea-ccdb-4361-9fe6-8322a243d840"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("8cd85d1e-2a24-4189-8427-13a92f38f748"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-85),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-29),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-57), Integer.valueOf(-100), Integer.valueOf(-8),
                                       Integer.valueOf(-64), Integer.valueOf(49), Integer.valueOf(19),
                                       Integer.valueOf(118)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-112), Integer.valueOf(-60)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-104),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(104),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561379521011L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561379519439L), new Date(1561379516363L), new Date(1561379519362L),
                                       new Date(1561379523363L), new Date(1561379515040L), new Date(1561379518017L),
                                       new Date(1561379519150L), new Date(1561379516473L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561379516924L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561379523237L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("bc76cf53-7252-4a07-a29a-4eb78803745c",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("dea15c3e-38f4-4dc7-8d74-70cdc98f44c2",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("236acb0a-f4ac-4424-8cbc-f72185832960", "2ce0ca20-ce30-4dcf-b590-ed6d3476eb3e",
                                       "d7d21ede-85e4-4ab7-8e60-6de98fe5c330", "4a36d1b7-75f6-4150-9bc3-1840b6f308d8",
                                       "815f263f-be4f-4d42-a3ac-3ca05c3a10f3", "ca6b1157-120c-4688-a5f9-5d32e557becc",
                                       "2483cfb0-2f85-4468-95dc-6eeaf5ec604b", "e99e1ac1-7c6e-42c7-8aaa-f5de3a1179d3",
                                       "185251a4-7e02-45b7-bfd3-352484972dc9"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("cf04571a-3d9b-4853-85a0-ca50d2958251", "05d5d073-d53e-4604-8f95-a615ad55696e",
                                       "b7248860-508f-4ca4-9366-98aad37159bc", "a3383749-25e9-44a9-88ca-20fcde5435e3",
                                       "30633c9c-39db-47d5-84d4-bd1407d8845b"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-13),
                                                                                        Long.valueOf(-93),
                                                                                        Order.getDefault(),
                                                                                        "fb88f7eb-f697-48b4-9f71-7472789becc6",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-13),
                                                                                        Long.valueOf(-93),
                                                                                        Order.getDefault(),
                                                                                        "fb88f7eb-f697-48b4-9f71-7472789becc6",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(57),
                                                                                        Long.valueOf(-50),
                                                                                        Order.getDefault(),
                                                                                        "133cdcde-9c6d-4d27-9bb8-36f57298c4b7",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(57),
                                                                                        Long.valueOf(-50),
                                                                                        Order.getDefault(),
                                                                                        "133cdcde-9c6d-4d27-9bb8-36f57298c4b7",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(5),
                                                                                        Long.valueOf(-19),
                                                                                        Order.getDefault(),
                                                                                        "922ccd79-8eaf-4b60-ab7a-8fff1d3b712b",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
