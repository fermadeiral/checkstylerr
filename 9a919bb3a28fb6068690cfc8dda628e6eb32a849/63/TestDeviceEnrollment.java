// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("4077f84a-43b6-49e9-a804-a89b9840affd",
                                                                      new Date(1561379516351L),
                                                                      new Date(1561379513584L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                      "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                      new Date(1561379515013L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("844a4a19-f107-45c2-aa05-c61f4809f1c9",
                                                                      new Date(1561379511918L),
                                                                      new Date(1561379512340L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                      "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                      new Date(1561379517677L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("844a4a19-f107-45c2-aa05-c61f4809f1c9",
                                                                      new Date(1561379511918L),
                                                                      new Date(1561379512340L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                      "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                      new Date(1561379517677L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("c4421f1d-7716-420e-82f7-5a40d1e9144d",
                                                                 new Date(1561379512817L), new Date(1561379516452L),
                                                                 "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                 "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                 new Date(1561379516735L),
                                                                 "wdtC0b8Refb6e367R84H7vES03qLomV9");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("27940255-efee-4808-87eb-fb9a57e7a6b2",
                                                                        new Date(1561379517497L),
                                                                        new Date(1561379516285L),
                                                                        "cU=pT1挓铕juccD5p>gs]䲺.sG2FuuFIuBAc:G2Q:QJ\bXPi1upnI]r5\u0003n?Bu葪Y5p[M",
                                                                        null, new Date(1561379512027L),
                                                                        "cU=pT1挓铕juccD5p>gs]䲺.sG2FuuFIuBAc:G2Q:QJ\bXPi1upnI]r5\u0003n?Bu葪Y5p[M");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("7a993107-64f2-41b4-8fb6-d11716b54e0a",
                                                                      new Date(1561379515494L),
                                                                      new Date(1561379512867L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                      "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                      new Date(1561379517448L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("7a993107-64f2-41b4-8fb6-d11716b54e0a",
                                                                      new Date(1561379515494L),
                                                                      new Date(1561379512867L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                      "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                      new Date(1561379517448L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("90726eef-23ca-4e0d-80d7-e63fa148af46",
                                                                      new Date(1561379514338L),
                                                                      new Date(1561379516659L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9",
                                                                      "A-58ZrTo25b18Q9lHXox:7f3HL6kPfP12h94tqel9WjBx0t2yHmJdM7korqyAiikf10hsm1O33hYWFLZpcBc0rnsG1K53i5hi",
                                                                      new Date(1561379518414L),
                                                                      "wdtC0b8Refb6e367R84H7vES03qLomV9");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
