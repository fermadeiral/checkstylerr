// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561032445590L),
                                                                         "c85ff501-53be-4a6c-91a0-6b218d90e669",
                                                                         "51233c89-b0cf-4b15-80c1-689add82bd5c",
                                                                         "2ab66404-339a-4ac1-81ce-c06543cf2f1c");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561032448352L),
                                                                         "fe8e99b8-0391-4686-b382-ba4045db69bf",
                                                                         "e5cbafd3-ba65-4547-8d44-3bd810ce5899",
                                                                         "c3815923-4d34-4315-aed5-0e273809d069");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561032448352L),
                                                                         "fe8e99b8-0391-4686-b382-ba4045db69bf",
                                                                         "e5cbafd3-ba65-4547-8d44-3bd810ce5899",
                                                                         "c3815923-4d34-4315-aed5-0e273809d069");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561032451403L),
                                                                    "9a634ebf-eeba-4203-b49e-56ec0605438e",
                                                                    "5733693a-40d1-4fc9-a33a-27117201a62f",
                                                                    "b406bde3-28b2-48a6-a8bb-0b1b993e86e2");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561032451662L),
                                                                         "f2b48c92-a62f-471d-806b-ea567e1a1e9c",
                                                                         "872f26ef-1e60-40cb-b944-2bed3bd664c8",
                                                                         "7b9a864f-5734-4586-9644-7d90960d66fd");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561032451662L),
                                                                         "f2b48c92-a62f-471d-806b-ea567e1a1e9c",
                                                                         "872f26ef-1e60-40cb-b944-2bed3bd664c8",
                                                                         "7b9a864f-5734-4586-9644-7d90960d66fd");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561032446655L),
                                                                         "44946c1e-0007-4068-b9b8-068ceafb5c27",
                                                                         "48d11689-2e6a-49b7-bfdb-cf9a858ac879",
                                                                         "4c26ed4a-4c8b-4228-a7bf-546bebc4e2b2");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
