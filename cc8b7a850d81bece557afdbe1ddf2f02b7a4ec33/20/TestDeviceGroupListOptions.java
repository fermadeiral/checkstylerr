// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(79),
                                                                                        Long.valueOf(56),
                                                                                        Order.getDefault(),
                                                                                        "10da6a1d-d7dd-439d-81cf-b836e7fc38f1",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1561032453197L),
                                                                                                    new Date(1561032450791L),
                                                                                                    new Date(1561032447084L),
                                                                                                    new Date(1561032445995L),
                                                                                                    new Date(1561032445328L),
                                                                                                    new Date(1561032452198L),
                                                                                                    new Date(1561032446729L),
                                                                                                    new Date(1561032454314L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1561032445226L),
                                                                                                       new Date(1561032446431L),
                                                                                                       new Date(1561032452988L),
                                                                                                       new Date(1561032448540L),
                                                                                                       new Date(1561032451257L),
                                                                                                       new Date(1561032444556L),
                                                                                                       new Date(1561032451292L),
                                                                                                       new Date(1561032451687L)))
                                                                        .lessThanUpdatedAt(new Date(1561032450834L))
                                                                        .greaterThanUpdatedAt(new Date(1561032448507L))
                                                                        .equalToName("3cb99062-29b1-4f21-af99-8fba2b936e13")
                                                                        .notEqualToName("06d3309b-c9df-4201-84db-ec3bfa10eb9a")
                                                                        .inNames(Arrays.asList("8776c96f-5fb4-4009-9faf-34563d3216ae",
                                                                                               "bf637d47-528d-4143-8215-d0610ba35159",
                                                                                               "48a5c0cd-eadb-4f1f-81c1-11bd9b932c66",
                                                                                               "08e3142b-a920-438d-8544-c789802196e0",
                                                                                               "51b6b294-2d44-483c-b294-7730f2fc5eb5",
                                                                                               "2ec7bb7c-d138-4654-bba2-939dc6dfd720"))
                                                                        .notInNames(Arrays.asList("3c4254de-5a6a-4e19-a2b8-365863bbb810",
                                                                                                  "62e7e91c-e7a8-460f-8cce-6678a9302f4f"))
                                                                        .equalToDevicesCount(Integer.valueOf(-54))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-105))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(90),
                                                                                                       Integer.valueOf(84)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(41),
                                                                                                          Integer.valueOf(23),
                                                                                                          Integer.valueOf(-28),
                                                                                                          Integer.valueOf(46),
                                                                                                          Integer.valueOf(-54),
                                                                                                          Integer.valueOf(-42),
                                                                                                          Integer.valueOf(-23),
                                                                                                          Integer.valueOf(-20),
                                                                                                          Integer.valueOf(16)))
                                                                        .lessThanDevicesCount(Integer.valueOf(25))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-122))
                                                                        .inCreatedAts(Arrays.asList(new Date(1561032450864L),
                                                                                                    new Date(1561032448063L),
                                                                                                    new Date(1561032445941L),
                                                                                                    new Date(1561032452826L),
                                                                                                    new Date(1561032449450L),
                                                                                                    new Date(1561032450204L),
                                                                                                    new Date(1561032450438L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1561032448312L),
                                                                                                       new Date(1561032453452L),
                                                                                                       new Date(1561032454266L),
                                                                                                       new Date(1561032449056L),
                                                                                                       new Date(1561032450714L),
                                                                                                       new Date(1561032445095L),
                                                                                                       new Date(1561032447820L)))
                                                                        .lessThanCreatedAt(new Date(1561032444900L))
                                                                        .greaterThanCreatedAt(new Date(1561032452132L))
                                                                        .equalToId("1dbb09e8-4136-41b8-ad6c-bfc866e99391")
                                                                        .notEqualToId("46e46fe0-6d3d-48e7-9717-f797e7061751")
                                                                        .inIds(Arrays.asList("34a03d9d-33ed-4fad-8dd6-305c2ba69770",
                                                                                             "f56df12e-f0a4-48f4-96b4-ece5b2293c6b",
                                                                                             "f6a450eb-d767-4fc4-9ab4-11c7293954a5",
                                                                                             "8886ec04-579e-439c-ae48-59b88410b994",
                                                                                             "f87e67c6-9a00-46ea-8046-4f2a96b684dd",
                                                                                             "c95987d8-b094-406d-b4d7-744c548ba8e2",
                                                                                             "326e5b8d-453a-4f3a-86e5-05320642da9a",
                                                                                             "4f3da136-1d35-40e6-aa8f-bda18e1ddc66",
                                                                                             "c419563b-2706-480a-bc79-667c5bcc05e3"))
                                                                        .notInIds(Arrays.asList("fba3c562-8ca6-4202-bb29-b3ad3313a51e",
                                                                                                "92cc77c7-a5a1-475c-999c-ab39db1e2ea1",
                                                                                                "4424d4b9-6a88-4614-9929-43ea21c7b194",
                                                                                                "08b5e9f3-ddb7-402a-9bb0-b7cda03bb18c",
                                                                                                "c2b60303-e8a5-4e8b-85ed-f3cae3053fe7"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561032453197L), new Date(1561032450791L), new Date(1561032447084L),
                                       new Date(1561032445995L), new Date(1561032445328L), new Date(1561032452198L),
                                       new Date(1561032446729L), new Date(1561032454314L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561032445226L), new Date(1561032446431L), new Date(1561032452988L),
                                       new Date(1561032448540L), new Date(1561032451257L), new Date(1561032444556L),
                                       new Date(1561032451292L), new Date(1561032451687L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561032450834L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561032448507L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("3cb99062-29b1-4f21-af99-8fba2b936e13",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("06d3309b-c9df-4201-84db-ec3bfa10eb9a",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("8776c96f-5fb4-4009-9faf-34563d3216ae", "bf637d47-528d-4143-8215-d0610ba35159",
                                       "48a5c0cd-eadb-4f1f-81c1-11bd9b932c66", "08e3142b-a920-438d-8544-c789802196e0",
                                       "51b6b294-2d44-483c-b294-7730f2fc5eb5", "2ec7bb7c-d138-4654-bba2-939dc6dfd720"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("3c4254de-5a6a-4e19-a2b8-365863bbb810", "62e7e91c-e7a8-460f-8cce-6678a9302f4f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-54),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-105),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(90), Integer.valueOf(84)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(41), Integer.valueOf(23), Integer.valueOf(-28),
                                       Integer.valueOf(46), Integer.valueOf(-54), Integer.valueOf(-42),
                                       Integer.valueOf(-23), Integer.valueOf(-20), Integer.valueOf(16)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(25),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-122),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561032450864L), new Date(1561032448063L), new Date(1561032445941L),
                                       new Date(1561032452826L), new Date(1561032449450L), new Date(1561032450204L),
                                       new Date(1561032450438L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561032448312L), new Date(1561032453452L), new Date(1561032454266L),
                                       new Date(1561032449056L), new Date(1561032450714L), new Date(1561032445095L),
                                       new Date(1561032447820L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561032444900L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561032452132L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("1dbb09e8-4136-41b8-ad6c-bfc866e99391",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("46e46fe0-6d3d-48e7-9717-f797e7061751",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("34a03d9d-33ed-4fad-8dd6-305c2ba69770", "f56df12e-f0a4-48f4-96b4-ece5b2293c6b",
                                       "f6a450eb-d767-4fc4-9ab4-11c7293954a5", "8886ec04-579e-439c-ae48-59b88410b994",
                                       "f87e67c6-9a00-46ea-8046-4f2a96b684dd", "c95987d8-b094-406d-b4d7-744c548ba8e2",
                                       "326e5b8d-453a-4f3a-86e5-05320642da9a", "4f3da136-1d35-40e6-aa8f-bda18e1ddc66",
                                       "c419563b-2706-480a-bc79-667c5bcc05e3"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("fba3c562-8ca6-4202-bb29-b3ad3313a51e", "92cc77c7-a5a1-475c-999c-ab39db1e2ea1",
                                       "4424d4b9-6a88-4614-9929-43ea21c7b194", "08b5e9f3-ddb7-402a-9bb0-b7cda03bb18c",
                                       "c2b60303-e8a5-4e8b-85ed-f3cae3053fe7"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-30),
                                                                                        Long.valueOf(-59),
                                                                                        Order.getDefault(),
                                                                                        "53608cea-8994-4673-865d-f2bfb4a2f8c2",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-30),
                                                                                        Long.valueOf(-59),
                                                                                        Order.getDefault(),
                                                                                        "53608cea-8994-4673-865d-f2bfb4a2f8c2",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(83),
                                                                                        Long.valueOf(-96),
                                                                                        Order.getDefault(),
                                                                                        "8f396c5a-b99e-4bc1-9952-e3b67d8e83ba",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(83),
                                                                                        Long.valueOf(-96),
                                                                                        Order.getDefault(),
                                                                                        "8f396c5a-b99e-4bc1-9952-e3b67d8e83ba",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-78),
                                                                                        Long.valueOf(-16),
                                                                                        Order.getDefault(),
                                                                                        "428ab628-29b5-4d40-82d3-e6a9182546a0",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
