// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("41d698f04a60eb2ed7403ce9ed0a25ad", new Date(1553592022056L), -19,
                                        "13f5ca90-1907-4816-a188-7332a5baaf79", "650fa9a6-32d2-4f00-bc78-d4b23f5276f7",
                                        -4, "f41c2e16-d711-4d4c-ae06-2808923e9a1d",
                                        "ff6cc22a-f6f6-4531-ad7a-00f9855d9d83", ApiKeyStatus.getDefault(),
                                        new Date(1553592030775L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("8fdbfdaffafd13e0112ba80a0cdbef7a", new Date(1553592031587L), 43,
                                        "3f084fca-25d6-4e2d-8602-f143c499df58", "36de2ad4-4c91-47a7-ba0f-6e58fbdee204",
                                        39, "90852738-bf6b-4e61-9745-ae5baa8f35a9",
                                        "03584af9-6573-4515-a0d9-e3a112a6d1e0", ApiKeyStatus.getDefault(),
                                        new Date(1553592031275L));
            ApiKey apikey2 = new ApiKey("8fdbfdaffafd13e0112ba80a0cdbef7a", new Date(1553592031587L), 43,
                                        "3f084fca-25d6-4e2d-8602-f143c499df58", "36de2ad4-4c91-47a7-ba0f-6e58fbdee204",
                                        39, "90852738-bf6b-4e61-9745-ae5baa8f35a9",
                                        "03584af9-6573-4515-a0d9-e3a112a6d1e0", ApiKeyStatus.getDefault(),
                                        new Date(1553592031275L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("ccae4ada83b9cdeb3fa0b7ee8887f3a8", new Date(1553592023009L), -13,
                                   "0b34620d-e308-4adf-a0d0-8c7253067a4b", "232c30c9-11c2-4e10-900c-c3d6442431c5", -93,
                                   "9b2490cb-d109-450d-9e02-dd89d917f23d", "786eedc1-79f8-4e3b-bd6f-b39275dd2e3f",
                                   ApiKeyStatus.getDefault(), new Date(1553592024830L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey(";\u00146á–½/226ã¶Š2V2C\u00102222\u0015H2\u0004Uæ¥?62T2\u0015å»‹2V2D!226ê´¸62í?¹6è”¥2@=2\u001b6\u001e2F62Uæ¨§$$\f62\u0019\u001c",
                                          new Date(1553592027502L), 99, "289fbff6-cb76-4d4a-b8f5-bdeff547f94c",
                                          "2025ccc7-cc84-4d92-aab0-213c3afec9b0", 114, null,
                                          "add2ef62-7984-43a2-8761-81296079c1b4", ApiKeyStatus.getDefault(),
                                          new Date(1553592024039L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("b84a1b9e3bff632979b439c83e2cee5f", new Date(1553592022239L), -40,
                                        "fc53ee1b-f2c4-47ef-8087-9031309b5294", "cb22909f-65d8-4a25-b6ad-c2804cd84dbd",
                                        -19, "e49c13ec-73e7-4dfa-8f50-9a10a0439d7b",
                                        "060315ca-442b-4009-a6be-1003cc643c21", ApiKeyStatus.getDefault(),
                                        new Date(1553592025592L));
            ApiKey apikey2 = new ApiKey("b84a1b9e3bff632979b439c83e2cee5f", new Date(1553592022239L), -40,
                                        "fc53ee1b-f2c4-47ef-8087-9031309b5294", "cb22909f-65d8-4a25-b6ad-c2804cd84dbd",
                                        -19, "e49c13ec-73e7-4dfa-8f50-9a10a0439d7b",
                                        "060315ca-442b-4009-a6be-1003cc643c21", ApiKeyStatus.getDefault(),
                                        new Date(1553592025592L));
            ApiKey apikey3 = new ApiKey("cf2f4fea25cddc1f3dc1eb13d85b22c3", new Date(1553592029381L), 2,
                                        "c2d4630d-8d9f-49bb-adc8-bf302d68929a", "3f31f250-2c5f-4601-b871-68bea9d45339",
                                        12, "8dd5b5c7-1965-413b-b544-e0813a4377dc",
                                        "1a74770d-85a9-4a33-887f-a4a81c709bed", ApiKeyStatus.getDefault(),
                                        new Date(1553592023746L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
