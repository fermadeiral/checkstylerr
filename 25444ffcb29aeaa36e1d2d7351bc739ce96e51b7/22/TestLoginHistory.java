// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553592026059L),
                                                          "22d5cc1b-ca21-4814-b1ec-eeca8fd730b5", true,
                                                          "afa2f470-aea6-4fd2-b8d0-faf54a197001");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553592027717L),
                                                          "7418067c-5570-4c59-83fc-4f0564f6f6a9", false,
                                                          "1acc4f94-1dbb-4adc-b3c1-c352e7eb1555");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553592027717L),
                                                          "7418067c-5570-4c59-83fc-4f0564f6f6a9", false,
                                                          "1acc4f94-1dbb-4adc-b3c1-c352e7eb1555");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553592026387L), "108ae96b-b9f6-4cb7-9b3d-661250715ab5",
                                                     true, "e718fbea-fc55-48d1-b694-ca0c0c203eb1");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553592028203L),
                                                          "c71ec631-2bae-42d5-8173-954a71c6a611", false,
                                                          "46a32e71-16f5-4817-a5c7-9fe8f2841f91");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553592028203L),
                                                          "c71ec631-2bae-42d5-8173-954a71c6a611", false,
                                                          "46a32e71-16f5-4817-a5c7-9fe8f2841f91");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553592022778L),
                                                          "fc2b9a70-588d-4984-bc2f-88bc553801d2", false,
                                                          "c2c086bd-2374-4014-934e-f8e2fca39222");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
