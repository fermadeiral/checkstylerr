// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4f555c52-cdec-4b77-bcef-1e4fe362b29c",
                                                                                           new Date(1553592030867L),
                                                                                           "4a560f42-2bc2-49dd-a564-631deb733007",
                                                                                           new Date(1553592028640L),
                                                                                           "3be5a791-b5d2-4db2-af22-eeabb4fec5a7",
                                                                                           null,
                                                                                           new Date(1553592029214L),
                                                                                           "102e7fd0-9b85-4d86-aa8c-1a0c646b8c96");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("8c737e6e-bec1-4c0a-895e-a768207a2d1e",
                                                                                           new Date(1553592031393L),
                                                                                           "b23c5d67-bf72-4468-9d32-e706ee0eaaff",
                                                                                           new Date(1553592032525L),
                                                                                           "5391cc02-e6d7-4e08-ac09-55401befaff6",
                                                                                           null,
                                                                                           new Date(1553592025440L),
                                                                                           "27ec7b66-4cec-4e44-ba8b-f4d47c7a4a48");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("8c737e6e-bec1-4c0a-895e-a768207a2d1e",
                                                                                           new Date(1553592031393L),
                                                                                           "b23c5d67-bf72-4468-9d32-e706ee0eaaff",
                                                                                           new Date(1553592032525L),
                                                                                           "5391cc02-e6d7-4e08-ac09-55401befaff6",
                                                                                           null,
                                                                                           new Date(1553592025440L),
                                                                                           "27ec7b66-4cec-4e44-ba8b-f4d47c7a4a48");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("895052cb-439b-47fa-bd4b-a393b2f305f7",
                                                                                      new Date(1553592025101L),
                                                                                      "8c9f52bb-7e08-4cfe-bc19-8ad055094dc4",
                                                                                      new Date(1553592023268L),
                                                                                      "5d9d97b0-8490-4665-9d34-d68f757e7014",
                                                                                      null, new Date(1553592026430L),
                                                                                      "ecc61c3e-49d5-4429-a27c-54adbfd58241");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553592027782L),
                                                                                             null,
                                                                                             new Date(1553592026503L),
                                                                                             "b9e0bc78-6db4-4cc0-a84c-e65a16d372d9",
                                                                                             null,
                                                                                             new Date(1553592026712L),
                                                                                             "c5b77e72-1fc3-46e7-b212-e39287ca71e2");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("bdad23d3-f836-4095-bf4b-f1efdf6c8a9b",
                                                                                           new Date(1553592031282L),
                                                                                           "b911a438-7841-4317-8aa7-4592e343ef1d",
                                                                                           new Date(1553592023204L),
                                                                                           "6d99118d-54f5-4153-8108-f6930c52acc4",
                                                                                           null,
                                                                                           new Date(1553592027267L),
                                                                                           "30a9eb9e-074c-465d-bef0-778eaee1a2b7");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("bdad23d3-f836-4095-bf4b-f1efdf6c8a9b",
                                                                                           new Date(1553592031282L),
                                                                                           "b911a438-7841-4317-8aa7-4592e343ef1d",
                                                                                           new Date(1553592023204L),
                                                                                           "6d99118d-54f5-4153-8108-f6930c52acc4",
                                                                                           null,
                                                                                           new Date(1553592027267L),
                                                                                           "30a9eb9e-074c-465d-bef0-778eaee1a2b7");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("209c0608-4057-4e31-96b3-fa0e4dbc8d04",
                                                                                           new Date(1553592025041L),
                                                                                           "d3915966-aa49-42a6-92a2-5743ac7c86a3",
                                                                                           new Date(1553592023803L),
                                                                                           "132d1fa2-7555-4b24-9bf2-75674932d73f",
                                                                                           null,
                                                                                           new Date(1553592025739L),
                                                                                           "b7ad0b18-9851-4a52-b655-84a1ca68c689");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
