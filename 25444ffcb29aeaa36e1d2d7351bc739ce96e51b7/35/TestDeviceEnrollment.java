// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("a4365546-ba20-4730-b7b5-d9e6dec2d75f",
                                                                      new Date(1553592022606L),
                                                                      new Date(1553592029968L),
                                                                      "uPxCu43Smrm9B175gU6Qy5010G1430V1",
                                                                      "A-71Bc176:MynH59Fi1mdN:usgyobkFUsWE5kcOvF3CaLTiOmMnE1EMHuAQA0ZmAa0iX3l7t0pf5594:0slwZHm5g:P88vH81",
                                                                      new Date(1553592024448L),
                                                                      "qYb6uwk2xW8DE3UmxO7a3v8l58ZWxpNw");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("0e733377-31af-4de6-98e5-f72274caec7d",
                                                                      new Date(1553592026685L),
                                                                      new Date(1553592025459L),
                                                                      "7twdzwMSggbOZ0RDn37qyRmQQC8KD52K",
                                                                      "A-Cxwm:4l7c0r:s34F9Y3xNnCFK4W:Z3W:5IUGQLu:rg06pE2R8uMIH168o:T78NzYs9prHm3kMr7EXpZ:03dI705bh107je5",
                                                                      new Date(1553592031995L),
                                                                      "60LWue7Ny64z6P8oQcMweq6xyyOwCm8Y");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("0e733377-31af-4de6-98e5-f72274caec7d",
                                                                      new Date(1553592026685L),
                                                                      new Date(1553592025459L),
                                                                      "7twdzwMSggbOZ0RDn37qyRmQQC8KD52K",
                                                                      "A-Cxwm:4l7c0r:s34F9Y3xNnCFK4W:Z3W:5IUGQLu:rg06pE2R8uMIH168o:T78NzYs9prHm3kMr7EXpZ:03dI705bh107je5",
                                                                      new Date(1553592031995L),
                                                                      "60LWue7Ny64z6P8oQcMweq6xyyOwCm8Y");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("4ffb045b-e5d7-46ff-8b5b-328f01b600fc",
                                                                 new Date(1553592029523L), new Date(1553592023907L),
                                                                 "SK28KRcSRL8gd7ZSwek61yNv1vISxv1L",
                                                                 "A-1RyAb2d39lhEI8dzZ06SgfR11CdquAy72X03ztJLXL0h61Yuk:JMEkXA8uDZwyi:El5IcwWj6:01:AQ1z5COaM76w71APDx",
                                                                 new Date(1553592024553L),
                                                                 "3d4pPdY0y78W9bjQjA3Vl9e809yl3V79");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("3e0d5089-c5cf-4a1d-94c0-2d692a0fc142",
                                                                        new Date(1553592027702L),
                                                                        new Date(1553592023011L),
                                                                        "7MSEKEN=7JBpN2K\u0018EJJsHvD72N2AVP7S\u0016R]rR_whMNi#NpEiMWvJ霛ASvwwKnSE\u0010",
                                                                        null, new Date(1553592027135L),
                                                                        "MGWXw/heqqetkDG5HDXb5唵on6GPD\u0006jbD\u000eviD3jvWeoebF\u0016XvPDMehn5_3朥@Iene");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("940187bf-2677-4937-ae6f-1c45738fa55e",
                                                                      new Date(1553592022777L),
                                                                      new Date(1553592031875L),
                                                                      "34u0ZQoYd9ZP80cvy958Gu9G9f51F3a0",
                                                                      "A-s5C2t3j22:EFK9G2KRPtMdMnDEqb5Ld5arV:4oVzoTXbHJLZAa4QIgl22q4xJoH:yLu8372FsfI08HUQqU:32VCSzeOrV35",
                                                                      new Date(1553592028191L),
                                                                      "5HZ9YMLkERG606E17fc6cyHQn92Agg8Y");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("940187bf-2677-4937-ae6f-1c45738fa55e",
                                                                      new Date(1553592022777L),
                                                                      new Date(1553592031875L),
                                                                      "34u0ZQoYd9ZP80cvy958Gu9G9f51F3a0",
                                                                      "A-s5C2t3j22:EFK9G2KRPtMdMnDEqb5Ld5arV:4oVzoTXbHJLZAa4QIgl22q4xJoH:yLu8372FsfI08HUQqU:32VCSzeOrV35",
                                                                      new Date(1553592028191L),
                                                                      "5HZ9YMLkERG606E17fc6cyHQn92Agg8Y");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("ca874353-9746-4bff-bb1d-4609480c28d1",
                                                                      new Date(1553592026650L),
                                                                      new Date(1553592030820L),
                                                                      "C7h0j625y90WL5X7R6WW5RtXtJb7MvDn",
                                                                      "A-U85W2W9p8SjZU4myPulFnPVfJwjWhponP7azEY2FKkTtFu33MKw:rF42IN7VdK22ss09NIGGVbAa1iPgR8Bm5gYDJiXT1y4",
                                                                      new Date(1553592025848L),
                                                                      "80c6GsgZ4y5d94JZQaR6g5581xt8jaDV");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
