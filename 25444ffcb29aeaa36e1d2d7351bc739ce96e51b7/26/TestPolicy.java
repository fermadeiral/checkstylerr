// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("4a8904a9-0b5d-49a8-bca8-a03a4c7d719c", true,
                                        "2a3e32e3-a84c-4a11-8643-2e4c38a8fa82", false,
                                        "d3b47eee-6c3a-48cd-8f07-cf7067066528");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("fc5257dc-fc6c-4318-bfa9-b126f7e5c956", false,
                                        "749d3c44-8447-4165-9366-aa8f174a66bf", false,
                                        "6ae5434b-4523-420b-83a5-83dd40b0592a");
            Policy policy2 = new Policy("fc5257dc-fc6c-4318-bfa9-b126f7e5c956", false,
                                        "749d3c44-8447-4165-9366-aa8f174a66bf", false,
                                        "6ae5434b-4523-420b-83a5-83dd40b0592a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("db1eb1e7-a190-45e0-b426-9c4e6d24a127", false,
                                   "c9eb6a00-b96e-468c-a144-e3d783d7de45", false,
                                   "0dcb0820-aed0-484d-be66-8172340880f9");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("b206b61e-f65b-4940-b637-08a1832e54b9", true,
                                        "5c2c1366-c44b-4712-997d-c9691e8c70b1", false,
                                        "d6a56a69-a6ac-47d6-ba3a-b5c88594f838");
            Policy policy2 = new Policy("b206b61e-f65b-4940-b637-08a1832e54b9", true,
                                        "5c2c1366-c44b-4712-997d-c9691e8c70b1", false,
                                        "d6a56a69-a6ac-47d6-ba3a-b5c88594f838");
            Policy policy3 = new Policy("4f5bda5c-4968-4749-8646-cd779d85671a", true,
                                        "f72b0bc4-c4be-49d8-a4ee-e2e2e78047d4", false,
                                        "dbc44794-b8f9-4b05-97db-d1496e6c57c5");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
