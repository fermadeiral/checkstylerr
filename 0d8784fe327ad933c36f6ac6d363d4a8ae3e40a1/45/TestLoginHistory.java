// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1565778997973L),
                                                          "48a33c7e-dc50-4ced-bd3f-f6407ba20358", false,
                                                          "e53bb984-9c8a-4c4c-bb87-9cfcbe9b2f8b");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1565778998518L),
                                                          "0c784f60-42b2-466c-8ff8-0f294feeacfc", false,
                                                          "8fd40feb-bc63-4b6c-b05b-ba801187cb08");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1565778998518L),
                                                          "0c784f60-42b2-466c-8ff8-0f294feeacfc", false,
                                                          "8fd40feb-bc63-4b6c-b05b-ba801187cb08");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1565778998672L), "c4482621-f303-4cf2-a389-77f3afbf4d0a",
                                                     false, "0a97de6a-6409-4433-8d07-85c7161b8371");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1565779005132L),
                                                          "6828b58f-9b13-4c79-bc0b-198f56b7efc8", false,
                                                          "46ad91bc-a7d3-4228-8457-9903b1659d78");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1565779005132L),
                                                          "6828b58f-9b13-4c79-bc0b-198f56b7efc8", false,
                                                          "46ad91bc-a7d3-4228-8457-9903b1659d78");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1565778998845L),
                                                          "652dff20-0ae5-4b16-9709-592905ac5991", false,
                                                          "0afd0541-3684-48ab-93ea-97d7391409e2");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
