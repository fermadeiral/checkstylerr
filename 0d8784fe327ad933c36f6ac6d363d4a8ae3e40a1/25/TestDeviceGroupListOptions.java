// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(57),
                                                                                        Long.valueOf(26),
                                                                                        Order.getDefault(),
                                                                                        "96593ebb-649c-4127-b7ac-db4c1642913f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1565779003287L),
                                                                                                    new Date(1565779004390L),
                                                                                                    new Date(1565779003246L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1565779003184L),
                                                                                                       new Date(1565779004414L),
                                                                                                       new Date(1565779003760L),
                                                                                                       new Date(1565779008054L)))
                                                                        .lessThanUpdatedAt(new Date(1565779006403L))
                                                                        .greaterThanUpdatedAt(new Date(1565779003468L))
                                                                        .equalToName("0a844333-54ee-4011-b7b4-594b8b32c04b")
                                                                        .notEqualToName("5cb13e98-fec5-4852-9887-c922464f1d9c")
                                                                        .inNames(Arrays.asList("0008e4d6-b013-40f7-98db-ac826a9d9dca"))
                                                                        .notInNames(Arrays.asList("8e08b2d9-0300-4fc4-a964-696d5707f617",
                                                                                                  "300654ff-976c-4bcc-8e67-1d35b765358f",
                                                                                                  "916386cb-8f68-4645-b44f-70deb040fc98",
                                                                                                  "f49b4c14-5f62-4bb5-a6fc-417dc48b79f4",
                                                                                                  "62919c8f-2f05-429f-9efc-51374eca7392",
                                                                                                  "64f2baab-04f4-4a3c-b874-4bc081493f5a"))
                                                                        .equalToDevicesCount(Integer.valueOf(52))
                                                                        .notEqualToDevicesCount(Integer.valueOf(29))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(-106),
                                                                                                       Integer.valueOf(91),
                                                                                                       Integer.valueOf(-34),
                                                                                                       Integer.valueOf(70),
                                                                                                       Integer.valueOf(4),
                                                                                                       Integer.valueOf(-9),
                                                                                                       Integer.valueOf(-94),
                                                                                                       Integer.valueOf(116)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(93),
                                                                                                          Integer.valueOf(48),
                                                                                                          Integer.valueOf(21)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-47))
                                                                        .greaterThanDevicesCount(Integer.valueOf(120))
                                                                        .inCreatedAts(Arrays.asList(new Date(1565779002551L),
                                                                                                    new Date(1565779002005L),
                                                                                                    new Date(1565779003274L),
                                                                                                    new Date(1565779004351L),
                                                                                                    new Date(1565779006815L),
                                                                                                    new Date(1565779008529L),
                                                                                                    new Date(1565779000335L),
                                                                                                    new Date(1565779005620L),
                                                                                                    new Date(1565779007884L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1565779000608L),
                                                                                                       new Date(1565779007438L),
                                                                                                       new Date(1565779006968L),
                                                                                                       new Date(1565778999284L),
                                                                                                       new Date(1565779005234L),
                                                                                                       new Date(1565779000146L),
                                                                                                       new Date(1565779004957L),
                                                                                                       new Date(1565778999958L)))
                                                                        .lessThanCreatedAt(new Date(1565779000569L))
                                                                        .greaterThanCreatedAt(new Date(1565779006956L))
                                                                        .equalToId("8478e071-f226-4d31-b451-3bb084da1d95")
                                                                        .notEqualToId("c6c92538-dc5f-4608-b552-fe19fa3aa0c8")
                                                                        .inIds(Arrays.asList("a97144e5-ac45-4e84-a545-0ded76a5e1f3"))
                                                                        .notInIds(Arrays.asList("a8453446-2df1-41ff-b540-2361205ed02e",
                                                                                                "16cc894b-f761-4118-bfad-57a856b81f17",
                                                                                                "687b0951-5687-4e3d-acb4-45fb32a5a9d6",
                                                                                                "f265ba87-c645-46ae-9210-216b3701dd37"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565779003287L), new Date(1565779004390L), new Date(1565779003246L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565779003184L), new Date(1565779004414L), new Date(1565779003760L),
                                       new Date(1565779008054L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1565779006403L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1565779003468L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("0a844333-54ee-4011-b7b4-594b8b32c04b",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("5cb13e98-fec5-4852-9887-c922464f1d9c",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("0008e4d6-b013-40f7-98db-ac826a9d9dca"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("8e08b2d9-0300-4fc4-a964-696d5707f617", "300654ff-976c-4bcc-8e67-1d35b765358f",
                                       "916386cb-8f68-4645-b44f-70deb040fc98", "f49b4c14-5f62-4bb5-a6fc-417dc48b79f4",
                                       "62919c8f-2f05-429f-9efc-51374eca7392", "64f2baab-04f4-4a3c-b874-4bc081493f5a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(52),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(29),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-106), Integer.valueOf(91), Integer.valueOf(-34),
                                       Integer.valueOf(70), Integer.valueOf(4), Integer.valueOf(-9),
                                       Integer.valueOf(-94), Integer.valueOf(116)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(93), Integer.valueOf(48), Integer.valueOf(21)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-47),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(120),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565779002551L), new Date(1565779002005L), new Date(1565779003274L),
                                       new Date(1565779004351L), new Date(1565779006815L), new Date(1565779008529L),
                                       new Date(1565779000335L), new Date(1565779005620L), new Date(1565779007884L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1565779000608L), new Date(1565779007438L), new Date(1565779006968L),
                                       new Date(1565778999284L), new Date(1565779005234L), new Date(1565779000146L),
                                       new Date(1565779004957L), new Date(1565778999958L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1565779000569L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1565779006956L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("8478e071-f226-4d31-b451-3bb084da1d95",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("c6c92538-dc5f-4608-b552-fe19fa3aa0c8",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("a97144e5-ac45-4e84-a545-0ded76a5e1f3"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("a8453446-2df1-41ff-b540-2361205ed02e", "16cc894b-f761-4118-bfad-57a856b81f17",
                                       "687b0951-5687-4e3d-acb4-45fb32a5a9d6", "f265ba87-c645-46ae-9210-216b3701dd37"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-31),
                                                                                        Long.valueOf(-58),
                                                                                        Order.getDefault(),
                                                                                        "9082ac2c-ee73-4d1c-bb2c-0e6faf89a341",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-31),
                                                                                        Long.valueOf(-58),
                                                                                        Order.getDefault(),
                                                                                        "9082ac2c-ee73-4d1c-bb2c-0e6faf89a341",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-83),
                                                                                        Long.valueOf(28),
                                                                                        Order.getDefault(),
                                                                                        "45646033-a7a4-4f9b-a40e-c4a4313ccc15",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-83),
                                                                                        Long.valueOf(28),
                                                                                        Order.getDefault(),
                                                                                        "45646033-a7a4-4f9b-a40e-c4a4313ccc15",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(111),
                                                                                        Long.valueOf(-13),
                                                                                        Order.getDefault(),
                                                                                        "7562426b-f778-4186-bd79-dc064cfae687",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
