// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1565779000583L),
                                                                         "ad584608-0396-4d10-99ac-6535e4e60053",
                                                                         "3fdd8322-133f-49c1-acba-de361ffb52df",
                                                                         "51e162a5-7051-46cd-a720-c1243e14766d");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1565779005995L),
                                                                         "7cbf8012-724b-4556-b095-9ef1607f112b",
                                                                         "e6377740-ee64-4fca-95af-49be7c2aec06",
                                                                         "20cdd7a4-6a87-46b5-9b8f-bdaafc96d972");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1565779005995L),
                                                                         "7cbf8012-724b-4556-b095-9ef1607f112b",
                                                                         "e6377740-ee64-4fca-95af-49be7c2aec06",
                                                                         "20cdd7a4-6a87-46b5-9b8f-bdaafc96d972");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1565778998160L),
                                                                    "8505c327-82a3-4b71-8bc9-812ca70bf513",
                                                                    "ac4e54c5-b752-48df-b2b6-49dc680425b0",
                                                                    "8d17f528-ec86-4421-bf6d-6c0830bbeab1");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1565779004072L),
                                                                         "84b5b144-c4f1-46b8-a89e-95e473fe26a4",
                                                                         "0e76b93b-fef5-4929-8fba-5edc48beb3f5",
                                                                         "5bbe819c-243d-4662-aa22-4ffcf50eb32d");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1565779004072L),
                                                                         "84b5b144-c4f1-46b8-a89e-95e473fe26a4",
                                                                         "0e76b93b-fef5-4929-8fba-5edc48beb3f5",
                                                                         "5bbe819c-243d-4662-aa22-4ffcf50eb32d");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1565779000948L),
                                                                         "ee70404d-96a4-4acc-91b2-6aee7f50886e",
                                                                         "edb8861d-a232-4c2c-bead-720fa708bf69",
                                                                         "b32b1725-b278-482d-b84e-4452834fb468");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
