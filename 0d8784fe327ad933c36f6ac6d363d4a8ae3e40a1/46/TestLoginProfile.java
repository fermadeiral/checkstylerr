// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("934798a9-475a-466e-8e73-823df4893449",
                                                          "705c09a6-7432-4d70-93cc-cb96fe75fb18");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("fa64ea06-85b4-4637-8420-3174e7c345ca",
                                                          "52a6a966-8d43-43b6-94dd-a5c777f65407");
            LoginProfile loginprofile2 = new LoginProfile("fa64ea06-85b4-4637-8420-3174e7c345ca",
                                                          "52a6a966-8d43-43b6-94dd-a5c777f65407");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("7ae1e721-9a39-4a94-8821-b9ebe229d973",
                                                     "74dbb068-cb58-4ecb-96a7-147952960be2");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("181c3a4a-60d2-48a2-9cf6-0c51a629925d",
                                                          "855f790e-f641-4c8b-af3f-4eaa2a453c9a");
            LoginProfile loginprofile2 = new LoginProfile("181c3a4a-60d2-48a2-9cf6-0c51a629925d",
                                                          "855f790e-f641-4c8b-af3f-4eaa2a453c9a");
            LoginProfile loginprofile3 = new LoginProfile("f70985e2-7c7f-4541-b808-4ff2b0528698",
                                                          "e268d02d-d5b7-4683-a2b0-67345a3e2932");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
