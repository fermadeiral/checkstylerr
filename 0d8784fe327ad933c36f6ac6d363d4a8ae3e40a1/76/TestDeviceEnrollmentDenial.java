// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        new Date(1565778998003L),
                                                                                        "c904459c-2ac1-45e3-84ec-be3112245846",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        new Date(1565778999612L),
                                                                                        "e7e3a13b-d978-4ea1-9a00-5f83d6bef629",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        new Date(1565778999612L),
                                                                                        "e7e3a13b-d978-4ea1-9a00-5f83d6bef629",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                   new Date(1565779006351L),
                                                                                   "f1262c37-4df6-40cd-82c6-643b09a229b5",
                                                                                   "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                   "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("5\u001c2\\\\៿:363A*쬽X5দ﬋\u001b惼56Q53?^265\u001026 2\u0014663\u001a\u001852N$$Y555\u0011闊525X6㢬2护2/\u00036?]",
                                                                                          new Date(1565779004033L),
                                                                                          "7a502c10-526e-412f-9030-05c89f03d1d4",
                                                                                          "5\u001c2\\\\៿:363A*쬽X5দ﬋\u001b惼56Q53?^265\u001026 2\u0014663\u001a\u001852N$$Y555\u0011闊525X6㢬2护2/\u00036?]",
                                                                                          "5\u001c2\\\\៿:363A*쬽X5দ﬋\u001b惼56Q53?^265\u001026 2\u0014663\u001a\u001852N$$Y555\u0011闊525X6㢬2护2/\u00036?]");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        new Date(1565779004036L),
                                                                                        "0638ba70-c7ab-464e-806a-7300476a3f4c",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        new Date(1565779004036L),
                                                                                        "0638ba70-c7ab-464e-806a-7300476a3f4c",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        new Date(1565779005123L),
                                                                                        "255fc730-76a2-4817-809d-fab8c492e8c2",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                                                        "fe0cdebdf4aaf1b7e7a0ef94984be8bf");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
