// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1565779003455L), -81,
                                                                      "65af9d4a-6e43-472f-8a85-3939d2ba6d91",
                                                                      "ddc7a3f5-f2af-4bc1-9301-9f4eb0aefe46",
                                                                      "e7266ffe-a48d-493b-98a6-10bb12744c68",
                                                                      "042ef773-673f-448c-9cc8-93ca658b8d20",
                                                                      "fb266a12-ddd2-4b13-994e-3d6bb8d6a44c",
                                                                      "217ec8d0-704a-4e06-8df9-e79fd22bc1d5",
                                                                      new Date(1565779001978L),
                                                                      new Date(1565779004382L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1565779000906L), 54,
                                                                      "54646aea-d939-4fa9-ac15-f653bd3804dc",
                                                                      "0d919043-0362-4b50-92af-7255c8ca70b7",
                                                                      "91bc6db9-ab6d-471c-aabb-dc14fc4877b1",
                                                                      "b71269c4-e2cb-4055-a752-b2374695a436",
                                                                      "5e77d556-d1a9-4de3-8173-2943d55416d1",
                                                                      "4125d0f1-7381-4cf2-9208-0c0fc0be1494",
                                                                      new Date(1565779005765L),
                                                                      new Date(1565779006349L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1565779000906L), 54,
                                                                      "54646aea-d939-4fa9-ac15-f653bd3804dc",
                                                                      "0d919043-0362-4b50-92af-7255c8ca70b7",
                                                                      "91bc6db9-ab6d-471c-aabb-dc14fc4877b1",
                                                                      "b71269c4-e2cb-4055-a752-b2374695a436",
                                                                      "5e77d556-d1a9-4de3-8173-2943d55416d1",
                                                                      "4125d0f1-7381-4cf2-9208-0c0fc0be1494",
                                                                      new Date(1565779005765L),
                                                                      new Date(1565779006349L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1565779006324L), 105,
                                                                 "c5c41555-3b7d-4c0b-95ed-73405bcfa470",
                                                                 "8a8c9ff5-a5ff-445d-8781-766e5f07936f",
                                                                 "7fb96508-93a9-47dd-97e0-ca97596e3a6e",
                                                                 "17bb0476-7bdc-48c6-a5d9-c2243e32ce43",
                                                                 "95f0fa05-7b9c-49db-abd5-12349088acac",
                                                                 "0f3a439d-08d5-43ac-aa8a-1e041fec4e6b",
                                                                 new Date(1565779006122L), new Date(1565778999375L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1565779005720L), 58,
                                                                        "202276a6-9deb-4b70-a5d8-8ee74baef7d8",
                                                                        "58d6f1a9-24f1-4471-8a35-e58eb9e4a4407aad16b2-5b24-4377-8edf-2745eaa292d9317f83a2-7786-4191-8745-dd66ad9cc794a92db3ca-b182-4b1d-9c84-5ce550ecacad2d322324-d409-4aca-bfe2-4f47622579115cc57700-0a2a-4c4c-8129-f1ec73e9d1ca279e76ec-aeae-42cc-97ee-957c2e8c1a3af7d728df-e8b7-4614-b2f9-dfe7768f0ac63f0436ea-7184-4350-8a70-2ca6b574caa54a53104e-bd1a-4cec-b335-dd6b05981440fd03e3ad-de09-4cb6-a044-5355f795b2590bd370d6-7383-4fc7-89c8-61ec695efa3e7a0977ab-5c83-44a4-8344-a63a90cf3f4ab1689c35-a584-424e-8ac4-8dd5968d54f42194acf4-3d58-4baa-87d5-219b2f652374826983ba-9106-4018-b207-bbd1984becccffc17117-eedc-42be-ba3a-46f3793b9b51040b0463-8959-4985-b296-46a92f8116d588aee62c-aef7-49ae-bd66-ca1f1d3ddbf74c090d2d-b897-4cdf-8ff9-2f89cd2468f76bf4dd27-6c13-4326-8b7e-72394d8fe227862bba6f-7eb3-4db7-b1a5-0fb850a4af3322d27e66-63fa-4c8a-842f-5fe9a5e75679945868bc-a4a2-4605-a6f6-c19b0342448dcff9b322-9caf-423c-9157-b693c43961053e59f27c-056c-4c88-a57a-b3ee0c071b7dbebcb122-2e80-4bae-8e58-cad625c6ebbc0f5cbc34-0188-4444-95a5-5efcd18e60db961f24d4-b7eb-441c-8bf9-11c02f9032b6d4f6a60a-dec1-4da4-ac90-05effd2a5935f876e108-cd4a-485c-8e2b-b2571e2e7849e6b133ed-ddb6-40c2-a995-5a94ab0a80f4e63ededf-502c-4428-932b-b98fa1cb1e76742f43bf-0489-4367-bd58-1274955bed7227b0b056-67e9-44c1-b841-b488d4767f83fad90fb9-2bf8-4067-86a0-ef3c93c727e41fe47c93-2faa-4cb4-ba05-d98f78a006778699c622-766e-4e65-af1a-473bdd15184a3ea247cd-8608-4d87-8a55-5084b41a03a0b653c4dc-fce8-4dbd-9225-69902d629d324a4aeb35-223b-43be-afae-d6cbdeea952f56f00c83-c896-4876-a626-dadc4a430fb6d6ca7f8c-896c-4739-8681-fb8a44a67ca4001e6a5e-8e40-42c5-8773-790bebc199714efefd00-3883-4935-a93a-fdc08461aa1fefd25677-4e41-4aa2-b397-10fe4955ddd4c5a647f4-2f40-4f7f-af41-dbdb277746f367c21e6b-e3c1-4768-8901-40de09a782e08875411d-eca6-4511-97ab-f772b39e57eb17065958-ec34-474d-806e-064bdcbd9ca758f0c2f2-90bb-4d8b-a3e8-e491c0be95a62f2cf223-62a1-4eab-9929-f5bf2d4767d87d43e1f9-c466-4dc5-bfae-8bd6791109598c2d1e2f-d714-4e6b-98bf-dbe013505b67a998eb02-a923-407d-8722-4d02f3760e8020e011d5-5085-46bc-a5e4-80d135aff940",
                                                                        "19f57aaa-ac45-49e7-841a-13c43e7e5981",
                                                                        "1e9da998-d366-496f-8826-f0d68a8c7d07",
                                                                        "815f0edc-2b2b-4462-9689-356a38b66e35",
                                                                        "ce132d35-81ea-4ff9-91f0-4e9dd523515d14b912cb-3a77-4986-8ce6-2260ef203c8a21ab9ffe-19e9-480a-afc2-230f7a4dc5ec7dc120d2-1330-46d9-9dd5-436383423204",
                                                                        new Date(1565778999294L),
                                                                        new Date(1565779006551L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1565779006447L), -71,
                                                                      "37570e30-1659-4756-8583-f231a5e20f62",
                                                                      "b353825a-8218-4dc9-b553-0e6d4242ce7c",
                                                                      "cede07a0-34e7-4a15-9af1-d65755b3c516",
                                                                      "5be8ff88-3cfb-4478-ac07-45aadd2860a5",
                                                                      "1e2c509b-83fb-47bb-ae3d-c32c48008533",
                                                                      "10a61d1b-d8c9-46c4-a25e-89430e10a7f3",
                                                                      new Date(1565778998033L),
                                                                      new Date(1565779000083L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1565779006447L), -71,
                                                                      "37570e30-1659-4756-8583-f231a5e20f62",
                                                                      "b353825a-8218-4dc9-b553-0e6d4242ce7c",
                                                                      "cede07a0-34e7-4a15-9af1-d65755b3c516",
                                                                      "5be8ff88-3cfb-4478-ac07-45aadd2860a5",
                                                                      "1e2c509b-83fb-47bb-ae3d-c32c48008533",
                                                                      "10a61d1b-d8c9-46c4-a25e-89430e10a7f3",
                                                                      new Date(1565778998033L),
                                                                      new Date(1565779000083L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1565779001768L), 100,
                                                                      "a4d07a50-1723-49bf-9871-5e307327f182",
                                                                      "42a1c4ce-7a2c-498a-8383-e978b084c8ec",
                                                                      "778ee8e5-e7c0-4457-a49a-e711bae87e28",
                                                                      "7c44e22f-cf93-44a6-a302-d75b87622535",
                                                                      "5ee27436-a2f7-4bde-b195-54fe6f14710c",
                                                                      "82697823-a993-4ee7-aad2-9b3d5e54ffcf",
                                                                      new Date(1565779001246L),
                                                                      new Date(1565779002769L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
