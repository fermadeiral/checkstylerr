// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1565779002185L), null,
                                                       "77c95c38-5fe1-431a-a9f7-bb9e51048005", -61,
                                                       "404ab85a-f532-43c8-95a6-6a5dafd871a4",
                                                       "a71350ad-8191-4c97-8ac8-d20abc9c39e8",
                                                       new Date(1565778998591L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1565779000337L), null,
                                                       "e9d068f0-f683-4dd7-bab6-60120258e931", -34,
                                                       "5691d2c9-2921-4974-8819-355ec496f8e2",
                                                       "046a335e-b821-4f38-983a-f6b5a5789c93",
                                                       new Date(1565778997564L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1565779000337L), null,
                                                       "e9d068f0-f683-4dd7-bab6-60120258e931", -34,
                                                       "5691d2c9-2921-4974-8819-355ec496f8e2",
                                                       "046a335e-b821-4f38-983a-f6b5a5789c93",
                                                       new Date(1565778997564L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1565779004935L), null,
                                                  "d9442a43-51f1-435f-a114-c019e82f4c7d", -9,
                                                  "8652df2d-f1ab-416e-84d5-3fdb43df0563",
                                                  "72c25776-5c49-4693-a25b-b875b4012740", new Date(1565778999528L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1565779001080L), null,
                                                         "2787500b-9e32-40c0-ac54-ae797f4da153261acc6d-6a73-4ef1-94e2-8781b83eac80990865ce-3a9c-42b8-9c3a-6a7ed28540eba997075e-7068-4fc9-a52a-6040097ffccbd0d4c80a-7e6b-414e-8888-61f60f0290cb943c3c0d-e049-433c-a04a-d9ec44547a7874ffec3c-0966-45c1-a441-34767830a8afa844d393-a2e4-4d86-b38c-2654c3b27208ea7ca97e-a195-421e-b066-2a84debd581a46cabca7-83e2-481b-adfd-53e02e02cc6b091f79cf-1691-4258-9099-0a90f3511786b0b6ed50-377a-4ec8-8e02-955e8188881e2ef98654-f3dc-432f-8d8f-2c14177305ce9ede4445-864b-41cc-9500-ee9e84e5a860646c20d5-f7cd-4027-895f-cbb20f1893e20ae24526-0d54-4c3f-962f-c2d2107ac4faa685c031-efdd-4ca2-a457-352119eb5444a183901c-da9f-4986-a846-2a8790d6449457e68638-303e-427f-8100-372dd922a9edc206eb45-7d1e-439c-bcc3-d1c2fc920795ba30d754-c165-4c51-aaae-9ddc8aca901dab0b4a94-370d-4408-82d9-7d00ad9fb5d56a0221c6-1d22-4c73-a2fd-a53ab5245c45b6f7a0f8-fa2b-4f95-abc5-90bcdc534b3c520e9f2f-5ebe-4ab8-ad60-ca65b10a18e70a8192b4-03fd-4a66-836b-d6d662accd2d2db1d916-2569-4e3e-abd8-352850f0fedb339a5aa0-9699-46b1-ad43-083c17f6f2d495c90fce-f8f5-44e5-9bed-ac0738226823c039358f-3350-4ec9-8a6e-469c2d30e93211dd1b09-abe3-49a4-8e7f-412f439273e303c4d897-f94d-42df-82d0-98182dfe86d54357a3e6-94e0-41b8-951d-9024a6f2af04de05c39c-fa61-4384-8a5a-d1825edc74ca06c72dea-5e7c-4d89-88ff-f50d850cf6ae0bdb7c95-2313-468d-b4e1-987eb0d086e33186639e-04d4-41cd-a342-5e3b47d0346dd2bc3ad9-30b4-4e47-9c2e-0800cba863e32d0b9356-c51b-498f-9afb-82f73c7bfc17aae0d284-d87f-4793-9110-9324954cf0b89ebc2b92-d9c9-4ad9-ae0b-890fc693303541a0ccf1-4680-401f-9f4e-de4fcccfbe5b98841317-7a48-49de-b08a-5a4158b35da01468b400-86db-46bb-aaec-0042835d206296a52f70-89bd-4e0d-9c6d-41fb851bc71a6995b592-6f34-43e7-b188-5cf10d0eb846c6f3f909-c117-4601-84e3-089b66ba3cba68056800-22c3-47e1-826d-4ff8d0a0957b0f6cc420-5c4b-4c5f-b537-2007e01c01629269a899-f54d-44bf-a174-e6469581b1c2f4813319-7c61-4fc2-9aa6-4c214225e3773e125701-d29a-411a-aa0f-e58e89ab5dbadca9d474-40ae-405e-b151-08d9327c579a5b7672ec-116e-4bea-98d9-3f383c8cf580344e18a5-ebf9-4053-b255-e8644feea50512b0cd52-f55a-40bd-9dc9-9d5975f08281",
                                                         123, "582f4168-6b3f-433e-9c77-336fd67c2b9a",
                                                         "9fef4c6b-43d5-4c28-ae67-0a17eaee78ff5e0babfd-61ff-4fbb-bdcb-84b1d5088d07007e32f1-3ab3-4352-b900-f53d5a0f4297b439e2be-ee0a-4e84-bc28-a56b01943043",
                                                         new Date(1565779000952L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1565778997302L), null,
                                                       "09388701-a6e3-42d6-b6ac-969fbb7d8a99", 96,
                                                       "97ae90f1-efd5-4fa4-a189-97d4093d2402",
                                                       "4160af5b-c077-4078-a269-ba938a28efc2",
                                                       new Date(1565779000099L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1565778997302L), null,
                                                       "09388701-a6e3-42d6-b6ac-969fbb7d8a99", 96,
                                                       "97ae90f1-efd5-4fa4-a189-97d4093d2402",
                                                       "4160af5b-c077-4078-a269-ba938a28efc2",
                                                       new Date(1565779000099L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1565778998536L), null,
                                                       "ad28f9b1-a02f-4481-a0b9-57b64c913f8b", 107,
                                                       "cb824ae3-c6f6-42f4-9e7e-60db614016e6",
                                                       "0a08fa86-7492-4a72-9449-7232c289ff0f",
                                                       new Date(1565779005055L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
