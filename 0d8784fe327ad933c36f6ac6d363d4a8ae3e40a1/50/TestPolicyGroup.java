// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model PolicyGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicyGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", 10, new Date(1565779004819L),
                                                       "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                       "9f72bb8d-fb29-4def-8fed-2686295755db", new Date(1565779002815L),
                                                       14);
            PolicyGroup policygroup2 = policygroup1.clone();
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotSame(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", 40, new Date(1565779002832L),
                                                       "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                       "1044c216-b810-41f0-bd7a-a3579eb34ac1", new Date(1565779002214L),
                                                       -105);
            PolicyGroup policygroup2 = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", 40, new Date(1565779002832L),
                                                       "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                       "1044c216-b810-41f0-bd7a-a3579eb34ac1", new Date(1565779002214L),
                                                       -105);
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotSame(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup2.hashCode(), policygroup1.hashCode());
            int hashCode = policygroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policygroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        PolicyGroup policygroup = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", 102, new Date(1565779006091L),
                                                  "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                  "91e83c46-308e-4945-80c1-fbb4880925f3", new Date(1565779004293L),
                                                  -94);
        assertTrue(policygroup.isValid());
        PolicyGroup policygroupInvalid = new PolicyGroup("5\u001c2\\\\៿:363A*쬽X5দ﬋\u001b惼56Q53?^265\u001026 2\u0014663\u001a\u001852N$$Y555\u0011闊525X6㢬2护2/\u00036?]",
                                                         -57, new Date(1565778998650L),
                                                         "5\u001c2\\\\៿:363A*쬽X5দ﬋\u001b惼56Q53?^265\u001026 2\u0014663\u001a\u001852N$$Y555\u0011闊525X6㢬2护2/\u00036?]",
                                                         "a49c1510-345b-4b77-8196-58c037484e0139040321-2e91-445f-9f42-f1fcbef8df4269b71e21-4ceb-4215-996d-9a25d27d6a4c",
                                                         new Date(1565778996907L), -40);
        assertFalse(policygroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", -56,
                                                       new Date(1565778999969L), "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                       "8d2a5de0-5af3-4d62-8e0e-9e03f3a36dc6", new Date(1565778997600L),
                                                       -82);
            PolicyGroup policygroup2 = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", -56,
                                                       new Date(1565778999969L), "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                       "8d2a5de0-5af3-4d62-8e0e-9e03f3a36dc6", new Date(1565778997600L),
                                                       -82);
            PolicyGroup policygroup3 = new PolicyGroup("fe0cdebdf4aaf1b7e7a0ef94984be8bf", -32,
                                                       new Date(1565779002691L), "fe0cdebdf4aaf1b7e7a0ef94984be8bf",
                                                       "a8dec504-9530-4691-a18d-23b47caafcb9", new Date(1565779002136L),
                                                       -127);
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotNull(policygroup3);
            assertNotSame(policygroup2, policygroup1);
            assertNotSame(policygroup3, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup1, policygroup2);
            assertEquals(policygroup1, policygroup1);
            assertFalse(policygroup1.equals(null));
            assertNotEquals(policygroup3, policygroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
