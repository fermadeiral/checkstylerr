// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558096105691L),
                                                                         "228be99c-dc72-4a26-97c6-9599b61d1197",
                                                                         "bba0eb2d-d0c4-4b4f-a0a6-6765a0a592d9",
                                                                         "3c4bf4b4-f7ca-4101-9794-971c6784a489");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558096108967L),
                                                                         "45a00e65-4785-4fab-a4d0-9fccbcb774d8",
                                                                         "96a35f14-8b42-4d23-90f1-280d4865d7d4",
                                                                         "d9f8c719-90c4-466c-9e4f-9cd38cd24f9f");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558096108967L),
                                                                         "45a00e65-4785-4fab-a4d0-9fccbcb774d8",
                                                                         "96a35f14-8b42-4d23-90f1-280d4865d7d4",
                                                                         "d9f8c719-90c4-466c-9e4f-9cd38cd24f9f");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558096103364L),
                                                                    "0b2881e7-ddc0-45d5-9776-ae5f9ad0eee2",
                                                                    "6ee0006b-ca17-40a7-8d81-7f9f0ee78161",
                                                                    "37a19f4f-5ca7-43a6-804f-e0380c93edfe");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558096109131L),
                                                                         "f435ea36-1630-4043-978b-989e79ead2e5",
                                                                         "fdd4256f-1ab3-4a5a-b405-36011b9288eb",
                                                                         "ccb18f1d-27c9-4c56-b641-b089859bc4fc");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558096109131L),
                                                                         "f435ea36-1630-4043-978b-989e79ead2e5",
                                                                         "fdd4256f-1ab3-4a5a-b405-36011b9288eb",
                                                                         "ccb18f1d-27c9-4c56-b641-b089859bc4fc");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558096102590L),
                                                                         "e975d183-fb30-4d51-ab08-6fba6c5c93d1",
                                                                         "3b5d058b-5a5a-434d-a9ae-d53ef444419a",
                                                                         "e0eb73cd-c89b-46b5-886b-c0042884fd1b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
