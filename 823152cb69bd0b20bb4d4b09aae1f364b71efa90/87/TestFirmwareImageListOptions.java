// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(96),
                                                                                              Long.valueOf(-55),
                                                                                              Order.getDefault(),
                                                                                              "071c5b59-c106-43a9-b565-b6eeded5dba3",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1567417607577L),
                                                                                                        new Date(1567417607907L),
                                                                                                        new Date(1567417605456L),
                                                                                                        new Date(1567417604257L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1567417603707L)))
                                                                            .lessThanUpdatedAt(new Date(1567417605128L))
                                                                            .greaterThanUpdatedAt(new Date(1567417605928L))
                                                                            .equalToName("4690b939-6b79-404b-a9c9-ee54ce254555")
                                                                            .notEqualToName("1c0c4e63-e8fd-4666-8e67-acaffdc10c0f")
                                                                            .inNames(Arrays.asList("08df541f-f308-4daa-beb3-0e24a04130a9",
                                                                                                   "9840bc59-0623-48c7-9869-978c4ab68948",
                                                                                                   "a28d0963-a32f-4841-ad09-ee406568152c",
                                                                                                   "1ec2eaad-eba6-458d-881c-32c53181912e",
                                                                                                   "03404034-5f70-4951-be1c-2b1bdcf8abd3",
                                                                                                   "0ff18b07-3c47-4a2c-9be7-b8d26880fe7a",
                                                                                                   "859eae85-4ab1-407b-b41c-5754e4c85d54",
                                                                                                   "5f7b627d-4c89-4ad7-a0d1-b38cc317075e",
                                                                                                   "eb21de5b-8278-4529-a5dd-d7e374b4dab6"))
                                                                            .notInNames(Arrays.asList("79b8707e-c030-49cf-bd97-673cf2bb8e3e",
                                                                                                      "3127f3bc-d512-4b0a-9ed9-afd60817362d",
                                                                                                      "1d6d8e60-d528-483a-9dfa-bd5bff45b227",
                                                                                                      "3037efb4-56a4-4561-bf7e-70c0e64ddec9",
                                                                                                      "8a348a4d-32ba-4de8-b283-c235bd2fb91b",
                                                                                                      "0a8d6174-8c5f-4c4d-ba31-4df02616024b",
                                                                                                      "625fa8d7-3ea1-4240-b643-6d5d968f9fab",
                                                                                                      "682e5f5d-68c2-4f35-93e5-68555c7a209f",
                                                                                                      "474cd854-54f2-42b2-afc4-1b60ec3de992"))
                                                                            .equalToDescription("42a57a51-3058-4755-9f08-6ea27a08d3b4")
                                                                            .notEqualToDescription("5cab4bc2-34b0-449e-b9f8-880fabc4da43")
                                                                            .inDescriptions(Arrays.asList("7da870ac-e3b5-4b84-b240-7176f9c85c01"))
                                                                            .notInDescriptions(Arrays.asList("237335b8-918c-45cf-a2f1-ccad3dc7e15e"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1567417610373L),
                                                                                                        new Date(1567417602400L),
                                                                                                        new Date(1567417610158L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1567417606450L)))
                                                                            .lessThanCreatedAt(new Date(1567417605062L))
                                                                            .greaterThanCreatedAt(new Date(1567417604786L))
                                                                            .equalToDatafileUrl("7aa54de1-2a3e-4e6c-adba-65afc635eb94")
                                                                            .notEqualToDatafileUrl("85c3b5c2-90da-4884-81af-695d9dd0de7d")
                                                                            .inDatafileUrls(Arrays.asList("17530a91-e9ed-4fc8-8897-03ab7c7b4108",
                                                                                                          "d797839f-4793-4466-95a9-f3867f06f4be",
                                                                                                          "da73755b-c763-4e91-99e0-8a911a3c1096",
                                                                                                          "d6cccced-4c25-4413-bae9-e0f0b99ef20c",
                                                                                                          "9f4d5d1d-8f2e-4f6c-87de-3fa713cfc2fb",
                                                                                                          "0832ad38-47bc-4ec3-8fab-977772fc1b9e"))
                                                                            .notInDatafileUrls(Arrays.asList("b91694fb-03cc-4dac-a37b-8905146621e2",
                                                                                                             "4bdc7c4c-91c7-4aea-95ec-2fee761b1792",
                                                                                                             "2e9fcbc2-854c-49e2-bf45-ac9809a2145f",
                                                                                                             "22d912d1-a277-4452-80b0-1f8f3610397b",
                                                                                                             "9dcb2105-19a2-4143-a727-695966e83775"))
                                                                            .equalToDatafileSize(Long.valueOf(-36))
                                                                            .notEqualToDatafileSize(Long.valueOf(47))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(-81),
                                                                                                           Long.valueOf(-127),
                                                                                                           Long.valueOf(-72)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(-26),
                                                                                                              Long.valueOf(-38),
                                                                                                              Long.valueOf(-55),
                                                                                                              Long.valueOf(-68),
                                                                                                              Long.valueOf(-52)))
                                                                            .equalToDatafileChecksum("c4ed69f0-7703-4ec8-84bb-52e9d5e845ca")
                                                                            .notEqualToDatafileChecksum("79a44559-4a89-4f0c-86ce-ff74751d67b0")
                                                                            .inDatafileChecksums(Arrays.asList("9b32e4c8-cda7-435b-adce-223bb12f3a6e",
                                                                                                               "c9336ca5-8876-49af-a89f-d66136211826",
                                                                                                               "0fd5ace3-37c0-4118-a7e1-72628304f6dc"))
                                                                            .notInDatafileChecksums(Arrays.asList("5e641ec1-4502-47e3-8b1d-ddc27b3d398d"))
                                                                            .equalToId("f01955c9-d5cc-4042-b64f-d6b04b759157")
                                                                            .notEqualToId("7d02a0f8-cbdf-4c1f-83a3-9c46f9a58700")
                                                                            .inIds(Arrays.asList("515f1add-8fa9-4cae-9771-8baac959d48f",
                                                                                                 "e1992e24-f38e-4273-a55b-12e880dc5c01",
                                                                                                 "598b0370-7b52-49d0-a6fc-82458e320cf1",
                                                                                                 "4e24c7f3-eff4-4afe-a435-80e6e204a94d",
                                                                                                 "2569334a-ba06-43e7-b054-639f139922c4",
                                                                                                 "f37c6499-3492-4d43-8305-fcebf268c6fd",
                                                                                                 "b0afe0dc-9577-415c-8f60-77eeed95b2c2",
                                                                                                 "fdf185ab-e070-42f3-b3c6-fea3421f365d"))
                                                                            .notInIds(Arrays.asList("1efec5f3-03f3-41a4-81b4-c30cf2c17f40",
                                                                                                    "c4ae04e3-5360-4783-bb49-73c3479eea3f",
                                                                                                    "356dd54d-4369-49eb-ba3e-3d1c9dcc305a"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1567417607577L), new Date(1567417607907L), new Date(1567417605456L),
                                       new Date(1567417604257L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1567417603707L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1567417605128L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1567417605928L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("4690b939-6b79-404b-a9c9-ee54ce254555",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("1c0c4e63-e8fd-4666-8e67-acaffdc10c0f",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("08df541f-f308-4daa-beb3-0e24a04130a9", "9840bc59-0623-48c7-9869-978c4ab68948",
                                       "a28d0963-a32f-4841-ad09-ee406568152c", "1ec2eaad-eba6-458d-881c-32c53181912e",
                                       "03404034-5f70-4951-be1c-2b1bdcf8abd3", "0ff18b07-3c47-4a2c-9be7-b8d26880fe7a",
                                       "859eae85-4ab1-407b-b41c-5754e4c85d54", "5f7b627d-4c89-4ad7-a0d1-b38cc317075e",
                                       "eb21de5b-8278-4529-a5dd-d7e374b4dab6"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("79b8707e-c030-49cf-bd97-673cf2bb8e3e", "3127f3bc-d512-4b0a-9ed9-afd60817362d",
                                       "1d6d8e60-d528-483a-9dfa-bd5bff45b227", "3037efb4-56a4-4561-bf7e-70c0e64ddec9",
                                       "8a348a4d-32ba-4de8-b283-c235bd2fb91b", "0a8d6174-8c5f-4c4d-ba31-4df02616024b",
                                       "625fa8d7-3ea1-4240-b643-6d5d968f9fab", "682e5f5d-68c2-4f35-93e5-68555c7a209f",
                                       "474cd854-54f2-42b2-afc4-1b60ec3de992"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("42a57a51-3058-4755-9f08-6ea27a08d3b4",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("5cab4bc2-34b0-449e-b9f8-880fabc4da43",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("7da870ac-e3b5-4b84-b240-7176f9c85c01"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("237335b8-918c-45cf-a2f1-ccad3dc7e15e"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1567417610373L), new Date(1567417602400L), new Date(1567417610158L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1567417606450L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1567417605062L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1567417604786L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("7aa54de1-2a3e-4e6c-adba-65afc635eb94",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("85c3b5c2-90da-4884-81af-695d9dd0de7d",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("17530a91-e9ed-4fc8-8897-03ab7c7b4108", "d797839f-4793-4466-95a9-f3867f06f4be",
                                       "da73755b-c763-4e91-99e0-8a911a3c1096", "d6cccced-4c25-4413-bae9-e0f0b99ef20c",
                                       "9f4d5d1d-8f2e-4f6c-87de-3fa713cfc2fb", "0832ad38-47bc-4ec3-8fab-977772fc1b9e"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("b91694fb-03cc-4dac-a37b-8905146621e2", "4bdc7c4c-91c7-4aea-95ec-2fee761b1792",
                                       "2e9fcbc2-854c-49e2-bf45-ac9809a2145f", "22d912d1-a277-4452-80b0-1f8f3610397b",
                                       "9dcb2105-19a2-4143-a727-695966e83775"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-36),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(47),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-81), Long.valueOf(-127), Long.valueOf(-72)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-26), Long.valueOf(-38), Long.valueOf(-55), Long.valueOf(-68),
                                       Long.valueOf(-52)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("c4ed69f0-7703-4ec8-84bb-52e9d5e845ca",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("79a44559-4a89-4f0c-86ce-ff74751d67b0",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("9b32e4c8-cda7-435b-adce-223bb12f3a6e", "c9336ca5-8876-49af-a89f-d66136211826",
                                       "0fd5ace3-37c0-4118-a7e1-72628304f6dc"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("5e641ec1-4502-47e3-8b1d-ddc27b3d398d"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("f01955c9-d5cc-4042-b64f-d6b04b759157",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("7d02a0f8-cbdf-4c1f-83a3-9c46f9a58700",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("515f1add-8fa9-4cae-9771-8baac959d48f", "e1992e24-f38e-4273-a55b-12e880dc5c01",
                                       "598b0370-7b52-49d0-a6fc-82458e320cf1", "4e24c7f3-eff4-4afe-a435-80e6e204a94d",
                                       "2569334a-ba06-43e7-b054-639f139922c4", "f37c6499-3492-4d43-8305-fcebf268c6fd",
                                       "b0afe0dc-9577-415c-8f60-77eeed95b2c2", "fdf185ab-e070-42f3-b3c6-fea3421f365d"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("1efec5f3-03f3-41a4-81b4-c30cf2c17f40", "c4ae04e3-5360-4783-bb49-73c3479eea3f",
                                       "356dd54d-4369-49eb-ba3e-3d1c9dcc305a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-52),
                                                                                              Long.valueOf(-94),
                                                                                              Order.getDefault(),
                                                                                              "304807b9-8151-431c-893d-529b8230c48f",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-52),
                                                                                              Long.valueOf(-94),
                                                                                              Order.getDefault(),
                                                                                              "304807b9-8151-431c-893d-529b8230c48f",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(1),
                                                                                              Long.valueOf(47),
                                                                                              Order.getDefault(),
                                                                                              "4f25766d-91ff-4e06-9a60-0afac2568e36",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(1),
                                                                                              Long.valueOf(47),
                                                                                              Order.getDefault(),
                                                                                              "4f25766d-91ff-4e06-9a60-0afac2568e36",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(78),
                                                                                              Long.valueOf(-5),
                                                                                              Order.getDefault(),
                                                                                              "6b12294d-102d-4c09-b847-60be48eee7ef",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
