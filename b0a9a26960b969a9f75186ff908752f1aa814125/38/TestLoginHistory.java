// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561383444827L),
                                                          "5d161152-23ed-4d7d-9df5-9f5ada39d8d8", false,
                                                          "decbcabc-9dbb-4544-93ff-2f1b193b9909");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561383444029L),
                                                          "2dfe20ff-a59f-43ea-a45d-26d4e04400ce", true,
                                                          "12f1e484-f6e2-4282-b611-bde6806600c5");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561383444029L),
                                                          "2dfe20ff-a59f-43ea-a45d-26d4e04400ce", true,
                                                          "12f1e484-f6e2-4282-b611-bde6806600c5");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561383447329L), "3a289fa5-ffcf-4f7e-953c-1e3f7b85b52c",
                                                     false, "d89781a4-83df-4971-b6c0-2cd7c8808c2b");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561383440662L),
                                                          "717962aa-dcd8-4702-a5c5-aea54ca4ec1d", true,
                                                          "be768b57-8c58-4b2e-acb8-4438f17decc1");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561383440662L),
                                                          "717962aa-dcd8-4702-a5c5-aea54ca4ec1d", true,
                                                          "be768b57-8c58-4b2e-acb8-4438f17decc1");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561383445865L),
                                                          "ccc7a83e-3a70-4f7a-b854-a2161352d20f", true,
                                                          "08aac7c2-535f-4876-854e-3786e063116e");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
