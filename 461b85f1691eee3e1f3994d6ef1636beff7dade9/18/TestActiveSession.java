// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("e72fbee9-0395-44ae-97dd-72c713f7357e",
                                                             "36f617de-3400-4369-aca6-79932c23f133",
                                                             new Date(1553713214369L),
                                                             "1cecd615-84bc-4ac8-9fef-975f19d2eafc",
                                                             "f8a34585-059a-43a4-b42f-636e6e7e549a");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("87ddaf67-cb16-46b6-b847-6f0377bc9066",
                                                             "367fb3f8-2632-40fd-b748-1d8a4036e5c0",
                                                             new Date(1553713210133L),
                                                             "e8a6c71d-556c-42c1-8c04-6ca9534dc973",
                                                             "701491a4-d6a2-4ef7-9e79-10967cf96499");
            ActiveSession activesession2 = new ActiveSession("87ddaf67-cb16-46b6-b847-6f0377bc9066",
                                                             "367fb3f8-2632-40fd-b748-1d8a4036e5c0",
                                                             new Date(1553713210133L),
                                                             "e8a6c71d-556c-42c1-8c04-6ca9534dc973",
                                                             "701491a4-d6a2-4ef7-9e79-10967cf96499");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("5bd76e06-8cef-44cc-9371-de8978a7184a",
                                                        "dc17d944-c96c-43d2-bb89-193472920b6a",
                                                        new Date(1553713216701L),
                                                        "d402e836-de71-41aa-9963-e01271514dc2",
                                                        "2c788208-966c-4ceb-abf9-68e929f13210");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("1f50ae14-2df9-4852-900a-4bc4e255a600",
                                                             "5b71ba6d-895a-4daa-ba91-5c6763e4dc53",
                                                             new Date(1553713214136L),
                                                             "d8306525-11ce-4f86-b8a9-65f72c558039",
                                                             "56c15e02-3b2e-4a70-8acc-e649a651694b");
            ActiveSession activesession2 = new ActiveSession("1f50ae14-2df9-4852-900a-4bc4e255a600",
                                                             "5b71ba6d-895a-4daa-ba91-5c6763e4dc53",
                                                             new Date(1553713214136L),
                                                             "d8306525-11ce-4f86-b8a9-65f72c558039",
                                                             "56c15e02-3b2e-4a70-8acc-e649a651694b");
            ActiveSession activesession3 = new ActiveSession("eec48925-d240-460c-97d1-7540577020f3",
                                                             "e7977a5c-46d6-47b5-8ab8-574e531c6a2e",
                                                             new Date(1553713214043L),
                                                             "2324670d-b176-4dc9-8ae8-9099aa4b3c89",
                                                             "820053dd-b39b-48b4-aa36-bc4cbcca4449");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
