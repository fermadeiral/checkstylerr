// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("93658a79-f2fe-41fb-bce9-dd020e95fc59", null, "fc6e716a-2029-4026-a4da-5d8432886b85",
                                  new Date(1553713209442L), -75, null, "7f7611d7-cc12-4764-a607-827473b5ccc3", true,
                                  "5b88945c-4e0f-44b8-a57d-5b80d58a6acc", "49430aac-a195-4f4c-bcca-724918869c8b", -120,
                                  null, null, false, "8ddc469b-dbf3-4e50-9ae1-9f0941f183c9", -107,
                                  "856efb15-8b80-45ac-bb08-ebf73f6b387c", UserStatus.getDefault(), true, null, true,
                                  new Date(1553713209400L), "eddc7bbc-606a-4bbe-ac64-a735bc34d5b6");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("3a234313-b25a-4b2b-8768-74f4820fce85", null, "6b5ca83a-86b1-4c89-b26e-d64ae185b422",
                                  new Date(1553713209445L), -16, null, "023909bb-8c21-4edc-bf66-a0727948a448", true,
                                  "cd904fec-be0d-4f54-9a28-59cdc39e6999", "21866869-293e-45bb-aee8-089d3128376e", 110,
                                  null, null, false, "2d794c63-a991-4b4f-8c26-67261a9655f8", -110,
                                  "83665efa-f4b2-4403-93e3-6558f8cb05c8", UserStatus.getDefault(), false, null, true,
                                  new Date(1553713209194L), "4971ee92-20ee-44b7-b718-7289b0ee04e9");
            User user2 = new User("3a234313-b25a-4b2b-8768-74f4820fce85", null, "6b5ca83a-86b1-4c89-b26e-d64ae185b422",
                                  new Date(1553713209445L), -16, null, "023909bb-8c21-4edc-bf66-a0727948a448", true,
                                  "cd904fec-be0d-4f54-9a28-59cdc39e6999", "21866869-293e-45bb-aee8-089d3128376e", 110,
                                  null, null, false, "2d794c63-a991-4b4f-8c26-67261a9655f8", -110,
                                  "83665efa-f4b2-4403-93e3-6558f8cb05c8", UserStatus.getDefault(), false, null, true,
                                  new Date(1553713209194L), "4971ee92-20ee-44b7-b718-7289b0ee04e9");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("f82bde52-2524-471f-9bfc-0cd0dbe14964", null, "93471bcf-326a-4dbf-a0d9-673dfe1913b1",
                             new Date(1553713214925L), -92, null, "0e29a53e-695c-441d-ad85-fd0abf1a007b", false,
                             "7705dc5e-e6e2-48cf-823e-9caaf8624ca1", "fba0362d-2bee-4579-8f30-1e6622162245", 14, null,
                             null, true, "66e231ed-b33d-49f5-b22a-3c407bb21929", 29,
                             "4fa963b2-7f2c-438d-85a3-fbb328c8a7e3", UserStatus.getDefault(), false, null, true,
                             new Date(1553713211327L), "ed5e4db4-ca5b-4eca-a25f-5f498ecb168a");
        assertTrue(user.isValid());
        User userInvalid = new User("400ddfbb-9139-45d4-8923-f341c314a4df", null,
                                    "9377af50-06de-49c8-8cf1-d7243705a892", new Date(1553713209894L), -76, null, null,
                                    true, "8115f143-b1cc-489a-8b79-704f610abd19",
                                    "268111a7-3ac9-4a55-bc9d-bb43682f22d1", 27, null, null, true,
                                    "cb443636-e76d-4d4f-bdaa-e25c349bffaa", 66, "ca6248ca-15fe-4da6-938c-beb331845859",
                                    UserStatus.getDefault(), true, null, false, new Date(1553713214191L),
                                    "69ccb5b1-9ba1-4003-b2a8-8c34ab3081c7");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("a953124c-4986-4ed4-bd92-7c83b77121f5", null, "622caea5-fae6-4bbf-acaf-823af7cd4fd6",
                                  new Date(1553713210458L), -98, null, "3b0eefcb-a665-4eaf-98ef-2df544d63a0c", false,
                                  "f8190040-dc42-44ec-a296-35ea24b0b93d", "b401dac6-2742-4863-892d-2906e74aa93b", 66,
                                  null, null, true, "af8dbe98-5b35-4bda-8fcf-a2c97ff3b54d", 55,
                                  "e17dcd1c-1581-4730-8c53-25609dbe87b4", UserStatus.getDefault(), true, null, true,
                                  new Date(1553713211971L), "a8af59cf-c95f-4489-a5ba-f967cd673656");
            User user2 = new User("a953124c-4986-4ed4-bd92-7c83b77121f5", null, "622caea5-fae6-4bbf-acaf-823af7cd4fd6",
                                  new Date(1553713210458L), -98, null, "3b0eefcb-a665-4eaf-98ef-2df544d63a0c", false,
                                  "f8190040-dc42-44ec-a296-35ea24b0b93d", "b401dac6-2742-4863-892d-2906e74aa93b", 66,
                                  null, null, true, "af8dbe98-5b35-4bda-8fcf-a2c97ff3b54d", 55,
                                  "e17dcd1c-1581-4730-8c53-25609dbe87b4", UserStatus.getDefault(), true, null, true,
                                  new Date(1553713211971L), "a8af59cf-c95f-4489-a5ba-f967cd673656");
            User user3 = new User("7dcc6bde-70db-4cdf-af0c-bf11f873be3e", null, "9c0f117e-8ce8-40d3-8b60-1c6f4a381aa7",
                                  new Date(1553713215530L), -48, null, "e27767b9-2c89-47f8-9160-9007a1d0453a", false,
                                  "9378cc78-3e2f-48c2-bb17-1221f596801a", "3bd46a58-bef2-49bb-bfec-9c0358353ce3", -18,
                                  null, null, true, "8ddfda47-bb6c-4af7-a9aa-040a146ca55a", -24,
                                  "9e7aae17-1bb2-4122-9408-3949dd2e5c91", UserStatus.getDefault(), true, null, true,
                                  new Date(1553713217061L), "06a38c6e-ae27-4929-bf21-023d15bdd763");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
