// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("addb3833-24c0-486a-a600-d4e5d64ba2ff",
                                                          "719b3d4c-5765-4be1-a5df-66d21e847838");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("909678d5-e5a0-4300-a619-06ff2f6014b8",
                                                          "beeb8c96-96d5-43e8-9788-37159a977ff6");
            LoginProfile loginprofile2 = new LoginProfile("909678d5-e5a0-4300-a619-06ff2f6014b8",
                                                          "beeb8c96-96d5-43e8-9788-37159a977ff6");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("ff45eb95-773f-4186-9e7a-e76cab40d6a9",
                                                     "1035fc3f-c201-4a2a-8a72-91e589ddb948");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("4652a128-7ad5-4d2c-acef-d2abebff1b9c",
                                                          "73e09fc3-9fcd-4504-af0f-c223596b72c8");
            LoginProfile loginprofile2 = new LoginProfile("4652a128-7ad5-4d2c-acef-d2abebff1b9c",
                                                          "73e09fc3-9fcd-4504-af0f-c223596b72c8");
            LoginProfile loginprofile3 = new LoginProfile("280bbbf4-ccf0-494f-aeb1-ca36cce96982",
                                                          "7492df63-d9e9-4bea-a1e6-76be8d482eba");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
