// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("f17e680a-47f3-4966-b6cc-d8c54aec2419",
                                                                      new Date(1561572707821L),
                                                                      new Date(1561572703460L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                      "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                      new Date(1561572707145L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("748da6a0-0a85-4fc2-8531-716729ef2dbb",
                                                                      new Date(1561572700018L),
                                                                      new Date(1561572707415L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                      "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                      new Date(1561572706073L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("748da6a0-0a85-4fc2-8531-716729ef2dbb",
                                                                      new Date(1561572700018L),
                                                                      new Date(1561572707415L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                      "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                      new Date(1561572706073L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("b302d558-b0ff-4da4-8dd5-88e2e3bee44b",
                                                                 new Date(1561572705867L), new Date(1561572702906L),
                                                                 "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                 "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                 new Date(1561572700352L),
                                                                 "cgLIulJ284L31M59CwwW9YY5U3u060iA");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("d5daf495-00e3-4544-ab59-888a57150306",
                                                                        new Date(1561572706198L),
                                                                        new Date(1561572700317L),
                                                                        "NVfBR7KXTVv`_KVjbEnoXjV\u0011h=?@â?ˆâ™’Shr<K`Rq/;FkEXDê†³hv7jhjBo:sKj7X7d",
                                                                        null, new Date(1561572701970L),
                                                                        "NVfBR7KXTVv`_KVjbEnoXjV\u0011h=?@â?ˆâ™’Shr<K`Rq/;FkEXDê†³hv7jhjBo:sKj7X7d");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("2f72fe33-f436-4a4d-9ed5-b313a6734ca6",
                                                                      new Date(1561572707471L),
                                                                      new Date(1561572701028L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                      "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                      new Date(1561572699689L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("2f72fe33-f436-4a4d-9ed5-b313a6734ca6",
                                                                      new Date(1561572707471L),
                                                                      new Date(1561572701028L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                      "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                      new Date(1561572699689L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("3fb7d604-19e5-495a-907e-7853feb2d5fc",
                                                                      new Date(1561572701253L),
                                                                      new Date(1561572703901L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA",
                                                                      "A-bJ:8B43tx6v6TTJ:2V8voe1b93AV5Xg1:Qup9lvy3aA47N3rTNv403xf4NwxSr6LnY9Fres9L8q62iA5O7b6xAU55Bs2ctH",
                                                                      new Date(1561572701570L),
                                                                      "cgLIulJ284L31M59CwwW9YY5U3u060iA");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
