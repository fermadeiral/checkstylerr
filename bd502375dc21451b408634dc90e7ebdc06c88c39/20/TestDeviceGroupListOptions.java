// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-51),
                                                                                        Long.valueOf(80),
                                                                                        Order.getDefault(),
                                                                                        "30a193bc-a95f-4105-852e-e4995acd2efe",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1561572705018L),
                                                                                                    new Date(1561572707167L),
                                                                                                    new Date(1561572711285L),
                                                                                                    new Date(1561572706427L),
                                                                                                    new Date(1561572701471L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1561572704891L),
                                                                                                       new Date(1561572707940L),
                                                                                                       new Date(1561572703776L),
                                                                                                       new Date(1561572702925L),
                                                                                                       new Date(1561572708349L),
                                                                                                       new Date(1561572703008L)))
                                                                        .lessThanUpdatedAt(new Date(1561572703771L))
                                                                        .greaterThanUpdatedAt(new Date(1561572708105L))
                                                                        .equalToName("2d8f15bd-7be9-47b2-9c8d-c29f179464b4")
                                                                        .notEqualToName("e04d7461-2ad1-4cfb-8fe3-e50088c65775")
                                                                        .inNames(Arrays.asList("e8dbb5b6-ed5c-4492-9b6f-d36168b12f1c",
                                                                                               "bc59a96b-1611-450c-917b-ab0475bb72fd",
                                                                                               "c919ca1c-e5e7-4129-a9e3-d12760ace6fa",
                                                                                               "7da8ef37-eea5-4699-a1b4-e533818984a9",
                                                                                               "794f6383-f8b0-4f1a-bb5f-37f23fe27dcc",
                                                                                               "c7eb01b9-e1b6-49df-9eae-1b3cc73efef6",
                                                                                               "e7b45791-669e-4470-bc9b-2c404e04057f"))
                                                                        .notInNames(Arrays.asList("545e9e41-a177-4089-a21d-162541aa230e",
                                                                                                  "ee04d25f-8483-4f63-8b98-cb96ba9e86c4",
                                                                                                  "71c8eb74-0438-4328-a7a6-fbea9694fd11",
                                                                                                  "6899019e-b10d-41c6-b175-0587265fde4b",
                                                                                                  "1593830b-0116-4bf2-a809-3428be104adf"))
                                                                        .equalToDevicesCount(Integer.valueOf(49))
                                                                        .notEqualToDevicesCount(Integer.valueOf(20))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(8),
                                                                                                       Integer.valueOf(78)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(77),
                                                                                                          Integer.valueOf(8)))
                                                                        .lessThanDevicesCount(Integer.valueOf(44))
                                                                        .greaterThanDevicesCount(Integer.valueOf(92))
                                                                        .inCreatedAts(Arrays.asList(new Date(1561572707311L),
                                                                                                    new Date(1561572708768L),
                                                                                                    new Date(1561572709790L),
                                                                                                    new Date(1561572702941L),
                                                                                                    new Date(1561572703762L),
                                                                                                    new Date(1561572701801L),
                                                                                                    new Date(1561572710252L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1561572703869L),
                                                                                                       new Date(1561572710633L),
                                                                                                       new Date(1561572709070L),
                                                                                                       new Date(1561572709270L),
                                                                                                       new Date(1561572704101L),
                                                                                                       new Date(1561572703257L)))
                                                                        .lessThanCreatedAt(new Date(1561572703785L))
                                                                        .greaterThanCreatedAt(new Date(1561572701856L))
                                                                        .equalToId("a10dba08-4e1b-448a-b55d-59eeb2cbd025")
                                                                        .notEqualToId("24ffae74-a690-4758-a994-64955549283c")
                                                                        .inIds(Arrays.asList("ab035414-ac3b-47b5-a751-9334dbab14cd",
                                                                                             "14139365-3a29-46de-ac9b-acf4495ace81",
                                                                                             "b432a6e3-30f4-4391-9293-38c155fc866f"))
                                                                        .notInIds(Arrays.asList("895e52c1-86ae-4b53-be7f-2f166c06ed24",
                                                                                                "e950ad3c-309f-4082-911b-7540f90ce131",
                                                                                                "4dcef405-90a9-448d-803a-14dbb63e02c6",
                                                                                                "0c8dce8e-4cb2-4938-96bc-a34009f8594f",
                                                                                                "6bd1695c-9776-4e51-b4ea-ca230ef6a466",
                                                                                                "5d548713-972d-46e7-bca7-b17dc8ca9bd5",
                                                                                                "2df0168c-50f0-44d4-a4ce-c945cbe657f8",
                                                                                                "551dea4e-4ea9-43bd-aa8c-746ba895988c",
                                                                                                "63213f9b-edc9-43be-81de-4daf5b92dfcf"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561572705018L), new Date(1561572707167L), new Date(1561572711285L),
                                       new Date(1561572706427L), new Date(1561572701471L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561572704891L), new Date(1561572707940L), new Date(1561572703776L),
                                       new Date(1561572702925L), new Date(1561572708349L), new Date(1561572703008L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561572703771L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561572708105L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("2d8f15bd-7be9-47b2-9c8d-c29f179464b4",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("e04d7461-2ad1-4cfb-8fe3-e50088c65775",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("e8dbb5b6-ed5c-4492-9b6f-d36168b12f1c", "bc59a96b-1611-450c-917b-ab0475bb72fd",
                                       "c919ca1c-e5e7-4129-a9e3-d12760ace6fa", "7da8ef37-eea5-4699-a1b4-e533818984a9",
                                       "794f6383-f8b0-4f1a-bb5f-37f23fe27dcc", "c7eb01b9-e1b6-49df-9eae-1b3cc73efef6",
                                       "e7b45791-669e-4470-bc9b-2c404e04057f"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("545e9e41-a177-4089-a21d-162541aa230e", "ee04d25f-8483-4f63-8b98-cb96ba9e86c4",
                                       "71c8eb74-0438-4328-a7a6-fbea9694fd11", "6899019e-b10d-41c6-b175-0587265fde4b",
                                       "1593830b-0116-4bf2-a809-3428be104adf"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(49),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(20),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(8), Integer.valueOf(78)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(77), Integer.valueOf(8)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(44),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(92),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561572707311L), new Date(1561572708768L), new Date(1561572709790L),
                                       new Date(1561572702941L), new Date(1561572703762L), new Date(1561572701801L),
                                       new Date(1561572710252L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561572703869L), new Date(1561572710633L), new Date(1561572709070L),
                                       new Date(1561572709270L), new Date(1561572704101L), new Date(1561572703257L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561572703785L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561572701856L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("a10dba08-4e1b-448a-b55d-59eeb2cbd025",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("24ffae74-a690-4758-a994-64955549283c",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("ab035414-ac3b-47b5-a751-9334dbab14cd", "14139365-3a29-46de-ac9b-acf4495ace81",
                                       "b432a6e3-30f4-4391-9293-38c155fc866f"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("895e52c1-86ae-4b53-be7f-2f166c06ed24", "e950ad3c-309f-4082-911b-7540f90ce131",
                                       "4dcef405-90a9-448d-803a-14dbb63e02c6", "0c8dce8e-4cb2-4938-96bc-a34009f8594f",
                                       "6bd1695c-9776-4e51-b4ea-ca230ef6a466", "5d548713-972d-46e7-bca7-b17dc8ca9bd5",
                                       "2df0168c-50f0-44d4-a4ce-c945cbe657f8", "551dea4e-4ea9-43bd-aa8c-746ba895988c",
                                       "63213f9b-edc9-43be-81de-4daf5b92dfcf"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-98),
                                                                                        Long.valueOf(-78),
                                                                                        Order.getDefault(),
                                                                                        "7c58bc95-be1f-4283-8590-2b9b774c1907",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-98),
                                                                                        Long.valueOf(-78),
                                                                                        Order.getDefault(),
                                                                                        "7c58bc95-be1f-4283-8590-2b9b774c1907",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(48),
                                                                                        Long.valueOf(36),
                                                                                        Order.getDefault(),
                                                                                        "93416af9-8e58-4545-a1a9-834942060443",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(48),
                                                                                        Long.valueOf(36),
                                                                                        Order.getDefault(),
                                                                                        "93416af9-8e58-4545-a1a9-834942060443",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(48),
                                                                                        Long.valueOf(92),
                                                                                        Order.getDefault(),
                                                                                        "d0ce5c8c-a6de-446b-80aa-24fada5acd7d",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
