// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561572707344L), -21,
                                                                      "20c2ee49-5189-4737-8851-b3b7853b1953",
                                                                      "d56f5379-3892-4000-a5fe-4cfa9ad62459",
                                                                      "b8bbafa2-0676-4966-b805-31c95b04227b",
                                                                      "cfa2f810-2295-48c7-8cb2-ae2f7e7f4bba",
                                                                      "ee189fc2-c6cb-4e3a-bb53-ed363e7e9705",
                                                                      "7787229b-3068-4265-8107-64e4422f7854",
                                                                      new Date(1561572699972L),
                                                                      new Date(1561572704994L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561572703644L), 94,
                                                                      "ff87db7f-adb0-4d97-b954-cf0fb93c6769",
                                                                      "f02d1253-b3ef-4bcb-889c-90acdc79d5be",
                                                                      "36f74a2e-37b4-42ff-8a34-5f2714220aba",
                                                                      "429eed04-a694-4724-b639-666580283dcc",
                                                                      "8b86102c-0ecb-49db-a367-a82af6cb78d1",
                                                                      "08d4487b-5e62-42f2-be1d-5434cc9a4dd8",
                                                                      new Date(1561572702119L),
                                                                      new Date(1561572701882L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561572703644L), 94,
                                                                      "ff87db7f-adb0-4d97-b954-cf0fb93c6769",
                                                                      "f02d1253-b3ef-4bcb-889c-90acdc79d5be",
                                                                      "36f74a2e-37b4-42ff-8a34-5f2714220aba",
                                                                      "429eed04-a694-4724-b639-666580283dcc",
                                                                      "8b86102c-0ecb-49db-a367-a82af6cb78d1",
                                                                      "08d4487b-5e62-42f2-be1d-5434cc9a4dd8",
                                                                      new Date(1561572702119L),
                                                                      new Date(1561572701882L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561572706247L), -11,
                                                                 "c8788661-d0c8-431f-94b0-48de2113e85f",
                                                                 "1ffddceb-f97b-442d-8ed0-47e95f70d229",
                                                                 "be43dfa8-6912-48ec-b048-eacdb9f9f5d9",
                                                                 "f37d4bbb-ec33-431d-911c-6f6dc795b79e",
                                                                 "aecfbae6-d69b-4c74-ae63-084d36f1fe7b",
                                                                 "9a6cc715-3f20-4b9d-89c7-f82c0cc0ca04",
                                                                 new Date(1561572700828L), new Date(1561572703649L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561572707045L), 107,
                                                                        "a3ef277d-f8f7-4b2a-b009-08b4c0faa6b2",
                                                                        "f7e8dd51-51a4-401e-916f-535d9d94ce45a6c135b1-adaf-4284-9d35-1ca48f9bf0496a0565b1-64db-419b-be85-a09a0ffef9c9f6d2a762-6c29-4398-a9bf-cd7158473b0baecd64a3-f15d-4433-acec-afa18bf9a95213cff460-bf6d-48d2-ae92-69258bae3f2c5ee83907-0aa1-4925-b3a6-9e780eafdfe1092efb43-b3fa-4c33-856f-abe2fee365db6f1de0aa-9db2-4f22-b836-fb92fedd8c61e25bd1c3-b26e-4baf-8444-1c8c5108cb54ef391a5e-c2d9-43ab-9f60-1d211ebbf04ed16eb7e8-af88-4e57-a8c0-ec7ca0d38f6d938cbb8e-b67c-45d7-a7c5-280a7a139fa02a1f9766-5e45-4292-b7b0-615aba381db3e560bdcc-b8a6-4865-8f06-9c97ce4fdf072341ede3-b628-4191-952b-d8d4176bd471fbaa2f59-3ff9-408f-b5ab-2867ae16fae41384b49b-0476-4031-9a89-f821f09198b817ad2833-d0bd-4aa6-87a5-5a12443324324053ae7e-08ef-4493-9df7-00cf36eafe390145ba18-2dd5-47ec-8305-ab347524be7e48aa27d3-fd34-4d48-b83b-6bde6d8a7e5db23571a2-a2e2-4194-9a78-dda628e193084b73ca36-42e1-4579-97df-7ab0306f3e7467f05e67-9cf2-4f98-921d-c047e9dcc928f4d45907-2b1a-4ee0-924a-e1b40c1844947ebb4ebe-ab3c-4d3d-97b7-b2f896d4a9b548627d73-aec4-4517-bfab-14d7b240887b56640586-5af5-493b-bdbc-85219d71cec3004d6791-dcaa-48ad-b7fb-94ac3a2ff94bbb9f6678-9305-43ac-a723-8439f30e928be534cd64-589a-4e50-96a5-eef54f740480083bf4b7-4b26-42f0-a984-eed2bd287e154d420357-b4eb-4be1-b073-9b6b3bdb3826abb7d37a-3cfa-48d1-a1f4-eeb75942c925191bd226-0507-432b-9596-22bb00b9d17dac3797be-351d-4a00-bdd8-567884bca76b1cc2484c-b570-4c4c-ab85-0bd569ad9e6ffc04b35d-b867-4f0b-bb7c-d2b87313c20ded54cdf0-8b38-4ffc-8d77-46b6f0a639435ef44a5e-3a6c-4cb6-bdf6-cf00aa3b937c6f5c5557-2e32-4705-b942-a8f3a728aa5ae524bcab-999b-441c-8cea-f76c545bd1abedcc49ed-c315-48e8-8f6c-9f3fb868f00c156b8a35-a586-4526-ae49-a3c703956968cb386c9f-996c-4a63-80c7-a87f5251f7951dadb3f9-ebe8-4c2b-9037-630c965c5588534f1d4c-ad62-41c4-9256-c6bd9c77762487f8052d-7a87-4116-9803-45f54e0a659710d21152-3c87-488f-8e0c-75605b229b46237771d6-4be6-46a6-8a96-7baf39643102f7a7baf6-e24d-4e7b-8c4a-da3fd0988dc62febcbc9-6f2f-4a8d-aaab-97dd05e5f978d2242576-a1cf-47de-be96-a2731b24cb1c98d293c5-82f4-4299-a42b-052a6973e6a785f4a04e-829c-418a-85e6-98587a39dcea",
                                                                        "d75dadc4-e562-4c4a-994d-95fc8f843820",
                                                                        "4439f173-c2d7-45f5-9b18-5dac7c2ef5d6",
                                                                        "c456185a-4a3b-4204-902a-96540cccca9c",
                                                                        "80348e71-3415-4fbf-a304-4c9ca7133a08fc71b9f0-300b-4332-bcdf-dd6d260a9a1e2606d944-1357-4abf-8f9d-29f974f2a6e148be6a7b-7cc7-4d0a-8715-c605162e07bf",
                                                                        new Date(1561572709026L),
                                                                        new Date(1561572707582L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561572706552L), -88,
                                                                      "bce97225-8b0c-4ec5-bef5-780ed5e3fc53",
                                                                      "1457994d-b180-4613-99cd-df98304fb011",
                                                                      "2c7deb07-6790-42fc-8eae-bbd2f7de1312",
                                                                      "8eb507d7-e25c-4cfe-81a0-535dc52ce085",
                                                                      "aed65c2a-4f14-4bfe-b4e2-2eb9c56b5108",
                                                                      "c1194474-657c-4ca7-874e-cb3f4595797a",
                                                                      new Date(1561572704524L),
                                                                      new Date(1561572703425L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561572706552L), -88,
                                                                      "bce97225-8b0c-4ec5-bef5-780ed5e3fc53",
                                                                      "1457994d-b180-4613-99cd-df98304fb011",
                                                                      "2c7deb07-6790-42fc-8eae-bbd2f7de1312",
                                                                      "8eb507d7-e25c-4cfe-81a0-535dc52ce085",
                                                                      "aed65c2a-4f14-4bfe-b4e2-2eb9c56b5108",
                                                                      "c1194474-657c-4ca7-874e-cb3f4595797a",
                                                                      new Date(1561572704524L),
                                                                      new Date(1561572703425L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561572706146L), -97,
                                                                      "53083a46-90c5-482c-9978-08fe04375616",
                                                                      "c39aab02-8dca-4e58-931f-e50ce81129af",
                                                                      "d8d65fe6-0974-4d37-aa33-1e0d0a3fe4c0",
                                                                      "68d333bd-c50f-409e-aa2d-b609904a7543",
                                                                      "09093735-22f7-4980-8337-2be641db05ca",
                                                                      "24147076-5908-4559-aa46-1c9d12149152",
                                                                      new Date(1561572705157L),
                                                                      new Date(1561572704428L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
