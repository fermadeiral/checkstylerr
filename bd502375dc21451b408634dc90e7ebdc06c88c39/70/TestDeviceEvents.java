// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561572702034L), null,
                                                          new Date(1561572704929L),
                                                          "be1fe388-01f0-4478-b63d-6cb041ef7fb9",
                                                          "019c783f-1db0-40b9-95f3-18b08e2edfd2",
                                                          "324bdf9c-9298-446a-bfdc-8d7c185a3417",
                                                          "50f52c3b-f6cd-494a-be50-68e82217767c",
                                                          "39ca2a83-0ef8-4160-8621-1b8a46774dd4",
                                                          "52f1bb33-55a0-41aa-a2f1-7c27433125a1", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561572709304L), null,
                                                          new Date(1561572708367L),
                                                          "fb43c17e-3e6f-41d0-9c41-11ec1870202f",
                                                          "1836fcb4-7d24-4d27-890b-0478ddbd7db3",
                                                          "37bd646a-8ecb-48d4-9e00-36071df1e35b",
                                                          "fa5a3b99-8b3d-4f40-bfa2-42b77540ec29",
                                                          "eb2dfeba-10c3-453b-ac79-b1c4262f5262",
                                                          "d24f0473-f8f6-4497-b642-f50e71c09d1e", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1561572709304L), null,
                                                          new Date(1561572708367L),
                                                          "fb43c17e-3e6f-41d0-9c41-11ec1870202f",
                                                          "1836fcb4-7d24-4d27-890b-0478ddbd7db3",
                                                          "37bd646a-8ecb-48d4-9e00-36071df1e35b",
                                                          "fa5a3b99-8b3d-4f40-bfa2-42b77540ec29",
                                                          "eb2dfeba-10c3-453b-ac79-b1c4262f5262",
                                                          "d24f0473-f8f6-4497-b642-f50e71c09d1e", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1561572701176L), null, new Date(1561572705652L),
                                                     "a749b13e-990f-43a3-a23e-91673295523e",
                                                     "945cab22-3dd8-4e0a-8f2a-044ed55f4e54",
                                                     "618af6f4-d0ec-42e4-863d-5b8cdbaad6f1",
                                                     "323293c5-98dc-4391-9487-308b28eb1c00",
                                                     "a8161b5d-2c1f-4a11-aa73-d0a25691399b",
                                                     "9de15c75-2c1f-422a-af52-5ebad5169f8f", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561572704937L), null,
                                                          new Date(1561572706814L),
                                                          "e997fe0b-d71a-4b4b-89e3-d6b08f2ac733",
                                                          "3977aca2-1c63-42e9-bfef-21e2b24fcf48",
                                                          "4cc6586e-0a92-4ce9-872b-ca02d93851a7",
                                                          "a9f4b4db-f974-4e17-8ce1-d65eff33eaa1",
                                                          "1b7a0abe-5b40-45d7-9e46-fbdac2d147b3",
                                                          "005c9b6a-aa3c-41e3-9c8d-c5296c5fef1d", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1561572704937L), null,
                                                          new Date(1561572706814L),
                                                          "e997fe0b-d71a-4b4b-89e3-d6b08f2ac733",
                                                          "3977aca2-1c63-42e9-bfef-21e2b24fcf48",
                                                          "4cc6586e-0a92-4ce9-872b-ca02d93851a7",
                                                          "a9f4b4db-f974-4e17-8ce1-d65eff33eaa1",
                                                          "1b7a0abe-5b40-45d7-9e46-fbdac2d147b3",
                                                          "005c9b6a-aa3c-41e3-9c8d-c5296c5fef1d", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1561572700933L), null,
                                                          new Date(1561572702897L),
                                                          "9140ddac-6c38-4746-990f-120c6974cf42",
                                                          "eaec202d-1b13-44bf-ad51-867e67ca44d1",
                                                          "3fa65f17-37b5-4ebd-8edb-30a132e7adf8",
                                                          "ae12f89c-21b5-452b-9b3f-2388fba9fd2a",
                                                          "880ea1bd-9abc-4dfa-a5eb-e2a2c22fe04d",
                                                          "1108c490-4615-40dc-9af8-b5186d52918a", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
