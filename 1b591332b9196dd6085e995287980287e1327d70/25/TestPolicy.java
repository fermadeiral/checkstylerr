// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("67347597-27c4-4179-aa29-637bd0fe86a5", true,
                                        "6c569839-c454-4182-a3ce-0fd9dfafe7c4", true,
                                        "849c6545-24b4-4c1b-85b8-e034ecd8ef65");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("c6a12495-8db3-415f-a387-82c0fe4517ee", false,
                                        "0f464487-5380-4fd9-8374-f64e7e13bb36", false,
                                        "6033c667-0432-484b-a25e-980b4621fd01");
            Policy policy2 = new Policy("c6a12495-8db3-415f-a387-82c0fe4517ee", false,
                                        "0f464487-5380-4fd9-8374-f64e7e13bb36", false,
                                        "6033c667-0432-484b-a25e-980b4621fd01");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("f42ef501-0147-48f4-b711-db608a71336c", true, "de33f361-9ecb-44c5-8777-383081de58d5",
                                   true, "c865bae9-1d96-4a58-bbaf-63980e0354eb");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("9168188e-395d-4b49-963d-5b7d774258e8", false,
                                        "64302927-6483-492d-afe8-aee7fb736baf", false,
                                        "793140ae-888f-433d-aba1-cf2dc7249be4");
            Policy policy2 = new Policy("9168188e-395d-4b49-963d-5b7d774258e8", false,
                                        "64302927-6483-492d-afe8-aee7fb736baf", false,
                                        "793140ae-888f-433d-aba1-cf2dc7249be4");
            Policy policy3 = new Policy("6671314d-4ed8-4679-b2ff-d4dbde3c9624", false,
                                        "6964aa43-f5f2-4f9c-9c01-b663ebe397ab", false,
                                        "6d7697e6-5ef8-4347-bb3d-abe86ce7ff11");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
