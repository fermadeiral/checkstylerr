// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553713213871L),
                                                                         "2d9e9007-29c7-4604-842c-33a44b6d6055",
                                                                         "11dc875b-30c1-43d2-bbd9-55f565b1dda5",
                                                                         "4f91d372-83c0-4528-a814-4698fde1938f");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553713216377L),
                                                                         "456795c6-404f-423c-9e89-6b73454e4781",
                                                                         "6e0327fb-2287-4a0d-a62a-24f182d366f3",
                                                                         "8163db3c-d226-4d81-afd5-b8d3ef6cef89");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553713216377L),
                                                                         "456795c6-404f-423c-9e89-6b73454e4781",
                                                                         "6e0327fb-2287-4a0d-a62a-24f182d366f3",
                                                                         "8163db3c-d226-4d81-afd5-b8d3ef6cef89");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1553713208585L),
                                                                    "a553aeb4-2659-46e4-bb91-191ea9af9a3d",
                                                                    "e7dd5e3c-5e40-4938-84e0-ab5669c9e169",
                                                                    "aabd9ca2-87aa-4953-a795-a90db5156c21");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553713211602L),
                                                                         "04ec8d7c-65ab-4927-92c6-951d247a589d",
                                                                         "d612a3fe-d873-4887-8992-5083c21a2dd6",
                                                                         "f76363d6-613f-4d4a-bd63-6c1d58e759eb");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553713211602L),
                                                                         "04ec8d7c-65ab-4927-92c6-951d247a589d",
                                                                         "d612a3fe-d873-4887-8992-5083c21a2dd6",
                                                                         "f76363d6-613f-4d4a-bd63-6c1d58e759eb");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1553713216958L),
                                                                         "728df26b-a86e-401c-8ffb-538edbfaffcc",
                                                                         "3147e606-2229-47c3-bda5-18c624d8cc1f",
                                                                         "6068d050-faad-48d2-a9fb-ef860f0d96e7");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
