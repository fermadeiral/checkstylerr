// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553713214949L),
                                                          "41c783b9-7c3a-4b76-90d4-5c08c3cf1b6e", true,
                                                          "594ec605-14b1-4069-b1bc-95220ba5ba3f");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553713213841L),
                                                          "00933ff9-1322-4216-99b2-804d487622de", false,
                                                          "e8e2413f-5538-487a-94d0-833609cf776f");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553713213841L),
                                                          "00933ff9-1322-4216-99b2-804d487622de", false,
                                                          "e8e2413f-5538-487a-94d0-833609cf776f");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553713209883L), "f05e86a9-7dcd-48a3-b7f9-43a50e807805",
                                                     false, "237592e8-22e0-4f7c-8f25-f6b09272c225");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553713217131L),
                                                          "4e1fb69a-aac5-4b31-9d0b-2448f0fc9f2d", false,
                                                          "540edb94-3b52-4701-9538-a7acfdcdb78c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553713217131L),
                                                          "4e1fb69a-aac5-4b31-9d0b-2448f0fc9f2d", false,
                                                          "540edb94-3b52-4701-9538-a7acfdcdb78c");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553713213911L),
                                                          "c1386130-4cb8-4fbe-9def-22ea909a4b97", false,
                                                          "faf951be-3afe-44fd-852e-78c0bb18e4ef");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
