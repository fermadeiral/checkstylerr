// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("b670242d-9d1f-4257-a0f7-605df7774974",
                                                                                           new Date(1553713216325L),
                                                                                           "7d41b861-4484-40df-bd46-3977cfa696df",
                                                                                           new Date(1553713210684L),
                                                                                           "e40fcece-a520-490f-b63e-7da13e59033d",
                                                                                           null,
                                                                                           new Date(1553713213344L),
                                                                                           "83ce34dd-ff59-4e77-9a06-609058dcc1d6");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("0616b7ef-b352-4794-b5b7-1b07b606e78e",
                                                                                           new Date(1553713209722L),
                                                                                           "014be091-fcab-4f7f-a3e8-1a5b4f9d56d9",
                                                                                           new Date(1553713216025L),
                                                                                           "b8f04023-119e-47d7-931f-2607f87ceb55",
                                                                                           null,
                                                                                           new Date(1553713211308L),
                                                                                           "526a6bbc-df29-467b-b5c4-a41762f28f78");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("0616b7ef-b352-4794-b5b7-1b07b606e78e",
                                                                                           new Date(1553713209722L),
                                                                                           "014be091-fcab-4f7f-a3e8-1a5b4f9d56d9",
                                                                                           new Date(1553713216025L),
                                                                                           "b8f04023-119e-47d7-931f-2607f87ceb55",
                                                                                           null,
                                                                                           new Date(1553713211308L),
                                                                                           "526a6bbc-df29-467b-b5c4-a41762f28f78");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("0bd3bab6-b5df-42c6-9d16-5c25af1b00b0",
                                                                                      new Date(1553713216106L),
                                                                                      "f369c73d-3a3a-41b3-a3eb-0fb51fd9bde0",
                                                                                      new Date(1553713214623L),
                                                                                      "520acaca-7b8d-425b-8158-02f2208f54a6",
                                                                                      null, new Date(1553713217452L),
                                                                                      "af757f58-6510-403a-be79-097454367674");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553713208866L),
                                                                                             null,
                                                                                             new Date(1553713210679L),
                                                                                             "13d5f5a8-253c-4907-99f9-2c3f43701fdf",
                                                                                             null,
                                                                                             new Date(1553713217297L),
                                                                                             "d6630875-e52a-4a8d-8188-16b73159d5a5");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("5be16812-04eb-428d-9ee7-3f5bf72111a3",
                                                                                           new Date(1553713212806L),
                                                                                           "023df186-89e9-42d8-a08b-edb7b23e9bbf",
                                                                                           new Date(1553713209536L),
                                                                                           "e4018401-7488-424f-8201-8a6e9a85bfae",
                                                                                           null,
                                                                                           new Date(1553713210100L),
                                                                                           "bf8af38a-9264-4655-b179-2d41450a6751");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("5be16812-04eb-428d-9ee7-3f5bf72111a3",
                                                                                           new Date(1553713212806L),
                                                                                           "023df186-89e9-42d8-a08b-edb7b23e9bbf",
                                                                                           new Date(1553713209536L),
                                                                                           "e4018401-7488-424f-8201-8a6e9a85bfae",
                                                                                           null,
                                                                                           new Date(1553713210100L),
                                                                                           "bf8af38a-9264-4655-b179-2d41450a6751");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("432bf08d-f3ea-449f-9835-3653a55e98e7",
                                                                                           new Date(1553713209911L),
                                                                                           "7a2f3466-dcb0-4adc-b66b-05e1c3e3eebc",
                                                                                           new Date(1553713213707L),
                                                                                           "429a4096-8473-42f8-884d-d001b44773eb",
                                                                                           null,
                                                                                           new Date(1553713216804L),
                                                                                           "b827c1e7-bf13-44dd-9707-4342f2da58d7");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
