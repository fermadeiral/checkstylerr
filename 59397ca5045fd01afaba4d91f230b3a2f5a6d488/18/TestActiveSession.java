// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("42f80878-5069-4a91-bed5-079e8e4b7de7",
                                                             "c7938c74-c2c8-4be1-96c2-59fb9bf78c1b",
                                                             new Date(1553793336556L),
                                                             "04987231-1cdf-4ef7-b53e-e636b4e39409",
                                                             "3f7a6c65-0330-4c81-967e-fae64ee38801");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("41bfa57b-e3bd-439b-a7c7-db6f380c1064",
                                                             "7d15c9a4-47ac-4e39-b720-33b34ef5968b",
                                                             new Date(1553793327330L),
                                                             "6c3d14e0-6538-4997-9aea-5e23dad8b58d",
                                                             "80b2471f-f451-49d3-bccb-58bb2848e980");
            ActiveSession activesession2 = new ActiveSession("41bfa57b-e3bd-439b-a7c7-db6f380c1064",
                                                             "7d15c9a4-47ac-4e39-b720-33b34ef5968b",
                                                             new Date(1553793327330L),
                                                             "6c3d14e0-6538-4997-9aea-5e23dad8b58d",
                                                             "80b2471f-f451-49d3-bccb-58bb2848e980");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("41a9d7dc-f05d-44c9-acf3-ca97285ca2fe",
                                                        "95d68723-520d-45ea-b8ca-e88a1ee6492b",
                                                        new Date(1553793329314L),
                                                        "ce866e8f-3059-4b41-8e84-d90cdb5bd085",
                                                        "4bf15ea6-3ab3-40c3-9e75-62b95178abe3");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("7fc4f050-3d7b-41ed-b86d-d5f60eb5a52b",
                                                             "266cc9b1-acb2-4133-a3e4-bcd0fb30c5fa",
                                                             new Date(1553793331599L),
                                                             "c6b8d918-d76f-4fbd-81f9-aaced775bf0e",
                                                             "0d3d159b-0806-4c3d-83fa-b4c8386db2e1");
            ActiveSession activesession2 = new ActiveSession("7fc4f050-3d7b-41ed-b86d-d5f60eb5a52b",
                                                             "266cc9b1-acb2-4133-a3e4-bcd0fb30c5fa",
                                                             new Date(1553793331599L),
                                                             "c6b8d918-d76f-4fbd-81f9-aaced775bf0e",
                                                             "0d3d159b-0806-4c3d-83fa-b4c8386db2e1");
            ActiveSession activesession3 = new ActiveSession("62fd56b2-5f94-4729-a0eb-aca90f3c0204",
                                                             "d7eb6e38-855d-47e1-83fd-4db4a21c7a17",
                                                             new Date(1553793331946L),
                                                             "987abe3f-15d3-4602-b817-d3ac6d537e2c",
                                                             "c404427e-d06d-4e07-8201-d398295c6683");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
