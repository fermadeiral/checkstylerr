// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("9e51a15dafd0a5b52ea7f83839311c55", new Date(1553793333706L), -72,
                                        "342ccfe2-4a5d-4b7a-99ab-aa902cbed0d2", "07d3d7ed-f552-4ee7-ac25-b79e887c7505",
                                        -31, "f8041713-7864-494c-9d0a-a7d3d686e186",
                                        "fe19a1f1-0692-4a81-9977-e0d36681c883", ApiKeyStatus.getDefault(),
                                        new Date(1553793331180L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("25ecc3e50ff7d715bf64db17eadb8e9f", new Date(1553793332522L), -28,
                                        "ab048c86-4f03-40f5-9f59-3118305bc8e2", "97dea311-bcd7-4655-870a-eb5fd0773b76",
                                        -58, "67a9b7b6-47e5-4036-a735-1f85126f854e",
                                        "ad4a9e68-8017-4061-b545-37e2993b93ea", ApiKeyStatus.getDefault(),
                                        new Date(1553793326857L));
            ApiKey apikey2 = new ApiKey("25ecc3e50ff7d715bf64db17eadb8e9f", new Date(1553793332522L), -28,
                                        "ab048c86-4f03-40f5-9f59-3118305bc8e2", "97dea311-bcd7-4655-870a-eb5fd0773b76",
                                        -58, "67a9b7b6-47e5-4036-a735-1f85126f854e",
                                        "ad4a9e68-8017-4061-b545-37e2993b93ea", ApiKeyStatus.getDefault(),
                                        new Date(1553793326857L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("be950fbb913fa56ffbcec2c15dae1d91", new Date(1553793329609L), -33,
                                   "190ba815-5ad0-4c67-b0b5-2c46c2afe1f6", "c1005469-87b8-4138-b883-b31fa98af8d8", -96,
                                   "67e33383-a82a-4294-a3d7-1d66d1e1911e", "dbac13c7-2b25-450a-8b56-d3bd44f744aa",
                                   ApiKeyStatus.getDefault(), new Date(1553793327667L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("\f\u0019K3?ObOb滿MO\u001eE3ᆒίbb\tbIbbb3^`b3.b33E\u00193b尼\u00063b\u0013\u0014L딉3'Q⨆b뀢R[-`<\t㥂兦\u00163",
                                          new Date(1553793331311L), 83, "b5edf763-7164-4c51-ac03-ea55fc143cef",
                                          "98c29d9b-5b1d-4602-9593-0f6c146c76d9", 34, null,
                                          "1fb6f572-4a27-4131-8bd7-40a6fb886e93", ApiKeyStatus.getDefault(),
                                          new Date(1553793333315L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("c98f5c14f0ecec7da17567f51b7495ab", new Date(1553793331290L), 97,
                                        "201c9039-2121-438b-959e-c24e27511f77", "2c1166d8-c242-4783-8034-14a00c21aa88",
                                        99, "daf0c845-b509-42f8-90c3-3aca8f14e186",
                                        "c4559c18-48d0-4907-a462-1fc6f01d4140", ApiKeyStatus.getDefault(),
                                        new Date(1553793326835L));
            ApiKey apikey2 = new ApiKey("c98f5c14f0ecec7da17567f51b7495ab", new Date(1553793331290L), 97,
                                        "201c9039-2121-438b-959e-c24e27511f77", "2c1166d8-c242-4783-8034-14a00c21aa88",
                                        99, "daf0c845-b509-42f8-90c3-3aca8f14e186",
                                        "c4559c18-48d0-4907-a462-1fc6f01d4140", ApiKeyStatus.getDefault(),
                                        new Date(1553793326835L));
            ApiKey apikey3 = new ApiKey("b3dabaccaa736db0c17513c5cc478dac", new Date(1553793334231L), 44,
                                        "d8e83353-c0f5-479b-9813-98d6a68b714e", "ac54971d-c89e-48fa-a236-5ac545cb351e",
                                        126, "97a0a36a-1143-4118-9b60-544d46e38de6",
                                        "c7cc6659-ba55-4681-b934-ebbaff63cdd0", ApiKeyStatus.getDefault(),
                                        new Date(1553793335374L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
