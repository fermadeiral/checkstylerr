// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("65e8da42-afdb-43cc-a18f-880f6b1118bd",
                                                             "30134b71-3b0e-4a56-8369-2a3c3538740f",
                                                             "7b428324-3406-4780-bd87-adc766467e96");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("65de5d9e-3d03-457f-9140-ccdf9a2c5a02",
                                                             "845c3855-6c07-4db0-91f6-627dcbc3c07a",
                                                             "a702a31f-2283-4e44-9a89-0633990e47e0");
            ParentAccount parentaccount2 = new ParentAccount("65de5d9e-3d03-457f-9140-ccdf9a2c5a02",
                                                             "845c3855-6c07-4db0-91f6-627dcbc3c07a",
                                                             "a702a31f-2283-4e44-9a89-0633990e47e0");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("d6616dab-13b0-42c7-bd98-3b6ce773239f",
                                                        "09a03fdd-37ca-428f-a485-f93c54eddef4",
                                                        "a621b004-21a6-4c7d-ae69-88c5063c3dbf");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("bdde9c68-ecb1-492b-b8d9-33fb6a3239bc",
                                                             "19acf302-ba24-4b01-98e1-aa1b671f04a1",
                                                             "570ca545-8754-4c73-a05a-91a6fe5bebfe");
            ParentAccount parentaccount2 = new ParentAccount("bdde9c68-ecb1-492b-b8d9-33fb6a3239bc",
                                                             "19acf302-ba24-4b01-98e1-aa1b671f04a1",
                                                             "570ca545-8754-4c73-a05a-91a6fe5bebfe");
            ParentAccount parentaccount3 = new ParentAccount("ef4d654e-c693-49f7-a73b-27d228a7a075",
                                                             "7549e92f-8340-4db4-ba98-ee252c861785",
                                                             "2af57a3a-372b-4d27-89dd-fb866b2faad3");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
