// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("fefe4b41-b11f-4da0-8c05-d77097ce10b0", true,
                                        "d8af6971-b2f3-420c-8821-6273013f824c", true,
                                        "2a8b4a86-09fd-472b-ac02-19dad1192aa6");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("c35b201f-41ac-4e25-89ce-8515cee5d34b", false,
                                        "0308f32a-a83c-40f0-92a5-5936553991b2", true,
                                        "e76b6730-9620-4004-bcfd-9984d5b53609");
            Policy policy2 = new Policy("c35b201f-41ac-4e25-89ce-8515cee5d34b", false,
                                        "0308f32a-a83c-40f0-92a5-5936553991b2", true,
                                        "e76b6730-9620-4004-bcfd-9984d5b53609");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("434d112b-f0d6-4114-a346-0358ff4d7ce7", true, "267180c8-883e-4f11-8509-c234e0fb9920",
                                   false, "f9913c2b-3035-4dd9-9e73-5c96419dfb3b");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("ba42cc2a-bf3b-40f9-815f-17d67d5b713e", true,
                                        "ddc2ca40-5e15-48bc-8a5c-448f77a24e98", true,
                                        "38d119e4-0ca8-4fdf-aa03-98a666127c09");
            Policy policy2 = new Policy("ba42cc2a-bf3b-40f9-815f-17d67d5b713e", true,
                                        "ddc2ca40-5e15-48bc-8a5c-448f77a24e98", true,
                                        "38d119e4-0ca8-4fdf-aa03-98a666127c09");
            Policy policy3 = new Policy("c2ca4e1d-e3a4-4e7d-9da9-f6d6a838759c", true,
                                        "b7124e99-f1cb-456c-9ff4-afcaed97af48", true,
                                        "cea07c24-ddb0-450f-9625-fd55ecceffb8");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
