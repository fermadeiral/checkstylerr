// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("23762f19-3825-4b86-8570-249da4b21bc4", false,
                                        "c4beaff0-d45b-4fca-9bd2-c4474c6b1892", true,
                                        "67945961-0f1f-49c2-9792-0d9c3357251a");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("fc69f0fd-d859-4910-96a5-cc2fd198b402", true,
                                        "16f5b075-4c35-415c-b76f-20482f8f4944", false,
                                        "c9085820-6eb8-463f-aec4-67f4be50d907");
            Policy policy2 = new Policy("fc69f0fd-d859-4910-96a5-cc2fd198b402", true,
                                        "16f5b075-4c35-415c-b76f-20482f8f4944", false,
                                        "c9085820-6eb8-463f-aec4-67f4be50d907");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("06d50eaa-05c4-4f61-9228-3a78b0f9cbc0", true, "7f146753-a615-4a9b-80ee-f55c6625ea56",
                                   true, "69da37ae-c7c0-4687-86f3-2abff64a14a1");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("53781864-54a5-49f8-9cd5-e66d91b8ccc2", true,
                                        "641d2406-f035-4539-a1e5-9f71a8f7e330", false,
                                        "b3b78117-372a-4374-a362-f5310231a474");
            Policy policy2 = new Policy("53781864-54a5-49f8-9cd5-e66d91b8ccc2", true,
                                        "641d2406-f035-4539-a1e5-9f71a8f7e330", false,
                                        "b3b78117-372a-4374-a362-f5310231a474");
            Policy policy3 = new Policy("4b9a3ff7-4832-42ed-b422-f61a11c452a9", true,
                                        "2ce3b107-2c3f-4a23-a570-37cae033bbd3", false,
                                        "dfa4fd48-4fae-4b25-8e49-044ff3d1ddde");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
