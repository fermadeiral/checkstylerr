// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                             "88089ee8-03d7-46d9-aca7-2294fcb98b0d",
                                                             new Date(1559150277994L), -69, null,
                                                             "a8f81.f3816@bfefd.me", false,
                                                             "19203263-0286-4ca2-bd81-57df3999f65c",
                                                             "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, true, true, 70,
                                                             null, null, "2bb1fc49-bac3-4019-8053-aa78c6f5b33e", -126,
                                                             "14490ddd-b10f-4f00-9db3-8ae04b930c1a",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559150275872L), "4b+_+p");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                             "8d41c5e0-657f-41ed-bb20-eddbcfa68f24",
                                                             new Date(1559150273247L), -6, null, "c687f.12a09@19ad4.me",
                                                             true, "d352edc1-25a6-4372-bd7b-1e5f10e3dceb",
                                                             "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, true, true, -21,
                                                             null, null, "6c6f0eec-6b7a-4fe2-b6ec-109f6913b5da", -28,
                                                             "89258668-4c04-427b-9454-81d9f51167e5",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559150276713L), "4b+_+p");
            SubtenantUser subtenantuser2 = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                             "8d41c5e0-657f-41ed-bb20-eddbcfa68f24",
                                                             new Date(1559150273247L), -6, null, "c687f.12a09@19ad4.me",
                                                             true, "d352edc1-25a6-4372-bd7b-1e5f10e3dceb",
                                                             "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, true, true, -21,
                                                             null, null, "6c6f0eec-6b7a-4fe2-b6ec-109f6913b5da", -28,
                                                             "89258668-4c04-427b-9454-81d9f51167e5",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559150276713L), "4b+_+p");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                        "39560323-d3df-4a65-bd79-50ec4c415234",
                                                        new Date(1559150270838L), 16, null, "14cb4.62dcb@5aaf2.me",
                                                        true, "9ada2450-4720-4f7c-b61a-321d0787dcfb",
                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, false, true, -21,
                                                        null, null, "a8617c39-83bd-46ae-ace0-61ef95c686b4", 37,
                                                        "85081bfe-59cd-49b7-8923-dbb448157848",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1559150272994L), "4b+_+p");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "52881b86-a223-457c-ac9f-c1ab2f1cc163",
                                                               new Date(1559150279214L), 124, null, null, true,
                                                               "9165605c-1031-4b6c-a262-f4ded4dab92f90bf848e-0b56-4f06-ad3c-1e85a34cd7a68f28d7b1-85bc-4f79-9b07-461f2a75f241",
                                                               "ë?“44\t48)87\u000578æª¶Y8à¤œâ­ƒï…Œ\\\\8;M4[4Y7U7@7ç¥“?á…¼? 788?44EìŽ¯è‡¿?ã‰Ÿ`7ã‹‘ã˜ž7ç¸¦!8ï¢µJ744æœ·ã¦«48",
                                                               true, true, true, 10, null, null,
                                                               "baaa3605-c26d-4aab-831e-6ca0600f6ed2", -30,
                                                               "31fbc6f9-e00d-446c-9c36-fcb9b80e6c1a63a3dbab-99e7-4ded-b559-87181a1162764d753a5e-676f-4088-be64-0cd7db61d801",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1559150277343L),
                                                               "5P\u0017-jo!é¼¸A.Tá?—,Bâª¼m` 6ä•‚\u0001è‹¥\u0006c`8`ãƒ—aaaã²²e#'3\u0000-è–’è‡ `\tag1é€º\u0015/1Rdog\u000b\u0007 e).I0j0î›?");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                             "59a0c70b-2a7f-4431-bf99-fb9d8c0414ba",
                                                             new Date(1559150272098L), 86, null, "92be2.fbe9a@8932c.me",
                                                             true, "d679fe5f-2f0a-4135-a647-bd4ddedd1d25",
                                                             "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, false, false, 3,
                                                             null, null, "93faf319-6591-4740-917a-e47f66bc452c", 38,
                                                             "f63c881f-e1d2-4cbe-bf2c-68858ab1100e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559150275763L), "4b+_+p");
            SubtenantUser subtenantuser2 = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                             "59a0c70b-2a7f-4431-bf99-fb9d8c0414ba",
                                                             new Date(1559150272098L), 86, null, "92be2.fbe9a@8932c.me",
                                                             true, "d679fe5f-2f0a-4135-a647-bd4ddedd1d25",
                                                             "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, false, false, 3,
                                                             null, null, "93faf319-6591-4740-917a-e47f66bc452c", 38,
                                                             "f63c881f-e1d2-4cbe-bf2c-68858ab1100e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559150275763L), "4b+_+p");
            SubtenantUser subtenantuser3 = new SubtenantUser("e51a609dbd6e0d1c3d5bbabcaedbd2eb", null,
                                                             "b614e548-0fb3-4928-b51e-acd3b3dee728",
                                                             new Date(1559150274873L), 37, null, "f61d1.d1935@182ff.fr",
                                                             true, "8490d2b4-83eb-48ee-9b05-02828e06d316",
                                                             "e51a609dbd6e0d1c3d5bbabcaedbd2eb", false, false, false,
                                                             -100, null, null, "0aff9c58-825e-44a9-a730-035dd447770a",
                                                             2, "f1cdbf77-04d9-4b8f-be80-af880b184790",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1559150274271L), "4b+_+p");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
