// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559150273175L),
                                                                         "1b238749-7b85-42c9-b3d4-1eaa75c86c82",
                                                                         "c171936d-2ebc-4410-981f-608f4df45965",
                                                                         "3c1f6e0c-131f-41c6-bc23-0dba9afe0f41");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559150273620L),
                                                                         "41c24897-0466-49e9-aaaf-16d05feee1f6",
                                                                         "0fa4f816-6089-4193-9abc-7de9cb44fbab",
                                                                         "8365032f-0b0e-421a-8258-798a28ab3cc8");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559150273620L),
                                                                         "41c24897-0466-49e9-aaaf-16d05feee1f6",
                                                                         "0fa4f816-6089-4193-9abc-7de9cb44fbab",
                                                                         "8365032f-0b0e-421a-8258-798a28ab3cc8");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559150270699L),
                                                                    "880cdaa6-a4d3-4cab-af83-0865a6a027ff",
                                                                    "be2331df-aef0-4566-b451-84acdf0f99ad",
                                                                    "ffb2869f-ba9c-4abe-a462-986059bf97e4");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559150275168L),
                                                                         "772a3e63-7be5-4c2a-81be-6b494954d566",
                                                                         "a88be669-eda0-445a-8058-66f3d196fdcc",
                                                                         "e4dcdf66-3e54-4f17-9be0-2c2b833a48fc");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559150275168L),
                                                                         "772a3e63-7be5-4c2a-81be-6b494954d566",
                                                                         "a88be669-eda0-445a-8058-66f3d196fdcc",
                                                                         "e4dcdf66-3e54-4f17-9be0-2c2b833a48fc");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559150274228L),
                                                                         "a0373e62-73d1-4597-a674-f7f93342b207",
                                                                         "d048fe88-c721-4ce2-a07d-dafde4cc08de",
                                                                         "48f3e7c0-d3f3-4841-b490-ad8c9952725b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
