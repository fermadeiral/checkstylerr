// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559150275766L), 27,
                                                                      "92b249d9-1787-4464-96fc-e60e8d33bdfd",
                                                                      "fa0fff30-2c8c-4801-96a1-2748b9ec6f85",
                                                                      "588fd544-887e-43f1-b5aa-232ff44e639b",
                                                                      "be21fd20-6546-4fbf-983e-0f1f9977f0d6",
                                                                      "d2a8864f-b611-420a-aa5d-9abc9cc1cfce",
                                                                      "5d14be50-c334-4cf9-8d6e-4181f45e6765",
                                                                      new Date(1559150270856L),
                                                                      new Date(1559150276890L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559150273935L), -94,
                                                                      "3b2785c0-c844-4e32-8a42-d7b514799369",
                                                                      "9277e55d-be0c-4550-be0a-7985f0715e65",
                                                                      "76818e7f-f251-45ce-855b-ecd81f2adcc9",
                                                                      "642421f6-f050-445d-9677-14682910d362",
                                                                      "d0c12f7e-a81c-46da-89ba-be2869119732",
                                                                      "b852a333-f090-4175-b360-5af6098d96bb",
                                                                      new Date(1559150276369L),
                                                                      new Date(1559150276750L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559150273935L), -94,
                                                                      "3b2785c0-c844-4e32-8a42-d7b514799369",
                                                                      "9277e55d-be0c-4550-be0a-7985f0715e65",
                                                                      "76818e7f-f251-45ce-855b-ecd81f2adcc9",
                                                                      "642421f6-f050-445d-9677-14682910d362",
                                                                      "d0c12f7e-a81c-46da-89ba-be2869119732",
                                                                      "b852a333-f090-4175-b360-5af6098d96bb",
                                                                      new Date(1559150276369L),
                                                                      new Date(1559150276750L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559150270567L), 2,
                                                                 "6459dd85-6a34-4f0b-96b7-3003b3904994",
                                                                 "7115fe61-4a03-4526-b334-ddc7586ad126",
                                                                 "0c6c97ba-d34e-4113-92bb-3cc76b5d9a43",
                                                                 "7b9c4e2e-9480-4b85-8f79-c13431825b09",
                                                                 "7002a23b-33ad-4f57-9386-0d3e6924b805",
                                                                 "d125e8ff-d179-43ac-bbd8-b87cbfa558f4",
                                                                 new Date(1559150277089L), new Date(1559150270853L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559150276925L), -17,
                                                                        "2f2c65cc-7905-4be7-a93c-294852a51bc4",
                                                                        "b47a21a3-373b-4aab-8873-882ba7c446ed3f3ddb69-ccc5-4b2f-b6f5-8d9149a73ab08090842c-1964-431c-9fcb-54a95a59dfa70ee058ad-143a-4f6b-b04a-9df3dec994e78fc89710-2e8c-4562-bc9e-f93ecbc4d346621e8e70-6d43-4f41-ab98-731454305893e49a8d23-0705-4ebc-aa84-abdaabfd9ea2bb246c6a-bce0-4602-850b-4a758cd4af82f5fd66f5-f1c8-41e9-ab6b-ea62de0ee961d2bdc279-0ef6-4621-a840-cc4fe9c5af1beb6cd47f-245c-4b2f-9365-55b947ae43ece3c5363c-d2d8-45cb-8cfb-554c72eaf8b0616ce067-d540-4db6-b081-aebbc1945b442f0bf8d4-a230-4eb5-8134-3ea512efec6720b55b0e-035b-459c-a889-ec81bd484b87afa952c8-7e2d-48b7-a1d0-1390d646ef02e4bd52e3-4926-468c-a6b5-7dc59d11057be6c3fcbc-f410-46a3-876e-2d7175d2b8581a67f565-a6d2-4d03-a8e4-267095a9f4c846c03080-cf54-4c61-931a-9246fa0433d862208fe6-cdd0-4dc5-82bc-c5aa7d4535a0b6632598-98eb-47f6-8afe-2e4cba56f3f3d3cf6bef-f887-4c9b-b933-c479930e16991f7f520d-ef1f-4cab-a79b-f8c8b8dc9c29aecf5c96-662d-4e20-8f9d-d6bf61d826f25660da4b-3781-40dc-8131-d137639f4ea183c3246c-ee52-4c29-b72d-f0f603510d546f4d3216-fbd5-4f0f-8081-1d3305157c53ff0f7c18-706d-4e0c-abd7-3c91a8592526ae12d71a-fd89-4e21-ac25-c7e852e9fe59dae817bb-bb41-400d-957d-3f97c3787c38f40bc877-daf5-42b3-bee8-7dac8033f4a1deadc103-fccd-462b-89ea-d8179fb60c595d4b709f-aab2-4e33-88bb-0af2525bcbc4b3f19f05-dc65-44f9-aacd-acb536608c9f85af0292-2515-481b-a665-6b7f17765f94b2a048c5-563a-4e36-8778-d6346c420c54509eb282-2bda-49d7-aa16-2729198200662b292a31-da6e-494a-b7ef-84029dab29de47c464cb-cd59-48bb-b1a6-00ec9d4739446e01ea78-b6b9-4f47-8b80-e2cef81c16306e38fc15-331f-4497-95b5-c67911284d1dff68d20b-21f3-4518-bd32-6146262a5c922cf19eac-cdb5-46ec-b570-2dbd01995013887cb365-5ea3-4c9c-84c1-02e5736766b2086afe32-b586-4c7f-9171-bf2268bbfeb6c6b05a2d-6b79-4519-a2ff-1566de938de418f6b4e4-1e64-4121-9595-78cdb52e9ea98ebc0faa-4d36-4657-b4e3-2d3c52b88056acdec06e-d491-49f9-83f5-5d7d76e542f653501c5d-260d-47e3-96fb-6bde91d0e0b1bb13a5a7-617d-4265-a67a-6085d65f12666c8a66ac-3d84-4124-9ab7-2ed8f3b052852acee0f5-bef2-473f-a8f9-d5167226545555e17bb6-adcc-415f-aee0-2d077ea9b2b1936a6a4f-2ee1-4c06-a743-dcdaf073a058",
                                                                        "bb196e9c-dfc0-4ace-ba40-ecb3b14dea3f",
                                                                        "a3f01a5d-3eff-4b32-bfec-e9581b5cc643",
                                                                        "b2e4fa3a-cbb4-47ee-90cd-b2e5715e7323",
                                                                        "84880377-f4e9-4ac5-9684-64ef1be7c022d59c95d2-28ab-479c-9228-345e0eb0e01682335998-d5eb-45c7-b2f7-230a5889a65b46233733-2459-4381-baa7-ab51135a8afa",
                                                                        new Date(1559150272811L),
                                                                        new Date(1559150275559L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559150278894L), 8,
                                                                      "b078dd60-3871-4a9f-8cc5-a4b41d6385ee",
                                                                      "8cd20ddc-3221-4850-a5da-dfca6bcf0c83",
                                                                      "6f953f6f-df4b-4e5c-810e-309b6badcca2",
                                                                      "ebce4b9e-4abd-4475-86f8-1561f2a59ac8",
                                                                      "a8433a3f-d741-4553-8225-280ec0a212f7",
                                                                      "dbe1cf97-8c03-44b1-9a4f-51b4643cd585",
                                                                      new Date(1559150277915L),
                                                                      new Date(1559150271210L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559150278894L), 8,
                                                                      "b078dd60-3871-4a9f-8cc5-a4b41d6385ee",
                                                                      "8cd20ddc-3221-4850-a5da-dfca6bcf0c83",
                                                                      "6f953f6f-df4b-4e5c-810e-309b6badcca2",
                                                                      "ebce4b9e-4abd-4475-86f8-1561f2a59ac8",
                                                                      "a8433a3f-d741-4553-8225-280ec0a212f7",
                                                                      "dbe1cf97-8c03-44b1-9a4f-51b4643cd585",
                                                                      new Date(1559150277915L),
                                                                      new Date(1559150271210L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559150277768L), 73,
                                                                      "c94f7873-a28d-4b4e-8d78-8b3ded27d0bb",
                                                                      "cd79d342-b8d1-4439-9937-0588d7179258",
                                                                      "f173f4f0-aa0f-47c3-83ad-6e5dbebd429c",
                                                                      "53406d8d-9a10-4860-bd9d-da02a812a3a6",
                                                                      "ff1eb5e1-3adb-4d2c-887b-6bbdbf7975e2",
                                                                      "e0807bef-366a-4894-a8e6-d4e8f0653346",
                                                                      new Date(1559150269872L),
                                                                      new Date(1559150270973L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
