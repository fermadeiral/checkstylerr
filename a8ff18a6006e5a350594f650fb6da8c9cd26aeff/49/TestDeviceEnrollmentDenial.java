// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        new Date(1559150279463L),
                                                                                        "8e0ab88d-8dc9-4966-a573-825804140cdf",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        new Date(1559150274190L),
                                                                                        "df184f8a-aa61-4fc9-9ee7-a5be99157a90",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        new Date(1559150274190L),
                                                                                        "df184f8a-aa61-4fc9-9ee7-a5be99157a90",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                   new Date(1559150276784L),
                                                                                   "7650c5d3-94d5-4b0e-82d5-2f7f9b54bd5a",
                                                                                   "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                   "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("ë?“44\t48)87\u000578æª¶Y8à¤œâ­ƒï…Œ\\\\8;M4[4Y7U7@7ç¥“?á…¼? 788?44EìŽ¯è‡¿?ã‰Ÿ`7ã‹‘ã˜ž7ç¸¦!8ï¢µJ744æœ·ã¦«48",
                                                                                          new Date(1559150271737L),
                                                                                          "deae6af1-82e7-445f-8793-7b2156c3b7f1",
                                                                                          "ë?“44\t48)87\u000578æª¶Y8à¤œâ­ƒï…Œ\\\\8;M4[4Y7U7@7ç¥“?á…¼? 788?44EìŽ¯è‡¿?ã‰Ÿ`7ã‹‘ã˜ž7ç¸¦!8ï¢µJ744æœ·ã¦«48",
                                                                                          "ë?“44\t48)87\u000578æª¶Y8à¤œâ­ƒï…Œ\\\\8;M4[4Y7U7@7ç¥“?á…¼? 788?44EìŽ¯è‡¿?ã‰Ÿ`7ã‹‘ã˜ž7ç¸¦!8ï¢µJ744æœ·ã¦«48");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        new Date(1559150278724L),
                                                                                        "94d0775f-23b2-4547-a209-787318fdd8d5",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        new Date(1559150278724L),
                                                                                        "94d0775f-23b2-4547-a209-787318fdd8d5",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        new Date(1559150274600L),
                                                                                        "ce953d1c-6f0a-4a82-a2d1-303411bd0306",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb",
                                                                                        "e51a609dbd6e0d1c3d5bbabcaedbd2eb");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
