// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("ffe96b576a13a1d33b91621b8d60db1f", new Date(1553524604976L), 66,
                                        "cdd52f34-28f5-458a-b973-85781a8d0a50", "5459f05a-109c-4d76-9ff1-4e51944c6d95",
                                        -13, "3509e9ba-6933-4744-b4e1-c49e1fe2db32",
                                        "adbbd18e-5593-4b9c-846e-20ed8079ea3b", ApiKeyStatus.getDefault(),
                                        new Date(1553524612005L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("1aeff029bcdf06ef726c433f7df12bcf", new Date(1553524609262L), 76,
                                        "6c8cdba7-eaf3-422f-8d98-cfe8198060a5", "1ea1572d-2772-4b44-b8be-21d7b2f8c0d5",
                                        -54, "8101b145-097b-44e4-a96e-e896f2ffa546",
                                        "4db44a5f-bdee-4e0a-a0f1-1f9b75e5df18", ApiKeyStatus.getDefault(),
                                        new Date(1553524610621L));
            ApiKey apikey2 = new ApiKey("1aeff029bcdf06ef726c433f7df12bcf", new Date(1553524609262L), 76,
                                        "6c8cdba7-eaf3-422f-8d98-cfe8198060a5", "1ea1572d-2772-4b44-b8be-21d7b2f8c0d5",
                                        -54, "8101b145-097b-44e4-a96e-e896f2ffa546",
                                        "4db44a5f-bdee-4e0a-a0f1-1f9b75e5df18", ApiKeyStatus.getDefault(),
                                        new Date(1553524610621L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("e1a22c3bd040530426a1e2ff12edec2c", new Date(1553524610845L), 49,
                                   "7849bcff-9b40-4a6d-ad23-fc27b7b4f05f", "091176a2-98f5-4332-af28-71028cd87783", 120,
                                   "1951985d-ae9f-44d5-83d3-6417b5b1ba3b", "50e07510-98fd-45a0-9f7a-77d53e14ac56",
                                   ApiKeyStatus.getDefault(), new Date(1553524603290L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("+Bè¼ž;4ì—°à¦?bb44\u0019b44bãœŽb,b4N-\u0015,\u001ebbäª¨4bï«?UR\u0010\fá•—4A.ç·?bb_44b/44U>b#b\u0018?á†²?âˆ€bç¼•\u001dê»”",
                                          new Date(1553524609422L), 103, "da5ee536-2bac-4b3e-9abb-895375c9ba08",
                                          "67577646-3001-4ba2-b1bc-7d102884e7da", 108, null,
                                          "96629716-53c6-4b9f-85d2-435f5ed58ae8", ApiKeyStatus.getDefault(),
                                          new Date(1553524606653L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("0abf40c16166ef5b65fae20fe7a0def3", new Date(1553524610151L), 117,
                                        "cf88776b-b27f-420e-be02-8566de60f126", "24467e3a-a862-41c4-834d-093632b4f419",
                                        114, "3011042c-5231-471e-a45f-189d6f28299d",
                                        "8287085f-8979-4d14-8f50-15639bc2cd7a", ApiKeyStatus.getDefault(),
                                        new Date(1553524612404L));
            ApiKey apikey2 = new ApiKey("0abf40c16166ef5b65fae20fe7a0def3", new Date(1553524610151L), 117,
                                        "cf88776b-b27f-420e-be02-8566de60f126", "24467e3a-a862-41c4-834d-093632b4f419",
                                        114, "3011042c-5231-471e-a45f-189d6f28299d",
                                        "8287085f-8979-4d14-8f50-15639bc2cd7a", ApiKeyStatus.getDefault(),
                                        new Date(1553524612404L));
            ApiKey apikey3 = new ApiKey("c17f3e3f4a146bfc5ffd97820bd90957", new Date(1553524606378L), -65,
                                        "4acac23f-0878-494f-b64b-f0387db5d030", "ca35a161-80a4-4252-b22e-e588112e7568",
                                        -89, "672ef1a9-b679-4c88-8fc0-107ff1b8e5ab",
                                        "9d1d500a-6e46-40ea-848a-531916631df6", ApiKeyStatus.getDefault(),
                                        new Date(1553524607335L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
