// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("7fabf78c-a880-47bf-b227-31c84a87ac4c",
                                                                      new Date(1553524606573L),
                                                                      new Date(1553524610268L),
                                                                      "020bVp98dJnelKvJol8E8s79s54rGHbY",
                                                                      "A-7GghN98Qcbd9vLzSmwHDCLN2vXN7q13rWlL5Faj9o2M1T300I5omeGx5c61nIW8:Kb:CgIy4Rfbg396Ow53E59bU:MUk2Ro",
                                                                      new Date(1553524612693L),
                                                                      "AL8M1Y6LNnb7SW536Vtf1g7H1hE89k17");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("1f27ee09-d09b-4ee8-9981-c062f06d6695",
                                                                      new Date(1553524604340L),
                                                                      new Date(1553524608732L),
                                                                      "B1rhRK2d1C696qiNV60e730f1Nv3jr65",
                                                                      "A-D98yVRbcP946O7wVo:Cg8d2okYHk99a2V6ck3Ou0xfIccJbt0p4y0sCArc:zn96tM2DWs7ZUy34m50GIil1uH3H9:Q7hc5N",
                                                                      new Date(1553524610840L),
                                                                      "TN2m1HINSsh1O7in8wK0387XouAykRd5");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("1f27ee09-d09b-4ee8-9981-c062f06d6695",
                                                                      new Date(1553524604340L),
                                                                      new Date(1553524608732L),
                                                                      "B1rhRK2d1C696qiNV60e730f1Nv3jr65",
                                                                      "A-D98yVRbcP946O7wVo:Cg8d2okYHk99a2V6ck3Ou0xfIccJbt0p4y0sCArc:zn96tM2DWs7ZUy34m50GIil1uH3H9:Q7hc5N",
                                                                      new Date(1553524610840L),
                                                                      "TN2m1HINSsh1O7in8wK0387XouAykRd5");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("469dcea8-77e6-4246-a80a-28c99ae8c9a6",
                                                                 new Date(1553524606762L), new Date(1553524603675L),
                                                                 "6gOe9DJa0L7vykaLs6c73sB0mr7WK17z",
                                                                 "A-5fR28mX5WyQ0r::jW0MNITA1XDzXKpZFS9j6253Hi6ZjD6z0T3LXMfJjL9KH6VewN9ywCjp0Qk767cG63d7S78w5765iA7x",
                                                                 new Date(1553524607740L),
                                                                 "Gu9e7cTUsob735bY66t89XjoJY25O2E3");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("01f0f81c-37f3-41ea-8d24-8cdeac1732a7",
                                                                        new Date(1553524605663L),
                                                                        new Date(1553524610418L),
                                                                        "LdDEaYEIEDJOGdgdVYf!tdc@xnktJ;g1n\u0004wSྜ11?llcctOG^s6G\u001bo\u0011NjDog\u0000YYD",
                                                                        null, new Date(1553524604129L),
                                                                        "NqRlRZM䙣wIvMWI_qPq<wWPdN41[V1㫿㔖M̹nVW@㵕NRRqVqq4qq*ꨱh[RDl w䓯hPR!=");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("2dab6a40-5810-44ab-a059-8e3aa3d64c66",
                                                                      new Date(1553524612781L),
                                                                      new Date(1553524612641L),
                                                                      "qp2Fs46WNnQ0sHC8J26mHgN3Xd3p099Y",
                                                                      "A-Y2Q61izOnxHUue6:z4764Ykizv8TLl5DTBz36z4QTv3bTp981CXLoDkR1D0We39fE9pNERsCkE6U5ceFT:j3dQq26hqoo5u",
                                                                      new Date(1553524609309L),
                                                                      "f00p903rbOscK6UYQT6g1vp545Hxc104");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("2dab6a40-5810-44ab-a059-8e3aa3d64c66",
                                                                      new Date(1553524612781L),
                                                                      new Date(1553524612641L),
                                                                      "qp2Fs46WNnQ0sHC8J26mHgN3Xd3p099Y",
                                                                      "A-Y2Q61izOnxHUue6:z4764Ykizv8TLl5DTBz36z4QTv3bTp981CXLoDkR1D0We39fE9pNERsCkE6U5ceFT:j3dQq26hqoo5u",
                                                                      new Date(1553524609309L),
                                                                      "f00p903rbOscK6UYQT6g1vp545Hxc104");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("3b625563-5b7e-49dd-ad7d-069a687b6930",
                                                                      new Date(1553524610327L),
                                                                      new Date(1553524611779L),
                                                                      "pJj2u7LCzM93p51pLZyU9ALi1oRf0FMh",
                                                                      "A-095hl:hcOfU53Prz2hdLZ2W9oXIkm6E5hf5U3OD19ae47QZ334UBDlL130xMWLQ7VIOnNElejVGCMuwtw:2XDZ1AFwQSARH",
                                                                      new Date(1553524610794L),
                                                                      "9UlvUbfWNlF6O9o94LyzEDwq2HJc9Xb0");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
