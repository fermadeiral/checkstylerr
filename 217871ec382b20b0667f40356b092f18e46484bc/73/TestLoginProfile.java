// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("fcf65815-b7cb-4793-af20-a0af6476343c",
                                                          "cb2607b8-4b21-4f85-a619-1a2ce5782a07");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("7539d13b-02b0-428f-a08e-1268deb102e5",
                                                          "f97e407b-a549-4599-b835-441b45d75cfc");
            LoginProfile loginprofile2 = new LoginProfile("7539d13b-02b0-428f-a08e-1268deb102e5",
                                                          "f97e407b-a549-4599-b835-441b45d75cfc");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("c1e27a01-53f7-4883-87c6-5002d484ad50",
                                                     "45540d1a-2f42-42b4-a23d-3e69ba4acb9f");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("d7fde25f-d96f-4cdc-a9eb-de1b3bf973e4",
                                                          "b3b2dee3-b49c-4e2b-b4eb-a3038fdb4797");
            LoginProfile loginprofile2 = new LoginProfile("d7fde25f-d96f-4cdc-a9eb-de1b3bf973e4",
                                                          "b3b2dee3-b49c-4e2b-b4eb-a3038fdb4797");
            LoginProfile loginprofile3 = new LoginProfile("4fded276-2e9a-40ec-bc82-450d2d38af6c",
                                                          "300ae6f8-df1c-4e73-8091-f994538265b4");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
