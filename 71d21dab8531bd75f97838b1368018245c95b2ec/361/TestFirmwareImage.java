// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558093219783L),
                                                             "2895b0c4-e44a-4ced-9574-766de016b7dd", 75,
                                                             "d72cf563-1f64-41d5-9275-b3992d73333e",
                                                             "f8738e27-7cfc-46a2-a7d8-d13ae5b4e825",
                                                             "3897fde7-b1cb-46b1-945b-a37f50ddad8f",
                                                             "fe8ee83a-775f-4060-b269-ec0234d87ab0",
                                                             new Date(1558093219734L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558093226704L),
                                                             "9c8a2631-9b74-46ca-9049-e5077dd57924", -83,
                                                             "00667f62-e3d7-4e2f-93c3-b049fab9796a",
                                                             "0e6b9a85-5a52-4b89-8871-02dd5de0ea33",
                                                             "62837a97-1e0f-4f84-83fe-49f47296d471",
                                                             "c40c4d32-b805-4280-81ea-00819e6f5e1c",
                                                             new Date(1558093223568L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1558093226704L),
                                                             "9c8a2631-9b74-46ca-9049-e5077dd57924", -83,
                                                             "00667f62-e3d7-4e2f-93c3-b049fab9796a",
                                                             "0e6b9a85-5a52-4b89-8871-02dd5de0ea33",
                                                             "62837a97-1e0f-4f84-83fe-49f47296d471",
                                                             "c40c4d32-b805-4280-81ea-00819e6f5e1c",
                                                             new Date(1558093223568L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1558093220390L),
                                                        "24c38f6e-45c4-4e69-9c9c-0108497df364", -61,
                                                        "4504443a-531a-4389-b56e-03205840b547",
                                                        "4c3faf52-9dfa-46a3-8830-a881271f1d4e",
                                                        "c31fd63d-fcb2-4c6d-b0ab-cda29c326a92",
                                                        "ca482d90-2283-42a9-a10d-7141815cfd4d",
                                                        new Date(1558093223426L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1558093226515L),
                                                               "e6f98ae2-5ccc-4838-bdc6-6f658645f163", -104,
                                                               "4da86236-9c77-4203-bdc6-61d9ca0054b7",
                                                               "3b07a2eb-db99-44bd-a7c2-bb6b85a3d0546ab9def7-44bc-4ec6-aca7-64f8ea82e9f7ff5b4704-4b45-471b-97a2-c6def66986db513371ca-fb5c-43f8-a5c6-62b3dc373cb8de6723a5-7359-4df0-834e-f8b26b91406e0889c871-e14e-4ca2-9772-004c2b52148f6ce8e7d1-0362-4d4c-b5ff-bebb84c6299f8d41348e-b3a2-41ed-a63c-8ddcf2765ad3bf557240-6aa9-4a24-a268-8b78e975ba7c5fe9fe93-91c5-49da-ab88-10ae419c73b19caf8c52-693b-4897-9593-683b2014fc8f43e992fc-a9fd-4ab3-b75c-10f12af71fcb9259ef26-d267-4190-97bf-73c050e5abd2845b4683-3074-4db7-9f46-8dc846b9f540903f7724-38d4-452c-bf4b-28225bb3c87002af2937-c690-493b-8201-af8aa2bc14c060b9a369-429b-400f-b266-9a8673ce5a9aceff299b-0f92-470c-9047-75d98da690ac8d509077-6206-4ee3-a458-154b220d39504a34ed76-cf4f-479f-9aed-afe881afe8cbb071ee01-23b6-4b33-9ffb-250683da15c881c1904b-1bf8-49ff-b796-de5292731fbcb8d68497-c161-4281-8fff-5d74d06be68a00aa4d31-ffc5-4a2b-9558-274516185e32ee13e6da-0297-4c76-9450-05b3ebd26941485c3054-7fcf-41b4-8fa8-085197722809154a4984-23bd-4de1-8594-beadb7f9c995ef598dbc-b098-471d-9e12-a94c7d8c17a38c6af269-7169-48c6-800e-113579c2c3980adf5202-e7d2-4ccf-8455-7d3305ab5c754d8810f5-153f-44dc-89b8-46b22cbf2b00685d0767-d08e-4adf-a5eb-53fbccb9d0abf224f589-8cf2-4b1b-a528-e35cba44b1a593cf5f4c-654f-4ddd-b484-fc7db36545fb839c3f0a-a606-4f60-885c-4dcd74cd536d0ef44263-dea5-49f5-99c3-d23842cc5c1ceabfee91-642d-428e-b593-66938cb110ee97b7eeaf-f49e-48df-beab-4b2d3c399a6626a07185-074d-450e-ab9d-73291f406daacd43fc03-1136-4be3-b42b-5f74f11ef26b9e9b64c6-89fa-4127-8303-3e565a4fd0492d3794ed-16a0-4482-8df5-e8d9df8278de9141c6db-0ac5-41aa-bff9-8a44c094967070688c6b-20b6-4d25-bad2-f80f61393a2bd71b1d63-88b8-4bc1-81a9-01acb732768d4e0a924d-cd83-40ff-811c-7216c20b54c766c302da-d00e-4f28-bcf4-a2b27ac3acc1e67e0167-4d1f-4187-8df6-8f2f94101c96ba84057c-e8d6-4f02-b74e-b84dd8f230d3161394b2-59a7-458a-89ea-018260b5366767195f3e-c550-4e22-9275-27f1dbcc8518efa91c45-9191-4b84-b852-9fed44a7c8b1accfb720-8bfc-4404-b9c4-182ff95efb55253106a3-7b89-44c4-9419-ca9eac058e5bcb893146-aa7d-4a77-a9fd-2b6287bffc32e93ac361-70c8-4f44-b8da-9db35be450d8",
                                                               "009f5b70-b5f9-4b2a-a715-e505082c451e",
                                                               "c329858b-6764-49b0-b3aa-10724f11c254e43f4f82-844b-4c01-bc5f-1f40058e596765b0a19b-3b22-4324-8733-7fdd255966cbba6460f9-d4d5-45e3-9e8f-e95caac367c8",
                                                               new Date(1558093226677L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558093226520L),
                                                             "e73b414c-48c1-4d51-a255-9a699489d2c7", -126,
                                                             "047bd180-14a5-494b-8098-cccf5243dd26",
                                                             "7b5b0788-e76b-4676-81fb-a003d7594563",
                                                             "f76ac6b8-5611-4a06-b24d-4c87cc42c1f8",
                                                             "8b0ef718-3c17-4709-b52d-8028f908a790",
                                                             new Date(1558093222096L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1558093226520L),
                                                             "e73b414c-48c1-4d51-a255-9a699489d2c7", -126,
                                                             "047bd180-14a5-494b-8098-cccf5243dd26",
                                                             "7b5b0788-e76b-4676-81fb-a003d7594563",
                                                             "f76ac6b8-5611-4a06-b24d-4c87cc42c1f8",
                                                             "8b0ef718-3c17-4709-b52d-8028f908a790",
                                                             new Date(1558093222096L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1558093221669L),
                                                             "3f3ec830-b989-4274-a11f-40671f11b7b6", -79,
                                                             "0016cc0e-9881-4f93-9808-07293578af1f",
                                                             "49839a1c-68a5-4546-8efa-77dde50d2283",
                                                             "973a5822-4485-4749-afb0-b10ad6d1d130",
                                                             "5aa556da-4c5d-4f53-9e0e-0be341743bbc",
                                                             new Date(1558093222741L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
