// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558093227778L),
                                                                         "39d4c934-eafc-418e-b90f-04c6269af9a2",
                                                                         "c6e2b9a3-f54c-46ea-a8fa-07e3a11927f2",
                                                                         "eedcf1ba-c593-4c94-9c19-46727e876585");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558093228288L),
                                                                         "0ffca6bf-4018-4b7a-bf8b-153b43a6caf4",
                                                                         "c2688bae-78aa-4a29-b03c-4fc5d34f390d",
                                                                         "c91fcd4d-b9ec-4bdb-bdfa-9c43760a24fb");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558093228288L),
                                                                         "0ffca6bf-4018-4b7a-bf8b-153b43a6caf4",
                                                                         "c2688bae-78aa-4a29-b03c-4fc5d34f390d",
                                                                         "c91fcd4d-b9ec-4bdb-bdfa-9c43760a24fb");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558093221882L),
                                                                    "87910cf0-d886-48c9-b8c4-e126a276ad99",
                                                                    "c1b7c1a0-59ea-4fda-a04c-d0671beb7783",
                                                                    "38b79973-d33c-448d-94b1-36efd512538a");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558093226341L),
                                                                         "6908a094-6735-4d0a-b39c-3b789f6bad42",
                                                                         "2ca8b206-b3f5-44da-bf08-4eef71ebd313",
                                                                         "8804d3b3-2e37-4fff-9fe0-595e47b1eb50");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558093226341L),
                                                                         "6908a094-6735-4d0a-b39c-3b789f6bad42",
                                                                         "2ca8b206-b3f5-44da-bf08-4eef71ebd313",
                                                                         "8804d3b3-2e37-4fff-9fe0-595e47b1eb50");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558093222428L),
                                                                         "82d5f873-6839-4812-b1b5-f193a3872e04",
                                                                         "82524649-4326-4c9a-875a-f8ebcaf5a7d3",
                                                                         "82bba3d0-0518-4ae5-ad6e-a9f6607d1621");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
