// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558093223952L),
                                                          "a9ad5693-64ec-4eb9-b617-bddf2f742cea", false,
                                                          "eabc6a93-0120-424c-b7fc-8dfcfe353cfa");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558093225952L),
                                                          "0d353f47-1d64-4126-9336-8f6633dcedd1", false,
                                                          "d6be6ab9-0a8c-4e68-bc11-fb5f66475bbe");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558093225952L),
                                                          "0d353f47-1d64-4126-9336-8f6633dcedd1", false,
                                                          "d6be6ab9-0a8c-4e68-bc11-fb5f66475bbe");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1558093226402L), "f2f67c91-2008-48eb-9691-829686f689cf",
                                                     true, "049d056c-1184-4246-8e0e-9c1228bb4f55");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558093226266L),
                                                          "9562813b-f939-4c0a-8688-8a9bd88c0da5", true,
                                                          "cadad23e-adee-4edc-954d-5bd41c0d2a80");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558093226266L),
                                                          "9562813b-f939-4c0a-8688-8a9bd88c0da5", true,
                                                          "cadad23e-adee-4edc-954d-5bd41c0d2a80");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1558093226917L),
                                                          "c2135736-2949-495a-bfc3-88728d6c788e", true,
                                                          "f2b84020-1de7-48aa-9537-f1ad45f9395b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
