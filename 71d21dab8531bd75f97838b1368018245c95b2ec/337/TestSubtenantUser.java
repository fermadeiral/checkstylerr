// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                             "e7697c5a-0e76-4bef-a24f-83763ac3d226",
                                                             new Date(1558093218961L), -3, null, "3ccd7.cc114@3f1e8.fr",
                                                             false, "a98db005-549b-4e88-8fbe-8431e626d437",
                                                             "88dd64bea93cce83aebac0d84813ec71", false, true, false, 8,
                                                             null, null, "0821de29-d8e9-4b9c-91bc-747cca6ce874", -58,
                                                             "b90034c2-8fb3-4e8c-9eb9-f6085ad272d7",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558093220566L), "__=9=8");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                             "bcf23cd6-26fd-4ff6-9532-5f5f7cf069d4",
                                                             new Date(1558093222956L), 46, null, "41b0b.2e7b8@96df7.me",
                                                             false, "284daffa-8279-47cb-830b-250b9e58a7aa",
                                                             "88dd64bea93cce83aebac0d84813ec71", true, false, true, 116,
                                                             null, null, "84b397d5-a91d-4161-8f1a-83bbfbbd9e56", -16,
                                                             "a10cf7e0-969f-4659-bce5-6317ccb88121",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558093225184L), "__=9=8");
            SubtenantUser subtenantuser2 = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                             "bcf23cd6-26fd-4ff6-9532-5f5f7cf069d4",
                                                             new Date(1558093222956L), 46, null, "41b0b.2e7b8@96df7.me",
                                                             false, "284daffa-8279-47cb-830b-250b9e58a7aa",
                                                             "88dd64bea93cce83aebac0d84813ec71", true, false, true, 116,
                                                             null, null, "84b397d5-a91d-4161-8f1a-83bbfbbd9e56", -16,
                                                             "a10cf7e0-969f-4659-bce5-6317ccb88121",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558093225184L), "__=9=8");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                        "aa093eee-365f-4e10-b6d3-4a0a5764ac00",
                                                        new Date(1558093222488L), 76, null, "65697.6c4dc@4526e.fr",
                                                        true, "792643df-7aa2-4c86-a7d8-ec2901e8a4c9",
                                                        "88dd64bea93cce83aebac0d84813ec71", true, false, false, 36,
                                                        null, null, "39b53ea8-7354-4e8a-8341-8da91e4a30d6", -94,
                                                        "92e2dc81-dcb1-4550-947a-90adcb7ebe9a",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1558093224524L), "__=9=8");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "47c9d39e-8c0b-4973-a758-1b2ec5d3b5ff",
                                                               new Date(1558093219268L), 111, null, null, false,
                                                               "28d32b1a-8d07-43a4-b59e-9f751c7301ddc7ac3ed9-8191-4ea4-a47c-031bf57ee35bf60bb726-3a0f-4d3b-b506-d14fd419aef7",
                                                               "255V\u0011\u001aî‚¶è¥¸25N2\u00062:55?ç¨µ25W2GTá‘?X2ë §Fá¤™2#æ°º5L2!ê«°H5G2\u0002Yêœ“(?+5â¤²U/Q5â‡ª^è©Š22!2ë ¹'",
                                                               false, false, false, -73, null, null,
                                                               "39328d8b-442c-4bbf-814a-05fef7db6ae7", 68,
                                                               "6f3098f8-9ddb-49d4-a1d1-1f98e8829e91fcec6ff5-c447-4a19-b3af-42c0867e3adcef597422-e916-44b2-92f9-67b1b2f0c3c9",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1558093222655L),
                                                               "ì?ˆï·£@;åº–åŠ¬;äˆ¼?;ë˜ª;VCå•Šçš‡/+ç® O:O;ä ŒNUê£?Yãµ‰<í?€Y<FMâœ?:Ië§‘<CSî»•ç‡”:\u0006ë¤®4'\u0013O:Xèº…1íŒŽ:Gëžœ\tHãª˜ê›ƒ");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                             "c7017c44-600e-451b-a35b-bf398a17ed71",
                                                             new Date(1558093226207L), 5, null, "e4f1d.93df2@71550.me",
                                                             true, "85043e89-96f3-43a0-917b-50e9565125f7",
                                                             "88dd64bea93cce83aebac0d84813ec71", false, true, false,
                                                             104, null, null, "f18b8391-3ee3-4ea3-a8b0-4f06cfe68845",
                                                             52, "b27bb4cb-8997-4d35-9775-2b27338e209e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558093219991L), "__=9=8");
            SubtenantUser subtenantuser2 = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                             "c7017c44-600e-451b-a35b-bf398a17ed71",
                                                             new Date(1558093226207L), 5, null, "e4f1d.93df2@71550.me",
                                                             true, "85043e89-96f3-43a0-917b-50e9565125f7",
                                                             "88dd64bea93cce83aebac0d84813ec71", false, true, false,
                                                             104, null, null, "f18b8391-3ee3-4ea3-a8b0-4f06cfe68845",
                                                             52, "b27bb4cb-8997-4d35-9775-2b27338e209e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558093219991L), "__=9=8");
            SubtenantUser subtenantuser3 = new SubtenantUser("88dd64bea93cce83aebac0d84813ec71", null,
                                                             "4257d5d7-b526-451a-bef3-d2d3cd3e52fb",
                                                             new Date(1558093227294L), 40, null, "64d37.ca5cc@e0435.fr",
                                                             true, "b714823a-45c0-4763-96d8-8bd6a9efb190",
                                                             "88dd64bea93cce83aebac0d84813ec71", false, true, false,
                                                             109, null, null, "3e985f24-bbe8-4d16-b945-579334629495",
                                                             -16, "f924b6ce-bae0-4723-b165-19fb62d827bc",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558093220147L), "__=9=8");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
