// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                             "7ccd2d64-fff5-4275-aed0-504be690db99",
                                                             new Date(1558093219571L),
                                                             "61b387a0-0e6a-473e-82ed-d5b1fa6bdb6c",
                                                             "d8e7ff10-d5be-44ad-a5c2-c1f49c8ff02a");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                             "0a8054ec-a594-4267-a5e0-0da05131f113",
                                                             new Date(1558093222545L),
                                                             "97bd8474-8d2c-4e0f-b03b-44a6b81cf6c1",
                                                             "24cee427-da8c-421b-abc9-9767a802fab9");
            ActiveSession activesession2 = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                             "0a8054ec-a594-4267-a5e0-0da05131f113",
                                                             new Date(1558093222545L),
                                                             "97bd8474-8d2c-4e0f-b03b-44a6b81cf6c1",
                                                             "24cee427-da8c-421b-abc9-9767a802fab9");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                        "a47bb6f1-4e8b-4c8f-ae19-8f363825283d",
                                                        new Date(1558093224099L),
                                                        "44a95b6d-9ebf-40c3-a269-838c05b7c42f",
                                                        "6cfe12b7-a4ca-4ad5-a3b1-60e6c1778222");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                             "dab9859c-f8e8-4db1-9390-af74d3506bc5",
                                                             new Date(1558093223991L),
                                                             "3b0ac22f-e821-4984-a46b-0b575ca1246b",
                                                             "d7d21e1e-ded1-4ae7-9324-1eae473a33e0");
            ActiveSession activesession2 = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                             "dab9859c-f8e8-4db1-9390-af74d3506bc5",
                                                             new Date(1558093223991L),
                                                             "3b0ac22f-e821-4984-a46b-0b575ca1246b",
                                                             "d7d21e1e-ded1-4ae7-9324-1eae473a33e0");
            ActiveSession activesession3 = new ActiveSession("88dd64bea93cce83aebac0d84813ec71",
                                                             "ffb44fc5-e0e3-4908-96d9-72d468126af9",
                                                             new Date(1558093228520L),
                                                             "1e8060a4-322f-42f0-a180-d8c833124d61",
                                                             "15fc625c-44c1-428e-86b9-bac4b99ff885");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
