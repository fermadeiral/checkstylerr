// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model UserDao.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUserDao {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            UserDao userdao1 = new UserDao();
            UserDao userdao2 = userdao1.clone();
            assertNotNull(userdao1);
            assertNotNull(userdao2);
            assertNotSame(userdao2, userdao1);
            assertEquals(userdao2, userdao1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            UserDao userdao1 = new UserDao();
            UserDao userdao2 = new UserDao();
            assertNotNull(userdao1);
            assertNotNull(userdao2);
            assertNotSame(userdao2, userdao1);
            assertEquals(userdao2, userdao1);
            assertEquals(userdao2.hashCode(), userdao1.hashCode());
            int hashCode = userdao1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, userdao1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            UserDao userdao1 = new UserDao();
            UserDao userdao2 = new UserDao();
            assertNotNull(userdao1);
            assertNotNull(userdao2);
            assertNotSame(userdao2, userdao1);
            assertEquals(userdao2, userdao1);
            assertEquals(userdao2, userdao1);
            assertEquals(userdao1, userdao2);
            assertEquals(userdao1, userdao1);
            assertFalse(userdao1.equals(null));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
