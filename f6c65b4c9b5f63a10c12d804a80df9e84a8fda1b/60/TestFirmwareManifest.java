// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558003274355L), 31,
                                                                      "af710424-5ee1-411f-9555-63087f1c587d",
                                                                      "615f3343-b522-4d7b-97c5-033e171efe1d",
                                                                      "464a8dc8-1f68-4a8a-98c2-05e7f62547f2",
                                                                      "23014fe2-0b7b-4b6f-859d-a85e34e66423",
                                                                      "ca8f5a67-51bf-4f9d-a894-2ed491490e99",
                                                                      "6274f79d-6f5a-43a9-98fd-b98eaee0a164",
                                                                      new Date(1558003279124L),
                                                                      new Date(1558003276503L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558003281036L), -87,
                                                                      "a1e5d359-eb95-458c-9bdc-f43b8373ad3c",
                                                                      "ee5a3bb9-5b50-4b27-91de-a0453bf44223",
                                                                      "b959642f-0aaa-434b-b98d-aff65eb06726",
                                                                      "cfdbc4ff-7b03-4ab2-8e23-ed819f817aa4",
                                                                      "f3d3a157-823e-4c7c-a101-997c1df64b19",
                                                                      "9d239846-f7cd-4048-9fc3-d0c95037b2f6",
                                                                      new Date(1558003275327L),
                                                                      new Date(1558003275616L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558003281036L), -87,
                                                                      "a1e5d359-eb95-458c-9bdc-f43b8373ad3c",
                                                                      "ee5a3bb9-5b50-4b27-91de-a0453bf44223",
                                                                      "b959642f-0aaa-434b-b98d-aff65eb06726",
                                                                      "cfdbc4ff-7b03-4ab2-8e23-ed819f817aa4",
                                                                      "f3d3a157-823e-4c7c-a101-997c1df64b19",
                                                                      "9d239846-f7cd-4048-9fc3-d0c95037b2f6",
                                                                      new Date(1558003275327L),
                                                                      new Date(1558003275616L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1558003279904L), 105,
                                                                 "f3e4b998-079d-4b57-8340-77fe9394f188",
                                                                 "3fa613ec-eb73-4bed-9793-11c074456fb8",
                                                                 "5d594fc3-6871-4a37-ab7e-134bb1ed2c25",
                                                                 "cb86dcf8-9c9a-463e-8f7b-c970009c7904",
                                                                 "b6e381f0-c201-443e-b2ab-97bc65dcc402",
                                                                 "4d3d464d-0e49-4210-bd70-e0e062e7b3de",
                                                                 new Date(1558003278299L), new Date(1558003280305L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1558003280279L), 87,
                                                                        "0671254d-d253-4164-ace7-b8665b9b98b6",
                                                                        "d8cf6a2b-ac72-4d6b-b1b6-8a5ddfa798ce9a11f40d-e024-4270-b01c-0b591451d727b7807088-9af1-479b-a4bd-734b577396eec080a37d-24b3-419b-8ebe-37e3fa32c487f9635100-0e25-4f77-8273-8d30fadfd7f7a995d497-aeef-4c74-9fa6-c9eccdd6f3c9e6897e8b-a04a-45f4-835c-ac4dff55da445f95b34e-5b76-4cbf-949c-2c688d8efc9d5e2ec339-24e0-455b-9969-a5ad10f057de90ae2e4b-fe6b-4eeb-b766-6c6f5d08445cfd07e8af-018c-4920-b9d0-b69f6513ee2e0c57e2cc-9df4-438b-8af2-642b1a00abf07636c305-fd10-4d31-aec9-8978a95c3ee91939c75f-5413-493b-9836-131b4da381c00d935095-0625-4082-a906-248e0665ee25f4210cfd-c838-42d4-a8de-16c4272f5090afa11faa-98e2-4f83-ac0c-771aaaa306d13dd6cc19-a0e7-4f7e-8dd1-113475ec33e509469e04-4173-4338-b2e1-b1a56d78ea1e5e973102-8f72-4a48-821e-4587d7c6fd60624207d0-92a7-4a00-835d-b8a5da8eced7284746c1-f18d-4219-8a85-efed3b3c3161448fa026-f483-4a29-a6d9-2631bf1681203a6d74e0-c1a4-45fb-8c50-667674720ce1e6e79f4a-d370-456e-8c13-4dfc7f6b50ce3bf227b9-b7b9-4774-a9b5-7cb1a6b25686e9c04984-2613-4ec2-aa8d-c76a248bf7fdfc048eaa-f084-4f84-a134-4d9e85bbe516029f946e-b399-435e-80ec-d5f5774b70a9c87bbaa5-ad4e-4b9e-8296-84605142432ef02a4f1a-6088-4bfb-b932-a260182d4fb5938e9cd0-4f09-4489-bd8e-bb388ce022e3e51288af-4a11-4cbd-93a6-7458f91fe9230603841d-9fa8-4551-ae93-3f0074a22aa13cf93ab5-a86c-4eab-83b2-72596ba1e3a587085653-05ac-46d1-84a2-4a2bbbd88b9ea607e2eb-2bfa-4b4a-8d85-1ffdc96d21fac257aaf7-9805-4d51-929a-726b32e14b61cf06a978-b11c-4711-bb96-384e87d018bdb5ee8740-ae64-40ba-bcb1-847573e911be0d10fd9f-fe6f-4c03-bfe9-ff71a888b73785e23f8b-4f30-4d22-926e-8777e5a134de89caada5-e55f-4c77-99d5-68790d153b4f6f70cd4d-9a9d-4fe7-8e29-690cdba24ed121e8aee5-3353-4eec-a906-f2cdd2ff81e44a98648f-ce7f-4ca1-a8a9-9d4355c7b6dba8af58ac-48d5-46fc-9483-2c7b9430e87d63a09353-0843-4b62-9f5b-6145ca0fcf5dc85b54c2-b129-4143-b395-c68e7dcc4599aa87cfcb-422a-43b7-bf8d-8dcabfab81fbf5f701ac-c206-4d68-866e-280ccc13fc4a1854ab8f-7eda-4c99-a1fa-ef3f7a3e26710961874a-0cc1-4dc8-9374-d0b3fa900105cb0b9f1f-c0c3-470b-be5c-3375668b9dae9f761dd7-5b47-465e-b811-7fafdd23a5eb51d7b765-5700-4d83-a53c-266d36de20e5",
                                                                        "003774b0-33d9-46c3-b150-f376ca98ed87",
                                                                        "4ef575b0-7503-4f08-bb01-cafcc8826491",
                                                                        "2cf64c35-9b65-438e-884b-ff266d87520d",
                                                                        "f786da7a-1163-48de-ac9d-31b0f40ee262140054d9-e60a-4c9c-bbb6-d66d69269a6889d133f0-16aa-4773-81cb-d9ef7fa0f8e743a7f43f-1d13-4023-8e53-9964acf3a654",
                                                                        new Date(1558003282700L),
                                                                        new Date(1558003282065L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558003280451L), 39,
                                                                      "b960e4c1-db80-4bf0-bcca-133a09db300b",
                                                                      "9037f520-16cb-436c-bb92-2e07bc0c7ecc",
                                                                      "9e67317e-d9be-41ab-bce5-5fc82df795bf",
                                                                      "ab6bf257-ebfb-4bda-9004-b5ef9bc0f0a8",
                                                                      "18471496-9046-47ae-8494-a11fbb41e2b0",
                                                                      "12c776d4-0575-4f47-ba61-b2f5b7dcb116",
                                                                      new Date(1558003282828L),
                                                                      new Date(1558003280021L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558003280451L), 39,
                                                                      "b960e4c1-db80-4bf0-bcca-133a09db300b",
                                                                      "9037f520-16cb-436c-bb92-2e07bc0c7ecc",
                                                                      "9e67317e-d9be-41ab-bce5-5fc82df795bf",
                                                                      "ab6bf257-ebfb-4bda-9004-b5ef9bc0f0a8",
                                                                      "18471496-9046-47ae-8494-a11fbb41e2b0",
                                                                      "12c776d4-0575-4f47-ba61-b2f5b7dcb116",
                                                                      new Date(1558003282828L),
                                                                      new Date(1558003280021L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1558003283303L), -95,
                                                                      "2dde39f5-855f-4477-aba1-7404a9b71e88",
                                                                      "9078d55e-f6b2-4e8d-b4ed-de09be8fa85a",
                                                                      "7ab116e8-9813-4e1e-89a2-57c4afdf26f6",
                                                                      "f0c29b40-032d-461d-b765-edc6aa81357f",
                                                                      "9799eadf-ffca-4040-9c57-56020b9db198",
                                                                      "c48b9721-c978-45bf-ab8a-451830a00620",
                                                                      new Date(1558003277159L),
                                                                      new Date(1558003273669L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
