// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("c677c8b0-675e-4804-a46b-2e5b637b50da", true,
                                        "59d43a27-6f14-41eb-9fac-deb368fd3cac", true,
                                        "30e3c04c-efaa-4c39-8615-61d7991a25ef");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("51724108-6cd9-4618-b11f-dd7aae9648d4", true,
                                        "f45a464f-2717-4f3c-b35c-50a3e771e5fb", false,
                                        "87fc15fe-79df-4319-a3c5-01cdae8e64f4");
            Policy policy2 = new Policy("51724108-6cd9-4618-b11f-dd7aae9648d4", true,
                                        "f45a464f-2717-4f3c-b35c-50a3e771e5fb", false,
                                        "87fc15fe-79df-4319-a3c5-01cdae8e64f4");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("0354ea6d-9c3a-4f6e-b25a-5be831067024", true, "5fde8673-c33e-4990-b89b-b6a0840d25d8",
                                   false, "16e81190-2b48-4234-af08-bd70ca776e54");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("06864f51-fd75-45f6-9043-ae07c427595f", true,
                                        "5976aca7-1925-47e1-8124-a9f9807fc6a1", true,
                                        "27e497c4-b46b-41f8-9fa3-291cd09e1638");
            Policy policy2 = new Policy("06864f51-fd75-45f6-9043-ae07c427595f", true,
                                        "5976aca7-1925-47e1-8124-a9f9807fc6a1", true,
                                        "27e497c4-b46b-41f8-9fa3-291cd09e1638");
            Policy policy3 = new Policy("c34658a0-4ea9-42f4-a9fc-739efa35e36c", true,
                                        "2e9d21a9-8f6c-44ac-a60d-496871fcc83b", true,
                                        "58e3b77e-63fb-4433-b357-618ee08fae63");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
