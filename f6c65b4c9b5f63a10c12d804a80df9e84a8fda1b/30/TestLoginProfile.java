// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("93b1a89e-27b4-4074-8c63-5fea8c89c350",
                                                          "158fe3b5-e896-4093-8f7a-91baac29ae12");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("48793a29-658b-4b7b-bf71-c9d887b1cff0",
                                                          "a038159e-e923-4ac3-8a42-bf8cc82fbe8c");
            LoginProfile loginprofile2 = new LoginProfile("48793a29-658b-4b7b-bf71-c9d887b1cff0",
                                                          "a038159e-e923-4ac3-8a42-bf8cc82fbe8c");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("2a1e4bf3-101d-44eb-902a-d6dfec9cc1ac",
                                                     "36fae95e-743d-4aad-8467-c3c45dc1cd1e");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("f89488b1-0009-43ad-8e17-504017b3e2c4",
                                                          "3c5163ef-4b81-4c25-a8ad-382f9c35ad8b");
            LoginProfile loginprofile2 = new LoginProfile("f89488b1-0009-43ad-8e17-504017b3e2c4",
                                                          "3c5163ef-4b81-4c25-a8ad-382f9c35ad8b");
            LoginProfile loginprofile3 = new LoginProfile("8d07ab71-01d9-42c6-a94d-79f610a9b218",
                                                          "52b26492-471a-4eaf-aec6-daadbbaa4303");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
