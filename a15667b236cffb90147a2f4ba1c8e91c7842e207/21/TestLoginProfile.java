// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("6671298c-c242-4ef6-8dc8-9f582fcf2415",
                                                          "8a2faae2-ac2d-47cc-90cb-fa43196707e1");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("ba1e96e2-f822-4ea4-8c07-745b4eb68bae",
                                                          "3b0cc55d-a09a-41c5-8616-77daa33c448b");
            LoginProfile loginprofile2 = new LoginProfile("ba1e96e2-f822-4ea4-8c07-745b4eb68bae",
                                                          "3b0cc55d-a09a-41c5-8616-77daa33c448b");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("b6920df5-5192-41bf-a70a-5104f0eaafa9",
                                                     "d81e58ea-d393-4c40-9973-7ea7e85a2869");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("898ff187-3a23-43ea-a8ad-78fdad6503d7",
                                                          "781a8a30-3bc8-4dfb-a098-d5cd4de2577c");
            LoginProfile loginprofile2 = new LoginProfile("898ff187-3a23-43ea-a8ad-78fdad6503d7",
                                                          "781a8a30-3bc8-4dfb-a098-d5cd4de2577c");
            LoginProfile loginprofile3 = new LoginProfile("69b988e9-d188-40fb-8e72-b5b93fe38370",
                                                          "163b135b-7c7c-4652-83b4-5379234053e8");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
