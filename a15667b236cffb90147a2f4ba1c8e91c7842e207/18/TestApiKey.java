// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("273531b4dbd3a39db354aa334fc22920", new Date(1553013211791L), -14,
                                        "4455d4a4-a302-4665-9efa-0eabc038a2ae", "44d2e16e-8fb9-47e2-bec5-4ff45484dbfd",
                                        9, "67ac2ec0-984f-4713-a6f3-0f8ae819a081",
                                        "7592467e-bf38-40ad-aeff-f1aad1adb5c1", ApiKeyStatus.getDefault(),
                                        new Date(1553013211135L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("6132604558ff84f6f2c56aed0fafe137", new Date(1553013209713L), 90,
                                        "d0a38004-cdf9-47c7-972e-4d9f564012cb", "001af110-22f7-4529-a9e6-8203499db916",
                                        -56, "f7e44bf3-de3f-4923-af2f-fd464b74ae8b",
                                        "ce8ed2b8-0e84-4570-95c8-588e04202e1b", ApiKeyStatus.getDefault(),
                                        new Date(1553013207972L));
            ApiKey apikey2 = new ApiKey("6132604558ff84f6f2c56aed0fafe137", new Date(1553013209713L), 90,
                                        "d0a38004-cdf9-47c7-972e-4d9f564012cb", "001af110-22f7-4529-a9e6-8203499db916",
                                        -56, "f7e44bf3-de3f-4923-af2f-fd464b74ae8b",
                                        "ce8ed2b8-0e84-4570-95c8-588e04202e1b", ApiKeyStatus.getDefault(),
                                        new Date(1553013207972L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("efea6f6251f9bed7ed6dffb179ab8934", new Date(1553013212023L), -100,
                                   "3c9141a7-e53b-4cdb-b45b-aa2273fb4f64", "ff41c2fc-92b6-4d3e-8671-7244a69910e9", 26,
                                   "0d1440b2-816a-4ae2-9b6c-a10792e16afc", "1a9875a9-ca45-428f-9173-b971c99a8d4b",
                                   ApiKeyStatus.getDefault(), new Date(1553013208030L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("1ä‰ Sïªƒ J1\u0002\u0005ï?„J1é±¸1?\u0019O1\u0015)1\u001aê‚–1ï³?:ê—±>ì› ê¹Š1\u0007è?Ÿ>KZ1\u001a11ãƒ TêŽ¦1#1Vè”ª111\u0011á­ªØ†\u0014-æ°?\u0002$$^W=âº§",
                                          new Date(1553013209573L), 60, "cc5c1249-c276-4267-9cf7-424f497c175e",
                                          "77a199fd-14a5-448a-b963-8d7fc7c8bb96", 53, null,
                                          "4fd638c7-9a8f-4d80-bad7-01717eb4636e", ApiKeyStatus.getDefault(),
                                          new Date(1553013210641L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("f8363f8a1faeaf5c29aba9a0ff3ce258", new Date(1553013211636L), 98,
                                        "8993e264-f4fe-4429-8517-ae4b2e49805b", "6050f764-1d55-4456-ad7b-b635732da378",
                                        126, "b3875182-1c49-44b4-acc7-10913f85673d",
                                        "5fb72d02-a1d6-4b3c-a1e8-597d2e44ba37", ApiKeyStatus.getDefault(),
                                        new Date(1553013210959L));
            ApiKey apikey2 = new ApiKey("f8363f8a1faeaf5c29aba9a0ff3ce258", new Date(1553013211636L), 98,
                                        "8993e264-f4fe-4429-8517-ae4b2e49805b", "6050f764-1d55-4456-ad7b-b635732da378",
                                        126, "b3875182-1c49-44b4-acc7-10913f85673d",
                                        "5fb72d02-a1d6-4b3c-a1e8-597d2e44ba37", ApiKeyStatus.getDefault(),
                                        new Date(1553013210959L));
            ApiKey apikey3 = new ApiKey("ec1ba1c083fc4b165a787fadadb98d9d", new Date(1553013210130L), -90,
                                        "2f36ac46-860f-443f-a6d9-ace1df104f58", "b43142c3-abf8-48c2-a45b-1780ee170b26",
                                        -95, "a507dfd6-1567-4b3f-ad89-4c1c76f831ee",
                                        "3da29972-1413-4987-9396-293d7d9b0d62", ApiKeyStatus.getDefault(),
                                        new Date(1553013205450L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
