// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553013213613L),
                                                                         "0625dd82-ccc9-4daf-8741-920206fcea44",
                                                                         "0b62d039-2deb-4ee4-b749-966f49b9d287",
                                                                         "817000cd-e890-46c0-b378-f6eaee083471");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553013210826L),
                                                                         "10e98b4e-ba53-40fb-9d17-50b641fa79f3",
                                                                         "93edf17d-b1eb-4ddf-8cf2-0913d5ed7d9e",
                                                                         "4b72f2b1-c9b6-45b2-bb7a-24191690dfd7");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553013210826L),
                                                                         "10e98b4e-ba53-40fb-9d17-50b641fa79f3",
                                                                         "93edf17d-b1eb-4ddf-8cf2-0913d5ed7d9e",
                                                                         "4b72f2b1-c9b6-45b2-bb7a-24191690dfd7");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1553013213197L),
                                                                    "92e07c4d-30c3-4555-90b1-d6afb9551266",
                                                                    "34f92bb6-6b38-455c-a9aa-5cd90908002d",
                                                                    "0b9757a5-aea9-4b41-85aa-4ea87ef6846c");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553013215149L),
                                                                         "df951594-2a37-4a89-b682-75d05219f4d0",
                                                                         "3fca6fab-b795-4748-bd29-489f6b4cafff",
                                                                         "579346ec-84e7-4725-9f99-52efe7f6439c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553013215149L),
                                                                         "df951594-2a37-4a89-b682-75d05219f4d0",
                                                                         "3fca6fab-b795-4748-bd29-489f6b4cafff",
                                                                         "579346ec-84e7-4725-9f99-52efe7f6439c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1553013214241L),
                                                                         "f4a2ca48-89fe-439b-aa26-e94a4dc4e3c6",
                                                                         "ed0e0b35-25a3-425f-bee4-30083117fb04",
                                                                         "a5dcadef-74be-40bb-8307-6e825a7e0f28");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
