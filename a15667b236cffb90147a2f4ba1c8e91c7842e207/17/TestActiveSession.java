// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("558a9112-348c-4341-8c6c-a4ff3883907e",
                                                             "99c6845a-1ca9-4ab5-b4da-3f9c8848ffc7",
                                                             new Date(1553013209112L),
                                                             "b21158fc-0c5c-4c1e-a6d7-8eecbeef366d",
                                                             "79a8fc24-11c4-4e7a-a571-89e11ceda197");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("4c45e083-00d7-42d0-be4e-b48eabcbfa0d",
                                                             "d528516e-c867-44ff-ab95-bb53209b6471",
                                                             new Date(1553013213769L),
                                                             "06b67556-f217-4ccd-b55a-f0f7208ee02b",
                                                             "f4c5ac60-f538-4b24-a020-4980a84aae19");
            ActiveSession activesession2 = new ActiveSession("4c45e083-00d7-42d0-be4e-b48eabcbfa0d",
                                                             "d528516e-c867-44ff-ab95-bb53209b6471",
                                                             new Date(1553013213769L),
                                                             "06b67556-f217-4ccd-b55a-f0f7208ee02b",
                                                             "f4c5ac60-f538-4b24-a020-4980a84aae19");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("b2b18d73-cecf-4465-9164-747160e53ee6",
                                                        "0f7d3657-56d2-444b-b9ed-5ce6152dec46",
                                                        new Date(1553013209604L),
                                                        "154335a9-92aa-452b-8bf6-5c825f6d36fb",
                                                        "91d4470f-bc07-450f-b6f2-3f6206a12239");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("b5dd091a-b74b-46bd-a174-2b06aa8f1f5a",
                                                             "744431f7-5ee5-4392-8304-c195ef51131f",
                                                             new Date(1553013214094L),
                                                             "ba833fbf-bfc9-4814-be68-afc6477b57ae",
                                                             "804e5837-4023-4713-a9b3-ad086e0bb1a6");
            ActiveSession activesession2 = new ActiveSession("b5dd091a-b74b-46bd-a174-2b06aa8f1f5a",
                                                             "744431f7-5ee5-4392-8304-c195ef51131f",
                                                             new Date(1553013214094L),
                                                             "ba833fbf-bfc9-4814-be68-afc6477b57ae",
                                                             "804e5837-4023-4713-a9b3-ad086e0bb1a6");
            ActiveSession activesession3 = new ActiveSession("2182b4ea-9bde-4847-8fbe-ead9e6ab54e2",
                                                             "ea138662-2cda-432e-a99a-e3d22b3394d1",
                                                             new Date(1553013206157L),
                                                             "8d868d0d-6431-46f9-8a51-744f0ba4f444",
                                                             "c7b898ef-5d9c-48e0-a072-452247b76e13");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
