// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("801f912e-f0f9-4fac-8251-ecbf8e635107", true,
                                        "6fa17a77-e028-4a3c-b866-8fce98bbfdfd", false,
                                        "45ca5763-cf21-4929-ae0a-0550a33bad91");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("7ce712d3-175b-48af-b84e-f25805a9f7a2", true,
                                        "a5fdcade-6fa4-4f01-8055-cc07747c74da", false,
                                        "fcebdc02-09e7-4910-9c6d-6f3f27eb43ae");
            Policy policy2 = new Policy("7ce712d3-175b-48af-b84e-f25805a9f7a2", true,
                                        "a5fdcade-6fa4-4f01-8055-cc07747c74da", false,
                                        "fcebdc02-09e7-4910-9c6d-6f3f27eb43ae");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("7feb1b71-2a11-4616-9d20-aa16b8180a7b", true, "abb45042-12b0-4f4d-aaef-0422f6355c5c",
                                   true, "7a2c1525-2a7b-4f22-a1ed-101b154431a2");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("70ec6b2e-362d-4ee1-8f7a-47015eb269e5", true,
                                        "c855b4e4-b4bf-43a2-bac4-aaf7cf17e988", true,
                                        "7dbeca6b-f456-4d85-b300-b5da163f8296");
            Policy policy2 = new Policy("70ec6b2e-362d-4ee1-8f7a-47015eb269e5", true,
                                        "c855b4e4-b4bf-43a2-bac4-aaf7cf17e988", true,
                                        "7dbeca6b-f456-4d85-b300-b5da163f8296");
            Policy policy3 = new Policy("1fa201d7-8c60-4cc5-b60c-0222a49a091f", true,
                                        "e058c258-0c8c-46f1-b302-e716409c726b", true,
                                        "a8d7e791-8110-4daf-9cea-beeba299ef5f");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
