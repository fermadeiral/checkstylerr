// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("42ef20b9-17cd-487f-92c2-592373bf616d",
                                                             "4ded3a5b-c99c-4343-985b-400ca9324cb3",
                                                             "fbfec208-0bdd-482b-bcd1-baaac2ea4380");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("fb40bef2-81a2-4f3b-87ea-8f9af68cd1e1",
                                                             "6ca6d1e3-01f4-4372-9ac6-647c884c1ebb",
                                                             "d3411440-00a1-4570-b287-f5bdccd3db34");
            ParentAccount parentaccount2 = new ParentAccount("fb40bef2-81a2-4f3b-87ea-8f9af68cd1e1",
                                                             "6ca6d1e3-01f4-4372-9ac6-647c884c1ebb",
                                                             "d3411440-00a1-4570-b287-f5bdccd3db34");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("0bb47f82-027c-4a7c-8ab1-68a50c453de0",
                                                        "fa055b77-0e4c-44c4-b306-129be0477515",
                                                        "03167022-e152-4127-a1ca-7fa9b44b85b3");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("31caf062-37f4-42b2-9937-be3563a814b0",
                                                             "7d85798d-c21f-4c40-8509-eea8b35e2475",
                                                             "4342a679-d4bd-443a-97db-ef1d1a3058ff");
            ParentAccount parentaccount2 = new ParentAccount("31caf062-37f4-42b2-9937-be3563a814b0",
                                                             "7d85798d-c21f-4c40-8509-eea8b35e2475",
                                                             "4342a679-d4bd-443a-97db-ef1d1a3058ff");
            ParentAccount parentaccount3 = new ParentAccount("04fb2c3e-967f-4893-af53-4b2f65e86de0",
                                                             "7d9d75e5-ba08-4ed2-80ba-0369720a5a35",
                                                             "7aed6df1-18bc-4971-a2ac-c4506c2ead40");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
