// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553013214824L),
                                                          "d9c09d91-4aa4-4a75-8576-4d3058a17c22", true,
                                                          "c26e23cb-34aa-4266-90b7-8378af0e5a3b");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553013209005L),
                                                          "35c6fe06-557a-4950-969e-fa8d73fe4389", false,
                                                          "9f58d0e6-a1c3-4a5c-b132-a5c7e12d9541");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553013209005L),
                                                          "35c6fe06-557a-4950-969e-fa8d73fe4389", false,
                                                          "9f58d0e6-a1c3-4a5c-b132-a5c7e12d9541");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553013206466L), "51f162ef-ab46-405a-a1c9-a5fece0d2021",
                                                     false, "86511273-74e5-4ba7-89da-8c7c94b0549b");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553013209759L),
                                                          "51709e9d-b2cd-429c-bbf2-eae3cf76f8f1", false,
                                                          "7225601f-2dbd-4eb0-9a67-09a77e78732c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553013209759L),
                                                          "51709e9d-b2cd-429c-bbf2-eae3cf76f8f1", false,
                                                          "7225601f-2dbd-4eb0-9a67-09a77e78732c");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553013214894L),
                                                          "889ba88a-a66e-4f8c-b614-4c3dfc0e939a", false,
                                                          "8b3b1002-6838-444f-accf-e5336c827c93");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
