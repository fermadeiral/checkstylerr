// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("940cdd6e-16c6-42c7-825c-685b84675fab", false,
                                        "2cca9182-0e01-451a-b695-b4da491838a1", true,
                                        "8b340d3e-1a1d-4c7a-8f69-66476021f729");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("8e1bed8f-848b-437a-a5ab-019df616c12c", true,
                                        "09077c5c-71aa-41cf-86fb-853ebf66ffbc", false,
                                        "f88574cf-49c2-4535-b52a-bc3c6c598a6d");
            Policy policy2 = new Policy("8e1bed8f-848b-437a-a5ab-019df616c12c", true,
                                        "09077c5c-71aa-41cf-86fb-853ebf66ffbc", false,
                                        "f88574cf-49c2-4535-b52a-bc3c6c598a6d");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("24966943-e3cf-4132-941e-abba68bcedbf", false,
                                   "a155e580-ab82-4659-b554-b2b1d14df85c", false,
                                   "c434ca1b-59cd-4bb0-920c-452e3edeb7e2");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("56bba766-20c0-41b6-8d7f-1752c53e7aa7", true,
                                        "b56904b2-6769-4ea5-94be-149414f66803", true,
                                        "4a3798f7-187f-43b6-ab81-87031f49c7db");
            Policy policy2 = new Policy("56bba766-20c0-41b6-8d7f-1752c53e7aa7", true,
                                        "b56904b2-6769-4ea5-94be-149414f66803", true,
                                        "4a3798f7-187f-43b6-ab81-87031f49c7db");
            Policy policy3 = new Policy("fd589032-9bc0-4bb6-8c1c-9b11d6a06eb0", true,
                                        "5c879d61-f484-40f2-b300-b6188d23debd", true,
                                        "93812fcd-3dca-44f6-908b-c15ab01b87ca");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
