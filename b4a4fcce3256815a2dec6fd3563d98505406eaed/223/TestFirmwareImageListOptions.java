// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-118),
                                                                                              Long.valueOf(66),
                                                                                              Order.getDefault(),
                                                                                              "405cb29c-31f1-4a76-bff3-107f51fcca5b",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1571831489839L),
                                                                                                        new Date(1571831496173L),
                                                                                                        new Date(1571831493002L),
                                                                                                        new Date(1571831492239L),
                                                                                                        new Date(1571831489717L),
                                                                                                        new Date(1571831492905L),
                                                                                                        new Date(1571831496230L),
                                                                                                        new Date(1571831495278L),
                                                                                                        new Date(1571831491372L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1571831494331L)))
                                                                            .lessThanUpdatedAt(new Date(1571831498113L))
                                                                            .greaterThanUpdatedAt(new Date(1571831494901L))
                                                                            .equalToName("c28959a8-dd9c-4436-99a8-69d5ebc9189e")
                                                                            .notEqualToName("60a1430e-b788-4a34-9b8f-5f0b6688f000")
                                                                            .inNames(Arrays.asList("53c7e561-5b1c-4cb3-9fa6-ad78b7b9e026",
                                                                                                   "c448747b-653d-4895-ac4d-ab6151f11b92",
                                                                                                   "ff825db3-12d1-461e-a5f6-55377007b5b1",
                                                                                                   "fe32b240-b8a7-4762-b36e-781f9e48e6d3",
                                                                                                   "30d60ffb-9fa7-4218-ba44-159fb16bdaec",
                                                                                                   "92bbb790-3b6d-4602-82d6-7e30d8dcbdb4"))
                                                                            .notInNames(Arrays.asList("c8a47f6f-33af-455a-8512-35edec03ca45",
                                                                                                      "17040c3d-46b3-4bc5-af12-d35a13cbe993",
                                                                                                      "99eda001-57e7-42aa-8096-1ffcf000461a",
                                                                                                      "f674332f-d658-4943-92e6-343a54fc748c",
                                                                                                      "f3e38aac-1f76-4236-b79a-e9f4ea1081e5"))
                                                                            .equalToDescription("605bf45a-d647-465f-a729-862f57b1b4f2")
                                                                            .notEqualToDescription("4c3005f6-8c4e-44f6-a3a8-0fc38e21c9a9")
                                                                            .inDescriptions(Arrays.asList("8bb07a71-628e-4508-b11b-7d7ede91f98c",
                                                                                                          "ec29dc7a-9963-42fa-9b45-b778168a31a4",
                                                                                                          "16e0921d-0000-4099-b6c1-c9dd383831c5",
                                                                                                          "5ffabb11-e3b7-4ace-b4ae-ba6d6bf5f88c",
                                                                                                          "7c9ac1ff-7cbc-426f-a2e4-55146d417a0e"))
                                                                            .notInDescriptions(Arrays.asList("9e5b866f-aa63-4374-9e39-5d3668f81743",
                                                                                                             "52dd1298-f8b2-43bb-8876-099b13885acd"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1571831496551L),
                                                                                                        new Date(1571831491297L),
                                                                                                        new Date(1571831497565L),
                                                                                                        new Date(1571831492026L),
                                                                                                        new Date(1571831493088L),
                                                                                                        new Date(1571831489371L),
                                                                                                        new Date(1571831495227L),
                                                                                                        new Date(1571831493688L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1571831490458L)))
                                                                            .lessThanCreatedAt(new Date(1571831497485L))
                                                                            .greaterThanCreatedAt(new Date(1571831496610L))
                                                                            .equalToDatafileUrl("3822c37c-14be-4cac-93ee-38465360c959")
                                                                            .notEqualToDatafileUrl("449f395b-3f12-4663-b986-db21013ef395")
                                                                            .inDatafileUrls(Arrays.asList("81f2bec8-f81d-4826-9a61-816702aeb272",
                                                                                                          "c4b2fb33-aa99-4f08-bd34-04a1fed0445d"))
                                                                            .notInDatafileUrls(Arrays.asList("6b17d839-086c-4053-84a2-45d80bbadd2f",
                                                                                                             "72bf0c12-55f3-40a3-94bc-6d5c3bccfa02"))
                                                                            .equalToDatafileSize(Long.valueOf(-36))
                                                                            .notEqualToDatafileSize(Long.valueOf(-95))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(-109),
                                                                                                           Long.valueOf(-115),
                                                                                                           Long.valueOf(19),
                                                                                                           Long.valueOf(107)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(110),
                                                                                                              Long.valueOf(-39),
                                                                                                              Long.valueOf(88),
                                                                                                              Long.valueOf(-31),
                                                                                                              Long.valueOf(-68),
                                                                                                              Long.valueOf(5),
                                                                                                              Long.valueOf(-39),
                                                                                                              Long.valueOf(112)))
                                                                            .equalToDatafileChecksum("f4deaec3-28e8-4e54-a170-75c37b30acb7")
                                                                            .notEqualToDatafileChecksum("d99f61ca-34f3-4952-9573-eb41cc98291e")
                                                                            .inDatafileChecksums(Arrays.asList("c95663e6-68c5-492c-8679-8043f2d8eb20",
                                                                                                               "44fc0945-542f-449d-8593-f44b0e980179",
                                                                                                               "68a7171e-2a57-4f04-93e7-16d67d7b686a",
                                                                                                               "d808960b-e4e9-412d-aacc-04e9dd3c8309",
                                                                                                               "a33269d9-b21a-4e5e-90e9-963360bd92f9",
                                                                                                               "1d2c0649-d31d-4677-823a-6f58d9586457"))
                                                                            .notInDatafileChecksums(Arrays.asList("18752936-7a0e-4610-9aee-1b393318b94f",
                                                                                                                  "ea0d83cf-47c1-4208-bfe6-48b497ecada3",
                                                                                                                  "01613b5e-656d-4b8c-bc1b-8f7e41563346",
                                                                                                                  "a935b7fe-8fc6-4c0b-a801-b30a995983dd",
                                                                                                                  "f20180b1-3560-4548-b78c-91bb14b38993",
                                                                                                                  "57dd3da6-5105-4aa3-9cd0-a42ccd727e63"))
                                                                            .equalToId("342b9d6d-f0d2-409b-b5ee-07fe95396f62")
                                                                            .notEqualToId("d2308e8d-f7b9-4129-8b52-9db285adc8c9")
                                                                            .inIds(Arrays.asList("175dd907-703e-454d-89d5-2824aa43188d",
                                                                                                 "4d93574e-c72c-4bb9-b4dd-4d25d5538b7a",
                                                                                                 "327ea156-a550-4f12-b1c0-9c52e1d4d044"))
                                                                            .notInIds(Arrays.asList("c76d6c40-9d80-4c2a-9f0e-2f5ebbb0a186",
                                                                                                    "d3ec510e-20ad-4ae3-9954-e29f8731890f",
                                                                                                    "be2a0a9d-8444-4ea8-a962-684bdcd7ba12",
                                                                                                    "3b31d942-8c8c-4182-84af-f022b6984317",
                                                                                                    "28e834e6-518f-429a-b0cb-eceb59f28433",
                                                                                                    "10a0bbe2-9480-465a-97bf-aa475fdec27c",
                                                                                                    "1a4cbf06-1b39-414d-ad02-ea90527bdb13"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831489839L), new Date(1571831496173L), new Date(1571831493002L),
                                       new Date(1571831492239L), new Date(1571831489717L), new Date(1571831492905L),
                                       new Date(1571831496230L), new Date(1571831495278L), new Date(1571831491372L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831494331L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1571831498113L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1571831494901L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("c28959a8-dd9c-4436-99a8-69d5ebc9189e",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("60a1430e-b788-4a34-9b8f-5f0b6688f000",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("53c7e561-5b1c-4cb3-9fa6-ad78b7b9e026", "c448747b-653d-4895-ac4d-ab6151f11b92",
                                       "ff825db3-12d1-461e-a5f6-55377007b5b1", "fe32b240-b8a7-4762-b36e-781f9e48e6d3",
                                       "30d60ffb-9fa7-4218-ba44-159fb16bdaec", "92bbb790-3b6d-4602-82d6-7e30d8dcbdb4"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("c8a47f6f-33af-455a-8512-35edec03ca45", "17040c3d-46b3-4bc5-af12-d35a13cbe993",
                                       "99eda001-57e7-42aa-8096-1ffcf000461a", "f674332f-d658-4943-92e6-343a54fc748c",
                                       "f3e38aac-1f76-4236-b79a-e9f4ea1081e5"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("605bf45a-d647-465f-a729-862f57b1b4f2",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("4c3005f6-8c4e-44f6-a3a8-0fc38e21c9a9",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("8bb07a71-628e-4508-b11b-7d7ede91f98c", "ec29dc7a-9963-42fa-9b45-b778168a31a4",
                                       "16e0921d-0000-4099-b6c1-c9dd383831c5", "5ffabb11-e3b7-4ace-b4ae-ba6d6bf5f88c",
                                       "7c9ac1ff-7cbc-426f-a2e4-55146d417a0e"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("9e5b866f-aa63-4374-9e39-5d3668f81743", "52dd1298-f8b2-43bb-8876-099b13885acd"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831496551L), new Date(1571831491297L), new Date(1571831497565L),
                                       new Date(1571831492026L), new Date(1571831493088L), new Date(1571831489371L),
                                       new Date(1571831495227L), new Date(1571831493688L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831490458L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1571831497485L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1571831496610L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("3822c37c-14be-4cac-93ee-38465360c959",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("449f395b-3f12-4663-b986-db21013ef395",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("81f2bec8-f81d-4826-9a61-816702aeb272", "c4b2fb33-aa99-4f08-bd34-04a1fed0445d"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("6b17d839-086c-4053-84a2-45d80bbadd2f", "72bf0c12-55f3-40a3-94bc-6d5c3bccfa02"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-36),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-95),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-109), Long.valueOf(-115), Long.valueOf(19), Long.valueOf(107)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(110), Long.valueOf(-39), Long.valueOf(88), Long.valueOf(-31),
                                       Long.valueOf(-68), Long.valueOf(5), Long.valueOf(-39), Long.valueOf(112)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("f4deaec3-28e8-4e54-a170-75c37b30acb7",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("d99f61ca-34f3-4952-9573-eb41cc98291e",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("c95663e6-68c5-492c-8679-8043f2d8eb20", "44fc0945-542f-449d-8593-f44b0e980179",
                                       "68a7171e-2a57-4f04-93e7-16d67d7b686a", "d808960b-e4e9-412d-aacc-04e9dd3c8309",
                                       "a33269d9-b21a-4e5e-90e9-963360bd92f9", "1d2c0649-d31d-4677-823a-6f58d9586457"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("18752936-7a0e-4610-9aee-1b393318b94f", "ea0d83cf-47c1-4208-bfe6-48b497ecada3",
                                       "01613b5e-656d-4b8c-bc1b-8f7e41563346", "a935b7fe-8fc6-4c0b-a801-b30a995983dd",
                                       "f20180b1-3560-4548-b78c-91bb14b38993", "57dd3da6-5105-4aa3-9cd0-a42ccd727e63"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("342b9d6d-f0d2-409b-b5ee-07fe95396f62",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("d2308e8d-f7b9-4129-8b52-9db285adc8c9",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("175dd907-703e-454d-89d5-2824aa43188d", "4d93574e-c72c-4bb9-b4dd-4d25d5538b7a",
                                       "327ea156-a550-4f12-b1c0-9c52e1d4d044"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("c76d6c40-9d80-4c2a-9f0e-2f5ebbb0a186", "d3ec510e-20ad-4ae3-9954-e29f8731890f",
                                       "be2a0a9d-8444-4ea8-a962-684bdcd7ba12", "3b31d942-8c8c-4182-84af-f022b6984317",
                                       "28e834e6-518f-429a-b0cb-eceb59f28433", "10a0bbe2-9480-465a-97bf-aa475fdec27c",
                                       "1a4cbf06-1b39-414d-ad02-ea90527bdb13"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-59),
                                                                                              Long.valueOf(-121),
                                                                                              Order.getDefault(),
                                                                                              "0bc7ee8e-9f34-4d32-8d07-5b7be85820ec",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-59),
                                                                                              Long.valueOf(-121),
                                                                                              Order.getDefault(),
                                                                                              "0bc7ee8e-9f34-4d32-8d07-5b7be85820ec",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(33),
                                                                                              Long.valueOf(24),
                                                                                              Order.getDefault(),
                                                                                              "5715cb3c-7522-4bf3-bda9-be7e097e9264",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(33),
                                                                                              Long.valueOf(24),
                                                                                              Order.getDefault(),
                                                                                              "5715cb3c-7522-4bf3-bda9-be7e097e9264",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(-1),
                                                                                              Long.valueOf(45),
                                                                                              Order.getDefault(),
                                                                                              "9abfdd0f-0559-4660-be7c-054100edf7f1",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
