// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("439f41f0-b7c4-4333-8e6f-8555329188f6",
                                                             "b5af87d1-2d6a-4534-b977-38b9e898c756",
                                                             new Date(1553200095981L),
                                                             "3456ff46-cd34-4e24-94ca-eb10f0ccef67",
                                                             "5c2b80b9-0107-4ff9-88e6-e6e35ad3eafa");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("be4e8e41-3ae8-49d5-b080-781ca277148d",
                                                             "67e08cab-cd69-4096-8ffd-32c8041d6335",
                                                             new Date(1553200093448L),
                                                             "c5873d0a-7bfa-4df9-99c2-1c30ee169543",
                                                             "ac8a1758-38bf-476d-bb88-49924bd662ac");
            ActiveSession activesession2 = new ActiveSession("be4e8e41-3ae8-49d5-b080-781ca277148d",
                                                             "67e08cab-cd69-4096-8ffd-32c8041d6335",
                                                             new Date(1553200093448L),
                                                             "c5873d0a-7bfa-4df9-99c2-1c30ee169543",
                                                             "ac8a1758-38bf-476d-bb88-49924bd662ac");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("0384845a-89cd-4c0d-81d6-e0d137764020",
                                                        "102c4504-8b5e-436d-84f5-9f6984aaac56",
                                                        new Date(1553200097645L),
                                                        "0a09063f-4b36-4cf4-8918-73906072629d",
                                                        "0871395e-0664-4e51-a5be-58547f147708");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("41fc959d-11b7-4cde-9f0c-910b3d3b7ee6",
                                                             "1622812c-406c-4ac2-8aa5-b57cccaa9ec9",
                                                             new Date(1553200100383L),
                                                             "f38c3ec6-6a9d-4f39-89cb-1e16cc07998f",
                                                             "fd633c71-47ee-4b92-935e-15652f8777a6");
            ActiveSession activesession2 = new ActiveSession("41fc959d-11b7-4cde-9f0c-910b3d3b7ee6",
                                                             "1622812c-406c-4ac2-8aa5-b57cccaa9ec9",
                                                             new Date(1553200100383L),
                                                             "f38c3ec6-6a9d-4f39-89cb-1e16cc07998f",
                                                             "fd633c71-47ee-4b92-935e-15652f8777a6");
            ActiveSession activesession3 = new ActiveSession("ed7d32a9-5314-42f4-afc7-bd53080d25bc",
                                                             "7dd74c88-f746-4727-adef-e21c47e44932",
                                                             new Date(1553200096725L),
                                                             "43b3a78c-2b88-4b95-b2e3-664ef91a6212",
                                                             "604ea67b-8740-4327-b017-2e290b62004a");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
