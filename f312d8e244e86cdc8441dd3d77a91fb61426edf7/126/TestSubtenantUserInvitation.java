// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("580fe92c-28c6-49ec-a1cb-1586cb85132b",
                                                                                           new Date(1553200097019L),
                                                                                           "0291afe8-557b-4d7a-9aff-fe3474044db3",
                                                                                           new Date(1553200102526L),
                                                                                           "9cb8b964-8b0f-414d-a2f3-7ffc98a534d5",
                                                                                           null,
                                                                                           new Date(1553200097138L),
                                                                                           "55307f4e-db3c-48e8-ad16-072dacb44935");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a40a6445-09cd-4af5-ab6e-dbb2b9362c95",
                                                                                           new Date(1553200101964L),
                                                                                           "083f2160-5a2a-4eb4-9655-51add888e0fe",
                                                                                           new Date(1553200098936L),
                                                                                           "1209924a-c9c0-4e69-a242-9deaa437f41e",
                                                                                           null,
                                                                                           new Date(1553200094887L),
                                                                                           "accd043a-cb70-4fc4-9f23-18dc51bf9621");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("a40a6445-09cd-4af5-ab6e-dbb2b9362c95",
                                                                                           new Date(1553200101964L),
                                                                                           "083f2160-5a2a-4eb4-9655-51add888e0fe",
                                                                                           new Date(1553200098936L),
                                                                                           "1209924a-c9c0-4e69-a242-9deaa437f41e",
                                                                                           null,
                                                                                           new Date(1553200094887L),
                                                                                           "accd043a-cb70-4fc4-9f23-18dc51bf9621");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("8de9c77d-3a83-4815-943f-9fd3480d39dd",
                                                                                      new Date(1553200099965L),
                                                                                      "1e7cb787-25f7-4e30-9490-b6c2cd67befd",
                                                                                      new Date(1553200096523L),
                                                                                      "37e3f995-6bb2-4bb3-9d88-fb8f4d658dcb",
                                                                                      null, new Date(1553200098142L),
                                                                                      "d08d5b66-8f8f-46a3-ae23-f343cbcf8a3c");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553200099205L),
                                                                                             null,
                                                                                             new Date(1553200100864L),
                                                                                             "aa8d1a30-8f1c-4db4-a5aa-a17df62986ce",
                                                                                             null,
                                                                                             new Date(1553200098566L),
                                                                                             "e01d7dac-8c0a-4344-aab4-bdfdec718b4f");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("717aca9e-b0d1-453b-bd8e-632bb6da46f6",
                                                                                           new Date(1553200093070L),
                                                                                           "0ad6b555-9315-45ec-ab89-a2e830fe122e",
                                                                                           new Date(1553200098042L),
                                                                                           "710a8c2b-5cdf-4a3b-8e62-db93f658b780",
                                                                                           null,
                                                                                           new Date(1553200094830L),
                                                                                           "42832c3d-465b-465e-b01b-450f05fca317");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("717aca9e-b0d1-453b-bd8e-632bb6da46f6",
                                                                                           new Date(1553200093070L),
                                                                                           "0ad6b555-9315-45ec-ab89-a2e830fe122e",
                                                                                           new Date(1553200098042L),
                                                                                           "710a8c2b-5cdf-4a3b-8e62-db93f658b780",
                                                                                           null,
                                                                                           new Date(1553200094830L),
                                                                                           "42832c3d-465b-465e-b01b-450f05fca317");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("488b1edb-e02e-4645-a6d9-73fb909cc3d5",
                                                                                           new Date(1553200098091L),
                                                                                           "fd712f43-4770-418f-a2fe-44c78d9eabfc",
                                                                                           new Date(1553200096258L),
                                                                                           "836b0cb2-51a7-4245-9644-292444ef9dfe",
                                                                                           null,
                                                                                           new Date(1553200097661L),
                                                                                           "3ec381c6-6952-4729-aac5-b4397c1a8292");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
