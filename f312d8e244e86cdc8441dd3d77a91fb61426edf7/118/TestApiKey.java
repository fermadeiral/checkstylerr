// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("2550a94ae4d0cd6fc7cb8e5879e76571", new Date(1553200098833L), 79,
                                        "5135aeed-b55b-4358-88ce-52ec06416d0f", "d6602e0b-52c2-4a8b-8987-d652fd66609e",
                                        31, "f18143dc-8419-4315-846d-d4f5c9fb0d3b",
                                        "88304e50-c6f5-4b9b-b6ce-6ac4b8f225aa", ApiKeyStatus.getDefault(),
                                        new Date(1553200099875L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("84843d6ac11046f0bdf822adc294f9f7", new Date(1553200100575L), -108,
                                        "adcd1699-fad3-4c39-9e25-ec3983fe941e", "75eec84e-6521-4f81-8c45-a5600a128690",
                                        104, "b34452d9-08f0-41d0-add7-b44ef7f08b27",
                                        "979802e8-f2b6-4891-8df9-60fa6542db9b", ApiKeyStatus.getDefault(),
                                        new Date(1553200094636L));
            ApiKey apikey2 = new ApiKey("84843d6ac11046f0bdf822adc294f9f7", new Date(1553200100575L), -108,
                                        "adcd1699-fad3-4c39-9e25-ec3983fe941e", "75eec84e-6521-4f81-8c45-a5600a128690",
                                        104, "b34452d9-08f0-41d0-add7-b44ef7f08b27",
                                        "979802e8-f2b6-4891-8df9-60fa6542db9b", ApiKeyStatus.getDefault(),
                                        new Date(1553200094636L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("0cd8e44eb85debab4d7583ccd318437a", new Date(1553200097782L), 60,
                                   "384d984e-2ba4-429d-af55-f1179808b931", "1e60ac47-63be-42fd-8497-c032207fad6f", 105,
                                   "0dbd6fac-e734-40a8-8ed4-a91eafb9f753", "257a192b-5eb1-4bd4-9724-421b55367db9",
                                   ApiKeyStatus.getDefault(), new Date(1553200101159L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("á?¬(d2dd\u001fdé·Š%2ç’°\u0014T_\u000b2^22ddí€™22\u0016`ì¿Š\u0010222222d-^2\u0019è³Ÿ2ï™ªd2Gdï¢²\fdáŒž+?\u0001ä‰¯ï‡?è¼§êŒ”ë·¸222ç¥¹ì‚?",
                                          new Date(1553200100453L), -19, "487b7d81-e97b-444e-affa-48908d1394ff",
                                          "75e953d8-4c68-4fe9-8fc0-b4e196adc71a", 17, null,
                                          "1f30f03a-01c2-4a05-98d9-b5590b109276", ApiKeyStatus.getDefault(),
                                          new Date(1553200095337L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("fd1c79d446addcadbce5e56cd849a5b6", new Date(1553200094688L), -37,
                                        "a29ac42d-629f-4e72-b9cf-5969749cdb57", "aeb8c1d2-f95a-46be-b3cc-a1cc0d64e5cd",
                                        -35, "196f77f0-538c-455c-b79f-02555ee25b6a",
                                        "13751c3e-9463-40f3-b426-cf73c8fae11d", ApiKeyStatus.getDefault(),
                                        new Date(1553200102318L));
            ApiKey apikey2 = new ApiKey("fd1c79d446addcadbce5e56cd849a5b6", new Date(1553200094688L), -37,
                                        "a29ac42d-629f-4e72-b9cf-5969749cdb57", "aeb8c1d2-f95a-46be-b3cc-a1cc0d64e5cd",
                                        -35, "196f77f0-538c-455c-b79f-02555ee25b6a",
                                        "13751c3e-9463-40f3-b426-cf73c8fae11d", ApiKeyStatus.getDefault(),
                                        new Date(1553200102318L));
            ApiKey apikey3 = new ApiKey("919df96afa1e0ea4d5396c3cbcb3aafe", new Date(1553200100993L), 80,
                                        "5703f05f-401e-4bd1-b44e-d78785243f15", "b6acfd02-f6ae-43c0-beb9-00afab8d7cf9",
                                        43, "c55ed5ab-4bc1-4aa5-920d-2894847180f1",
                                        "b310532e-cf6c-455c-9983-db0127ee4ccb", ApiKeyStatus.getDefault(),
                                        new Date(1553200095777L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
