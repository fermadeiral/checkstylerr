// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553200100816L),
                                                          "31dbb2ac-7e13-42ca-8512-6447d0a17f42", true,
                                                          "8243d287-93e4-47ed-9ade-d64576397408");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553200093980L),
                                                          "8fd16824-444a-4ee6-9837-5ac39a6a1739", true,
                                                          "b89ca6fb-4259-4b3b-a4ea-2e7d7522ad74");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553200093980L),
                                                          "8fd16824-444a-4ee6-9837-5ac39a6a1739", true,
                                                          "b89ca6fb-4259-4b3b-a4ea-2e7d7522ad74");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553200093708L), "0809dc15-9959-43c9-ac92-f492f4f49505",
                                                     false, "3d734716-c178-4203-b455-27413e695308");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553200093618L),
                                                          "30808759-d821-4ba5-a4a7-f7055c67af49", true,
                                                          "dce55c23-f60d-4f48-852b-323cb1e6fac9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553200093618L),
                                                          "30808759-d821-4ba5-a4a7-f7055c67af49", true,
                                                          "dce55c23-f60d-4f48-852b-323cb1e6fac9");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553200094560L),
                                                          "fd5fce0e-501f-4222-8f3c-ff20a92b99c1", true,
                                                          "81cadb0f-5959-4223-abd5-6b3930f35a90");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
