// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553200098266L),
                                                                         "989f6a6e-8563-4601-b807-54593066aee5",
                                                                         "a0af51ef-1fb8-4568-a240-7af94dac1063",
                                                                         "7881bbdb-8c81-4acf-bd22-2714fbb256c0");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553200102758L),
                                                                         "0e2abe59-af76-47fe-b72b-b378831d4046",
                                                                         "3f564454-fc81-4c1f-baf1-82bfabf4401b",
                                                                         "a11c8cb1-1a76-4e63-80e1-f6699681fac1");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553200102758L),
                                                                         "0e2abe59-af76-47fe-b72b-b378831d4046",
                                                                         "3f564454-fc81-4c1f-baf1-82bfabf4401b",
                                                                         "a11c8cb1-1a76-4e63-80e1-f6699681fac1");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1553200102614L),
                                                                    "b66b7bfb-2e82-430c-b5fa-44fc737f287a",
                                                                    "0c81d150-ab93-436f-8ec8-0d74ef856ed1",
                                                                    "6749646f-f9da-4c31-ab9d-2e4971c1258a");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553200093670L),
                                                                         "653f20e2-5407-46c9-8f7b-e4d023ff34e2",
                                                                         "8e1b4832-16db-42fb-aaef-45dc27d43037",
                                                                         "228b4301-49e1-485e-a8ce-4825f0dc18c3");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553200093670L),
                                                                         "653f20e2-5407-46c9-8f7b-e4d023ff34e2",
                                                                         "8e1b4832-16db-42fb-aaef-45dc27d43037",
                                                                         "228b4301-49e1-485e-a8ce-4825f0dc18c3");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1553200097191L),
                                                                         "0310eda6-45ae-4030-ae93-e526d3a922d1",
                                                                         "c36bf206-40a6-40a5-b4e7-2768afe69d14",
                                                                         "d6e03ae6-ad12-4dae-96a0-132d94d6145b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
