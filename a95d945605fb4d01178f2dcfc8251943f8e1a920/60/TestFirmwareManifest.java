// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558096102390L), 65,
                                                                      "90220601-89bd-47fb-82de-dde247d4fac0",
                                                                      "660b4e2c-0c05-48de-905e-da2ffab2dd40",
                                                                      "23ac450d-fda1-43f0-acd4-a09f35363cdf",
                                                                      "2f43e1e9-e583-422b-924f-a6fd90a0f3ea",
                                                                      "38640798-1c3d-4e5d-ba09-52a255f2b263",
                                                                      "36be9fb2-a844-450b-a3a3-479c1ef8f492",
                                                                      new Date(1558096107607L),
                                                                      new Date(1558096100956L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558096106205L), 73,
                                                                      "790a84cf-dc1c-4135-a09a-9f8b38cdaea1",
                                                                      "d01e6f15-b123-4519-8d5e-1af382027227",
                                                                      "ac9f5480-99de-440c-9988-0ab0229e66f7",
                                                                      "6a1cd4a8-348f-4049-b7e9-507de88f58d1",
                                                                      "bf1e23b5-fd22-403e-af0b-d17becc0e7af",
                                                                      "18209a6d-a1c6-4141-b4f9-dab2d240a1dd",
                                                                      new Date(1558096109656L),
                                                                      new Date(1558096104017L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558096106205L), 73,
                                                                      "790a84cf-dc1c-4135-a09a-9f8b38cdaea1",
                                                                      "d01e6f15-b123-4519-8d5e-1af382027227",
                                                                      "ac9f5480-99de-440c-9988-0ab0229e66f7",
                                                                      "6a1cd4a8-348f-4049-b7e9-507de88f58d1",
                                                                      "bf1e23b5-fd22-403e-af0b-d17becc0e7af",
                                                                      "18209a6d-a1c6-4141-b4f9-dab2d240a1dd",
                                                                      new Date(1558096109656L),
                                                                      new Date(1558096104017L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1558096100746L), -55,
                                                                 "737bd495-87a7-4785-ab75-bd556784079e",
                                                                 "da1da24f-7624-4f9d-ba8d-1fe34e15b44b",
                                                                 "e4b4713d-9962-4dad-9ddb-73f687ecec47",
                                                                 "901bccd1-67de-4f99-b8ec-e57bf0a0fcd5",
                                                                 "1d29730f-1118-4620-9345-2442b0345fbc",
                                                                 "0f8c43f6-ad54-41e7-8443-757a9ed35c47",
                                                                 new Date(1558096106955L), new Date(1558096100225L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1558096107901L), -27,
                                                                        "a3a6c55a-96ce-40ac-a253-ef42139addb9",
                                                                        "10f1f3ca-d149-4325-b7af-3ef8cdb3104065e4f27c-64e3-4ad3-812b-b89a6fbac140a95b3487-f4d0-4103-9ee0-0239c3f32c5e018c8094-e68b-4d61-8b97-c3ca60968d7cc06ff2fd-dd41-4eef-8969-ddfeb30abba11b467df7-e09d-428f-81d0-95bddbd6aa3285ee976a-a1d5-4d1d-8acb-ce5a469d3af8a2144dcc-a303-436b-8cea-7819f2da220bdbce6228-c517-4096-a4b5-f4710dd2934d09776a0f-20e2-436a-90c8-fd179c98d3a5a947373b-89ec-4a64-a1c1-1b7d22f1690c7b8aa8ac-8b9d-4824-8a50-e56d3b8f41a03c500978-1f50-4925-ba32-420decca6937afd2de1f-0c1f-41f6-9f68-8c48a54fafb1c6dd7cad-2998-447d-84d8-5d0135168581535d8c84-42a4-4f5f-bb05-84abaa09ab4125a2ac7d-1804-44dc-a47d-6b0b88315804fcc9fd4c-42fb-4191-b571-a5185fc558e4cd1c740c-0084-4cf6-a333-2d711a3e82bca2ff6129-f1dd-49be-8c8a-3f46c7e3c80ed47db814-3709-4d2f-a9e1-8f4c9f7683ce19d382db-aafd-46a4-945d-892b500ac0b05b14f210-afd4-403f-8b9e-4fb8b5cd01606cd81f61-0d36-4415-95d9-650a0c168aa20b63ebb8-4f33-4926-868c-a0b6c2eca29bd9f851a3-aa57-4a1c-8bed-5726953e833872b09375-bb54-453c-9b72-9367d6a182954e0f277f-ab83-4136-9d30-604e05550b36c61a6c96-5762-472d-a410-f6b07f5ae56fab7ca301-0015-4bec-b065-83807b3f973bf6eda91c-af8c-4c56-928c-c274cb30e5c076e9d4a9-aff7-4b1a-aa32-8ea3b3a1ae00baf79d5e-e791-4039-9b56-a2602e38bc800f83702a-6994-4a75-8bdb-6a41bc51dfdbdf47911a-a741-4779-8abb-f18468ed9eb44686f00d-0366-4300-8098-006a4894b23361c4b9dd-08d0-4fcf-9375-ea3fe43bcbcc2e84a3c8-9fec-4362-b7bc-b8778e2cc60bf27370ba-1123-49bc-9a96-29963db3234f3cfb4a5f-88c6-4c2f-b5ec-afca9f9be9960d63d39f-ff0c-4548-a336-408e73e69191c77cfd08-57ec-4ddc-996e-d8227287655b024187ec-6370-4370-b692-70759c5b4c637b184b6f-f3d7-4cac-80da-54aff4c734b31cb6120a-da40-4259-89d5-713cc1e1f1699c82de6c-e3f9-49be-ac81-f7e8290e6be4191fc8e9-ed54-463b-9adb-b499700c31365e1d9893-a097-4756-a99e-06184a59d57385e604f9-0158-4940-914e-755393a0b7097f69b543-bfd6-420b-a1c7-fe51f3d4df2c0d1e6d5c-5914-46da-8103-bc00bd67c79ef2fd2999-bfe6-4190-a6c9-0bdb434923ea54230d1e-f653-47ed-a059-8db129c7e67bf2a7c376-031d-43e2-a89d-016bcbee5b650fc1d4fb-1415-4b74-ab14-ab5c961e46b15fbc31f8-5fee-458a-8d47-fcc5e70b1705",
                                                                        "9edce279-9483-4aea-9931-aeb37a9ae46b",
                                                                        "48327f85-22bc-4f63-a3cf-2a90a6f75323",
                                                                        "84d4d478-5db0-43d5-b696-a39c069340ae",
                                                                        "eb21410f-4aba-4602-9b8f-d8a96e28a1044200fb22-33d7-41c2-8474-56708ec44d9ad9c37469-7e1d-41cf-ba11-5fb846caabc1f0f9541a-f60a-488f-a7ea-8b2472ff226b",
                                                                        new Date(1558096103487L),
                                                                        new Date(1558096108769L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558096103953L), -7,
                                                                      "2779fc35-1665-43c3-b207-e8297cbe5ba0",
                                                                      "656313cc-9c0e-4a1b-bb20-6751b30fff19",
                                                                      "434ea993-f68f-4f3f-a606-7ef27ab9e72d",
                                                                      "cd93350d-c824-4861-8396-ed1f9edd5b4c",
                                                                      "e2477e1c-cfbf-4acb-88b8-eb7a1dc10709",
                                                                      "84a6f670-a391-4fc9-a2b2-5cca1ef87ba4",
                                                                      new Date(1558096103772L),
                                                                      new Date(1558096103475L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558096103953L), -7,
                                                                      "2779fc35-1665-43c3-b207-e8297cbe5ba0",
                                                                      "656313cc-9c0e-4a1b-bb20-6751b30fff19",
                                                                      "434ea993-f68f-4f3f-a606-7ef27ab9e72d",
                                                                      "cd93350d-c824-4861-8396-ed1f9edd5b4c",
                                                                      "e2477e1c-cfbf-4acb-88b8-eb7a1dc10709",
                                                                      "84a6f670-a391-4fc9-a2b2-5cca1ef87ba4",
                                                                      new Date(1558096103772L),
                                                                      new Date(1558096103475L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1558096103560L), 23,
                                                                      "0f42fc09-45a3-4ca3-bd25-fd99de229006",
                                                                      "63c5705f-a199-4e90-a2fa-d40a1d3b7c3e",
                                                                      "fe2276e2-55e2-4223-b04e-18c003d8ca23",
                                                                      "15432129-3125-4229-8cef-928e8fdce589",
                                                                      "8920a690-b71b-4676-9ae6-c9d3952a91ca",
                                                                      "f6ed7687-409a-43e3-a683-f2493e887ee2",
                                                                      new Date(1558096100124L),
                                                                      new Date(1558096107374L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
