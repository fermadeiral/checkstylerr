// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-54),
                                                                                              Long.valueOf(33),
                                                                                              Order.getDefault(),
                                                                                              "6db29c12-ed4c-4957-99fe-1aa0a4276a87",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1558096109323L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1558096109411L),
                                                                                                           new Date(1558096103032L),
                                                                                                           new Date(1558096101039L),
                                                                                                           new Date(1558096101944L)))
                                                                            .lessThanUpdatedAt(new Date(1558096108759L))
                                                                            .greaterThanUpdatedAt(new Date(1558096103070L))
                                                                            .equalToName("247a218f-84d8-4756-89cc-5716d2c3c4eb")
                                                                            .notEqualToName("43fe772c-10e0-4c8e-8fe7-0f781b37d468")
                                                                            .inNames(Arrays.asList("07bb4bfe-90d1-4fce-8317-cd23aa6014e6",
                                                                                                   "4005bf88-ab15-4d57-8187-680027c897bf",
                                                                                                   "0e617eeb-0fb3-402f-b101-484433be928f",
                                                                                                   "d1932cbd-6993-48f2-8c76-87518e44f68c",
                                                                                                   "311c0753-ddfd-4b68-a719-403a2b078da7",
                                                                                                   "efbcdd92-a6c0-4c27-9ca6-6f403a4eb50a",
                                                                                                   "59b6f84c-53d7-4e8b-bff4-cb50b863aad8"))
                                                                            .notInNames(Arrays.asList("39ede207-f6f1-402c-856f-eccf40fe961e",
                                                                                                      "b9e8434f-8f27-47c8-b395-f25b03b35686",
                                                                                                      "5ab4037e-d0e3-43e8-9520-42680989c458",
                                                                                                      "69ce938a-8469-4250-8f62-1d8460b10ceb",
                                                                                                      "661897c6-e78e-465b-a823-459ac98aca5c",
                                                                                                      "e5efa05a-f1a4-43e9-96c0-2bf0c168be80",
                                                                                                      "b191e27d-55d1-46c0-a87c-c3441579b4aa",
                                                                                                      "d1f41308-6a14-4fce-ac38-0f8a07d3668c"))
                                                                            .equalToDescription("ef40c3f2-6690-4d3c-8cc0-c5c6dfddec76")
                                                                            .notEqualToDescription("9343b783-3d89-48c0-990f-fa3e9533ca68")
                                                                            .inDescriptions(Arrays.asList("d36b9347-a45d-4d7f-9d84-29bb889069f1",
                                                                                                          "85fdbea4-5284-42ef-bf0f-d111d0982ab1",
                                                                                                          "5d1d4f06-26f9-4286-a804-6fe44dfb90a9",
                                                                                                          "474042dc-ba77-4e4b-8969-727d52863e5e",
                                                                                                          "cb22be1e-aedd-4d8f-b98e-93ba44547c1b",
                                                                                                          "9ae27a36-79ed-4f68-bb63-5683494f2431",
                                                                                                          "17946bfb-b7a1-4d95-829d-ed6a69b22152",
                                                                                                          "872075aa-ee60-405f-8a42-9da08de74d3f",
                                                                                                          "ede21be1-945a-4cc3-81b3-7aa88fa80f7d"))
                                                                            .notInDescriptions(Arrays.asList("20de57d4-9fdf-437f-ab38-fb58edcbad08",
                                                                                                             "0e1bd0ef-12c5-4a5b-b617-abf56703ca5e",
                                                                                                             "f4f1a67b-d23a-4492-b641-2a8f156f46ba",
                                                                                                             "00c7e582-3162-4768-b187-d0cd634536ae"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1558096101003L),
                                                                                                        new Date(1558096106016L),
                                                                                                        new Date(1558096106791L),
                                                                                                        new Date(1558096106397L),
                                                                                                        new Date(1558096107733L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1558096101882L),
                                                                                                           new Date(1558096110239L),
                                                                                                           new Date(1558096107182L)))
                                                                            .lessThanCreatedAt(new Date(1558096103731L))
                                                                            .greaterThanCreatedAt(new Date(1558096109806L))
                                                                            .equalToDatafileUrl("fceb64e4-dcb8-453a-9008-af5f57937c53")
                                                                            .notEqualToDatafileUrl("31f0c5e5-c43a-4417-9e57-d273d78d2e49")
                                                                            .inDatafileUrls(Arrays.asList("323224a0-b500-4116-a093-8f2aa805f896"))
                                                                            .notInDatafileUrls(Arrays.asList("94d60ea8-6132-4a5a-b083-d7594377a5d6",
                                                                                                             "02b10b55-674c-4acd-bf2b-3b5b97f3ad39",
                                                                                                             "9841161f-d324-42f2-9b20-6a7a16ae4446",
                                                                                                             "be97645c-4eaf-425f-a3c0-ddf3178d1bb1",
                                                                                                             "c00d9d24-6cba-4af4-9e1a-d360fe10c9c2",
                                                                                                             "8fb7c331-4d42-44d9-a10d-ce0d3faa4ca7",
                                                                                                             "e56aec4e-14d5-4356-a7ad-d133531d5df6"))
                                                                            .equalToDatafileSize(Long.valueOf(-92))
                                                                            .notEqualToDatafileSize(Long.valueOf(50))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(-62),
                                                                                                           Long.valueOf(9),
                                                                                                           Long.valueOf(-56),
                                                                                                           Long.valueOf(95)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(-118)))
                                                                            .equalToDatafileChecksum("94b0efa6-38f9-4da9-9075-5d8f60beab40")
                                                                            .notEqualToDatafileChecksum("c4db83ef-ea85-459f-aa4d-23e9bac7e7c2")
                                                                            .inDatafileChecksums(Arrays.asList("460f8a77-bc3c-423d-b6f8-e4c75fabcc25",
                                                                                                               "fdafa3c1-b723-4cfa-b114-464ab1853c34",
                                                                                                               "e7638ec7-6a60-42d2-9943-704aa6df846c",
                                                                                                               "a38da8c2-0686-4b5d-b290-51789681f71c",
                                                                                                               "7572f95c-6c6e-4cbd-8569-7e13624e440c",
                                                                                                               "6aa842f6-c0c4-4579-a0f5-f4be59b10ed7",
                                                                                                               "7b46a995-0648-4280-a943-a3e05f8d0fed",
                                                                                                               "48566949-5060-436d-b4a7-5eed4b4136c1",
                                                                                                               "1fb0a10f-265e-4468-bdb3-02561691f175"))
                                                                            .notInDatafileChecksums(Arrays.asList("08ef5976-f640-4e97-b0ca-b29b86089107"))
                                                                            .equalToId("af3e2053-6405-4f94-926e-a8128fc62671")
                                                                            .notEqualToId("1543d3e0-a7e3-4623-89cd-30ada8678e42")
                                                                            .inIds(Arrays.asList("0eed7efc-de3b-496f-b872-70ede2757c04",
                                                                                                 "4f7c015d-c9a5-4ee8-9087-47bcea63abf4",
                                                                                                 "dacdf1ae-4d85-440f-824d-4c7299e31b80",
                                                                                                 "f2db4fd5-22b7-4ff6-b60d-a3bc0f230a86",
                                                                                                 "ec1f3009-acb7-49db-936d-00a3c7028214"))
                                                                            .notInIds(Arrays.asList("ac57dbe0-f8a8-4146-9f2e-2306a62e20e2",
                                                                                                    "c76db9be-0848-4403-b9a9-774fa14c56f9"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1558096109323L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1558096109411L), new Date(1558096103032L), new Date(1558096101039L),
                                       new Date(1558096101944L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1558096108759L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1558096103070L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("247a218f-84d8-4756-89cc-5716d2c3c4eb",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("43fe772c-10e0-4c8e-8fe7-0f781b37d468",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("07bb4bfe-90d1-4fce-8317-cd23aa6014e6", "4005bf88-ab15-4d57-8187-680027c897bf",
                                       "0e617eeb-0fb3-402f-b101-484433be928f", "d1932cbd-6993-48f2-8c76-87518e44f68c",
                                       "311c0753-ddfd-4b68-a719-403a2b078da7", "efbcdd92-a6c0-4c27-9ca6-6f403a4eb50a",
                                       "59b6f84c-53d7-4e8b-bff4-cb50b863aad8"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("39ede207-f6f1-402c-856f-eccf40fe961e", "b9e8434f-8f27-47c8-b395-f25b03b35686",
                                       "5ab4037e-d0e3-43e8-9520-42680989c458", "69ce938a-8469-4250-8f62-1d8460b10ceb",
                                       "661897c6-e78e-465b-a823-459ac98aca5c", "e5efa05a-f1a4-43e9-96c0-2bf0c168be80",
                                       "b191e27d-55d1-46c0-a87c-c3441579b4aa", "d1f41308-6a14-4fce-ac38-0f8a07d3668c"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("ef40c3f2-6690-4d3c-8cc0-c5c6dfddec76",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("9343b783-3d89-48c0-990f-fa3e9533ca68",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("d36b9347-a45d-4d7f-9d84-29bb889069f1", "85fdbea4-5284-42ef-bf0f-d111d0982ab1",
                                       "5d1d4f06-26f9-4286-a804-6fe44dfb90a9", "474042dc-ba77-4e4b-8969-727d52863e5e",
                                       "cb22be1e-aedd-4d8f-b98e-93ba44547c1b", "9ae27a36-79ed-4f68-bb63-5683494f2431",
                                       "17946bfb-b7a1-4d95-829d-ed6a69b22152", "872075aa-ee60-405f-8a42-9da08de74d3f",
                                       "ede21be1-945a-4cc3-81b3-7aa88fa80f7d"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("20de57d4-9fdf-437f-ab38-fb58edcbad08", "0e1bd0ef-12c5-4a5b-b617-abf56703ca5e",
                                       "f4f1a67b-d23a-4492-b641-2a8f156f46ba", "00c7e582-3162-4768-b187-d0cd634536ae"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1558096101003L), new Date(1558096106016L), new Date(1558096106791L),
                                       new Date(1558096106397L), new Date(1558096107733L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1558096101882L), new Date(1558096110239L), new Date(1558096107182L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1558096103731L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1558096109806L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("fceb64e4-dcb8-453a-9008-af5f57937c53",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("31f0c5e5-c43a-4417-9e57-d273d78d2e49",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("323224a0-b500-4116-a093-8f2aa805f896"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("94d60ea8-6132-4a5a-b083-d7594377a5d6", "02b10b55-674c-4acd-bf2b-3b5b97f3ad39",
                                       "9841161f-d324-42f2-9b20-6a7a16ae4446", "be97645c-4eaf-425f-a3c0-ddf3178d1bb1",
                                       "c00d9d24-6cba-4af4-9e1a-d360fe10c9c2", "8fb7c331-4d42-44d9-a10d-ce0d3faa4ca7",
                                       "e56aec4e-14d5-4356-a7ad-d133531d5df6"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-92),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(50),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-62), Long.valueOf(9), Long.valueOf(-56), Long.valueOf(95)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-118)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("94b0efa6-38f9-4da9-9075-5d8f60beab40",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("c4db83ef-ea85-459f-aa4d-23e9bac7e7c2",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("460f8a77-bc3c-423d-b6f8-e4c75fabcc25", "fdafa3c1-b723-4cfa-b114-464ab1853c34",
                                       "e7638ec7-6a60-42d2-9943-704aa6df846c", "a38da8c2-0686-4b5d-b290-51789681f71c",
                                       "7572f95c-6c6e-4cbd-8569-7e13624e440c", "6aa842f6-c0c4-4579-a0f5-f4be59b10ed7",
                                       "7b46a995-0648-4280-a943-a3e05f8d0fed", "48566949-5060-436d-b4a7-5eed4b4136c1",
                                       "1fb0a10f-265e-4468-bdb3-02561691f175"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("08ef5976-f640-4e97-b0ca-b29b86089107"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("af3e2053-6405-4f94-926e-a8128fc62671",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("1543d3e0-a7e3-4623-89cd-30ada8678e42",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("0eed7efc-de3b-496f-b872-70ede2757c04", "4f7c015d-c9a5-4ee8-9087-47bcea63abf4",
                                       "dacdf1ae-4d85-440f-824d-4c7299e31b80", "f2db4fd5-22b7-4ff6-b60d-a3bc0f230a86",
                                       "ec1f3009-acb7-49db-936d-00a3c7028214"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("ac57dbe0-f8a8-4146-9f2e-2306a62e20e2", "c76db9be-0848-4403-b9a9-774fa14c56f9"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-106),
                                                                                              Long.valueOf(24),
                                                                                              Order.getDefault(),
                                                                                              "fe6bbe20-58e1-4361-afcd-bd3fd7677365",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-106),
                                                                                              Long.valueOf(24),
                                                                                              Order.getDefault(),
                                                                                              "fe6bbe20-58e1-4361-afcd-bd3fd7677365",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-110),
                                                                                              Long.valueOf(-13),
                                                                                              Order.getDefault(),
                                                                                              "1b0e41c2-d3bd-4aed-aac9-f95ec6f102a5",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-110),
                                                                                              Long.valueOf(-13),
                                                                                              Order.getDefault(),
                                                                                              "1b0e41c2-d3bd-4aed-aac9-f95ec6f102a5",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(-1),
                                                                                              Long.valueOf(-99),
                                                                                              Order.getDefault(),
                                                                                              "76beefb1-8b61-41bc-8337-fc8b8787cef3",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
