// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559147593899L),
                                                          "93a4bfa4-0323-41f2-bdff-1b7bfd6ef889", false,
                                                          "8acbda8b-859a-43e8-9e5e-83488f05f01b");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559147592891L),
                                                          "ee158a32-20f8-4b07-9a10-f380bc3581b5", false,
                                                          "0ac4254f-61cf-46f5-b7ce-dbb4e3607f5b");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559147592891L),
                                                          "ee158a32-20f8-4b07-9a10-f380bc3581b5", false,
                                                          "0ac4254f-61cf-46f5-b7ce-dbb4e3607f5b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559147600381L), "d72dfc28-a215-41df-9c69-02581effedcb",
                                                     true, "8b86c4e0-8e43-4bff-a498-8c66dc84756f");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559147592678L),
                                                          "35abe77b-a9b0-4864-9a76-8b62a6b9dd49", false,
                                                          "4862f3fc-1144-463e-8ceb-ca9a61de7dec");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559147592678L),
                                                          "35abe77b-a9b0-4864-9a76-8b62a6b9dd49", false,
                                                          "4862f3fc-1144-463e-8ceb-ca9a61de7dec");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559147600480L),
                                                          "fc8fecdf-ae50-4b7f-94ca-aac9ae45979c", false,
                                                          "3d33c500-fb53-4d04-8df6-cb2e5b384f1b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
