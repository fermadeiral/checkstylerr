// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559147592471L),
                                                                         "31a29c7a-10a4-43d2-a9d8-fba9dc850306",
                                                                         "3db01624-8e57-4b6f-88d2-9e2ed5ff28fb",
                                                                         "024aa873-0f91-4997-a912-b7c723e18a26");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559147593860L),
                                                                         "a9b61aae-b08a-48cc-8183-88088407739b",
                                                                         "e0e6af50-94a8-4019-94c1-498184a7102a",
                                                                         "c0e46606-7160-4456-986c-a88f12220f2b");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559147593860L),
                                                                         "a9b61aae-b08a-48cc-8183-88088407739b",
                                                                         "e0e6af50-94a8-4019-94c1-498184a7102a",
                                                                         "c0e46606-7160-4456-986c-a88f12220f2b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559147594099L),
                                                                    "b4971443-ba83-4f47-9c4e-635f5c79d882",
                                                                    "0904a007-52fd-432e-83e0-b29e61770f53",
                                                                    "10e7a024-01dc-4274-b779-0f128601eb2e");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559147599874L),
                                                                         "cb45197f-2c66-453b-aaca-c367f3185af4",
                                                                         "ecc6e934-ae13-4120-8eb6-924179504f10",
                                                                         "29dd4dbc-ce43-48d7-aee0-7af2ca265172");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559147599874L),
                                                                         "cb45197f-2c66-453b-aaca-c367f3185af4",
                                                                         "ecc6e934-ae13-4120-8eb6-924179504f10",
                                                                         "29dd4dbc-ce43-48d7-aee0-7af2ca265172");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559147601099L),
                                                                         "7ad0568c-3111-46de-b3a9-c8ffba3dc55d",
                                                                         "7311891d-f95a-4470-bceb-03f3fe1d7d46",
                                                                         "7f94d27c-9ed3-4288-97fa-653ba906f140");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
