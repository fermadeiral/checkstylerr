// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559147591883L),
                                                             "9efc6a11-e67e-43bb-a289-6b85d0601d38", 92,
                                                             "5c79a423-7fe0-48c8-84b6-9c1cf81b570d",
                                                             "a136864e-4f18-4cf3-a61a-18e3218b8aab",
                                                             "14280bc2-eed2-46bd-8e8d-8b34df2dd76d",
                                                             "e0243c9c-93d1-4ce2-a4bd-250eddbd9045",
                                                             new Date(1559147597867L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559147593143L),
                                                             "fbf1b935-9b6c-4bae-ae53-a2a9313b4a5c", -70,
                                                             "da7a3b96-61f4-4a00-be75-36cf8b9ee59b",
                                                             "44dcf72b-9dca-42a1-a3f9-1c1c81e81c2b",
                                                             "22b8b923-3e96-4317-b780-21e4471d09c9",
                                                             "e0387b85-5cea-4019-9bb6-ca5467410bc5",
                                                             new Date(1559147595307L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559147593143L),
                                                             "fbf1b935-9b6c-4bae-ae53-a2a9313b4a5c", -70,
                                                             "da7a3b96-61f4-4a00-be75-36cf8b9ee59b",
                                                             "44dcf72b-9dca-42a1-a3f9-1c1c81e81c2b",
                                                             "22b8b923-3e96-4317-b780-21e4471d09c9",
                                                             "e0387b85-5cea-4019-9bb6-ca5467410bc5",
                                                             new Date(1559147595307L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559147596245L),
                                                        "965d7e93-5b23-48af-9f36-fcf84ef6f6a6", -121,
                                                        "b34f30a1-4e41-490b-9763-75a40595c060",
                                                        "4fb77d64-85ff-40da-bf85-fde5626ccb64",
                                                        "b3ed7919-eb46-43fc-9391-cd502e28615e",
                                                        "3e3cad4c-37f1-4547-9f12-9649f9a4e010",
                                                        new Date(1559147601195L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559147600857L),
                                                               "732776f0-1b21-44af-89d9-e44effb5680a", -64,
                                                               "321cd01b-dfa5-46d6-bd10-e04ddb8d6c5c",
                                                               "b03b89b1-79d5-4649-878f-e7a8b1b62080b966d486-a61e-423f-962e-d914c16c68c169b125e0-3a89-45c6-8196-0c3a04757c185262fc7c-8244-4ad9-a505-ef349f5b9ea943c74258-3332-4c6d-9b7e-92b78ae016faa1cd2c58-0c12-4479-bc09-f4da57afa7bfae6b208a-eb50-493a-8dec-53b2cd4aa6c62d4e8ec5-c938-4f3d-9a64-19fb70fb5a5e4f9c595b-62da-48b3-82ae-bebb3e0e579668f1c43f-a8b7-4c10-b3df-228dfa8e59b72fbffab9-3532-424c-b082-be8d9a113f7f6330f2bb-2260-413b-9287-b7673c110ec1fa46922e-7e58-4731-86a9-b02efbb0389892ef7c0d-35e1-4110-94cb-e0adc1b3f3d963b6c2c3-d432-4eb7-bcc4-8f4d4488a9bbc3b64161-bae1-44a7-924e-1fb2a8013a043e431f3d-0fef-45f9-b1c5-19a6a40dc1fbf29e5b2d-82a1-400b-9ce2-5d92992331c856beb151-1f40-4cdd-a16c-ccf748b591dcdef64d73-12ff-442f-8473-f2bd3bd387cf65e75bb0-19f1-4578-9f6d-2f315c482348f02d59a9-31ea-4165-a623-8a795baf3a438e8181e4-f0c9-4e70-b474-c9fde0d4f4e0c3b8e266-2bf7-4ea0-b353-3ed6f6b83bc97ad85993-32cc-4a90-be7d-a8d4ff82cacc145d603d-6cfa-4b05-873e-e0161174dc753b8ef5b9-9819-41ee-b228-654c59fc696677e10248-8be3-44bb-ab9c-33bed9923473e4402535-ceb6-4fc9-bbea-0758d035c15d28f3c976-903e-436b-a159-dcebbc62b25422c4bd36-6478-4291-9c13-0dc7a609f19b81e8bb35-6591-4438-9320-ceca0adef039d616a3c6-eb22-41a5-b6ec-2f1494691cad9d3d0995-a95d-46b1-91b5-3f0f868d655ab2cf5940-e3a3-46bf-9fd7-d835a1d40937826a3d85-e9a0-4a5a-a924-c0cbf35fd6ca2d30d72d-640a-466b-a382-7418c4f125f58c2e573c-9cb4-4ce1-a9c5-1b396e457fe45cff7850-6332-4516-94ad-1c98890622ed40c273ea-0aaa-4bb2-ac02-e0ee9a2376a671501f2a-84f3-4c2a-ba26-a52029ed8ce12e656c9d-bdd2-4fd4-8c69-b9866e1b43c8073cf474-34df-41a1-aedb-27d87735de9c8cde5da6-d231-40bd-b761-508c0e9a6245e831ccea-b91e-4892-85fa-c76dcdbf209d675dc6b6-7d63-4210-8a0c-c7747da3658c4491daba-7f01-4a55-9d67-72930ae6284a075aa478-8dc7-4666-9d0e-7c30b92c463fb425ad9d-09bd-4e12-a831-c1b9b7b04f7ab7d58deb-50e0-4252-8ac0-30eb9c42bbbeeb8c2e6d-8c45-4bd9-9b30-d6960bffd78b286c09f9-370e-4ad7-8cee-737d1059db8e7b211664-c3a7-4138-b1b8-f95d8621ee4047bc526b-9968-4d72-839a-7078b53b5fadcabf718f-d388-4c87-979e-15a6b321ed7e3305fd74-0a7a-4799-9919-91bc9b2ae6d2",
                                                               "94cd9ab6-fb7a-475e-aaa4-70bb32d4a695",
                                                               "37383910-0bc8-4473-84bb-10f6e2d9119c78a97d6d-47bb-4d67-a1f7-458da8c9b03a5b7494f5-c7fb-4c5c-a01c-e6a82559f000f2373440-cdce-405f-a5c5-0400d91af6d4",
                                                               new Date(1559147593934L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559147593665L),
                                                             "bcd2fd96-76a6-4594-a361-19b9725cda8e", 111,
                                                             "f30a43a3-9f05-4eef-bd74-4cd995c3f77c",
                                                             "456749fa-9f41-4b7b-a0a3-a390fdf3464a",
                                                             "4047d574-1061-46ec-aabf-879fe6d3cccd",
                                                             "3a6ff449-507d-4d6c-98ca-71697fba483c",
                                                             new Date(1559147598247L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559147593665L),
                                                             "bcd2fd96-76a6-4594-a361-19b9725cda8e", 111,
                                                             "f30a43a3-9f05-4eef-bd74-4cd995c3f77c",
                                                             "456749fa-9f41-4b7b-a0a3-a390fdf3464a",
                                                             "4047d574-1061-46ec-aabf-879fe6d3cccd",
                                                             "3a6ff449-507d-4d6c-98ca-71697fba483c",
                                                             new Date(1559147598247L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559147600447L),
                                                             "1e9cafff-c06c-4b79-aa40-fb2c8f66bf50", -24,
                                                             "6eea7999-e3e4-4909-9ae1-a16f32444c49",
                                                             "ee8f6fe0-3327-4318-8740-59298d4fafde",
                                                             "f9050731-3f5f-42f0-b557-33d5fbf82a96",
                                                             "c85a03fe-6395-425b-aa0a-fb2ffad7f424",
                                                             new Date(1559147598182L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
