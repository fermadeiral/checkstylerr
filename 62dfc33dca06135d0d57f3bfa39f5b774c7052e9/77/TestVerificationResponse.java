// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model VerificationResponse.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestVerificationResponse {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            VerificationResponse verificationresponse1 = new VerificationResponse("bcb80f9c-ec9f-4fd3-8d1c-95309dd20bd3",
                                                                                  true);
            VerificationResponse verificationresponse2 = verificationresponse1.clone();
            assertNotNull(verificationresponse1);
            assertNotNull(verificationresponse2);
            assertNotSame(verificationresponse2, verificationresponse1);
            assertEquals(verificationresponse2, verificationresponse1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            VerificationResponse verificationresponse1 = new VerificationResponse("43f86bef-35a6-458e-a6fb-cbb47a9369c9",
                                                                                  true);
            VerificationResponse verificationresponse2 = new VerificationResponse("43f86bef-35a6-458e-a6fb-cbb47a9369c9",
                                                                                  true);
            assertNotNull(verificationresponse1);
            assertNotNull(verificationresponse2);
            assertNotSame(verificationresponse2, verificationresponse1);
            assertEquals(verificationresponse2, verificationresponse1);
            assertEquals(verificationresponse2.hashCode(), verificationresponse1.hashCode());
            int hashCode = verificationresponse1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, verificationresponse1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        VerificationResponse verificationresponse = new VerificationResponse("0af4243a-1945-47f2-9c48-78d69a63aa6c",
                                                                             true);
        assertTrue(verificationresponse.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            VerificationResponse verificationresponse1 = new VerificationResponse("5e9b47c7-f67c-4df1-b2f2-a72f4e16132d",
                                                                                  false);
            VerificationResponse verificationresponse2 = new VerificationResponse("5e9b47c7-f67c-4df1-b2f2-a72f4e16132d",
                                                                                  false);
            VerificationResponse verificationresponse3 = new VerificationResponse("9dad575b-fdd9-4739-8776-c093c933f4d0",
                                                                                  false);
            assertNotNull(verificationresponse1);
            assertNotNull(verificationresponse2);
            assertNotNull(verificationresponse3);
            assertNotSame(verificationresponse2, verificationresponse1);
            assertNotSame(verificationresponse3, verificationresponse1);
            assertEquals(verificationresponse2, verificationresponse1);
            assertEquals(verificationresponse2, verificationresponse1);
            assertEquals(verificationresponse1, verificationresponse2);
            assertEquals(verificationresponse1, verificationresponse1);
            assertFalse(verificationresponse1.equals(null));
            assertNotEquals(verificationresponse3, verificationresponse1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
