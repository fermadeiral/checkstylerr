// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("d7f96d09-3b2a-4725-913e-4f0ab6036e43", false,
                                        "b9488161-8ed4-4861-a8a2-72c3441821ff", true,
                                        "a8fedd3e-8f3c-447e-9d5c-14739fec6e9c");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("0b6f0ee5-687a-402d-916d-96bbb4d271c7", false,
                                        "cc9cf2ce-1cdf-47e9-bf25-3ab3985d773f", false,
                                        "710569b0-2dcc-4f54-af62-82de40eb3eea");
            Policy policy2 = new Policy("0b6f0ee5-687a-402d-916d-96bbb4d271c7", false,
                                        "cc9cf2ce-1cdf-47e9-bf25-3ab3985d773f", false,
                                        "710569b0-2dcc-4f54-af62-82de40eb3eea");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("c49d5683-57f8-4914-b2cd-c81631d7ec05", true, "dc739521-7be1-4186-97d8-fd8f73ed396c",
                                   true, "18616c02-cf40-4ca5-9212-49bd7b4b4041");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("41aef195-875e-4de8-900a-f755340aa351", true,
                                        "a08dfc4b-68e1-427f-af20-ee6865ba9a4e", true,
                                        "0c39e730-f2dd-44a7-a673-cab16879e4fe");
            Policy policy2 = new Policy("41aef195-875e-4de8-900a-f755340aa351", true,
                                        "a08dfc4b-68e1-427f-af20-ee6865ba9a4e", true,
                                        "0c39e730-f2dd-44a7-a673-cab16879e4fe");
            Policy policy3 = new Policy("2db24fe7-6238-4f30-8d25-0ada01eb87a2", true,
                                        "c1b0352f-ae36-42e5-b92c-44b5629eebce", true,
                                        "ea97fbbe-54fb-45f6-9e10-b75921ed3a43");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
