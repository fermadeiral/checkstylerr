// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561477838692L),
                                                          "62e54537-2c81-4e7b-839c-87f14d00fc57", true,
                                                          "503ed790-1fc9-424a-b29f-73126a2723e1");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561477837087L),
                                                          "133589fb-b68f-4027-88c1-fb8421b2bb1a", false,
                                                          "6b0ade23-6ab7-4dac-b019-5e814354ec99");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561477837087L),
                                                          "133589fb-b68f-4027-88c1-fb8421b2bb1a", false,
                                                          "6b0ade23-6ab7-4dac-b019-5e814354ec99");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561477834008L), "49311f99-e510-4acb-ad6e-bf42b62a99e0",
                                                     false, "4e7c6035-b5ad-4796-87d0-5379e2048ca5");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561477833064L),
                                                          "1404bf82-cb76-452b-8b94-6fae12f20f64", false,
                                                          "219674cf-0b31-4077-8add-d257138aa293");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561477833064L),
                                                          "1404bf82-cb76-452b-8b94-6fae12f20f64", false,
                                                          "219674cf-0b31-4077-8add-d257138aa293");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561477837215L),
                                                          "2344889e-6cee-4d0c-8fa0-9b93b47723ba", false,
                                                          "86017aff-2fee-4bcc-8b1a-196f59a7e1f8");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
