// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561477833149L), 78,
                                                                      "7a4ee0a8-f5b8-405c-a3f8-76b36866a945",
                                                                      "79ad60c4-9c6f-445f-b8f7-7a658b1bc960",
                                                                      "83ebc97e-05ec-4ffd-bdab-eacdda874800",
                                                                      "aaefb9fa-d159-41a1-9481-b64ebdac27c5",
                                                                      "3e35ecaa-20b0-4b43-97c0-266c27b1cb70",
                                                                      "1995b286-cfe9-4c98-a6dd-754e8ade5d65",
                                                                      new Date(1561477833724L),
                                                                      new Date(1561477834844L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561477842356L), 43,
                                                                      "30ead20a-a6af-4d1e-b280-ff54ab3d0f54",
                                                                      "02e5e8aa-4612-4561-8d7f-d84f75b15ebf",
                                                                      "9b7abb40-688a-4667-be2e-942f5deb8e1a",
                                                                      "ccefee60-f300-4792-b840-07d3fb067b03",
                                                                      "fece308b-6654-4a1a-9963-ba4f75d865f2",
                                                                      "73fc668c-3415-4e07-a060-d4a302fcd91f",
                                                                      new Date(1561477833958L),
                                                                      new Date(1561477833530L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561477842356L), 43,
                                                                      "30ead20a-a6af-4d1e-b280-ff54ab3d0f54",
                                                                      "02e5e8aa-4612-4561-8d7f-d84f75b15ebf",
                                                                      "9b7abb40-688a-4667-be2e-942f5deb8e1a",
                                                                      "ccefee60-f300-4792-b840-07d3fb067b03",
                                                                      "fece308b-6654-4a1a-9963-ba4f75d865f2",
                                                                      "73fc668c-3415-4e07-a060-d4a302fcd91f",
                                                                      new Date(1561477833958L),
                                                                      new Date(1561477833530L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561477840085L), -46,
                                                                 "f54b4b6f-1b08-4098-9808-f257cdfb5a62",
                                                                 "7b682c71-07e9-4c5f-bace-7ae7bc33dbb0",
                                                                 "640dded5-e836-4084-a272-bd39b6907146",
                                                                 "1de56faf-1685-44f7-bb27-2e5840f6b7c9",
                                                                 "c2551b61-3546-4428-8196-10e2c5456254",
                                                                 "0b834994-b4d7-4429-b8a3-e5f80a2bcea2",
                                                                 new Date(1561477839610L), new Date(1561477834311L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561477841445L), -23,
                                                                        "4b6b8a99-dbd7-4328-868d-f92db4fe9b79",
                                                                        "33433f84-2d2c-4dda-91cd-28f847153e2a7028e106-b38d-4cdf-8dc7-7fadcf369b0760805a20-6f88-48b8-9a93-cf91853073e28867c015-297c-4c72-96ce-010b23df1bdc130ac404-a89a-4b99-ba07-54dc268a0c9b75d80898-417e-4d20-87c4-49bc24c4988a375386be-bf2a-4e52-bea7-8480fc2e10d98a1c1b19-6671-47a0-a6b6-69be7628fa4bb334629c-b5de-4c53-81a4-6934efc0e46348f77053-34fd-442a-82c6-a80147240be3fc37089c-83b7-4905-8c81-e16eb1086e1743b661fe-3b3a-4e9a-a252-db51730fd63d5573f67b-0149-4382-b8de-94d5a9494d247a1a8885-8a9d-4c68-a0f0-e16fd8e0c8e58274007e-0d82-47ff-8397-22ca74f41f947104503e-a25c-43ee-b0e9-e5f20950ec0757672af0-bf0f-4049-98bb-58cf603e11371d30bd8c-306b-4e0c-994c-f6df74e036a3c3727975-5097-42d0-8e58-b2694ecc0072e8998f6e-f405-4f40-9dd8-68cb76dfdd9d74f106fb-8910-4f7d-9816-e2e204dddaca398b77f0-66a6-4e0e-945f-f8c72adde45c2155d8c2-704c-43e0-83c3-62d425e23224a73f4f6b-d0ac-4559-ab82-08e05c37b0f13b2513d8-e897-4382-b818-84f0cfdc821ac6f498ae-c409-4c83-824d-5c830140aea5f761dd37-1a3e-4df0-a1df-d4f9c9a0716ba6e71e85-ff52-4720-b048-e3bb31d52c6dacfcd034-076a-4c71-bb8c-f35c3a5758484665da68-e9cf-4135-86ed-15c2953cf7a41b6d4036-747d-41ab-857c-acecb56b4c95817795d4-caf4-4d29-ab2c-8710c62273579b225a65-7c48-4305-aa29-96a395d4ae132f722946-ca7f-4004-826c-37d3572b6229a71a7cc5-794d-4ce2-b5b3-62f9c64df5c087e037bd-b8ce-4025-8ab7-790ccf46363efe792b6b-fef5-4ade-af82-a9862846fa62c15a89b0-6c9f-487f-95d9-3ea24510183513989fa3-a582-4a98-aade-3a6acb4a098c1e439de7-4454-44cc-8ee0-ba5d14d0051a22c874fb-4af9-4c5b-8d82-2fb27c9921f80931626d-2b0d-4962-ba28-96974c93a799de33c8a7-b7ef-417b-a743-35fbee549123ff485820-36bd-473e-b0fa-03284f69bf7cd002c39d-1b84-47fe-81ac-28aa412dbbe85fcac259-4b9c-41e8-987e-e2da5eaa46c242c06f28-bfd8-4c81-996c-5fa5201069542db75fef-e7d0-4654-9ffd-1941b49a9133ecb85145-af83-4fc9-8a25-52feae561dcf8841bdf7-7ebb-4af4-8c49-ce73ead25be498b497a8-e184-4e33-81a3-3df38a8b846e17911438-2c42-4e21-86b9-5694e8b745193d28450e-852f-414d-a79e-ffd75cb3fb1dc37e7e30-824c-4887-83d6-5c8882e109882d5c26fb-e650-4c00-8e9d-36ecb63939b0b5f46d4c-9d9c-40de-ab3d-4a8de42a59da",
                                                                        "0d46bf6a-9e49-479b-b760-249f83e22a4b",
                                                                        "2f3037cf-9904-4a04-b200-d87d093668d8",
                                                                        "9d53bb9d-1eec-4b05-917b-5fe3ee471408",
                                                                        "0cf65c7f-f104-4842-8e13-21174b82284c7cb1869e-f0f7-4823-bef8-e16391ba4957271773e7-417e-4020-b0d6-08033962e23ad56a1d42-1b14-418f-9381-4a7abeb189e0",
                                                                        new Date(1561477841172L),
                                                                        new Date(1561477833127L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561477841920L), -47,
                                                                      "8794cd32-73bc-4e75-97ac-2ec46a50919d",
                                                                      "74bf978e-b8f9-43aa-b153-9e1fbf07653b",
                                                                      "2705ceee-7a73-4d36-b3f7-f9339bcb2feb",
                                                                      "8499cd8f-ef59-45b1-8c1b-a56fa7eb1078",
                                                                      "1e28fba3-23d7-450b-b7d5-a85722d70b53",
                                                                      "db1f91ae-2edc-423f-a19a-4464035875c9",
                                                                      new Date(1561477837663L),
                                                                      new Date(1561477841090L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561477841920L), -47,
                                                                      "8794cd32-73bc-4e75-97ac-2ec46a50919d",
                                                                      "74bf978e-b8f9-43aa-b153-9e1fbf07653b",
                                                                      "2705ceee-7a73-4d36-b3f7-f9339bcb2feb",
                                                                      "8499cd8f-ef59-45b1-8c1b-a56fa7eb1078",
                                                                      "1e28fba3-23d7-450b-b7d5-a85722d70b53",
                                                                      "db1f91ae-2edc-423f-a19a-4464035875c9",
                                                                      new Date(1561477837663L),
                                                                      new Date(1561477841090L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561477841963L), -99,
                                                                      "506e0100-1a1c-4526-860d-4d1c9554a306",
                                                                      "b827b1c7-0589-42f0-bfcb-a679567afe25",
                                                                      "3f48ee7a-23e7-47e9-89d1-582eefad81d9",
                                                                      "9424c94c-de7c-44ce-b0bf-4365fd50ed6b",
                                                                      "bd116af6-0b03-4123-8b10-7aed8a2f8f16",
                                                                      "dae2082a-96e0-4d30-9e2f-e26c4c8ccfdd",
                                                                      new Date(1561477841651L),
                                                                      new Date(1561477839429L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
