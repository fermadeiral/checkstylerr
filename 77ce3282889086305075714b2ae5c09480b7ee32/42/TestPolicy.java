// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("9b6e53df-de7d-4056-8ef5-462036cbec16", true,
                                        "f5c8e5e9-e75a-41a2-9e66-21759b9e3d39", true,
                                        "54c6e7bf-c483-4ce5-ae6e-3737e83ad80d");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("55b16764-b1e0-4d35-a564-260b103616de", true,
                                        "a254f494-bb36-49b8-83f7-0e054afedd64", true,
                                        "aef9a1f8-eb74-4255-ba2d-c9ac186c09d0");
            Policy policy2 = new Policy("55b16764-b1e0-4d35-a564-260b103616de", true,
                                        "a254f494-bb36-49b8-83f7-0e054afedd64", true,
                                        "aef9a1f8-eb74-4255-ba2d-c9ac186c09d0");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("710c7f03-2630-4214-bff1-9a7dfe62f7f2", true, "820184a0-4f08-4837-8a1b-638198fc6163",
                                   true, "04b567d3-9267-4814-8093-bd3b5194f246");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("783796fe-3ab9-4935-a11f-4fcb1bbdb789", false,
                                        "2238d0d6-bc74-490e-8c72-6853d2b4c6e7", false,
                                        "e6f2bb98-6b84-4e4f-bf15-f9a2dd510693");
            Policy policy2 = new Policy("783796fe-3ab9-4935-a11f-4fcb1bbdb789", false,
                                        "2238d0d6-bc74-490e-8c72-6853d2b4c6e7", false,
                                        "e6f2bb98-6b84-4e4f-bf15-f9a2dd510693");
            Policy policy3 = new Policy("bd936ff1-9bb7-453e-9c8d-6ee4c2b2412c", false,
                                        "9b981f8f-855a-4c0a-b901-a3273f707e33", false,
                                        "e5f34cb3-4b17-4720-a289-dd3603fa4e06");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
