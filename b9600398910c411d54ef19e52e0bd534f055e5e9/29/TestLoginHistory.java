// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559148830586L),
                                                          "ca7d33c2-caa6-4a91-933f-908fe6106d34", true,
                                                          "57d3c3d3-1ba1-484b-9545-0a4cf31385b2");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559148825543L),
                                                          "001cff3a-1cdc-45cd-9274-a2a40615c6e7", true,
                                                          "828d884f-9300-4d35-a05c-c38998bd6f14");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559148825543L),
                                                          "001cff3a-1cdc-45cd-9274-a2a40615c6e7", true,
                                                          "828d884f-9300-4d35-a05c-c38998bd6f14");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559148828575L), "0634dc54-e2ba-4b33-bd5a-fc9399215902",
                                                     true, "4b69902d-3826-4c3e-ab36-6e3eed696712");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559148827793L),
                                                          "e9163701-dee8-4442-be82-eaab2b135603", false,
                                                          "34a06052-6f35-4fbe-9056-cc1dfbb457f1");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559148827793L),
                                                          "e9163701-dee8-4442-be82-eaab2b135603", false,
                                                          "34a06052-6f35-4fbe-9056-cc1dfbb457f1");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559148833555L),
                                                          "0b0c35cc-84d3-492a-a60c-c1bdfdf973d8", false,
                                                          "a1aa681d-8945-4404-bec7-f284b22238ad");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
