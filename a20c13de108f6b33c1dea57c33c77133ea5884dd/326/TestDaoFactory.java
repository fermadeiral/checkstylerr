// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.foundation;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model DaoFactory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDaoFactory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DaoFactory daofactory1 = new DaoFactory((DaoFactory) null);
            DaoFactory daofactory2 = daofactory1.clone();
            assertNotNull(daofactory1);
            assertNotNull(daofactory2);
            assertNotSame(daofactory2, daofactory1);
            assertEquals(daofactory2, daofactory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DaoFactory daofactory1 = new DaoFactory((DaoFactory) null);
            DaoFactory daofactory2 = new DaoFactory((DaoFactory) null);
            assertNotNull(daofactory1);
            assertNotNull(daofactory2);
            assertNotSame(daofactory2, daofactory1);
            assertEquals(daofactory2, daofactory1);
            assertEquals(daofactory2.hashCode(), daofactory1.hashCode());
            int hashCode = daofactory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, daofactory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DaoFactory daofactory1 = new DaoFactory((DaoFactory) null);
            DaoFactory daofactory2 = new DaoFactory((DaoFactory) null);
            assertNotNull(daofactory1);
            assertNotNull(daofactory2);
            assertNotSame(daofactory2, daofactory1);
            assertEquals(daofactory2, daofactory1);
            assertEquals(daofactory2, daofactory1);
            assertEquals(daofactory1, daofactory2);
            assertEquals(daofactory1, daofactory1);
            assertFalse(daofactory1.equals(null));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
