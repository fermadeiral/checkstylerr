// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("4f037b25-f176-489a-85ae-e760dd9a3c06", false,
                                        "66a2e360-4a5a-4cc5-af62-083e908c0433", true,
                                        "cbedfe19-1728-4b63-9382-1de88edab3a9");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("ba55e226-790f-4902-b49f-1011d67f9a6e", false,
                                        "0be1ceb5-90fb-41cb-ab6a-160ed014bb12", true,
                                        "e0c114e3-5db9-4609-8436-37ec182a3b2b");
            Policy policy2 = new Policy("ba55e226-790f-4902-b49f-1011d67f9a6e", false,
                                        "0be1ceb5-90fb-41cb-ab6a-160ed014bb12", true,
                                        "e0c114e3-5db9-4609-8436-37ec182a3b2b");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("4d0cc0b6-b26b-4ea9-ad72-c7b133300cd3", false,
                                   "ef296750-deb1-409e-8244-8e76818ff90f", false,
                                   "44fa7f7a-59e6-4678-8ee9-86a0d9d8f5b9");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("f4fa2938-a315-4694-b3f1-f67d22963bd1", false,
                                        "ca9bd957-cb25-491a-a659-3306a0596b06", false,
                                        "f5f5e707-ef2b-4212-9837-86541810e757");
            Policy policy2 = new Policy("f4fa2938-a315-4694-b3f1-f67d22963bd1", false,
                                        "ca9bd957-cb25-491a-a659-3306a0596b06", false,
                                        "f5f5e707-ef2b-4212-9837-86541810e757");
            Policy policy3 = new Policy("dd1fc78a-83d8-4c8e-9fb1-47a6648dbe7f", false,
                                        "7071dd31-6bb3-4757-9470-f4d3f2e77d2f", false,
                                        "e2d83180-9ec7-441a-a6ec-f587f315a1c3");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
