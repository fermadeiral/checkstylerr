// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1557969573174L),
                                                                         "75a03e05-76b3-4e87-9971-7e683cb2dba9",
                                                                         "0ba9deda-b458-48e5-a78f-a238c540916b",
                                                                         "59262099-fa4a-480c-b747-a2bcd40c51d4");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1557969578449L),
                                                                         "635dd0f1-9048-4bd4-9e9f-affac4ca5ae8",
                                                                         "4e637f50-d531-4e0f-a8fc-dd3bdc0e250e",
                                                                         "a8f7b605-b02d-4b95-a745-3bec8858b666");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1557969578449L),
                                                                         "635dd0f1-9048-4bd4-9e9f-affac4ca5ae8",
                                                                         "4e637f50-d531-4e0f-a8fc-dd3bdc0e250e",
                                                                         "a8f7b605-b02d-4b95-a745-3bec8858b666");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1557969573480L),
                                                                    "ad2c547a-6a00-4068-8a83-ac523ff69764",
                                                                    "6a2ab519-6f57-445f-a29a-5fae9646ad97",
                                                                    "c0330811-77fb-4b6d-a4c3-8a65b9ef7d63");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1557969572659L),
                                                                         "68732bea-77e5-4029-b85b-2dc8aab46b86",
                                                                         "2f833181-d75f-4304-b8ec-9d1c3b17a1d5",
                                                                         "0590933a-b70b-4cf1-80e8-1ff0ffd0838b");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1557969572659L),
                                                                         "68732bea-77e5-4029-b85b-2dc8aab46b86",
                                                                         "2f833181-d75f-4304-b8ec-9d1c3b17a1d5",
                                                                         "0590933a-b70b-4cf1-80e8-1ff0ffd0838b");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1557969577431L),
                                                                         "8251d9d0-e820-428b-aaad-3a3eeb40c8ed",
                                                                         "365361c1-9777-4c59-a9de-4301c4b138b9",
                                                                         "263b163e-9083-4e85-ab33-7ac34844e84e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
