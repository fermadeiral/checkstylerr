// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           new Date(1561379518794L),
                                                                                           "0a18e.e60cc@67e15.me",
                                                                                           new Date(1561379513305L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           null,
                                                                                           new Date(1561379520356L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           new Date(1561379513991L),
                                                                                           "712f8.a8a65@7d0ef.fr",
                                                                                           new Date(1561379511906L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           null,
                                                                                           new Date(1561379520033L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           new Date(1561379513991L),
                                                                                           "712f8.a8a65@7d0ef.fr",
                                                                                           new Date(1561379511906L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           null,
                                                                                           new Date(1561379520033L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                      new Date(1561379515127L),
                                                                                      "b0f34.26e5b@0217e.fr",
                                                                                      new Date(1561379514092L),
                                                                                      "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                      null, new Date(1561379518491L),
                                                                                      "d352a55a4f9dba6e0ef7ddad0a227bef");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1561379512220L),
                                                                                             null,
                                                                                             new Date(1561379518791L),
                                                                                             "1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88",
                                                                                             null,
                                                                                             new Date(1561379517493L),
                                                                                             "1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           new Date(1561379513622L),
                                                                                           "b4ab7.3a688@4e8b6.me",
                                                                                           new Date(1561379517229L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           null,
                                                                                           new Date(1561379519325L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           new Date(1561379513622L),
                                                                                           "b4ab7.3a688@4e8b6.me",
                                                                                           new Date(1561379517229L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           null,
                                                                                           new Date(1561379519325L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           new Date(1561379515643L),
                                                                                           "01300.1ed9b@3e5f3.me",
                                                                                           new Date(1561379517467L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                           null,
                                                                                           new Date(1561379517849L),
                                                                                           "d352a55a4f9dba6e0ef7ddad0a227bef");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
