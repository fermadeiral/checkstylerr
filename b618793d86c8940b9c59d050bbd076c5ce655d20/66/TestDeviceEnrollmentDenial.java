// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        new Date(1561379512667L),
                                                                                        "57da8de1-2a44-4d92-b15c-e806a9060222",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        new Date(1561379515108L),
                                                                                        "cbc14e9c-5cd7-45d5-8a19-95f2aa419628",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        new Date(1561379515108L),
                                                                                        "cbc14e9c-5cd7-45d5-8a19-95f2aa419628",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                   new Date(1561379511714L),
                                                                                   "1e534ee0-0ee0-4ad6-b533-491a6a03a4ff",
                                                                                   "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                   "d352a55a4f9dba6e0ef7ddad0a227bef");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88",
                                                                                          new Date(1561379519723L),
                                                                                          "2a2d7289-4edd-4995-badb-a7d351c7dea0",
                                                                                          "1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88",
                                                                                          "1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        new Date(1561379513594L),
                                                                                        "d4514494-430d-4520-915a-258387d2b287",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        new Date(1561379513594L),
                                                                                        "d4514494-430d-4520-915a-258387d2b287",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        new Date(1561379512451L),
                                                                                        "a057d0e2-3042-4500-a3a6-d075e8376322",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef",
                                                                                        "d352a55a4f9dba6e0ef7ddad0a227bef");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
