// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561379519054L),
                                                                         "d10bc0a0-2f06-4f5d-a998-2e80c479cc16",
                                                                         "7f9c4557-f74e-45c0-a4f7-bb9437c2b5f3",
                                                                         "00ff3179-f69b-4b83-a0f9-cd7a0d7c6c2c");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561379514778L),
                                                                         "4ba9ac73-7580-41e8-81d4-229559fba0d6",
                                                                         "2957e2a2-888f-4d62-96b7-0afed5a9de13",
                                                                         "a549abfa-1a61-4bc6-8d56-c60992b6432e");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561379514778L),
                                                                         "4ba9ac73-7580-41e8-81d4-229559fba0d6",
                                                                         "2957e2a2-888f-4d62-96b7-0afed5a9de13",
                                                                         "a549abfa-1a61-4bc6-8d56-c60992b6432e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561379515823L),
                                                                    "0716e88a-137c-4cf5-aff0-3211659d2053",
                                                                    "6efade9c-74d1-4fdc-a071-26f069f3b72e",
                                                                    "c8906978-9992-42cb-91a2-85f9e4d06005");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561379513954L),
                                                                         "d600bb85-6285-48f3-b3d0-8980fe562f07",
                                                                         "a564b3a4-a34c-4d2e-9dac-ec1d60547eb8",
                                                                         "8625ef0f-515b-4324-bdf1-fb770b0dc4a1");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561379513954L),
                                                                         "d600bb85-6285-48f3-b3d0-8980fe562f07",
                                                                         "a564b3a4-a34c-4d2e-9dac-ec1d60547eb8",
                                                                         "8625ef0f-515b-4324-bdf1-fb770b0dc4a1");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561379520996L),
                                                                         "049b7d2b-8f2c-445b-a83a-b4d95abde07d",
                                                                         "8efcf1d4-f85c-4463-88fc-c67778a224bb",
                                                                         "d05500f0-4294-4b37-95fb-8a0340a4154d");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
