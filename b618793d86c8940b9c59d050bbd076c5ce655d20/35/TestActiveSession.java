// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                             "b215d480-55c8-4e96-9c75-68d8898768d5",
                                                             new Date(1561379515830L),
                                                             "d8fa5c23-dd38-42cc-a7dd-e665d9d53b93",
                                                             "d3ea0d59-ec3e-481e-9a2e-4e5f10db9d21");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                             "d36d66be-d47b-4028-b8c8-ef5c7b81af04",
                                                             new Date(1561379511722L),
                                                             "4a1bf21e-6268-4531-b292-1913bf80d654",
                                                             "fffc53a1-ad75-455e-a79e-08d47f567ed0");
            ActiveSession activesession2 = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                             "d36d66be-d47b-4028-b8c8-ef5c7b81af04",
                                                             new Date(1561379511722L),
                                                             "4a1bf21e-6268-4531-b292-1913bf80d654",
                                                             "fffc53a1-ad75-455e-a79e-08d47f567ed0");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                        "fe4fa7fb-63bd-4e81-bb3c-08a3b6f64951",
                                                        new Date(1561379518392L),
                                                        "e5f907f8-d298-4cf5-90ed-bb787f9c40e2",
                                                        "53bb4d10-9172-4822-9769-9275882cbedd");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                             "0127b66e-5c0d-4660-9269-0fbb5cabe662",
                                                             new Date(1561379520360L),
                                                             "ee280262-0c88-4622-866a-f64242c18e7d",
                                                             "7b2b7ac0-f91c-4fb4-a88c-e5b33d4d2928");
            ActiveSession activesession2 = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                             "0127b66e-5c0d-4660-9269-0fbb5cabe662",
                                                             new Date(1561379520360L),
                                                             "ee280262-0c88-4622-866a-f64242c18e7d",
                                                             "7b2b7ac0-f91c-4fb4-a88c-e5b33d4d2928");
            ActiveSession activesession3 = new ActiveSession("d352a55a4f9dba6e0ef7ddad0a227bef",
                                                             "065d841b-4072-477f-a283-379c42c5e993",
                                                             new Date(1561379516697L),
                                                             "b7855e58-58a9-4edf-8da1-0ed0292a851b",
                                                             "9ae3d57f-6c39-48a7-90fd-f897d7e55971");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
