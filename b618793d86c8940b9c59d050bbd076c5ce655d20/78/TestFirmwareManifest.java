// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561379515640L), 76,
                                                                      "87d0b694-0ac8-469b-b59b-ef13df2ad406",
                                                                      "270f87bf-7063-4b54-81c5-f41a550298f7",
                                                                      "5c5b2590-df72-485c-be54-ebb83c73ea95",
                                                                      "20974f78-8864-492b-b23a-94a306fd4039",
                                                                      "142f1f8e-3290-46ed-9fa4-cadef79bd1ff",
                                                                      "3a1e6fb8-b3b2-4a69-b74f-f6e0e7a6a2ba",
                                                                      new Date(1561379518470L),
                                                                      new Date(1561379518676L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561379512964L), 23,
                                                                      "21a1086b-c55a-4b79-9d6c-76ce899a9098",
                                                                      "7ca77eae-7b9d-499e-ae7f-4fd6c93c415f",
                                                                      "a5471248-b077-4635-bd86-5c45f60c361b",
                                                                      "6e46c436-83b7-4495-871d-0a15d283209a",
                                                                      "99fdec5e-d7d7-41c8-8e6e-b5773d325f13",
                                                                      "b64b147c-4560-4b9f-85e3-782fb32d6310",
                                                                      new Date(1561379521396L),
                                                                      new Date(1561379512628L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561379512964L), 23,
                                                                      "21a1086b-c55a-4b79-9d6c-76ce899a9098",
                                                                      "7ca77eae-7b9d-499e-ae7f-4fd6c93c415f",
                                                                      "a5471248-b077-4635-bd86-5c45f60c361b",
                                                                      "6e46c436-83b7-4495-871d-0a15d283209a",
                                                                      "99fdec5e-d7d7-41c8-8e6e-b5773d325f13",
                                                                      "b64b147c-4560-4b9f-85e3-782fb32d6310",
                                                                      new Date(1561379521396L),
                                                                      new Date(1561379512628L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561379516533L), -108,
                                                                 "76bdc032-6cb7-4b6a-9e42-7877055b1c66",
                                                                 "502491c1-3e9e-4c40-86ee-1c6c8b17456e",
                                                                 "ddef2a39-61d4-46b6-a8f2-03fc011193eb",
                                                                 "ec8190ce-e69c-48ce-90de-08ea1c68c535",
                                                                 "f183ebfa-c071-4106-aa28-eb480391072d",
                                                                 "fe717cdf-1a4d-4c43-9091-40d73d4768b4",
                                                                 new Date(1561379520310L), new Date(1561379513291L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561379521066L), -44,
                                                                        "52a7c961-be24-47d7-8050-1e14f64d3f4a",
                                                                        "743dd996-103c-4b43-a8ff-028c7f46aaeef3449083-ad98-47fd-8e60-cb2f88a7561d3ad3605b-7d31-4702-b827-aaa896454ff4b519aff6-fa3f-45c3-8174-3c9f8e8aab639c37b713-7084-41d9-aeb9-81e2a2b3e0b8d0176b57-b04f-4b71-a795-75dfd148b60829fffba5-a850-4460-9a35-21124cda33cb8fef7054-3844-4148-9e30-26ae4542b0d0780273d2-bc44-4115-bb42-3cc0521a4184eca15ef6-bd31-4384-8681-38dfe1973a48e1ba2c63-3ab8-4c87-bbd7-61d28b63776bea276895-559e-4f3d-b1ef-ec1a7ccd3df83aec54b7-5d34-4e31-98bb-a37f164f9c788fb0e2e5-d307-431c-a01b-d22ef7ba82f4d167e405-41a1-496e-b6e5-d12b48a42f442d73a06f-6086-4ba5-9457-b306ce8ba2d86211460b-00c4-4ec7-ad0b-db587dd189382a0f760e-ce85-4987-9259-a16255105923d7014b0a-3aca-46ac-972f-c4fe51bd5962f3e0e699-2934-4306-9360-3f39e0b44145ffbfafd8-2c38-4002-96ba-92d827f9c3b227e110a0-c213-41fb-aca8-fa7ab0188ec214a87ab8-2227-41fd-b335-d8fd13e6b54dc35aabac-3f04-4d25-99cb-995487eb1cacf26a2e7a-49a9-4ffc-ae0d-93c8847cbace74b55a4e-e748-488e-b1c1-6670fc4b4aeb869e3c9a-fa1e-4ebd-b672-ffbfda04342e47e0793c-6205-4aae-b847-b798a60c3e9c5cff0d24-6015-4f7b-bcc2-aae7072a90007ba96ce8-ce4b-44c4-9279-8f778b6669a4e5541ccf-730e-4594-8c04-5d4ac0bf105892c443c1-9f18-40d4-9bf3-45a20a5d73bd8022448b-c6d3-43c6-87ee-eaa9fd693015dc19aff1-a4e0-43d8-9a3a-72411b242d92ab6a7ddf-f0fe-493b-93da-8b4df57e8e09f7940085-dd66-41ca-8271-f534a50d4bdb3deefbd6-453c-4bc0-b331-3c23ce60d8f2839c220b-8efe-4b4f-af41-13f4d0254e1279b7010f-29f0-453c-9b70-3530ec39f94a380da20d-2581-45d1-9abc-8e8676396550e7bfe4d0-f3b8-41cb-a7ac-369a411e90203ac92120-46fc-4227-85ca-0463428a4b7a893eb6bf-07a5-49b1-ad58-f7adb52dcc1c53e866e4-91e4-41e7-900f-ecc4590fd7dede57159d-e8aa-4e90-86eb-434b7639553b547e5833-1463-4968-987f-efc7388d2617356eee09-353a-4e63-b440-16f93eec309ec17e2b23-d6c6-495b-9b17-ca45ae6eee073d8b4425-fd4e-40b7-a470-959805fbb366af1b08f2-5699-4814-ac9e-6cc19b850d6be086ad3a-df53-47b6-8471-ef6b36416a4f970350e1-d8ab-4486-ba59-a174d786bdf2ad18295e-b618-49f7-979c-6800e5e14883533ade11-c514-4c24-bb74-fc02e58dfe99c4f7c3e1-0311-4e79-94a8-35447ea0ab418e2e43bc-4b74-4298-a3db-10d8a56b7a80",
                                                                        "e97a03a7-2664-4e1a-b74e-54bdfd71c146",
                                                                        "53f784b2-ea26-4968-b081-ce7c71f2ee76",
                                                                        "9ddd7f73-6522-41ee-b31d-4b36452c7f56",
                                                                        "e382ff55-3f26-45e6-8917-98225307808e8b039ae2-0057-4eb2-a995-6441a28b4d3d9e6e7217-4890-4de7-b34a-26449a8bd9a3d6ff99cc-845e-4957-afda-64246cdd8087",
                                                                        new Date(1561379511587L),
                                                                        new Date(1561379518673L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561379515331L), -111,
                                                                      "708b601d-662d-4655-b418-00d39f32481f",
                                                                      "1f4ae5dd-1718-429a-a83e-49f36dcc43cd",
                                                                      "1fc0ae93-3411-4362-acb3-52f8e61799f4",
                                                                      "ff28da8e-51e1-441e-b39c-ad802a8c23f2",
                                                                      "3c4afe83-c988-42c1-91a1-478a6be01b8d",
                                                                      "5b39bf57-dd48-4894-9b1b-69877800c318",
                                                                      new Date(1561379516140L),
                                                                      new Date(1561379518915L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561379515331L), -111,
                                                                      "708b601d-662d-4655-b418-00d39f32481f",
                                                                      "1f4ae5dd-1718-429a-a83e-49f36dcc43cd",
                                                                      "1fc0ae93-3411-4362-acb3-52f8e61799f4",
                                                                      "ff28da8e-51e1-441e-b39c-ad802a8c23f2",
                                                                      "3c4afe83-c988-42c1-91a1-478a6be01b8d",
                                                                      "5b39bf57-dd48-4894-9b1b-69877800c318",
                                                                      new Date(1561379516140L),
                                                                      new Date(1561379518915L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561379515034L), -127,
                                                                      "fa3aa7ee-6976-4aa6-a540-b5128bd0d8c5",
                                                                      "b67371d0-f845-4358-9449-fa1cc8313cdd",
                                                                      "7607aeb5-004b-49f9-8efb-56309eb5f58a",
                                                                      "67a41686-8f37-4099-860b-991ce26ac179",
                                                                      "d94a2170-a217-4abb-9fb3-e6c5d77fdab2",
                                                                      "96d44db4-258e-48c6-a8f3-4af82a0220c1",
                                                                      new Date(1561379518077L),
                                                                      new Date(1561379513027L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
