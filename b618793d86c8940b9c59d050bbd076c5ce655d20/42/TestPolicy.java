// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("ac44af89-bd6c-4525-a0de-76010e91728d", false,
                                        "ec55037f-283b-4359-8232-aa258b7956ae", false,
                                        "1b1fdc4e-d67d-41ea-ba68-eadf38d739ed");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("7b8fd9a1-6e17-4aaa-8225-fdf2365cf03a", true,
                                        "1ec46bfe-5073-45b1-bbe9-7303b193342e", true,
                                        "102fd594-bc64-43dd-a3e3-01d0cb95c2f9");
            Policy policy2 = new Policy("7b8fd9a1-6e17-4aaa-8225-fdf2365cf03a", true,
                                        "1ec46bfe-5073-45b1-bbe9-7303b193342e", true,
                                        "102fd594-bc64-43dd-a3e3-01d0cb95c2f9");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("8f100c6d-d6bf-42dd-b7fd-ee74c8ba8e85", true, "872545f9-490c-46eb-a733-b4e35029171e",
                                   false, "c3a4c2a6-a71d-43fd-bb50-3a62bcad38cb");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("3785d964-27b5-4853-9324-9d8f208c0b33", true,
                                        "94978f51-5b77-454c-8d4d-f0fbe1c27d51", false,
                                        "e56ad82a-c15a-41bb-abbc-4ee4c05fba48");
            Policy policy2 = new Policy("3785d964-27b5-4853-9324-9d8f208c0b33", true,
                                        "94978f51-5b77-454c-8d4d-f0fbe1c27d51", false,
                                        "e56ad82a-c15a-41bb-abbc-4ee4c05fba48");
            Policy policy3 = new Policy("4e6fbb61-c308-47a0-a279-1e3b8296e6a9", true,
                                        "cf5ad160-62d7-469d-a1e2-003176d0f856", false,
                                        "62f4a910-1eb7-432d-af12-9fbfc4d67ef8");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
