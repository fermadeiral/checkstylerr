// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                             "39ff885f-4208-445a-8c36-675e9d7f9e45",
                                                             new Date(1561379521349L), 11, null, "3994a.4ed04@05788.me",
                                                             true, "c7c97645-3ca6-4a73-9e6f-9669b3de15f7",
                                                             "d352a55a4f9dba6e0ef7ddad0a227bef", false, true, false,
                                                             -59, null, null, "2ac68634-7184-4d94-b12c-c8bbeba1985f",
                                                             -57, "f7868fad-fc31-4556-82bd-e5b3a61c9e3e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561379513278L), "_5=+=yyx_=");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                             "66adbbfa-bb79-4427-b25f-e9806491968a",
                                                             new Date(1561379516275L), 74, null, "a21e4.4419d@87633.me",
                                                             false, "9d914952-b00a-4104-b0c6-4a8c1ff09cf0",
                                                             "d352a55a4f9dba6e0ef7ddad0a227bef", false, true, false,
                                                             -34, null, null, "ad50942a-c839-427f-b200-1547a9441c36",
                                                             -35, "48793d60-7d23-49ed-8f6f-daed7b74d609",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561379514622L), "_5=+=yyx_=");
            SubtenantUser subtenantuser2 = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                             "66adbbfa-bb79-4427-b25f-e9806491968a",
                                                             new Date(1561379516275L), 74, null, "a21e4.4419d@87633.me",
                                                             false, "9d914952-b00a-4104-b0c6-4a8c1ff09cf0",
                                                             "d352a55a4f9dba6e0ef7ddad0a227bef", false, true, false,
                                                             -34, null, null, "ad50942a-c839-427f-b200-1547a9441c36",
                                                             -35, "48793d60-7d23-49ed-8f6f-daed7b74d609",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561379514622L), "_5=+=yyx_=");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                        "19291fc7-8f75-48fb-ab73-3f258d939c89",
                                                        new Date(1561379518787L), -115, null, "637a4.16e36@34816.me",
                                                        false, "cbf82259-2601-47ff-8abb-c0058bcbaca9",
                                                        "d352a55a4f9dba6e0ef7ddad0a227bef", true, false, true, -59,
                                                        null, null, "425e1bd6-b8df-4ce1-b1ba-64bbe5d2468f", -49,
                                                        "0ac428fb-f28a-4469-ada6-6c7c189417f6",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1561379520732L), "_5=+=yyx_=");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "09a63251-d021-4c17-91ab-3db1f76ff62c",
                                                               new Date(1561379512255L), 5, null, null, false,
                                                               "d0a9ebf1-debb-47d8-8b09-87ccf4557571c2558a3e-bcf9-411a-9c23-b82a521e663764045bd4-f80c-4186-b900-21da500da161",
                                                               "1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88",
                                                               true, true, true, -34, null, null,
                                                               "6379afd3-9496-4b37-b86a-ac261ca20042", -91,
                                                               "b8b74188-7150-436d-ac80-b760b470deb66f5fb0c6-5406-4505-b7af-dbeaf53f0ee8dd72ac65-bc92-450a-92c3-ac746b2bbdae",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1561379518373L),
                                                               "ah\u0013>å?¦#è¼†0\u0019l3áŸ½1,02T\u001a&9\u001b4\u000248;\u000eZIa\u001b%\u000bá¹©K\u000eêš˜\fgCEs<eM\u0004î¨?á?‰1që¤Š6\u0007;2n\u0003;f]kì£¨.");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                             "785f9994-f4f7-4048-bfbb-7c34a7c6c39c",
                                                             new Date(1561379521323L), -8, null, "8b974.804ff@dfa95.fr",
                                                             true, "a4a91934-5281-4c3f-bdf5-633259f1aa5e",
                                                             "d352a55a4f9dba6e0ef7ddad0a227bef", true, true, false, 112,
                                                             null, null, "fac18b82-1bad-4b8d-8388-1b55b204dc64", -23,
                                                             "d17c09e6-8dac-467d-8f67-116b7b30df07",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561379513831L), "_5=+=yyx_=");
            SubtenantUser subtenantuser2 = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                             "785f9994-f4f7-4048-bfbb-7c34a7c6c39c",
                                                             new Date(1561379521323L), -8, null, "8b974.804ff@dfa95.fr",
                                                             true, "a4a91934-5281-4c3f-bdf5-633259f1aa5e",
                                                             "d352a55a4f9dba6e0ef7ddad0a227bef", true, true, false, 112,
                                                             null, null, "fac18b82-1bad-4b8d-8388-1b55b204dc64", -23,
                                                             "d17c09e6-8dac-467d-8f67-116b7b30df07",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561379513831L), "_5=+=yyx_=");
            SubtenantUser subtenantuser3 = new SubtenantUser("d352a55a4f9dba6e0ef7ddad0a227bef", null,
                                                             "d00739e7-c770-4e5a-b0f0-a70cb4651980",
                                                             new Date(1561379512269L), 96, null, "5730f.8c3a7@28685.me",
                                                             true, "94eb0661-25f2-450e-86f9-5822ff6b2839",
                                                             "d352a55a4f9dba6e0ef7ddad0a227bef", true, true, false, 77,
                                                             null, null, "278d457e-ff9b-40ed-b2c3-7092a2f5cfde", 107,
                                                             "e8931d1b-d4dd-4ce1-b40b-886b5e52a6da",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561379515737L), "_5=+=yyx_=");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
