// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561379514207L), null,
                                                       "f4134f7a-ffd1-4132-8bf8-6c44006de079", -117,
                                                       "03e88278-149d-459a-a7e9-a5db5beada9d",
                                                       "95785734-3ffa-4ddb-91ec-3d60d67a8c77",
                                                       new Date(1561379516590L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561379511741L), null,
                                                       "2689b953-9877-489f-8f7b-0e860057106c", -110,
                                                       "ffc556c7-26b5-4f28-bee6-da9f91d6d8d5",
                                                       "269eedf7-e393-472a-8dc0-768b8c6b74f6",
                                                       new Date(1561379516246L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561379511741L), null,
                                                       "2689b953-9877-489f-8f7b-0e860057106c", -110,
                                                       "ffc556c7-26b5-4f28-bee6-da9f91d6d8d5",
                                                       "269eedf7-e393-472a-8dc0-768b8c6b74f6",
                                                       new Date(1561379516246L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1561379519140L), null,
                                                  "be331b93-3316-43c6-b5c2-52281a825346", 56,
                                                  "87175bea-48f8-4fd7-8139-bc5c68cc1127",
                                                  "378f749e-dadc-4bc0-9947-3ebc48b81197", new Date(1561379515243L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1561379513318L), null,
                                                         "ed76bd42-652b-4470-85a1-2c712ca9c1b8172562a0-a820-4c28-aa20-6485195fcaceb6ba4313-11d4-498a-a491-e81c52ddb4ad6ddbe5e3-0d38-47bc-b8cf-99c6a100e90ad8252057-bcd8-4fde-9d8b-0c4a75f6d8d1c244e6bf-1198-4683-b37b-de3852a67e6eb85456e1-ff82-41ad-be29-5f3054d81de980bc4ee3-74dc-4398-bd3a-87e199565736d1b377e5-5529-4478-8766-064f081b1fd759355265-dcfa-46ca-a31d-7cba2e801f79154685eb-a627-449e-88ee-3ee76f7f1cdb08988796-3981-4673-b443-be9c6d1da391bd7b397f-8159-4609-af7b-574eb80e230f6867e6aa-4e2e-4d6f-bbfb-2e07460be6a2cba13601-2dc4-41f0-aaac-da51317b60790e55608a-2a34-4497-880d-8b88baed844670d12328-cc90-4c73-b306-867af3972e0652819774-0266-49fc-a37c-93f46bfcbeb1b2bc0b6a-36cc-4a07-8fab-1697d136b1315b1c6e56-a54d-414c-ab2c-6a537fe80da5554e4859-7c75-4eb2-b8d6-41d261cd6a8f53e0af78-db05-4b23-8ead-dfd10708ac425c8b0216-e26f-4e68-bcab-2d6e44afb38aca469903-735c-4032-8324-e0da5c8534d8d950c728-8501-43d3-93f4-9cd6835dbed88acda0a1-c6d1-4fd8-b015-5e8c19d3ec8b074f54d6-35b3-45d2-a0a8-8026e43ce078f4b7bc8f-ea6e-469f-9d2a-2d2a72ef8afd04de2c67-de51-4863-848b-4d66ce6c3cad29eacbcb-7025-467a-9007-b3911779a3c0724d8a59-53bd-4fe7-b49c-bd6bfd80d939babe6e4f-01c8-4d85-8228-fc651abb3bc9cb0cf2ac-5e9f-48f9-9cfb-4ce0d60a2c80473577cf-edff-4e5d-ab84-9e970449c9e82378d79b-f4c2-4cf1-b01c-475778bd37646054a50e-5bec-4c8e-84d7-44269792738335d8a49c-ccfa-46a8-a1de-b5c745fe9fcffc379cd2-f8fb-444a-bfd4-4e607e413527bcea0444-448b-4bfd-8c91-da3db268e38e766d6850-a055-4c62-9551-8e424e7f9643e42e2650-0d1d-4b29-be96-92b6778e18febef49343-5e6a-4dbb-a0b2-42d8edd21e51df8287bb-1f85-4595-a4b7-4eec3990ee2c7cc4d045-12f6-4a49-a64e-802e9284653dfdbe1f07-eae7-4995-b51b-6fff603941b5d82d1f4e-597d-4a2e-8b35-9c33e7425c3ddec3b838-1bff-43d1-a4e3-c0065f9b2fc0b3177ff3-64cc-49b2-9e7b-8686711e99e94ae5a555-b80e-4756-9c1e-88cd7f1c528ea2397bfa-9e0f-40fd-ac75-d66ddb06e86612832a16-d306-4d20-a974-5970d120728623fffc56-099d-47d7-9e34-2b07c70622dc1d76d964-b802-45ac-8e05-97b77c15639af87443fe-aa7e-44c3-b041-ee2633f6d04d7421b2cb-e073-4ba8-aff0-823d6c4097cc512f338f-2532-4af0-9d08-f55ee72e358a",
                                                         -122, "3ea2552f-1208-4940-95a0-64c8c4b0d45b",
                                                         "4905a460-2827-425e-9e3b-447d3788c9d6ca9c6a55-a0dd-44db-bd88-e1cb7121f18958eddeb0-a95e-47ee-b451-44174cfa7daa5a5a45c6-16a4-409a-8004-33ba7385ed25",
                                                         new Date(1561379514785L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561379514146L), null,
                                                       "66316b74-ca38-45c2-a462-30901afb3090", -105,
                                                       "dc362558-fc61-463f-8c80-372b497f19e3",
                                                       "fea937e7-759c-4489-b351-14c0c4ba77fa",
                                                       new Date(1561379519286L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561379514146L), null,
                                                       "66316b74-ca38-45c2-a462-30901afb3090", -105,
                                                       "dc362558-fc61-463f-8c80-372b497f19e3",
                                                       "fea937e7-759c-4489-b351-14c0c4ba77fa",
                                                       new Date(1561379519286L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1561379517528L), null,
                                                       "053eae83-92fa-47f5-b6a1-458ce0301d3f", 43,
                                                       "bde3f90b-ed0d-43a7-a7e6-35c907d1fc04",
                                                       "5ee7a2b7-86f0-4bab-8404-b521c21842cf",
                                                       new Date(1561379514696L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
