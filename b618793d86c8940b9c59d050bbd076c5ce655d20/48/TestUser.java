// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "1d57dceb-2f6a-4301-80b7-3ca74257747f",
                                  new Date(1561379519829L), -99, null, "118a6.bedd7@ec998.fr", true,
                                  "0ce245fa-04cb-4bc8-9875-c0bd330b763f", "d352a55a4f9dba6e0ef7ddad0a227bef", true,
                                  true, false, -82, null, null, "c2e3d5f6-f1a3-48b8-a757-ad3a96ba091a", -62,
                                  "ee498186-869a-4ed7-954a-162b03cd3fb7", UserStatus.getDefault(), null,
                                  new Date(1561379517631L), "_5=+=yyx_=");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "ca3a57bf-8bfc-4092-9063-3da8c8f03157",
                                  new Date(1561379521471L), -20, null, "d79bf.3d416@91155.me", true,
                                  "77f352b8-60ae-4743-b695-60316992b547", "d352a55a4f9dba6e0ef7ddad0a227bef", true,
                                  true, false, 35, null, null, "36193ce3-054c-4afa-9a3d-a6fcf4431459", 113,
                                  "d9e682ec-1d38-4b92-a80a-783a8e58de1d", UserStatus.getDefault(), null,
                                  new Date(1561379515062L), "_5=+=yyx_=");
            User user2 = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "ca3a57bf-8bfc-4092-9063-3da8c8f03157",
                                  new Date(1561379521471L), -20, null, "d79bf.3d416@91155.me", true,
                                  "77f352b8-60ae-4743-b695-60316992b547", "d352a55a4f9dba6e0ef7ddad0a227bef", true,
                                  true, false, 35, null, null, "36193ce3-054c-4afa-9a3d-a6fcf4431459", 113,
                                  "d9e682ec-1d38-4b92-a80a-783a8e58de1d", UserStatus.getDefault(), null,
                                  new Date(1561379515062L), "_5=+=yyx_=");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "05f98ae7-2ff5-44f0-a28d-c6eed97b0c43",
                             new Date(1561379517674L), 56, null, "a35c6.a85db@2444f.fr", true,
                             "8a1daa24-2481-467f-9013-1b146cf131dc", "d352a55a4f9dba6e0ef7ddad0a227bef", false, true,
                             false, -14, null, null, "612ead8f-89eb-456b-8d79-01f4bb23c663", 14,
                             "326ac3cb-488d-4d95-b38a-909147a05570", UserStatus.getDefault(), null,
                             new Date(1561379513411L), "_5=+=yyx_=");
        assertTrue(user.isValid());
        User userInvalid = new User("1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88",
                                    null, "09fcf3f7-4554-40d3-b9fb-81bb55540feb", new Date(1561379519736L), -48, null,
                                    null, true,
                                    "f284d5f6-d0cb-464a-84fd-c99cd64a3c2fe52978c3-a926-4e5a-9f6a-26cffa0050f9a0b91695-fe45-4e5d-a4c2-446847546e83",
                                    "1<Q\u0003811â„Žc81\u0001]1ïƒƒ\u00188î¹¾câª€B1cc$$êŒ¼;ã¼Šá¡º1W\u00111c11.8^11c8\u0014\u00128é?›K\u0012c18@P\u000bccc1)?88",
                                    true, true, true, 19, null, null, "332f9d13-cf60-45dc-b790-a2ffd439c71c", 16,
                                    "f552a428-c55b-455c-b7ef-c3e83e99f4a9bd02e69d-6b4d-4b99-a241-c99dd0e0934f5388503d-3784-4b4a-a668-7ae329d92361",
                                    UserStatus.getDefault(), null, new Date(1561379517951L),
                                    "ah\u0013>å?¦#è¼†0\u0019l3áŸ½1,02T\u001a&9\u001b4\u000248;\u000eZIa\u001b%\u000bá¹©K\u000eêš˜\fgCEs<eM\u0004î¨?á?‰1që¤Š6\u0007;2n\u0003;f]kì£¨.");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "23172717-ae4b-47e7-9cc3-aefbd23c7f1d",
                                  new Date(1561379514946L), 123, null, "8c3d4.459cc@02ce9.me", true,
                                  "b0e6ff2b-80b9-4247-aba0-a2a101c0bd48", "d352a55a4f9dba6e0ef7ddad0a227bef", true,
                                  true, true, -24, null, null, "e32be02f-1a9a-4680-b478-889f771afa2c", 55,
                                  "924a8e26-f35a-433d-b9a0-088eea065f6d", UserStatus.getDefault(), null,
                                  new Date(1561379518719L), "_5=+=yyx_=");
            User user2 = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "23172717-ae4b-47e7-9cc3-aefbd23c7f1d",
                                  new Date(1561379514946L), 123, null, "8c3d4.459cc@02ce9.me", true,
                                  "b0e6ff2b-80b9-4247-aba0-a2a101c0bd48", "d352a55a4f9dba6e0ef7ddad0a227bef", true,
                                  true, true, -24, null, null, "e32be02f-1a9a-4680-b478-889f771afa2c", 55,
                                  "924a8e26-f35a-433d-b9a0-088eea065f6d", UserStatus.getDefault(), null,
                                  new Date(1561379518719L), "_5=+=yyx_=");
            User user3 = new User("d352a55a4f9dba6e0ef7ddad0a227bef", null, "d3a7e1ec-7058-41ed-b742-7016ef9d75b1",
                                  new Date(1561379520523L), -88, null, "7ea23.c9bfa@c4a05.me", true,
                                  "628e93a1-a609-4b12-aa51-8319409ee740", "d352a55a4f9dba6e0ef7ddad0a227bef", true,
                                  true, true, -61, null, null, "8d2d8951-ae89-4586-a470-5621972ebba4", 5,
                                  "28d11e1d-4d3e-4e2b-8498-9844b31ab42f", UserStatus.getDefault(), null,
                                  new Date(1561379514864L), "_5=+=yyx_=");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
