// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558086967932L), -33,
                                                                      "f9cc9ffd-0326-4978-8b0f-96dd923212cc",
                                                                      "2d842468-6809-4aa7-a416-49375f3228eb",
                                                                      "d8eb2b32-3d71-4167-9776-6d9d75f1af05",
                                                                      "70f6ac64-8265-42d5-8d4c-cd6b4a824603",
                                                                      "0eac9a88-e0f7-498c-8047-bdcb776a6d4b",
                                                                      "e27148be-2900-462e-bb43-8c85b5b16bef",
                                                                      new Date(1558086961070L),
                                                                      new Date(1558086966808L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558086968929L), 20,
                                                                      "509bee2e-a809-4e0a-8c1d-5b1470c7f703",
                                                                      "ce412426-7a75-4c30-a8d0-ae815142b248",
                                                                      "987933a3-a5eb-4a8a-8701-e04d4bbc9e43",
                                                                      "5bf027db-c75f-4715-adbb-0b374f89c7b3",
                                                                      "bf4c3f1b-6c25-435c-9abd-bbd797b605c8",
                                                                      "6f27381b-2c49-4bc8-bb61-f96f20248f71",
                                                                      new Date(1558086968479L),
                                                                      new Date(1558086965236L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558086968929L), 20,
                                                                      "509bee2e-a809-4e0a-8c1d-5b1470c7f703",
                                                                      "ce412426-7a75-4c30-a8d0-ae815142b248",
                                                                      "987933a3-a5eb-4a8a-8701-e04d4bbc9e43",
                                                                      "5bf027db-c75f-4715-adbb-0b374f89c7b3",
                                                                      "bf4c3f1b-6c25-435c-9abd-bbd797b605c8",
                                                                      "6f27381b-2c49-4bc8-bb61-f96f20248f71",
                                                                      new Date(1558086968479L),
                                                                      new Date(1558086965236L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1558086966987L), 119,
                                                                 "2c36e252-5a4e-4fc1-b3e3-96379c7c7fcb",
                                                                 "791644d9-b12d-4149-87b4-7cba0fc9ca31",
                                                                 "bde70ba8-8f85-490f-abc4-8b2a12e406e0",
                                                                 "8daaf1a7-cc92-4393-a23f-56a876854082",
                                                                 "0ec9f8a7-c7dc-4796-9fc6-31450566044d",
                                                                 "96b5e2bd-4079-4771-bc5e-0832ad56ddbc",
                                                                 new Date(1558086959697L), new Date(1558086961511L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1558086967516L), -25,
                                                                        "0ad0d123-58ec-48f3-98c9-939f4cec96b8",
                                                                        "abf9c4fe-d442-4ef6-9868-34e1d9606b432e2e1eb0-2e35-4467-8b75-b69d10b3506c28ab6898-ee78-4ec0-acd7-b97cdeab7666a68d4265-53f4-4216-9269-13a5e846e46407370786-ed5d-4599-acdd-0910834b666dbf15caa6-107d-4162-8b1e-75a59271845439c04c40-e335-4489-926b-39803ebd7a5221318050-32e8-4cbb-bc41-1be2abd622ea0f55dccc-dc81-4d91-889f-0e1442027fa62727b6ee-85cd-4c37-b1eb-8744d58f30e899526d4f-605d-4d22-a386-6599dd1dae35634a7fa6-b490-4932-9971-7e1da747e49abfa28836-9270-4bd7-808f-a9212128e9504227dca7-0639-4393-bba8-edc179d37d207f7f5ac9-92b7-4b1c-8458-70b19b0932b98bc1391c-9287-4bfc-965a-687992032568150851e5-ef99-41f9-9581-ca014da39acb88548c70-a91b-4956-82d9-fe8738a6f74f2462733e-588b-4785-9b60-a21e31232e3cead5e2d1-6a28-47c0-8028-1656e17db9b24c802e09-e7a9-4495-a118-d55084ef6c9bb9a36857-7d92-4b86-ac8f-c1329dd98f4e58b6be58-6b9b-4b98-b165-5116155dc6c1e4f4fbb9-1aaf-4c1b-b4d9-84e2bdb8bfe96763f033-d360-4bff-9716-e7c360ecbd76f228caee-3a03-415d-afbd-df4bc99544e9035f5bc3-5249-48b4-97ac-c45e51dcf82a7841d9ba-0f24-4681-97b6-9256130f9d76695eba63-5cea-4dcf-90a0-bf5fbe81f056ffe9d31c-0ef3-47b4-971b-873c3fb9e37f501b4c38-c56d-455e-880d-7e29648a69faa80c0e6f-82b8-45ee-af6b-f5dd643311ab04dd9838-970e-4cb8-be92-bf7c2842aa3d6ed0f754-c1bc-4c09-b001-281c61be98e93e594e18-bf66-4468-bf49-431b0050b46e83ca8ccd-bd31-4ff4-b55c-b8ee1545b4b3d8bba426-18f9-491e-817f-608827a7ce15589e9454-a6b3-48d1-bd64-6b0a9b23d73275b542fd-b6f3-4080-ae5b-262a6b3e106e63cfad9c-96c5-43c2-9f54-df73d21c6c4a5bd22fc9-c4f8-4d15-92c3-fd12d6ed5ec80989af0f-2599-4950-bf50-0e3e7d46759785da1765-6aac-42b9-b4f2-f5e61eddd36920dd9e40-cbb7-4c2f-89b5-e2a4295190052271e152-9524-4f64-86ea-2ca3f7173b756d22d907-7129-46a9-bf91-3eb885e0e465e8176514-a678-410b-9554-902770b41d42c4f8f9b6-39e2-490a-a04b-8ef3c224371b5b699972-dbc0-4f62-bc3e-c3ca40007e62205200e5-1adc-4ebb-b915-4e497759c273ec9f3cdd-d3b1-4f95-87cd-6ba239a405d8221733b7-9bce-4269-a691-af615f0f509164db9e7c-ac25-4de2-a952-95d52d6d01aec3272824-d5af-46e7-adb7-82576b9cd3457bd99be4-96ca-4cee-9911-68829a3bcfd85350dc61-361a-4810-a0b5-4fba7349a59a",
                                                                        "1df911f1-76be-412f-9a53-b90c3a812383",
                                                                        "002ef583-424d-4583-be0e-3d65cf5330b8",
                                                                        "126d50cd-d609-4927-b3da-b306509077b1",
                                                                        "14d9549f-8daa-43b9-9722-17c14432d16f99ccfa54-11be-4d9f-ba14-7d77c813864781aea362-41e9-4a96-956a-baa06cae9595d2b61779-01e2-4d16-bd8d-d39a8d0edd21",
                                                                        new Date(1558086960340L),
                                                                        new Date(1558086967970L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558086966871L), -103,
                                                                      "7437e83c-51b7-4dba-9bf4-02aefb8cf4fe",
                                                                      "3b0c2bde-930b-4476-b337-f1cb4cf46e74",
                                                                      "1739a784-dc93-47f7-8d1f-6a35127db803",
                                                                      "3d6f45e0-b9fd-43bb-a073-bdc7e666c7db",
                                                                      "043edfe5-a233-444e-96f1-650791f98426",
                                                                      "254ba144-4dc1-4f0d-bdfc-5d83be8686ee",
                                                                      new Date(1558086964033L),
                                                                      new Date(1558086963147L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558086966871L), -103,
                                                                      "7437e83c-51b7-4dba-9bf4-02aefb8cf4fe",
                                                                      "3b0c2bde-930b-4476-b337-f1cb4cf46e74",
                                                                      "1739a784-dc93-47f7-8d1f-6a35127db803",
                                                                      "3d6f45e0-b9fd-43bb-a073-bdc7e666c7db",
                                                                      "043edfe5-a233-444e-96f1-650791f98426",
                                                                      "254ba144-4dc1-4f0d-bdfc-5d83be8686ee",
                                                                      new Date(1558086964033L),
                                                                      new Date(1558086963147L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1558086965251L), 74,
                                                                      "d5f7018c-3ebc-4092-93a8-2ca45a8569d7",
                                                                      "3c1b47b0-f0ae-4064-9b91-9876c0ca08e5",
                                                                      "275c5ce8-3400-4950-be2a-cc2c1708c49f",
                                                                      "943ff792-5730-455a-9145-7209ee1297f6",
                                                                      "53d95568-f12a-4ca8-b987-d7b526bc044a",
                                                                      "a5eb24a2-6ba4-4b32-a0c1-72f3d3f132a4",
                                                                      new Date(1558086968411L),
                                                                      new Date(1558086965447L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
