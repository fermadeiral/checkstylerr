// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558086962348L),
                                                                         "764223ba-5b0b-4bf7-a510-7db36686d019",
                                                                         "5d022f8c-6b5e-434b-8f3c-800ace2d700f",
                                                                         "9c5c5c21-3253-46f3-bc27-4afa8522db3e");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558086966340L),
                                                                         "9c352861-96dd-4fa7-9782-bfec683c32fc",
                                                                         "42df2997-0002-4c19-a9f2-daa7fcf08818",
                                                                         "b08f6417-7a0a-45be-9798-b8187a92a5b1");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558086966340L),
                                                                         "9c352861-96dd-4fa7-9782-bfec683c32fc",
                                                                         "42df2997-0002-4c19-a9f2-daa7fcf08818",
                                                                         "b08f6417-7a0a-45be-9798-b8187a92a5b1");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558086961796L),
                                                                    "e958e63d-8011-4c76-9989-fb89b0e25d59",
                                                                    "e47fd2f6-bb29-4cb9-8c57-880ce1b80287",
                                                                    "9b6816cb-e01c-4c51-8059-4a9a47393a01");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558086964115L),
                                                                         "eb4c2a73-b529-41fa-ac3e-e250471cfbcf",
                                                                         "1da82d63-7ad6-45d0-be68-456c5a400f3d",
                                                                         "c2f7d406-d77a-40ef-9a17-60148e32b3d5");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558086964115L),
                                                                         "eb4c2a73-b529-41fa-ac3e-e250471cfbcf",
                                                                         "1da82d63-7ad6-45d0-be68-456c5a400f3d",
                                                                         "c2f7d406-d77a-40ef-9a17-60148e32b3d5");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558086963997L),
                                                                         "3249c1f3-48a9-40a8-b394-61949b136bbc",
                                                                         "4a13c5d0-264c-46a2-96f0-36b172641ae6",
                                                                         "ddd87750-8d94-41a1-b027-8beb44618740");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
