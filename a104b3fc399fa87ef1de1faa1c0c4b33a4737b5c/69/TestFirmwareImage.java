// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558086961546L),
                                                             "1f2fcbc0-36de-45b0-add4-0a12d6720107", -17,
                                                             "cf5cd560-2c70-4430-b47e-9efbf8adb72c",
                                                             "5d708a91-6e63-402b-ac0a-f7931d647cfd",
                                                             "6b1db467-1d83-4daf-a91c-2a0c74c7e2d1",
                                                             "24f90054-f11a-4e79-9dde-a1bdc2f6cbcc",
                                                             new Date(1558086963531L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558086963617L),
                                                             "2f36bdaa-eaef-462c-b9f0-82ac252e0118", -121,
                                                             "0f511837-ef3c-45e3-a7e9-29de55681eef",
                                                             "8abc1642-886c-4a1a-a458-148d8d85be1e",
                                                             "daa55aec-9c6a-49e3-ae32-68ecc510bd52",
                                                             "8478ecc4-4c5a-433a-b6f1-a4e6d28af65c",
                                                             new Date(1558086960168L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1558086963617L),
                                                             "2f36bdaa-eaef-462c-b9f0-82ac252e0118", -121,
                                                             "0f511837-ef3c-45e3-a7e9-29de55681eef",
                                                             "8abc1642-886c-4a1a-a458-148d8d85be1e",
                                                             "daa55aec-9c6a-49e3-ae32-68ecc510bd52",
                                                             "8478ecc4-4c5a-433a-b6f1-a4e6d28af65c",
                                                             new Date(1558086960168L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1558086968761L),
                                                        "9aa22654-ea18-43bf-86ff-d74ac617df7c", 58,
                                                        "3907bc1f-b1c9-49fa-88d9-3f3b2c505a96",
                                                        "2c85c659-2cb7-4158-891b-0b1a843abea6",
                                                        "8251a278-28d9-4ca8-a076-c55f415eb483",
                                                        "b52cb5b5-f85a-482a-a1ba-1ba15441b6a1",
                                                        new Date(1558086965895L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1558086967047L),
                                                               "f747ddbe-a66c-427f-8de3-585f039d34a2", -97,
                                                               "b520ed77-d5c3-4fcd-950f-812da533e9ed",
                                                               "f295d675-33c3-4c60-bb71-cd7a155ea58d502f0c14-a45c-43fe-816b-f362449e194dc9bf50f3-956c-4d50-94c4-ac74cccf6cdbdf2f7758-4e9a-4622-9ddf-3a9425342595da1c7d77-9eac-4066-9be1-c5473d3bcb972e937126-e2aa-4d96-b3d2-434a0c14a0d99ed197a0-3b77-4e4e-9f69-2210aeb504197d4b451e-22e1-4c65-95c8-bca90991f2baa4f07ce9-69bd-4fa3-a8ee-4cc908ae150a202343c1-2d72-4bbd-b8ef-1edd65d5c46b92a370e5-4e5a-4af1-b450-fb32322cfa2002830c8c-8bbe-468d-83e6-c74f09007db4fc32488b-7ee4-497d-8341-b0ed5bdfe7bcd46ab74d-2550-473f-a305-7533c9c284d8c0c7fb86-4eea-439c-8f75-64f296813951b52d8eb0-654f-4e91-bca7-f3ace1d6fba69398f39f-3aad-4cf5-8e27-9debeb6e040eda27b4f8-81dd-4d15-aaed-0ea4f4232a83d41fa1ed-6b8b-4d7c-a292-a5650d276d4a5970f7e9-1ddf-4db1-8ce1-1844331b7e5643bc9d35-d901-447d-a577-eb1753417b570f083e19-0946-46d4-92d4-e7e1b6594398ed549e79-8088-4c43-aa02-ec8d9f9fde20cda8eedc-b4e3-476f-971b-02cc371e87ed2a190a39-afa8-40f3-a9e4-9c1520b295c17132e068-a338-4975-82fa-b241e32cb698b5326748-9b24-487c-b902-58b379d0b780cfe89e1e-843e-44b3-ac58-063c9c114bf70994ae26-261b-44ec-a754-1615e56e66c3eead77fc-a693-4f7d-8f05-ade4ae4df23c1f5375de-0d10-4951-a21d-f4eaba3990d758359506-88e7-4329-8823-42d9a7a424ac12bbc310-ddb8-4cda-bae7-60d9646ea18e15093ddd-9b09-4c44-8587-3205c8449bce4792f1b7-8b28-417a-a861-e8295288cacdd8816484-d367-4346-a74c-3a02fa3837b74ac5c14a-d952-4c74-a321-b1fec468f7123a921d5e-2086-4e28-9ad7-f964bc68c988d31e5e5b-e4b4-4d5a-b0c7-fc3a14270f7a3d00c9d2-6920-4ebb-95dc-0f09a7371e4140c6fb88-3273-4824-bd86-1b7b42cbc5ce5a81890f-4dd4-49de-aa63-9386cdbe83c655fc1124-6884-458a-ada1-b5ecc8d99dcd606df2b6-4766-4b94-8f2f-c128be4074f226fd510d-8da7-43bc-a915-426bc52622aae0aab58a-35fd-4f8a-8247-273edf421a67016afa40-a1e6-47c7-9825-4b530342316627d479ad-c67a-43a5-9c50-d89f0e13898743d28f62-a1a0-4edb-8f15-0acb654fb3f6357a7cce-63b8-4723-aaa7-fa559a9a455f837b8223-529d-46ef-91f8-ea766dc991440a946f62-9b50-472c-ae79-51af6a24ab8f7daf8822-d733-4a40-ac4d-1d8689106316915fd9f4-c42f-4330-b13d-0956ff4a4e40a32476ea-bc27-464b-8e45-eff29c415b8366f6c76e-7c78-42e9-ade7-3e00814ea90d",
                                                               "4faeb4c7-4dce-4bd2-979c-d5a3dee5acc5",
                                                               "c150b0e0-763b-478e-8a06-027b259241d1bc2e0d1e-74c9-44ce-84cd-4e6be61012ac1499d4b3-43cb-4d29-8e8a-c932e1244e671ff5c035-d8a7-4a2f-90ae-d4ccdfef099c",
                                                               new Date(1558086966723L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1558086967543L),
                                                             "b3b9c247-bcf2-4f22-8918-f2e297820e1b", -128,
                                                             "fc999b11-9ce5-426b-a2ed-63085c98c9e4",
                                                             "8bc183ce-5fa0-46f6-917e-d1c87f9b645d",
                                                             "7b314c22-e096-4cea-97e7-8bdd74bfede0",
                                                             "86dae9d1-5568-4cbe-8f9e-3ba292f35556",
                                                             new Date(1558086965867L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1558086967543L),
                                                             "b3b9c247-bcf2-4f22-8918-f2e297820e1b", -128,
                                                             "fc999b11-9ce5-426b-a2ed-63085c98c9e4",
                                                             "8bc183ce-5fa0-46f6-917e-d1c87f9b645d",
                                                             "7b314c22-e096-4cea-97e7-8bdd74bfede0",
                                                             "86dae9d1-5568-4cbe-8f9e-3ba292f35556",
                                                             new Date(1558086965867L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1558086966917L),
                                                             "825a7524-1e97-44ba-9f6e-7518cae8732d", -46,
                                                             "f843a4c9-0fbc-4b31-ae05-d85161ec1b0a",
                                                             "c935a267-0e6c-4c60-a9ad-5ef184b78cf6",
                                                             "9a046d23-0c24-4cff-9710-794dd9cad10c",
                                                             "7dc0fb95-b789-4288-9022-363e55ceab6e",
                                                             new Date(1558086962341L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
