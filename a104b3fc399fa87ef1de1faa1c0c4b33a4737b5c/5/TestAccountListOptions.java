// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model AccountListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestAccountListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            AccountListOptions accountlistoptions1 = new AccountListOptions(Integer.valueOf(-118), Long.valueOf(39),
                                                                            Order.getDefault(),
                                                                            "a7cd2516-457a-475c-99ff-446634da4b00",
                                                                            null, null);
            AccountListOptions accountlistoptions2 = accountlistoptions1.clone();
            assertNotNull(accountlistoptions1);
            assertNotNull(accountlistoptions2);
            assertNotSame(accountlistoptions2, accountlistoptions1);
            assertEquals(accountlistoptions2, accountlistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testFilters() {
        try {
            AccountListOptions option = new AccountListOptions().equalToTier("9f5ff6d3-158d-46f7-ac27-415f70f08ebf")
                                                                .equalToStatus(AccountStatus.getDefault())
                                                                .inStatuses(Arrays.asList(AccountStatus.getDefault(),
                                                                                          AccountStatus.getDefault(),
                                                                                          AccountStatus.getDefault(),
                                                                                          AccountStatus.getDefault(),
                                                                                          AccountStatus.getDefault(),
                                                                                          AccountStatus.getDefault(),
                                                                                          AccountStatus.getDefault()))
                                                                .notInStatuses(Arrays.asList(AccountStatus.getDefault(),
                                                                                             AccountStatus.getDefault(),
                                                                                             AccountStatus.getDefault(),
                                                                                             AccountStatus.getDefault(),
                                                                                             AccountStatus.getDefault()))
                                                                .equalToEndMarket("762f0d96-20cc-4887-af52-b03058d17ff7")
                                                                .likeCountry("e193a22a-63ab-4d20-b839-184fd1108066");
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(AccountListOptions.TAG_FILTER_BY_TIER));
            assertTrue(option.hasFilter(AccountListOptions.TAG_FILTER_BY_TIER, FilterOperator.EQUAL));
            assertNotNull(option.getTierFilters());
            assertEquals("9f5ff6d3-158d-46f7-ac27-415f70f08ebf",
                         ListOptionsEncoder.encodeSingleEqualFilter(AccountListOptions.TAG_FILTER_BY_TIER, String.class,
                                                                    option));
            assertTrue(option.hasFilters(AccountListOptions.TAG_FILTER_BY_STATUS));
            assertTrue(option.hasFilter(AccountListOptions.TAG_FILTER_BY_STATUS, FilterOperator.EQUAL));
            assertNotNull(option.getStatusFilters());
            assertEquals(AccountStatus.getDefault(),
                         ListOptionsEncoder.encodeSingleEqualFilter(AccountListOptions.TAG_FILTER_BY_STATUS,
                                                                    AccountStatus.class, option));
            assertTrue(option.hasFilters(AccountListOptions.TAG_FILTER_BY_STATUS));
            assertTrue(option.hasFilter(AccountListOptions.TAG_FILTER_BY_STATUS, FilterOperator.IN));
            assertNotNull(option.getStatusFilters());
            assertEquals(Arrays.asList(AccountStatus.getDefault(), AccountStatus.getDefault(),
                                       AccountStatus.getDefault(), AccountStatus.getDefault(),
                                       AccountStatus.getDefault(), AccountStatus.getDefault(),
                                       AccountStatus.getDefault()),
                         ListOptionsEncoder.encodeSingleInFilter(AccountListOptions.TAG_FILTER_BY_STATUS, List.class,
                                                                 option));
            assertTrue(option.hasFilters(AccountListOptions.TAG_FILTER_BY_STATUS));
            assertTrue(option.hasFilter(AccountListOptions.TAG_FILTER_BY_STATUS, FilterOperator.NOT_IN));
            assertNotNull(option.getStatusFilters());
            assertEquals(Arrays.asList(AccountStatus.getDefault(), AccountStatus.getDefault(),
                                       AccountStatus.getDefault(), AccountStatus.getDefault(),
                                       AccountStatus.getDefault()),
                         ListOptionsEncoder.encodeSingleNotInFilter(AccountListOptions.TAG_FILTER_BY_STATUS, List.class,
                                                                    option));
            assertTrue(option.hasFilters(AccountListOptions.TAG_FILTER_BY_END_MARKET));
            assertTrue(option.hasFilter(AccountListOptions.TAG_FILTER_BY_END_MARKET, FilterOperator.EQUAL));
            assertNotNull(option.getEndMarketFilters());
            assertEquals("762f0d96-20cc-4887-af52-b03058d17ff7",
                         ListOptionsEncoder.encodeSingleEqualFilter(AccountListOptions.TAG_FILTER_BY_END_MARKET,
                                                                    String.class, option));
            assertTrue(option.hasFilters(AccountListOptions.TAG_FILTER_BY_COUNTRY));
            assertTrue(option.hasFilter(AccountListOptions.TAG_FILTER_BY_COUNTRY, FilterOperator.LIKE));
            assertNotNull(option.getCountryFilters());
            assertEquals("e193a22a-63ab-4d20-b839-184fd1108066",
                         ListOptionsEncoder.encodeSingleLikeFilter(AccountListOptions.TAG_FILTER_BY_COUNTRY,
                                                                   String.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            AccountListOptions accountlistoptions1 = new AccountListOptions(Integer.valueOf(-12), Long.valueOf(91),
                                                                            Order.getDefault(),
                                                                            "844c1639-17ca-4b80-90a0-e9a92c724e22",
                                                                            null, null);
            AccountListOptions accountlistoptions2 = new AccountListOptions(Integer.valueOf(-12), Long.valueOf(91),
                                                                            Order.getDefault(),
                                                                            "844c1639-17ca-4b80-90a0-e9a92c724e22",
                                                                            null, null);
            assertNotNull(accountlistoptions1);
            assertNotNull(accountlistoptions2);
            assertNotSame(accountlistoptions2, accountlistoptions1);
            assertEquals(accountlistoptions2, accountlistoptions1);
            assertEquals(accountlistoptions2.hashCode(), accountlistoptions1.hashCode());
            int hashCode = accountlistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, accountlistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            AccountListOptions accountlistoptions1 = new AccountListOptions(Integer.valueOf(102), Long.valueOf(-84),
                                                                            Order.getDefault(),
                                                                            "adea9832-70c7-4962-93e7-6b0d1d91aca8",
                                                                            null, null);
            AccountListOptions accountlistoptions2 = new AccountListOptions(Integer.valueOf(102), Long.valueOf(-84),
                                                                            Order.getDefault(),
                                                                            "adea9832-70c7-4962-93e7-6b0d1d91aca8",
                                                                            null, null);
            AccountListOptions accountlistoptions3 = new AccountListOptions(Integer.valueOf(95), Long.valueOf(85),
                                                                            Order.getDefault(),
                                                                            "61cc5aab-e3f0-495a-95cf-519af5705bb5",
                                                                            null, null);
            assertNotNull(accountlistoptions1);
            assertNotNull(accountlistoptions2);
            assertNotNull(accountlistoptions3);
            assertNotSame(accountlistoptions2, accountlistoptions1);
            assertNotSame(accountlistoptions3, accountlistoptions1);
            assertEquals(accountlistoptions2, accountlistoptions1);
            assertEquals(accountlistoptions2, accountlistoptions1);
            assertEquals(accountlistoptions1, accountlistoptions2);
            assertEquals(accountlistoptions1, accountlistoptions1);
            assertFalse(accountlistoptions1.equals(null));
            assertNotEquals(accountlistoptions3, accountlistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
