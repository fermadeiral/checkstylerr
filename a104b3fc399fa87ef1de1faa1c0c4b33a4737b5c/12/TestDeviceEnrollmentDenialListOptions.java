// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenialListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenialListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions1 = new DeviceEnrollmentDenialListOptions(Integer.valueOf(85),
                                                                                                                         Long.valueOf(-116),
                                                                                                                         Order.getDefault(),
                                                                                                                         "d28078de-f08e-4479-9595-83ce8809e8c2",
                                                                                                                         null,
                                                                                                                         null);
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions2 = deviceenrollmentdeniallistoptions1.clone();
            assertNotNull(deviceenrollmentdeniallistoptions1);
            assertNotNull(deviceenrollmentdeniallistoptions2);
            assertNotSame(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
            assertEquals(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testFilters() {
        try {
            DeviceEnrollmentDenialListOptions option = new DeviceEnrollmentDenialListOptions().equalToEndpointName("6316a0df-683e-4103-839f-015816b405ef")
                                                                                              .equalToTrustedCertificateId("75f4ec9c-4304-402d-b744-8bc8c5fe9a80");
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEnrollmentDenialListOptions.TAG_FILTER_BY_ENDPOINT_NAME));
            assertTrue(option.hasFilter(DeviceEnrollmentDenialListOptions.TAG_FILTER_BY_ENDPOINT_NAME,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getEndpointNameFilters());
            assertEquals("6316a0df-683e-4103-839f-015816b405ef",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEnrollmentDenialListOptions.TAG_FILTER_BY_ENDPOINT_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEnrollmentDenialListOptions.TAG_FILTER_BY_TRUSTED_CERTIFICATE_ID));
            assertTrue(option.hasFilter(DeviceEnrollmentDenialListOptions.TAG_FILTER_BY_TRUSTED_CERTIFICATE_ID,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getTrustedCertificateIdFilters());
            assertEquals("75f4ec9c-4304-402d-b744-8bc8c5fe9a80",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEnrollmentDenialListOptions.TAG_FILTER_BY_TRUSTED_CERTIFICATE_ID,
                                                                    String.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions1 = new DeviceEnrollmentDenialListOptions(Integer.valueOf(-105),
                                                                                                                         Long.valueOf(-15),
                                                                                                                         Order.getDefault(),
                                                                                                                         "7308166e-1db1-43d3-b6c5-bed8ef12fc30",
                                                                                                                         null,
                                                                                                                         null);
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions2 = new DeviceEnrollmentDenialListOptions(Integer.valueOf(-105),
                                                                                                                         Long.valueOf(-15),
                                                                                                                         Order.getDefault(),
                                                                                                                         "7308166e-1db1-43d3-b6c5-bed8ef12fc30",
                                                                                                                         null,
                                                                                                                         null);
            assertNotNull(deviceenrollmentdeniallistoptions1);
            assertNotNull(deviceenrollmentdeniallistoptions2);
            assertNotSame(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
            assertEquals(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
            assertEquals(deviceenrollmentdeniallistoptions2.hashCode(), deviceenrollmentdeniallistoptions1.hashCode());
            int hashCode = deviceenrollmentdeniallistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdeniallistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions1 = new DeviceEnrollmentDenialListOptions(Integer.valueOf(53),
                                                                                                                         Long.valueOf(25),
                                                                                                                         Order.getDefault(),
                                                                                                                         "699b5b03-65eb-4f71-a65a-5f6feba692ed",
                                                                                                                         null,
                                                                                                                         null);
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions2 = new DeviceEnrollmentDenialListOptions(Integer.valueOf(53),
                                                                                                                         Long.valueOf(25),
                                                                                                                         Order.getDefault(),
                                                                                                                         "699b5b03-65eb-4f71-a65a-5f6feba692ed",
                                                                                                                         null,
                                                                                                                         null);
            DeviceEnrollmentDenialListOptions deviceenrollmentdeniallistoptions3 = new DeviceEnrollmentDenialListOptions(Integer.valueOf(93),
                                                                                                                         Long.valueOf(-61),
                                                                                                                         Order.getDefault(),
                                                                                                                         "fb2edf76-ff02-4cbf-b2ba-b595fd389c21",
                                                                                                                         null,
                                                                                                                         null);
            assertNotNull(deviceenrollmentdeniallistoptions1);
            assertNotNull(deviceenrollmentdeniallistoptions2);
            assertNotNull(deviceenrollmentdeniallistoptions3);
            assertNotSame(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
            assertNotSame(deviceenrollmentdeniallistoptions3, deviceenrollmentdeniallistoptions1);
            assertEquals(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
            assertEquals(deviceenrollmentdeniallistoptions2, deviceenrollmentdeniallistoptions1);
            assertEquals(deviceenrollmentdeniallistoptions1, deviceenrollmentdeniallistoptions2);
            assertEquals(deviceenrollmentdeniallistoptions1, deviceenrollmentdeniallistoptions1);
            assertFalse(deviceenrollmentdeniallistoptions1.equals(null));
            assertNotEquals(deviceenrollmentdeniallistoptions3, deviceenrollmentdeniallistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
