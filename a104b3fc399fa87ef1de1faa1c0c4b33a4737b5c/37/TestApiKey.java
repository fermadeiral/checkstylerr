// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086960755L), 46,
                                        "2ab93f7f4ac933ce8ac763c9e4ddcf32", "a0e22827-60f3-402c-9429-0b41ba9e838b", -46,
                                        "f51eae28-71e7-4126-a6f9-f966d0fc9303", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                        ApiKeyStatus.getDefault(), new Date(1558086960434L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086963779L), -17,
                                        "2ab93f7f4ac933ce8ac763c9e4ddcf32", "707056a9-d2df-48bd-8b70-34deed63a4c7", 49,
                                        "97dbba8c-590a-44ea-b016-c9fd737e4819", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                        ApiKeyStatus.getDefault(), new Date(1558086963930L));
            ApiKey apikey2 = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086963779L), -17,
                                        "2ab93f7f4ac933ce8ac763c9e4ddcf32", "707056a9-d2df-48bd-8b70-34deed63a4c7", 49,
                                        "97dbba8c-590a-44ea-b016-c9fd737e4819", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                        ApiKeyStatus.getDefault(), new Date(1558086963930L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086966658L), -94,
                                   "2ab93f7f4ac933ce8ac763c9e4ddcf32", "f967426b-f767-4feb-9346-f7b3c1ad6ffc", -122,
                                   "5cbfd33c-24b4-4415-929d-5d7dbd24c1d6", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                   ApiKeyStatus.getDefault(), new Date(1558086968333L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("5)@55\f5Zå ’I5Bç³Ž%ç›˜Cëµ•5Në­¹T\u001cïŒ²\u0018å¸†é€§5â?Žï‘¢Aê†…`æ®¿K#[555ç²›55R55á¹—è›‘å´–,5?VYæ´„`?\\\\På­¹\u0005ïµŠ\u000e5",
                                          new Date(1558086964514L), 3,
                                          "5)@55\f5Zå ’I5Bç³Ž%ç›˜Cëµ•5Në­¹T\u001cïŒ²\u0018å¸†é€§5â?Žï‘¢Aê†…`æ®¿K#[555ç²›55R55á¹—è›‘å´–,5?VYæ´„`?\\\\På­¹\u0005ïµŠ\u000e5",
                                          "9ff8c070-d9e1-4230-8af6-2063568779f4", -108, null,
                                          "5)@55\f5Zå ’I5Bç³Ž%ç›˜Cëµ•5Në­¹T\u001cïŒ²\u0018å¸†é€§5â?Žï‘¢Aê†…`æ®¿K#[555ç²›55R55á¹—è›‘å´–,5?VYæ´„`?\\\\På­¹\u0005ïµŠ\u000e5",
                                          ApiKeyStatus.getDefault(), new Date(1558086966767L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086967621L), -1,
                                        "2ab93f7f4ac933ce8ac763c9e4ddcf32", "85de440a-6aa3-416a-9b8c-67dd3f0ad55d", -50,
                                        "74c9ac71-c27c-401f-964c-ce78dac021d8", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                        ApiKeyStatus.getDefault(), new Date(1558086963636L));
            ApiKey apikey2 = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086967621L), -1,
                                        "2ab93f7f4ac933ce8ac763c9e4ddcf32", "85de440a-6aa3-416a-9b8c-67dd3f0ad55d", -50,
                                        "74c9ac71-c27c-401f-964c-ce78dac021d8", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                        ApiKeyStatus.getDefault(), new Date(1558086963636L));
            ApiKey apikey3 = new ApiKey("2ab93f7f4ac933ce8ac763c9e4ddcf32", new Date(1558086966128L), -116,
                                        "2ab93f7f4ac933ce8ac763c9e4ddcf32", "7051de92-2138-4944-9de4-8a9c286298fe", 2,
                                        "d0124d01-f64d-4165-9232-9d063b299b01", "2ab93f7f4ac933ce8ac763c9e4ddcf32",
                                        ApiKeyStatus.getDefault(), new Date(1558086965347L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
