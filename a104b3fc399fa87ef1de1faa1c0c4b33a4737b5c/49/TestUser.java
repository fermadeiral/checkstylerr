// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "13408ef0-09cb-4672-afb1-8353c1dff089",
                                  new Date(1558086965822L), 108, null, "d1e1b.95a9f@afa9f.fr", true,
                                  "5e37e1ef-a6ab-4ea4-9665-dce1db08f0ac", "2ab93f7f4ac933ce8ac763c9e4ddcf32", false,
                                  false, true, -38, null, null, "ea80b118-75f3-4ccb-a45c-7379718f5ebd", -51,
                                  "729b06a6-7eee-449d-8caa-3ef699924d78", UserStatus.getDefault(), null,
                                  new Date(1558086962816L), "4=-a");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "1b10f472-d4b3-4f08-a8db-0ee60c0ed32e",
                                  new Date(1558086959630L), 54, null, "ae0fb.258f1@8433c.fr", true,
                                  "131e7c4c-56db-46a6-904b-9bf7be78e9a3", "2ab93f7f4ac933ce8ac763c9e4ddcf32", false,
                                  false, true, 60, null, null, "4676588a-6a79-421d-b75f-581152dee2d2", -72,
                                  "82fb3083-61fe-4919-b6ef-24991a2d3636", UserStatus.getDefault(), null,
                                  new Date(1558086961189L), "4=-a");
            User user2 = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "1b10f472-d4b3-4f08-a8db-0ee60c0ed32e",
                                  new Date(1558086959630L), 54, null, "ae0fb.258f1@8433c.fr", true,
                                  "131e7c4c-56db-46a6-904b-9bf7be78e9a3", "2ab93f7f4ac933ce8ac763c9e4ddcf32", false,
                                  false, true, 60, null, null, "4676588a-6a79-421d-b75f-581152dee2d2", -72,
                                  "82fb3083-61fe-4919-b6ef-24991a2d3636", UserStatus.getDefault(), null,
                                  new Date(1558086961189L), "4=-a");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "6e4e7770-0b46-41aa-bbd3-9046c9fe3691",
                             new Date(1558086960732L), 77, null, "ea52c.14f65@0d4ae.me", false,
                             "a10072c5-fb03-4d91-8090-df8a0d2a602f", "2ab93f7f4ac933ce8ac763c9e4ddcf32", true, false,
                             false, 85, null, null, "d8f95e56-aa7a-4609-92c2-a230d1039e3c", 16,
                             "1294a32a-6747-4bb5-933b-7c37f8b4c447", UserStatus.getDefault(), null,
                             new Date(1558086965144L), "4=-a");
        assertTrue(user.isValid());
        User userInvalid = new User("5)@55\f5Zå ’I5Bç³Ž%ç›˜Cëµ•5Në­¹T\u001cïŒ²\u0018å¸†é€§5â?Žï‘¢Aê†…`æ®¿K#[555ç²›55R55á¹—è›‘å´–,5?VYæ´„`?\\\\På­¹\u0005ïµŠ\u000e5",
                                    null, "846f8527-a0a7-4f19-93d5-f84ad34672eb", new Date(1558086960605L), -40, null,
                                    null, true,
                                    "8d0a81c1-69fd-4f43-8bdb-5149dfec54a4e1be0a07-d5a9-4b2f-b832-254ba4cf429c3c39983c-f084-420d-80a4-bb2135cc364f",
                                    "5)@55\f5Zå ’I5Bç³Ž%ç›˜Cëµ•5Në­¹T\u001cïŒ²\u0018å¸†é€§5â?Žï‘¢Aê†…`æ®¿K#[555ç²›55R55á¹—è›‘å´–,5?VYæ´„`?\\\\På­¹\u0005ïµŠ\u000e5",
                                    true, true, true, 95, null, null, "78e2ddc7-bcc8-42fa-bda7-bdd4f29aa316", 84,
                                    "e49808b3-9888-465b-b3d1-51f91ababa10d462ba14-42c9-47b6-8be6-01eefd9020133c3a8abb-453f-4e8e-a0cf-4a218b3e7a0c",
                                    UserStatus.getDefault(), null, new Date(1558086962189L),
                                    "â¸³5ç?¼Uâ¥ŒêŒŒ\u00079>ê?²;79à´ˆ:æ©?: æ?±8ZE6\u0010_ê ¯;â£†@è€¾\u001a:ì¸¾R8\\\\6èš¬ä«…N,;!RE;\u0007\u001f_O\\\\ íŠ¸1<\u0019î—¤57:>\u000789");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "94357417-55df-447c-85a7-b6049d678fd5",
                                  new Date(1558086964647L), -62, null, "6962a.2bd39@e0b7c.me", true,
                                  "16c8f997-7459-42fa-8b5d-bda8b130c94f", "2ab93f7f4ac933ce8ac763c9e4ddcf32", false,
                                  true, true, 109, null, null, "228b8f7c-dd24-4a44-8520-4eaf29aac46e", 54,
                                  "a85b2f1d-a495-4572-9736-ef882eb53b95", UserStatus.getDefault(), null,
                                  new Date(1558086967384L), "4=-a");
            User user2 = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "94357417-55df-447c-85a7-b6049d678fd5",
                                  new Date(1558086964647L), -62, null, "6962a.2bd39@e0b7c.me", true,
                                  "16c8f997-7459-42fa-8b5d-bda8b130c94f", "2ab93f7f4ac933ce8ac763c9e4ddcf32", false,
                                  true, true, 109, null, null, "228b8f7c-dd24-4a44-8520-4eaf29aac46e", 54,
                                  "a85b2f1d-a495-4572-9736-ef882eb53b95", UserStatus.getDefault(), null,
                                  new Date(1558086967384L), "4=-a");
            User user3 = new User("2ab93f7f4ac933ce8ac763c9e4ddcf32", null, "ce8ccf0a-4819-4644-9daa-739198b79c20",
                                  new Date(1558086965037L), 54, null, "b1fd0.89410@475e8.fr", true,
                                  "199117d7-c42d-41ac-9849-62dc9da0a657", "2ab93f7f4ac933ce8ac763c9e4ddcf32", false,
                                  true, true, -66, null, null, "0e201491-43d5-40d1-980e-158b20f2815c", -26,
                                  "9353858a-0255-4acc-b8de-1c3f99f566bf", UserStatus.getDefault(), null,
                                  new Date(1558086961544L), "4=-a");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
