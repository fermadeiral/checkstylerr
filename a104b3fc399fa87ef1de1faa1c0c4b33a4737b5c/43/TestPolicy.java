// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("36efa5b5-5a5c-48fd-bddb-d17c830e7acd", true,
                                        "96b86705-e29e-4dec-8e3d-05eee04d3717", false,
                                        "c0744a29-0194-4c9f-b1a0-f7924265a5ee");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("8c48b9b6-dba8-4320-94a4-f28fb2034fa7", true,
                                        "485b5879-452e-4679-8783-c15cee8a9a53", false,
                                        "32b94ec1-b939-4416-a9a5-71c08fe9f5fb");
            Policy policy2 = new Policy("8c48b9b6-dba8-4320-94a4-f28fb2034fa7", true,
                                        "485b5879-452e-4679-8783-c15cee8a9a53", false,
                                        "32b94ec1-b939-4416-a9a5-71c08fe9f5fb");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("d9b2266b-9c0a-48f8-bc16-1169f7b65f8f", true, "90336244-612c-4453-997d-3ad42177ad04",
                                   false, "10679996-b7a0-4541-9ba7-87d8d8d2b34f");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("aca4b882-aaa6-4664-a75a-b050e4c20257", false,
                                        "4327d5a4-78a9-4699-99da-a4be84b929ae", true,
                                        "d22d5df9-db80-445d-b37d-061417b5eaf9");
            Policy policy2 = new Policy("aca4b882-aaa6-4664-a75a-b050e4c20257", false,
                                        "4327d5a4-78a9-4699-99da-a4be84b929ae", true,
                                        "d22d5df9-db80-445d-b37d-061417b5eaf9");
            Policy policy3 = new Policy("e6e6f4ec-804e-4bc0-849a-f6e5b34049ab", false,
                                        "2e455dc4-2bdd-494b-b806-236a07369d8d", true,
                                        "4b5cb111-750e-4de9-a8d2-30783c05d575");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
