// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558086961869L),
                                                          "70b14248-e174-473a-8942-656d7365bd2d", true,
                                                          "15ae36d9-4eb6-4be7-bd6a-8aaa5098f803");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558086967150L),
                                                          "abbeaf87-900a-45ea-b374-286d8fb22abf", false,
                                                          "15319afc-8204-4837-b13e-7af66e081141");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558086967150L),
                                                          "abbeaf87-900a-45ea-b374-286d8fb22abf", false,
                                                          "15319afc-8204-4837-b13e-7af66e081141");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1558086961330L), "1c30cf3a-9731-4aa1-ae1c-8f3a6fc0d7a4",
                                                     false, "cba1e182-224d-47c3-be3b-b80f70a08cc7");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558086963319L),
                                                          "5a4508ee-5b2d-4c69-b02e-3e4f25095b33", true,
                                                          "197cf081-31cc-44fa-8fbb-adfea3d27101");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558086963319L),
                                                          "5a4508ee-5b2d-4c69-b02e-3e4f25095b33", true,
                                                          "197cf081-31cc-44fa-8fbb-adfea3d27101");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1558086968639L),
                                                          "81b50ae7-eb33-4fb1-a316-68332c8d483a", true,
                                                          "b0d164e3-d8b9-4e74-88dd-160e47efcc00");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
