// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("8a8699f7-6827-4c7a-91da-343f6d0aca4a",
                                                          "e7aaf7c4-96f0-4c75-82b9-027e7b1bbf27");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("85150e2c-caa1-49ab-9a35-8dabf4658bd1",
                                                          "efc0a3ae-b459-4197-b25a-738a6816cf0b");
            LoginProfile loginprofile2 = new LoginProfile("85150e2c-caa1-49ab-9a35-8dabf4658bd1",
                                                          "efc0a3ae-b459-4197-b25a-738a6816cf0b");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("7b59c6ff-e295-4d50-8797-5961a4bc7a58",
                                                     "e5bc0ad0-d1dd-411f-8d62-76eee84c52a2");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("dd27ff01-894e-4926-824e-92a35c8bdf3e",
                                                          "20755724-53ca-4631-b882-705a9055848a");
            LoginProfile loginprofile2 = new LoginProfile("dd27ff01-894e-4926-824e-92a35c8bdf3e",
                                                          "20755724-53ca-4631-b882-705a9055848a");
            LoginProfile loginprofile3 = new LoginProfile("8ebfd88a-f086-484f-8971-301a92d334de",
                                                          "c9a0abd7-ed3f-4ef3-9600-503153d3be40");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
