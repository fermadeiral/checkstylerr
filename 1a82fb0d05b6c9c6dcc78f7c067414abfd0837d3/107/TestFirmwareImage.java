// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1566995741657L),
                                                             "e85646da-3d49-4dbd-9cee-109f51699287", 85,
                                                             "b69e6e2e-b7fb-474b-8f70-8629e8459db6",
                                                             "f7cca793-a8b1-4a03-a0c6-97d570a3b0a3",
                                                             "8b25d82b-be3d-4f6c-b629-dc805c2637a4",
                                                             "04eca4e0-d63d-40ad-82eb-4f98c21e2498",
                                                             new Date(1566995740985L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1566995748611L),
                                                             "0ee3b69d-d7f5-439d-bf10-f11ca396effe", 81,
                                                             "3f3976c6-4b25-4af9-9a3f-1f97c4c02766",
                                                             "bf20b2f0-7828-4fdd-8a54-0c3c96b114e4",
                                                             "aadd4dd6-f3b0-4834-8772-af25cdbf2e98",
                                                             "6490b5d2-a5ab-4262-baeb-145fdbf8c12d",
                                                             new Date(1566995745044L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1566995748611L),
                                                             "0ee3b69d-d7f5-439d-bf10-f11ca396effe", 81,
                                                             "3f3976c6-4b25-4af9-9a3f-1f97c4c02766",
                                                             "bf20b2f0-7828-4fdd-8a54-0c3c96b114e4",
                                                             "aadd4dd6-f3b0-4834-8772-af25cdbf2e98",
                                                             "6490b5d2-a5ab-4262-baeb-145fdbf8c12d",
                                                             new Date(1566995745044L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1566995742912L),
                                                        "931e31ba-50fb-4ee8-856a-b253c322856a", -97,
                                                        "6ccd01c0-a428-4a54-ba4d-95789996b2ea",
                                                        "73c0d60a-0c62-49e2-8cbf-bae574e3fdcb",
                                                        "8bf2f9cd-0e6c-4406-8ef0-995906b33d8d",
                                                        "0f2739e5-0413-4504-80ef-8146ae6c6b95",
                                                        new Date(1566995745725L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1566995749196L),
                                                               "cd1fe256-7b51-4aff-9e8e-007518b65f83", -62,
                                                               "956b3690-09af-42ec-8242-a78eb9af25e2",
                                                               "4811cd68-709f-4660-91c0-8b3588b45fe852d04789-7f35-4302-ba0a-68d456db120a38bccd27-2281-4bd7-bf2a-5e1f9a88d9ec04daa63c-d8bd-4f0d-9b59-ec753550837a951cdf8f-453c-40c0-b4d7-0c1c40a852780591d764-3eb6-4771-8c6c-168833bf3e7eab6ce740-e7e4-4e08-a2e2-2d66245a742ac3aa9a8e-c5c4-422f-9c98-f8a66dcfec8f5db7acfa-a2be-4939-a720-a538bb6e515f3412b551-df2d-4828-965d-09c95f6d056a9963e5a9-6f62-4ab1-96b9-a9f3cc8bbe3aeaecd14d-f93b-4a6c-872e-82e33ab8c060b2d53189-31e8-43d6-934c-4d3dc352078a2f829c43-fdfe-48b8-b817-a61c528e41cf466641af-7483-457d-8da3-920b684ab01816433690-28c6-44fb-9930-a45f3d3acf0f36a89f18-900e-4ceb-98ba-750dec24157618e40752-84c6-47a2-9cbf-82d3c2f5fa6bbbd48c38-516e-4229-a47f-3390f322150e0afb3850-1bda-46d4-8252-84e83d28fb2bafb61505-8565-4a15-815d-ab8e2d9cad5b753b182c-e955-4282-9364-3b5938d10519b0e1d697-5466-45b0-8856-444f7c530e571f7658ff-1585-4539-95de-105010573911d3146e2c-55e1-4687-9cff-f88d88876d9a83be1ff7-3efe-408b-af60-43fd80af09ddf94b94ed-0ba3-4b10-b032-42ca009c71d523aa0417-ad08-4af8-a2a1-fc1885c664881b7c2cf9-2ae8-4d3f-ac76-7aa9d257680995c488da-cb30-44db-ae25-9d2d9df1c63e36b870d0-8ad3-4abc-be08-313877d1d2cb683e8f24-12e1-467b-8f90-dc20e488e3d56c33a8a8-3d47-4fa2-8ee5-0bb6dfe049dcc096f8ef-74cc-4af1-af05-c8a5f59534637d71b95a-672b-4dc0-b3de-570ece2a7ae39645aadc-feae-4e83-ab33-71fe71b51659e331289f-14ef-4b63-8e7d-ce61d85e86bbd211ef29-382b-42b3-bf7c-abb0aa06164b20fa02e4-3ea7-4498-b99f-cce49ac8b539edf22de9-5878-4856-a452-1352042ffa5e83744150-625f-4911-aafd-c1f51f117cb34749ff50-d3d9-420e-a856-9b406e6c4ad338aebf04-31e5-415d-aeac-b2ada91e9d1a4e75c60b-3068-414b-8ac9-a45a43e57415ab4c62a3-5d50-49c5-89e4-6ccf704c4a1a5a601fe2-5b98-4e8c-b324-0ab78a25f5fe33c8c8e2-0301-430e-9da3-32ff808c47ac8d02b21c-6914-4a27-9b1b-534a2101cfa0ba8157dd-c0c5-49db-8bd5-118212672568cad69562-530e-4903-9740-cde5f7dbea03f218b00c-6d16-48e8-a0cb-edfa42da52089b4d16e6-ebb4-40a8-826c-f4ac74bc29a77d1c4da6-d326-4e7a-a88a-f3637d79a8fae7c0e95d-9568-4d12-85b0-ca3e290a14aa0920c14d-52ff-4ae0-855a-7757820b22d9b0f38f76-8470-493a-b378-7dcea0f8d94e",
                                                               "490c9bdf-dbd3-4851-9f41-2ec55706aa63",
                                                               "809d1569-fd8b-463e-9002-f7a06df1d6f70c08401d-8f9e-47c8-9940-f7d68870d3a6c97e9933-2d9b-404f-a888-955075f3d0de5bdfa9b1-34e5-4eeb-973c-1c533749e5a5",
                                                               new Date(1566995749002L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1566995741048L),
                                                             "cdb8afb2-b19f-4ec3-b911-d71297871fe8", 24,
                                                             "5a1b5b6c-3d77-428a-9e1a-7887ec46847a",
                                                             "d76709ad-381e-4f42-bdc9-494d74627d0c",
                                                             "9f71cdf0-33a9-4988-9af9-59cc3ba4318a",
                                                             "6f368a35-032a-4e67-875b-95063b0be3e9",
                                                             new Date(1566995741250L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1566995741048L),
                                                             "cdb8afb2-b19f-4ec3-b911-d71297871fe8", 24,
                                                             "5a1b5b6c-3d77-428a-9e1a-7887ec46847a",
                                                             "d76709ad-381e-4f42-bdc9-494d74627d0c",
                                                             "9f71cdf0-33a9-4988-9af9-59cc3ba4318a",
                                                             "6f368a35-032a-4e67-875b-95063b0be3e9",
                                                             new Date(1566995741250L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1566995743470L),
                                                             "be3e89fe-b1fe-4b9a-8221-a50aca8a60ba", 71,
                                                             "3e8367a5-dc55-4456-a5a2-fac0759b1192",
                                                             "f3118510-83b5-4bd2-9d1c-2dfe83019bd0",
                                                             "1f0dd3d6-d4d3-4839-a01a-1dda23371e81",
                                                             "18501fe5-a2d4-4c57-ace5-5826679c6f12",
                                                             new Date(1566995743730L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
