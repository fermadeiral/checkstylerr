// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-9),
                                                                                        Long.valueOf(-85),
                                                                                        Order.getDefault(),
                                                                                        "80167fea-f0f2-468e-8c48-a69269aa6a45",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1566995744943L),
                                                                                                    new Date(1566995743096L),
                                                                                                    new Date(1566995742710L),
                                                                                                    new Date(1566995750046L),
                                                                                                    new Date(1566995746700L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1566995742749L),
                                                                                                       new Date(1566995750535L),
                                                                                                       new Date(1566995744085L),
                                                                                                       new Date(1566995748799L),
                                                                                                       new Date(1566995749340L),
                                                                                                       new Date(1566995746474L),
                                                                                                       new Date(1566995751847L)))
                                                                        .lessThanUpdatedAt(new Date(1566995748033L))
                                                                        .greaterThanUpdatedAt(new Date(1566995749339L))
                                                                        .equalToName("88547327-f4fe-4405-a0e6-cdaa2ca09f08")
                                                                        .notEqualToName("2cfb8d95-bcd8-4b8b-900d-4291a1126cc7")
                                                                        .inNames(Arrays.asList("3db3dda4-2590-4397-b944-8bafa24d7bee",
                                                                                               "46c44e13-6498-47d2-91eb-32815cb6289b",
                                                                                               "2673cab1-5698-443e-a05f-809d8c7a45b0"))
                                                                        .notInNames(Arrays.asList("a34abc1c-d4eb-4efc-b56c-1d18db996402",
                                                                                                  "87dd6431-b600-47ef-93dc-2ea1e0418c38",
                                                                                                  "91f8ff56-cf6d-45ef-a436-46c813007049",
                                                                                                  "b54647e2-4d70-4450-bd1f-283f9e04120d",
                                                                                                  "b3eef790-5dc5-4a01-9d88-ec9b2612a464",
                                                                                                  "4c8a23f8-cd1a-4715-92b3-a2579f09eec6",
                                                                                                  "aa13bd54-0b7f-4315-b601-4003689be7b1",
                                                                                                  "42d83c31-1dce-4c36-82d5-ad5fdcab209a"))
                                                                        .equalToDevicesCount(Integer.valueOf(-114))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-128))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(19),
                                                                                                       Integer.valueOf(37),
                                                                                                       Integer.valueOf(49)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-12),
                                                                                                          Integer.valueOf(107),
                                                                                                          Integer.valueOf(65),
                                                                                                          Integer.valueOf(-23),
                                                                                                          Integer.valueOf(-76),
                                                                                                          Integer.valueOf(100),
                                                                                                          Integer.valueOf(104),
                                                                                                          Integer.valueOf(-62)))
                                                                        .lessThanDevicesCount(Integer.valueOf(32))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-58))
                                                                        .inCreatedAts(Arrays.asList(new Date(1566995746971L),
                                                                                                    new Date(1566995742832L),
                                                                                                    new Date(1566995742562L),
                                                                                                    new Date(1566995744689L),
                                                                                                    new Date(1566995745080L),
                                                                                                    new Date(1566995745455L),
                                                                                                    new Date(1566995744455L),
                                                                                                    new Date(1566995749159L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1566995748109L),
                                                                                                       new Date(1566995744739L)))
                                                                        .lessThanCreatedAt(new Date(1566995743885L))
                                                                        .greaterThanCreatedAt(new Date(1566995747571L))
                                                                        .equalToId("e5af50df-cd6b-4abe-81ec-702bc465f2ff")
                                                                        .notEqualToId("4b423328-6f11-4131-bd30-9db707de02eb")
                                                                        .inIds(Arrays.asList("e534cd92-77c1-407e-8db4-954a7d6fbbe5",
                                                                                             "977cb624-4645-4f64-ba07-7561cb5f7e0b",
                                                                                             "11c8c37a-3c51-4616-9014-9efb5364e551",
                                                                                             "53551afa-241b-487d-947f-b4e26fe6f17c"))
                                                                        .notInIds(Arrays.asList("ac475525-292f-494c-bfe9-ac748c030faf",
                                                                                                "cf1d0aa1-0912-4bdd-af0d-d5db34078942",
                                                                                                "48b93731-2b12-46e8-9f50-d9270c1ceec8",
                                                                                                "8f13e27f-a349-476c-857c-84b67d4a9e09",
                                                                                                "87207ad9-828f-40c2-af41-6ac20ba121ff",
                                                                                                "15660357-31e5-48fd-a163-857052b5d831",
                                                                                                "0b299faa-60db-42f9-a3c1-bd7892204c1f"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995744943L), new Date(1566995743096L), new Date(1566995742710L),
                                       new Date(1566995750046L), new Date(1566995746700L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995742749L), new Date(1566995750535L), new Date(1566995744085L),
                                       new Date(1566995748799L), new Date(1566995749340L), new Date(1566995746474L),
                                       new Date(1566995751847L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566995748033L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566995749339L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("88547327-f4fe-4405-a0e6-cdaa2ca09f08",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("2cfb8d95-bcd8-4b8b-900d-4291a1126cc7",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("3db3dda4-2590-4397-b944-8bafa24d7bee", "46c44e13-6498-47d2-91eb-32815cb6289b",
                                       "2673cab1-5698-443e-a05f-809d8c7a45b0"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("a34abc1c-d4eb-4efc-b56c-1d18db996402", "87dd6431-b600-47ef-93dc-2ea1e0418c38",
                                       "91f8ff56-cf6d-45ef-a436-46c813007049", "b54647e2-4d70-4450-bd1f-283f9e04120d",
                                       "b3eef790-5dc5-4a01-9d88-ec9b2612a464", "4c8a23f8-cd1a-4715-92b3-a2579f09eec6",
                                       "aa13bd54-0b7f-4315-b601-4003689be7b1", "42d83c31-1dce-4c36-82d5-ad5fdcab209a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-114),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-128),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(19), Integer.valueOf(37), Integer.valueOf(49)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-12), Integer.valueOf(107), Integer.valueOf(65),
                                       Integer.valueOf(-23), Integer.valueOf(-76), Integer.valueOf(100),
                                       Integer.valueOf(104), Integer.valueOf(-62)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(32),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-58),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995746971L), new Date(1566995742832L), new Date(1566995742562L),
                                       new Date(1566995744689L), new Date(1566995745080L), new Date(1566995745455L),
                                       new Date(1566995744455L), new Date(1566995749159L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995748109L), new Date(1566995744739L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566995743885L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566995747571L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("e5af50df-cd6b-4abe-81ec-702bc465f2ff",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("4b423328-6f11-4131-bd30-9db707de02eb",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("e534cd92-77c1-407e-8db4-954a7d6fbbe5", "977cb624-4645-4f64-ba07-7561cb5f7e0b",
                                       "11c8c37a-3c51-4616-9014-9efb5364e551", "53551afa-241b-487d-947f-b4e26fe6f17c"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("ac475525-292f-494c-bfe9-ac748c030faf", "cf1d0aa1-0912-4bdd-af0d-d5db34078942",
                                       "48b93731-2b12-46e8-9f50-d9270c1ceec8", "8f13e27f-a349-476c-857c-84b67d4a9e09",
                                       "87207ad9-828f-40c2-af41-6ac20ba121ff", "15660357-31e5-48fd-a163-857052b5d831",
                                       "0b299faa-60db-42f9-a3c1-bd7892204c1f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-107),
                                                                                        Long.valueOf(48),
                                                                                        Order.getDefault(),
                                                                                        "f07de0ac-8f62-42ca-95f7-71dc9f4c8da1",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-107),
                                                                                        Long.valueOf(48),
                                                                                        Order.getDefault(),
                                                                                        "f07de0ac-8f62-42ca-95f7-71dc9f4c8da1",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(116),
                                                                                        Long.valueOf(-46),
                                                                                        Order.getDefault(),
                                                                                        "0c936238-9018-4446-b1f0-74ff682fa3dd",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(116),
                                                                                        Long.valueOf(-46),
                                                                                        Order.getDefault(),
                                                                                        "0c936238-9018-4446-b1f0-74ff682fa3dd",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-15),
                                                                                        Long.valueOf(18),
                                                                                        Order.getDefault(),
                                                                                        "92bf2097-6550-421b-9fca-8f5016c77512",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
