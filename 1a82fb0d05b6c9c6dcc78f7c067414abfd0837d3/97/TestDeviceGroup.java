// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1566995741277L), null,
                                                       "050670fa-4fc2-41f4-9c0f-229d80d28018", -127,
                                                       "2ddb4f3e-3920-4b3b-a8db-2687c3844de2",
                                                       "403e6779-0891-4674-9124-97d7e3b119e1",
                                                       new Date(1566995743510L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1566995743127L), null,
                                                       "a0c1e632-9883-492a-a1e8-1c945a0356e1", 87,
                                                       "b1802d04-e649-49e7-9996-90d27c0bb187",
                                                       "85432058-bdec-4e56-8d59-4122fe645844",
                                                       new Date(1566995746944L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1566995743127L), null,
                                                       "a0c1e632-9883-492a-a1e8-1c945a0356e1", 87,
                                                       "b1802d04-e649-49e7-9996-90d27c0bb187",
                                                       "85432058-bdec-4e56-8d59-4122fe645844",
                                                       new Date(1566995746944L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1566995744859L), null,
                                                  "057cb267-36cb-4cdd-9672-e7a0a44b9ccf", -122,
                                                  "cb61f3bc-3774-443c-86c1-a65d6e5f2e1a",
                                                  "afff4b19-c418-4d96-9278-20c81a88bf72", new Date(1566995746123L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1566995743149L), null,
                                                         "61ec4ff1-62c7-47ad-a233-1eba39e1e9332ba26bd0-dad1-452f-b5e7-f3d9ab715f5e85a3cb24-045c-46be-9f96-9b4c06a7b473544e552a-e153-45e3-bbb0-1cf3e6f692cbeaadd965-0fb6-49a8-87e0-f7f4acddac4a5ce4f215-9a71-4698-850b-5e8c62efc6aa5b56ab3c-b48c-4278-9c45-d1483b41c5da7ae0438f-42cf-4895-9fa3-19120f54c14fd9c9aa7a-332f-411b-ac19-f4f8852f9f6fa7b8a14d-b214-4bc1-ab11-966c28833ad86744a199-807f-4881-b7d7-69e5bd3e774cdef89fb1-00b2-4073-9509-acf7b224efaf6cf7a97e-e7a6-476d-bf33-f614cea0c7b7d603d64b-6346-4d4a-9fc0-322aa4627784ef5f49a4-7c4f-4633-87e5-fa4e1bb2411ab51d5025-6687-49c3-b953-7d9780e5c40190d156bc-9496-4c55-8549-465fa137125affa999c4-7b3f-416b-a00d-d7bf3c0995747e1f1c0d-6142-4060-9ac5-3d4a4cbd875971399a37-cb35-4bff-891c-f565649430493dcbc332-a4dd-4fc4-a9c4-d281a8c4d3fd6a1b7be9-d381-425e-8a5c-14a41932e87d138ca004-c0f0-4d25-b2b4-ea263695664fc532185d-e71e-47ba-8518-1d18fdf93662f8b6370e-3629-41db-8115-1505815f05fb531ad55f-84a7-49c6-b120-c8e13317b60d14169429-4f6c-410b-b38b-0ae0c073309612a19002-abe9-43a0-bf7f-6185fe28506f14ee0992-1d55-43e9-9831-55ee539442434b1bf38a-e2a2-4b60-a472-b3084a24f4de6d904bf8-b1cb-4344-9d79-e7e99b1c7a886b7fd80c-b07a-4dff-ba9f-e6cd658b535701bbe0a1-98f7-4cd0-935e-b0f61e1dd2053a141171-74f7-4f35-ae7a-ac311c1769156890d078-5cb0-4a3e-a3b1-e18731c9342836156c50-c251-457d-9403-9fd5234ca15480ecdd05-88b4-426c-b26b-78b622d7ddf1f20a94c9-bc14-4974-affd-d8b39a4ab83cc1bd2999-076d-4fad-a92c-ee272d4d0611395a0678-ca0b-431d-84cc-0aab72373ce0a2a31b5b-ee98-4cf3-90de-e8ee75476dd938c22b0b-d4d0-4a8b-b43f-cd2a0c765be9039db272-ed9d-4f34-8a38-22cd6dc4c5385bfbaf88-151c-4fff-a846-14e73ce51c9138b75151-c212-4ea6-b87b-986981dd3c6e31c16dff-4e48-41fb-bfca-7d52e3927a4e696999a9-1696-43ec-b196-0f5b2b442fb49dec769c-2249-4020-9c31-52e597d6d7f3f48f1a35-4094-4298-9fa1-601359d656459f1f1341-7a2b-4db4-bfab-1a66fa163b9ec60841a3-8100-4a4d-b685-25d844ed94c93e59443c-0270-4f70-a9d1-5a6e9ff69a5ca3e112f1-f381-49ee-ba2f-ab9e226f50f2a8669d0b-5820-4145-b070-8adcb47dd6902f10d9e9-f094-48d4-a102-c974e48b998e8b19bea9-e0ed-479b-9f91-b9050ab60b04",
                                                         43, "de47df9b-ccf6-4813-8f7c-c532de8ffec1",
                                                         "f03c7cb3-3518-453e-9048-83695b705ae661ac26ee-7d1c-4913-be58-f5c7ae93c29405bfa98c-a639-4c98-b9d3-fd2275a9ab342a05f6f4-a4ff-41c7-b0b3-fb97f869c20b",
                                                         new Date(1566995742676L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1566995743831L), null,
                                                       "04512b98-039e-4ef9-8dd6-3b9b1e7e2a72", -60,
                                                       "c89162ec-00ec-4cc5-b279-24115218c7a4",
                                                       "38ea66bb-3d26-443b-baa0-b8fb8cd491e9",
                                                       new Date(1566995743982L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1566995743831L), null,
                                                       "04512b98-039e-4ef9-8dd6-3b9b1e7e2a72", -60,
                                                       "c89162ec-00ec-4cc5-b279-24115218c7a4",
                                                       "38ea66bb-3d26-443b-baa0-b8fb8cd491e9",
                                                       new Date(1566995743982L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1566995749338L), null,
                                                       "248263f1-c40c-4406-9c70-bb31882659c1", 96,
                                                       "3b69a934-3edd-4674-8bee-a08ca99ed414",
                                                       "a3c4bf48-7753-4238-99db-bdb83e9b466a",
                                                       new Date(1566995748399L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
