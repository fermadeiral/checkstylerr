// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                             "8e7931b5-3061-43f2-9467-a5d4ec772553",
                                                             new Date(1566995747031L),
                                                             "b2f63332-d074-4f6a-8ef8-52a9bf0f8bd6",
                                                             "ab6c931f-14d5-4da2-bfed-8996dab676ba");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                             "464677c0-6e71-4f5d-98ac-5355f87f75b5",
                                                             new Date(1566995742406L),
                                                             "71e84f73-639a-42ec-b8ea-e470ec90754a",
                                                             "96d85272-381c-4bca-872a-4ccfc4b41f5e");
            ActiveSession activesession2 = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                             "464677c0-6e71-4f5d-98ac-5355f87f75b5",
                                                             new Date(1566995742406L),
                                                             "71e84f73-639a-42ec-b8ea-e470ec90754a",
                                                             "96d85272-381c-4bca-872a-4ccfc4b41f5e");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                        "138baeb2-32a3-41db-b65f-3484701b7800",
                                                        new Date(1566995744546L),
                                                        "ade7ca6d-ba4d-4b91-98bf-1d1534ae4802",
                                                        "e7e6843d-507a-4fdd-811e-a87c448b8276");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                             "923646dd-90c0-457a-9d07-cd7bc0f03588",
                                                             new Date(1566995741349L),
                                                             "1d423957-b4ed-4622-bf00-424410cde27f",
                                                             "4f46e467-fd31-47c9-96a6-f6a1c5773e34");
            ActiveSession activesession2 = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                             "923646dd-90c0-457a-9d07-cd7bc0f03588",
                                                             new Date(1566995741349L),
                                                             "1d423957-b4ed-4622-bf00-424410cde27f",
                                                             "4f46e467-fd31-47c9-96a6-f6a1c5773e34");
            ActiveSession activesession3 = new ActiveSession("02c5996de8d57cd67670ecd25b819d1a",
                                                             "822598ec-fc3f-4c47-9c13-f866309bea8b",
                                                             new Date(1566995749075L),
                                                             "fdca48a6-a804-494a-adcb-f04b669e8ff6",
                                                             "9a6f4b28-b441-4dc6-8712-e37fbd57db4f");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
