// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model UpdateCampaignListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUpdateCampaignListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            UpdateCampaignListOptions updatecampaignlistoptions1 = new UpdateCampaignListOptions(Integer.valueOf(-61),
                                                                                                 Long.valueOf(111),
                                                                                                 Order.getDefault(),
                                                                                                 "069f363c-fca4-405e-b3fd-7724c9cd135a",
                                                                                                 null, null);
            UpdateCampaignListOptions updatecampaignlistoptions2 = updatecampaignlistoptions1.clone();
            assertNotNull(updatecampaignlistoptions1);
            assertNotNull(updatecampaignlistoptions2);
            assertNotSame(updatecampaignlistoptions2, updatecampaignlistoptions1);
            assertEquals(updatecampaignlistoptions2, updatecampaignlistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testFilters() {
        try {
            UpdateCampaignListOptions option = new UpdateCampaignListOptions().inCreatedAts(Arrays.asList(new Date(1566995745459L),
                                                                                                          new Date(1566995749177L),
                                                                                                          new Date(1566995745199L),
                                                                                                          new Date(1566995745790L)))
                                                                              .notInCreatedAts(Arrays.asList(new Date(1566995744788L),
                                                                                                             new Date(1566995744327L),
                                                                                                             new Date(1566995747301L),
                                                                                                             new Date(1566995750534L)))
                                                                              .lessThanCreatedAt(new Date(1566995746859L))
                                                                              .greaterThanCreatedAt(new Date(1566995750957L))
                                                                              .equalToName("acda5faa-30c0-47b3-8c12-262186eed495")
                                                                              .notEqualToName("28840f86-6298-4b68-bb27-3b925c03189f")
                                                                              .inNames(Arrays.asList("aadec0b6-db2a-47f2-8666-79459b2ef5c6",
                                                                                                     "1f65e673-a96c-439c-8b23-15abdc8439f9"))
                                                                              .notInNames(Arrays.asList("dce0421c-1ae5-4962-956c-1cb8310def8e",
                                                                                                        "2f2f68b3-e815-47a7-ba81-9a39bc79b113",
                                                                                                        "43a749c8-880a-4b7a-8a53-ee2cf02de5bd",
                                                                                                        "43871247-0d53-49f4-af18-f70378b0fec9",
                                                                                                        "c6e84124-0dd4-4d11-a3e8-72a0b01adb8a"))
                                                                              .equalToId("db61521f-d292-4ca1-980a-4e86e60e61b1")
                                                                              .notEqualToId("19d7a1db-5828-454e-aab5-f5038f5858ca")
                                                                              .inIds(Arrays.asList("b53811c3-6808-4d36-962a-fedf9fe5ef0f",
                                                                                                   "1527ce0f-d488-4033-95d9-d935c8c926f0",
                                                                                                   "4dbc3ead-33a8-481b-b109-787c5bc96f36"))
                                                                              .notInIds(Arrays.asList("404d718a-392c-4edf-b62f-d2c8e73f1c02",
                                                                                                      "17e9bcf9-bdeb-454a-ae1e-9b2c40f24458",
                                                                                                      "cb970c4e-e01a-4ca9-856a-0e111b6b6e6a",
                                                                                                      "4b4663d0-a32e-439c-8302-72c09f3985f1",
                                                                                                      "e77a3add-0845-48fb-add2-7a29eff635ba",
                                                                                                      "fa99000b-89df-463e-8cb5-e536871a30a7",
                                                                                                      "83f11b5d-32b6-4b3e-b3e0-d1113084c884"))
                                                                              .equalToDeviceFilter("9105f0dd-ac69-47ec-b4c0-90b3cc1006f2")
                                                                              .notEqualToDeviceFilter("b8b3df45-416f-4953-83de-956c1bab7810")
                                                                              .inDeviceFilters(Arrays.asList("07783ead-ce5b-4357-b8a8-ad3d35b7ec29",
                                                                                                             "d55047f1-44a4-4ca5-9a2a-5ba42702a434",
                                                                                                             "bffb5785-60be-4389-9ac2-dbe92e3d889b"))
                                                                              .notInDeviceFilters(Arrays.asList("8ec034a0-c773-4157-a6a1-f22eb880915b",
                                                                                                                "0a72e6ff-2d49-4c48-9002-996393defbbd",
                                                                                                                "a2c5b665-eac2-4ddd-8a7d-b1a1a996958f"))
                                                                              .inFinisheds(Arrays.asList(new Date(1566995750838L),
                                                                                                         new Date(1566995751684L),
                                                                                                         new Date(1566995746420L),
                                                                                                         new Date(1566995743612L),
                                                                                                         new Date(1566995744215L),
                                                                                                         new Date(1566995742931L),
                                                                                                         new Date(1566995750602L),
                                                                                                         new Date(1566995749975L)))
                                                                              .notInFinisheds(Arrays.asList(new Date(1566995743276L),
                                                                                                            new Date(1566995750512L)))
                                                                              .lessThanFinished(new Date(1566995751780L))
                                                                              .greaterThanFinished(new Date(1566995750670L))
                                                                              .inStartedAts(Arrays.asList(new Date(1566995751594L),
                                                                                                          new Date(1566995746463L),
                                                                                                          new Date(1566995745482L),
                                                                                                          new Date(1566995743703L),
                                                                                                          new Date(1566995748451L),
                                                                                                          new Date(1566995743680L),
                                                                                                          new Date(1566995751930L),
                                                                                                          new Date(1566995743732L),
                                                                                                          new Date(1566995748872L)))
                                                                              .notInStartedAts(Arrays.asList(new Date(1566995748160L),
                                                                                                             new Date(1566995745112L)))
                                                                              .lessThanStartedAt(new Date(1566995750648L))
                                                                              .greaterThanStartedAt(new Date(1566995743337L))
                                                                              .inWhens(Arrays.asList(new Date(1566995744870L),
                                                                                                     new Date(1566995747994L),
                                                                                                     new Date(1566995750839L)))
                                                                              .notInWhens(Arrays.asList(new Date(1566995748228L),
                                                                                                        new Date(1566995748324L)))
                                                                              .lessThanWhen(new Date(1566995749681L))
                                                                              .greaterThanWhen(new Date(1566995746814L))
                                                                              .inUpdatedAts(Arrays.asList(new Date(1566995746845L),
                                                                                                          new Date(1566995747280L),
                                                                                                          new Date(1566995751754L),
                                                                                                          new Date(1566995751411L),
                                                                                                          new Date(1566995745980L)))
                                                                              .notInUpdatedAts(Arrays.asList(new Date(1566995750175L),
                                                                                                             new Date(1566995742609L)))
                                                                              .lessThanUpdatedAt(new Date(1566995748985L))
                                                                              .greaterThanUpdatedAt(new Date(1566995742206L))
                                                                              .equalToRootManifestId("dca0d25b-5b84-4935-bf9f-a05138a0533b")
                                                                              .notEqualToRootManifestId("09ce2d5e-31a5-4c7c-8cff-5bc715ebfd6c")
                                                                              .inRootManifestIds(Arrays.asList("4dbd6320-7f0c-4357-b077-cf35f1761166",
                                                                                                               "9731634e-89bb-4a21-8a11-1c566bf58409",
                                                                                                               "dc83ef53-03ff-44a3-adaf-5eac2f0a85ca"))
                                                                              .notInRootManifestIds(Arrays.asList("d823f095-4180-4f65-be5a-fa9bd1184e6d",
                                                                                                                  "fbf6c632-fa3a-48a2-ae32-c7955df299f5",
                                                                                                                  "40996720-7258-4be5-b608-8ae42f115dfd",
                                                                                                                  "df4d3f0c-9bab-4cfe-99b4-a7575caadc69",
                                                                                                                  "04fbbaf5-1c63-4c8f-93d0-2d8ad419ec6f",
                                                                                                                  "8151f471-df9e-49d9-909d-6e2d6287b647"))
                                                                              .equalToDescription("3074f3b1-0039-4306-a5be-b4754a771915")
                                                                              .notEqualToDescription("9b37788a-13bf-4f43-aaa6-cb70d6cc6c64")
                                                                              .inDescriptions(Arrays.asList("701320e6-eed4-436d-91b6-c7193bd1a3cf"))
                                                                              .notInDescriptions(Arrays.asList("06019c89-999c-425a-bbeb-944da4c6f635",
                                                                                                               "e2e1ad77-c1c0-4dc2-b0d8-d63e8ceae4ee",
                                                                                                               "49df4a87-2c7d-441f-ab31-a1470654d2d8",
                                                                                                               "c6829806-2b8d-441e-ba4c-aa2afa3283f7",
                                                                                                               "e19c52d1-14e2-459e-bf6e-9453501b0975",
                                                                                                               "4967b856-3b41-485f-a03f-d301a9a9ffe5",
                                                                                                               "256d162e-dbf9-4fdb-803f-6534de9d86d8"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995745459L), new Date(1566995749177L), new Date(1566995745199L),
                                       new Date(1566995745790L)),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995744788L), new Date(1566995744327L), new Date(1566995747301L),
                                       new Date(1566995750534L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566995746859L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566995750957L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("acda5faa-30c0-47b3-8c12-262186eed495",
                         ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("28840f86-6298-4b68-bb27-3b925c03189f",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("aadec0b6-db2a-47f2-8666-79459b2ef5c6", "1f65e673-a96c-439c-8b23-15abdc8439f9"),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("dce0421c-1ae5-4962-956c-1cb8310def8e", "2f2f68b3-e815-47a7-ba81-9a39bc79b113",
                                       "43a749c8-880a-4b7a-8a53-ee2cf02de5bd", "43871247-0d53-49f4-af18-f70378b0fec9",
                                       "c6e84124-0dd4-4d11-a3e8-72a0b01adb8a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("db61521f-d292-4ca1-980a-4e86e60e61b1",
                         ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("19d7a1db-5828-454e-aab5-f5038f5858ca",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("b53811c3-6808-4d36-962a-fedf9fe5ef0f", "1527ce0f-d488-4033-95d9-d935c8c926f0",
                                       "4dbc3ead-33a8-481b-b109-787c5bc96f36"),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("404d718a-392c-4edf-b62f-d2c8e73f1c02", "17e9bcf9-bdeb-454a-ae1e-9b2c40f24458",
                                       "cb970c4e-e01a-4ca9-856a-0e111b6b6e6a", "4b4663d0-a32e-439c-8302-72c09f3985f1",
                                       "e77a3add-0845-48fb-add2-7a29eff635ba", "fa99000b-89df-463e-8cb5-e536871a30a7",
                                       "83f11b5d-32b6-4b3e-b3e0-d1113084c884"),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceFilterFilters());
            assertEquals("9105f0dd-ac69-47ec-b4c0-90b3cc1006f2",
                         ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                    String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceFilterFilters());
            assertEquals("b8b3df45-416f-4953-83de-956c1bab7810",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                       String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER, FilterOperator.IN));
            assertNotNull(option.getDeviceFilterFilters());
            assertEquals(Arrays.asList("07783ead-ce5b-4357-b8a8-ad3d35b7ec29", "d55047f1-44a4-4ca5-9a2a-5ba42702a434",
                                       "bffb5785-60be-4389-9ac2-dbe92e3d889b"),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceFilterFilters());
            assertEquals(Arrays.asList("8ec034a0-c773-4157-a6a1-f22eb880915b", "0a72e6ff-2d49-4c48-9002-996393defbbd",
                                       "a2c5b665-eac2-4ddd-8a7d-b1a1a996958f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED, FilterOperator.IN));
            assertNotNull(option.getFinishedFilters());
            assertEquals(Arrays.asList(new Date(1566995750838L), new Date(1566995751684L), new Date(1566995746420L),
                                       new Date(1566995743612L), new Date(1566995744215L), new Date(1566995742931L),
                                       new Date(1566995750602L), new Date(1566995749975L)),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED, FilterOperator.NOT_IN));
            assertNotNull(option.getFinishedFilters());
            assertEquals(Arrays.asList(new Date(1566995743276L), new Date(1566995750512L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED, FilterOperator.LESS_THAN));
            assertNotNull(option.getFinishedFilters());
            assertEquals(new Date(1566995751780L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED, FilterOperator.GREATER_THAN));
            assertNotNull(option.getFinishedFilters());
            assertEquals(new Date(1566995750670L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT, FilterOperator.IN));
            assertNotNull(option.getStartedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995751594L), new Date(1566995746463L), new Date(1566995745482L),
                                       new Date(1566995743703L), new Date(1566995748451L), new Date(1566995743680L),
                                       new Date(1566995751930L), new Date(1566995743732L), new Date(1566995748872L)),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getStartedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995748160L), new Date(1566995745112L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getStartedAtFilters());
            assertEquals(new Date(1566995750648L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getStartedAtFilters());
            assertEquals(new Date(1566995743337L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN, FilterOperator.IN));
            assertNotNull(option.getWhenFilters());
            assertEquals(Arrays.asList(new Date(1566995744870L), new Date(1566995747994L), new Date(1566995750839L)),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN, FilterOperator.NOT_IN));
            assertNotNull(option.getWhenFilters());
            assertEquals(Arrays.asList(new Date(1566995748228L), new Date(1566995748324L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN, FilterOperator.LESS_THAN));
            assertNotNull(option.getWhenFilters());
            assertEquals(new Date(1566995749681L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN, FilterOperator.GREATER_THAN));
            assertNotNull(option.getWhenFilters());
            assertEquals(new Date(1566995746814L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995746845L), new Date(1566995747280L), new Date(1566995751754L),
                                       new Date(1566995751411L), new Date(1566995745980L)),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995750175L), new Date(1566995742609L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566995748985L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566995742206L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getRootManifestIdFilters());
            assertEquals("dca0d25b-5b84-4935-bf9f-a05138a0533b",
                         ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getRootManifestIdFilters());
            assertEquals("09ce2d5e-31a5-4c7c-8cff-5bc715ebfd6c",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID, FilterOperator.IN));
            assertNotNull(option.getRootManifestIdFilters());
            assertEquals(Arrays.asList("4dbd6320-7f0c-4357-b077-cf35f1761166", "9731634e-89bb-4a21-8a11-1c566bf58409",
                                       "dc83ef53-03ff-44a3-adaf-5eac2f0a85ca"),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getRootManifestIdFilters());
            assertEquals(Arrays.asList("d823f095-4180-4f65-be5a-fa9bd1184e6d", "fbf6c632-fa3a-48a2-ae32-c7955df299f5",
                                       "40996720-7258-4be5-b608-8ae42f115dfd", "df4d3f0c-9bab-4cfe-99b4-a7575caadc69",
                                       "04fbbaf5-1c63-4c8f-93d0-2d8ad419ec6f", "8151f471-df9e-49d9-909d-6e2d6287b647"),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("3074f3b1-0039-4306-a5be-b4754a771915",
                         ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("9b37788a-13bf-4f43-aaa6-cb70d6cc6c64",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("701320e6-eed4-436d-91b6-c7193bd1a3cf"),
                         ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("06019c89-999c-425a-bbeb-944da4c6f635", "e2e1ad77-c1c0-4dc2-b0d8-d63e8ceae4ee",
                                       "49df4a87-2c7d-441f-ab31-a1470654d2d8", "c6829806-2b8d-441e-ba4c-aa2afa3283f7",
                                       "e19c52d1-14e2-459e-bf6e-9453501b0975", "4967b856-3b41-485f-a03f-d301a9a9ffe5",
                                       "256d162e-dbf9-4fdb-803f-6534de9d86d8"),
                         ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            UpdateCampaignListOptions updatecampaignlistoptions1 = new UpdateCampaignListOptions(Integer.valueOf(-105),
                                                                                                 Long.valueOf(3),
                                                                                                 Order.getDefault(),
                                                                                                 "3ce25807-c850-47f1-b842-4c7b85049d33",
                                                                                                 null, null);
            UpdateCampaignListOptions updatecampaignlistoptions2 = new UpdateCampaignListOptions(Integer.valueOf(-105),
                                                                                                 Long.valueOf(3),
                                                                                                 Order.getDefault(),
                                                                                                 "3ce25807-c850-47f1-b842-4c7b85049d33",
                                                                                                 null, null);
            assertNotNull(updatecampaignlistoptions1);
            assertNotNull(updatecampaignlistoptions2);
            assertNotSame(updatecampaignlistoptions2, updatecampaignlistoptions1);
            assertEquals(updatecampaignlistoptions2, updatecampaignlistoptions1);
            assertEquals(updatecampaignlistoptions2.hashCode(), updatecampaignlistoptions1.hashCode());
            int hashCode = updatecampaignlistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, updatecampaignlistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            UpdateCampaignListOptions updatecampaignlistoptions1 = new UpdateCampaignListOptions(Integer.valueOf(75),
                                                                                                 Long.valueOf(-41),
                                                                                                 Order.getDefault(),
                                                                                                 "06fb57d2-34b0-4ba9-8fd6-d6cd3698e710",
                                                                                                 null, null);
            UpdateCampaignListOptions updatecampaignlistoptions2 = new UpdateCampaignListOptions(Integer.valueOf(75),
                                                                                                 Long.valueOf(-41),
                                                                                                 Order.getDefault(),
                                                                                                 "06fb57d2-34b0-4ba9-8fd6-d6cd3698e710",
                                                                                                 null, null);
            UpdateCampaignListOptions updatecampaignlistoptions3 = new UpdateCampaignListOptions(Integer.valueOf(12),
                                                                                                 Long.valueOf(29),
                                                                                                 Order.getDefault(),
                                                                                                 "fa290dac-a610-44f3-8297-1a18dd76ff99",
                                                                                                 null, null);
            assertNotNull(updatecampaignlistoptions1);
            assertNotNull(updatecampaignlistoptions2);
            assertNotNull(updatecampaignlistoptions3);
            assertNotSame(updatecampaignlistoptions2, updatecampaignlistoptions1);
            assertNotSame(updatecampaignlistoptions3, updatecampaignlistoptions1);
            assertEquals(updatecampaignlistoptions2, updatecampaignlistoptions1);
            assertEquals(updatecampaignlistoptions2, updatecampaignlistoptions1);
            assertEquals(updatecampaignlistoptions1, updatecampaignlistoptions2);
            assertEquals(updatecampaignlistoptions1, updatecampaignlistoptions1);
            assertFalse(updatecampaignlistoptions1.equals(null));
            assertNotEquals(updatecampaignlistoptions3, updatecampaignlistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
