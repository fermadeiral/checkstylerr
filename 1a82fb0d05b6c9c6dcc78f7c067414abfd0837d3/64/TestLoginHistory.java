// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566995748107L),
                                                          "f71cc4e0-556a-4993-8f88-c7907cde0e09", true,
                                                          "2f5370bd-0065-4165-836b-1f1027ae1403");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566995741151L),
                                                          "ae6c09a7-fde2-41ea-aac8-efca3e3c1415", true,
                                                          "8682161f-404b-4027-8ff0-d1f060f3e332");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1566995741151L),
                                                          "ae6c09a7-fde2-41ea-aac8-efca3e3c1415", true,
                                                          "8682161f-404b-4027-8ff0-d1f060f3e332");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1566995747216L), "7ec5116a-f18e-4d55-b5db-e8e662c3d3b6",
                                                     false, "52e41d31-10d1-4dbb-aa37-04a170d83920");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566995747191L),
                                                          "5d478ad2-b4ff-45a8-8de8-70821c605e34", true,
                                                          "7573d6e4-e6fe-4849-8a89-803c27dac759");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1566995747191L),
                                                          "5d478ad2-b4ff-45a8-8de8-70821c605e34", true,
                                                          "7573d6e4-e6fe-4849-8a89-803c27dac759");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1566995749248L),
                                                          "975caf3f-a1ab-487b-9649-66df25d30f89", true,
                                                          "228c7047-900b-4348-96aa-72cdab0d0c1d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
