// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1566995748611L), 111,
                                                                      "4c3dfc76-d397-4bcf-95de-9c6f51aece6a",
                                                                      "0d5210b0-dc18-4e67-a9fc-7f8c7a57ec79",
                                                                      "ab819315-6eae-4ff6-ab87-5a5f690bb3b8",
                                                                      "8f755c4c-55ef-4103-8460-e83e02e2fe39",
                                                                      "d6cc6c5c-e566-4eea-aede-f582c9a1a8ff",
                                                                      "796a325b-25cc-4e28-99d3-b2f81e14ac52",
                                                                      new Date(1566995740212L),
                                                                      new Date(1566995742384L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1566995745482L), 30,
                                                                      "7f1c08b3-3405-4939-940d-1d7f337281b4",
                                                                      "f13ccfdb-ed67-460c-90cb-6c1c1602fec2",
                                                                      "fea0f881-6647-4879-bb88-716721d020c4",
                                                                      "ec8cfc16-4218-4346-a0ed-860c70bb0bee",
                                                                      "0d52bb22-69ce-473e-848f-74c077957405",
                                                                      "593594c2-a536-4202-93c3-cdc6c1f03894",
                                                                      new Date(1566995749610L),
                                                                      new Date(1566995746249L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1566995745482L), 30,
                                                                      "7f1c08b3-3405-4939-940d-1d7f337281b4",
                                                                      "f13ccfdb-ed67-460c-90cb-6c1c1602fec2",
                                                                      "fea0f881-6647-4879-bb88-716721d020c4",
                                                                      "ec8cfc16-4218-4346-a0ed-860c70bb0bee",
                                                                      "0d52bb22-69ce-473e-848f-74c077957405",
                                                                      "593594c2-a536-4202-93c3-cdc6c1f03894",
                                                                      new Date(1566995749610L),
                                                                      new Date(1566995746249L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1566995745919L), -128,
                                                                 "67394322-ab80-4aef-b473-fb56987f9d86",
                                                                 "691de840-9c7e-4f2a-9ac0-2bbf79859a2d",
                                                                 "2ee0ab1d-f77e-429f-a3e5-5b3f32a463c3",
                                                                 "83123def-1668-48e2-92a0-7ea6732f871d",
                                                                 "99afe8c8-628f-4ae3-8767-e8d06c3a7f2a",
                                                                 "1aa54fb9-5d44-42f9-9688-413f53a991bb",
                                                                 new Date(1566995747459L), new Date(1566995742189L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1566995749145L), 104,
                                                                        "9142a7bb-18d6-4ffc-84b7-17d4ef350543",
                                                                        "3925260c-5492-46c4-9e2d-85f8b38009f2a81b8926-34b0-4d73-9469-2244e14b4f16512c5c34-0cd7-4c0f-b603-d07595f97aa251690261-461d-4c66-b131-07a47dcb3c2f9272d312-2563-44dd-b60d-d19b1aceb9965d8311dc-3c40-477c-a7ee-cb6ee1d66948db5ab80b-1df3-4599-a89f-cb14a0bc2484b172886e-60c6-4cf0-9304-f299d620df0aa5054f08-88ef-4f76-ace7-288faabde221af5a5bbe-0318-4c17-abdb-f19309bf3263ce4f71bd-85cc-4e70-ba47-0c55cf898c1cb87b9bd3-99e2-4bec-8d9d-c8c44b765a1c4637b2fd-09ea-4222-aa91-154427ace63f67463b89-09e5-4837-b443-0c3b4ba6e29673ace6c8-e3fd-46ae-98ad-3b33ac83661d16bc4f8c-4c70-45c4-8418-94afb81afe5a213209ef-f529-432e-af80-d300949ef72437ddd7b2-c132-423e-ba9a-af94de43a803bc79deb9-97d4-4fe4-be26-5f1780a6e46e830d376e-43e1-4db2-8397-94b95be336d132f1c799-559b-4106-9c11-d37eeaa8455506990ed7-cad9-46bf-8fd8-45324a6b00c8983e29e4-be7f-4f2a-a7c3-fc616ae7e776a6487460-436f-4ac4-b917-aa1b9d2d1f19cae4652d-4dd4-4a5e-9d39-b56d3d2de978f1d98687-f97d-4640-8d7a-9abd061abdf3832ff138-b77d-4c32-9f1e-52f3e3ed4d0ef649b680-c123-407e-bc93-00961e5567aeb68032af-d0e3-40ee-b3c6-f0f76e50a13bf9ba632d-b240-4e8e-bbee-e2e0d8d5cce8fe664ff0-e7aa-44be-a3e2-4b3644d4810ef38c0f73-d7b4-4ca4-9474-df5dcf1d60d0a41431ca-d253-4e3d-baf7-3755808e0b9ef71fc5e0-269a-4361-b3aa-730e3508928708cd7d8e-2a60-42d2-bcfe-367a7e18a18f396e1527-71f1-4731-abcb-a1f9a00c87e6c4f6f807-05cb-4c12-98c1-2d01e9aeed555388903a-dc47-4b2e-9d9c-c7ecb84b4af2604f3fce-6085-40e6-96ab-7e5071b6046569644a05-9e20-4a9d-bde6-687ee12c5c93e256eece-5d7e-41c0-bc34-4cd15636600d33de98f7-0eab-413b-bb7e-ad43dfc088cd0fe8bb2a-72ef-4966-a0be-fc225c96464b94e1b124-4d7d-4729-a31c-0707c49e168f863125df-dd1f-4228-a80a-9918fe9e31110eed9ff6-d6ce-4bbc-ad0e-32d15efc6781eae34bbf-08cc-43c3-8700-82266faf764fc13a7096-8819-4d76-8271-51fc0bf2964b9bbcd534-bd29-49bf-b4b5-016698afc150fbebbcd8-a896-4b8a-9d84-6a5d048bfee4256c7326-258c-4e0a-b9cd-cbf08fe608ad42b8f4a4-751d-41f9-8847-aa0120124df4d4a1df9d-ff54-4efe-8f02-1431431bd520dad54c76-08c4-49a2-b884-de9384771b90dab00580-27c6-44bf-bc88-e37e5391c56e109208f7-45e7-408e-9240-b90458629c36",
                                                                        "682bd464-d89d-47a1-b048-1a070b7760db",
                                                                        "c733fdc5-3d9d-4464-96f3-2f3a1f13836d",
                                                                        "11df8a4b-55b6-4d86-acd5-50df0f7464ee",
                                                                        "ef92d8a7-6925-4bb1-bf47-3ce013e608620b0232bc-ab32-46a9-ac69-695c3c21ffb5fca9fba7-3504-423b-912a-129ef0e72105820de556-fce0-421c-b622-3ae86486d827",
                                                                        new Date(1566995744715L),
                                                                        new Date(1566995741023L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1566995744292L), 12,
                                                                      "54fa9266-cad5-4836-9e77-b72d60c184fa",
                                                                      "1e203677-d00d-4f03-9c12-3d59465252fa",
                                                                      "f5bb0b56-b060-403a-af74-f0dc1b1f6955",
                                                                      "ee80b627-df46-4058-994d-3d68359cdbd3",
                                                                      "554e8758-4abe-44e3-be3c-321acfd25a71",
                                                                      "ce13b7f8-b9d6-4b74-bc4e-35e0bd43f30d",
                                                                      new Date(1566995742650L),
                                                                      new Date(1566995745141L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1566995744292L), 12,
                                                                      "54fa9266-cad5-4836-9e77-b72d60c184fa",
                                                                      "1e203677-d00d-4f03-9c12-3d59465252fa",
                                                                      "f5bb0b56-b060-403a-af74-f0dc1b1f6955",
                                                                      "ee80b627-df46-4058-994d-3d68359cdbd3",
                                                                      "554e8758-4abe-44e3-be3c-321acfd25a71",
                                                                      "ce13b7f8-b9d6-4b74-bc4e-35e0bd43f30d",
                                                                      new Date(1566995742650L),
                                                                      new Date(1566995745141L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1566995743342L), -107,
                                                                      "f80c6efc-80e6-4517-a26e-32aa4e354a05",
                                                                      "dcd49c6e-2b22-46c6-9a7b-f892f2602758",
                                                                      "f58206cb-37cf-4c69-affb-03f7b337a4f7",
                                                                      "b25dc13f-8ba1-497b-ab3a-3be0500f2eee",
                                                                      "abe35a2c-c2f6-490f-b8c4-b4e646c5676b",
                                                                      "f48d4ef8-2d59-47b2-b56e-a279a2e4612e",
                                                                      new Date(1566995742498L),
                                                                      new Date(1566995747748L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
