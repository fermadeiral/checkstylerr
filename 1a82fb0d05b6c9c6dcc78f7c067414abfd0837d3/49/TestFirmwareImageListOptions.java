// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(24),
                                                                                              Long.valueOf(30),
                                                                                              Order.getDefault(),
                                                                                              "743f8d70-a1f5-40b1-bb57-a99f58998781",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1566995742052L),
                                                                                                        new Date(1566995747371L),
                                                                                                        new Date(1566995749609L),
                                                                                                        new Date(1566995744794L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1566995746584L),
                                                                                                           new Date(1566995747914L),
                                                                                                           new Date(1566995747023L),
                                                                                                           new Date(1566995749042L)))
                                                                            .lessThanUpdatedAt(new Date(1566995742361L))
                                                                            .greaterThanUpdatedAt(new Date(1566995749657L))
                                                                            .equalToName("c0fbffc9-7d89-41dc-896f-c4555cbda748")
                                                                            .notEqualToName("e6408f59-2174-4cab-ad76-dd319db3eb3e")
                                                                            .inNames(Arrays.asList("f9874745-c18d-4228-9af7-4546ac4a1d14",
                                                                                                   "049588c6-c70e-41c7-b8c1-7b8ad60fb467",
                                                                                                   "30c4d501-e9f7-49c6-a210-f6bc23872df7",
                                                                                                   "9f08d67f-4caf-4f1a-b868-51e88028c8c3"))
                                                                            .notInNames(Arrays.asList("80d90dc2-95a8-4e90-92b1-ecd498ca09f9",
                                                                                                      "665fd2e2-297c-4ef2-a0a2-5c1770c334bc",
                                                                                                      "a5aff845-1494-49de-a332-b152f595aeba"))
                                                                            .equalToDescription("70a8049e-cc7d-40ba-86e0-28aa06cd2f1b")
                                                                            .notEqualToDescription("926dd76e-c0ae-488d-b7cc-7f695c9aee2b")
                                                                            .inDescriptions(Arrays.asList("d107e442-0cbc-4f8d-b596-6f526423dddc",
                                                                                                          "f8538686-f61a-41c2-bdba-0645ed412a44"))
                                                                            .notInDescriptions(Arrays.asList("7c3b294d-d107-4d12-9cab-6f93b3751ede",
                                                                                                             "b879a19f-43e2-484e-a66b-2a464e20999b",
                                                                                                             "ada173f4-9dc7-4792-92c9-78f8703ae423",
                                                                                                             "20e8a3db-a715-4379-93d5-e0752cb8a709",
                                                                                                             "b5c52416-8172-4707-a590-891ad6ecbaab"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1566995750442L),
                                                                                                        new Date(1566995747741L),
                                                                                                        new Date(1566995746871L),
                                                                                                        new Date(1566995749960L),
                                                                                                        new Date(1566995747576L),
                                                                                                        new Date(1566995749631L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1566995742449L),
                                                                                                           new Date(1566995744668L),
                                                                                                           new Date(1566995744335L),
                                                                                                           new Date(1566995744194L),
                                                                                                           new Date(1566995742158L),
                                                                                                           new Date(1566995743513L),
                                                                                                           new Date(1566995750894L),
                                                                                                           new Date(1566995750962L)))
                                                                            .lessThanCreatedAt(new Date(1566995747636L))
                                                                            .greaterThanCreatedAt(new Date(1566995748576L))
                                                                            .equalToDatafileUrl("e7ca49e8-941f-4733-a83d-b16dd5803019")
                                                                            .notEqualToDatafileUrl("fb1c2a48-497c-473e-a975-107a14f808d6")
                                                                            .inDatafileUrls(Arrays.asList("eefac364-de25-4bff-8ba0-83eda863dbf5",
                                                                                                          "08e0f103-da29-4cac-abe0-a8485797dc19"))
                                                                            .notInDatafileUrls(Arrays.asList("8402873e-3689-484c-910f-582ef64b4d32",
                                                                                                             "48e1b6a1-664c-4fcb-a2f7-adf5db64e2e9",
                                                                                                             "ca2f0bdb-a0d7-489b-bb6e-e737e4a60ae3",
                                                                                                             "bc0a3c15-8c11-4306-82d1-59a400e7ca9a",
                                                                                                             "b6bbb5aa-f4e1-45be-ae77-d16722a2aed2",
                                                                                                             "26fd41f5-894e-43d1-b32d-f2a57a445dc1",
                                                                                                             "89f3490c-70fd-4475-a5a2-ffd050a45e8b"))
                                                                            .equalToDatafileSize(Long.valueOf(54))
                                                                            .notEqualToDatafileSize(Long.valueOf(48))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(79)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(-24),
                                                                                                              Long.valueOf(16),
                                                                                                              Long.valueOf(59),
                                                                                                              Long.valueOf(119),
                                                                                                              Long.valueOf(40),
                                                                                                              Long.valueOf(-5),
                                                                                                              Long.valueOf(38),
                                                                                                              Long.valueOf(-92)))
                                                                            .equalToDatafileChecksum("f862ecfa-b25b-443f-b413-ad5a1178e462")
                                                                            .notEqualToDatafileChecksum("2676c8e8-c213-4051-ae6a-5414e398ba10")
                                                                            .inDatafileChecksums(Arrays.asList("30b47cdb-333d-497b-901f-bf2bd0b49f47"))
                                                                            .notInDatafileChecksums(Arrays.asList("3316e385-24a4-4519-961e-4dc8678712fd",
                                                                                                                  "19d1a1d5-6766-47d7-a82e-fbf94e792c80",
                                                                                                                  "0da61435-57cb-4419-8787-dfb255daada9",
                                                                                                                  "8a788555-bf11-4c66-88cc-e0c0a767406f",
                                                                                                                  "92e75849-5315-4f7f-bced-abe0002af942",
                                                                                                                  "a5d31c57-80f0-44d3-874a-cc8e3ab27e37",
                                                                                                                  "193e521b-710c-4835-8c83-75b78feaae8c"))
                                                                            .equalToId("a09b4a75-337b-4da1-ba85-1502473ba43d")
                                                                            .notEqualToId("2b8b0637-65ec-4cd5-9a21-d93f114410ef")
                                                                            .inIds(Arrays.asList("1b981faa-53aa-43a1-8bac-8d1149918ad3",
                                                                                                 "0376a258-9c81-4c18-b83e-06bf9ecaed58",
                                                                                                 "6f1d9e24-7088-460c-bb80-4098b89d70be",
                                                                                                 "ad3ee0bd-654d-4a7d-9554-ac1657a6b14a"))
                                                                            .notInIds(Arrays.asList("36cef18b-4ea9-4f25-ae71-3dbcd9a28307",
                                                                                                    "7ec0d2f1-7abe-4f2c-a47c-01680002220a",
                                                                                                    "3ea17c04-eb2e-4bfb-9ccf-1c457eb47db4",
                                                                                                    "d38d8181-64f6-4fe1-8f4f-45be222ba0ee",
                                                                                                    "f0adf157-56e9-409e-bb0c-1f5ef5862152",
                                                                                                    "297d9054-baa4-4aba-aef1-11b3f9206cf4"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995742052L), new Date(1566995747371L), new Date(1566995749609L),
                                       new Date(1566995744794L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995746584L), new Date(1566995747914L), new Date(1566995747023L),
                                       new Date(1566995749042L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566995742361L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566995749657L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("c0fbffc9-7d89-41dc-896f-c4555cbda748",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("e6408f59-2174-4cab-ad76-dd319db3eb3e",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("f9874745-c18d-4228-9af7-4546ac4a1d14", "049588c6-c70e-41c7-b8c1-7b8ad60fb467",
                                       "30c4d501-e9f7-49c6-a210-f6bc23872df7", "9f08d67f-4caf-4f1a-b868-51e88028c8c3"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("80d90dc2-95a8-4e90-92b1-ecd498ca09f9", "665fd2e2-297c-4ef2-a0a2-5c1770c334bc",
                                       "a5aff845-1494-49de-a332-b152f595aeba"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("70a8049e-cc7d-40ba-86e0-28aa06cd2f1b",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("926dd76e-c0ae-488d-b7cc-7f695c9aee2b",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("d107e442-0cbc-4f8d-b596-6f526423dddc", "f8538686-f61a-41c2-bdba-0645ed412a44"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("7c3b294d-d107-4d12-9cab-6f93b3751ede", "b879a19f-43e2-484e-a66b-2a464e20999b",
                                       "ada173f4-9dc7-4792-92c9-78f8703ae423", "20e8a3db-a715-4379-93d5-e0752cb8a709",
                                       "b5c52416-8172-4707-a590-891ad6ecbaab"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995750442L), new Date(1566995747741L), new Date(1566995746871L),
                                       new Date(1566995749960L), new Date(1566995747576L), new Date(1566995749631L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566995742449L), new Date(1566995744668L), new Date(1566995744335L),
                                       new Date(1566995744194L), new Date(1566995742158L), new Date(1566995743513L),
                                       new Date(1566995750894L), new Date(1566995750962L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566995747636L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566995748576L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("e7ca49e8-941f-4733-a83d-b16dd5803019",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("fb1c2a48-497c-473e-a975-107a14f808d6",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("eefac364-de25-4bff-8ba0-83eda863dbf5", "08e0f103-da29-4cac-abe0-a8485797dc19"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("8402873e-3689-484c-910f-582ef64b4d32", "48e1b6a1-664c-4fcb-a2f7-adf5db64e2e9",
                                       "ca2f0bdb-a0d7-489b-bb6e-e737e4a60ae3", "bc0a3c15-8c11-4306-82d1-59a400e7ca9a",
                                       "b6bbb5aa-f4e1-45be-ae77-d16722a2aed2", "26fd41f5-894e-43d1-b32d-f2a57a445dc1",
                                       "89f3490c-70fd-4475-a5a2-ffd050a45e8b"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(54),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(48),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(79)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-24), Long.valueOf(16), Long.valueOf(59), Long.valueOf(119),
                                       Long.valueOf(40), Long.valueOf(-5), Long.valueOf(38), Long.valueOf(-92)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("f862ecfa-b25b-443f-b413-ad5a1178e462",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("2676c8e8-c213-4051-ae6a-5414e398ba10",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("30b47cdb-333d-497b-901f-bf2bd0b49f47"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("3316e385-24a4-4519-961e-4dc8678712fd", "19d1a1d5-6766-47d7-a82e-fbf94e792c80",
                                       "0da61435-57cb-4419-8787-dfb255daada9", "8a788555-bf11-4c66-88cc-e0c0a767406f",
                                       "92e75849-5315-4f7f-bced-abe0002af942", "a5d31c57-80f0-44d3-874a-cc8e3ab27e37",
                                       "193e521b-710c-4835-8c83-75b78feaae8c"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("a09b4a75-337b-4da1-ba85-1502473ba43d",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("2b8b0637-65ec-4cd5-9a21-d93f114410ef",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("1b981faa-53aa-43a1-8bac-8d1149918ad3", "0376a258-9c81-4c18-b83e-06bf9ecaed58",
                                       "6f1d9e24-7088-460c-bb80-4098b89d70be", "ad3ee0bd-654d-4a7d-9554-ac1657a6b14a"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("36cef18b-4ea9-4f25-ae71-3dbcd9a28307", "7ec0d2f1-7abe-4f2c-a47c-01680002220a",
                                       "3ea17c04-eb2e-4bfb-9ccf-1c457eb47db4", "d38d8181-64f6-4fe1-8f4f-45be222ba0ee",
                                       "f0adf157-56e9-409e-bb0c-1f5ef5862152", "297d9054-baa4-4aba-aef1-11b3f9206cf4"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-103),
                                                                                              Long.valueOf(-49),
                                                                                              Order.getDefault(),
                                                                                              "36ab6e66-94cd-448a-901a-e0089fa68446",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-103),
                                                                                              Long.valueOf(-49),
                                                                                              Order.getDefault(),
                                                                                              "36ab6e66-94cd-448a-901a-e0089fa68446",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-123),
                                                                                              Long.valueOf(-120),
                                                                                              Order.getDefault(),
                                                                                              "f76b465f-1b5d-4ca3-b3c8-c82bf25f135a",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-123),
                                                                                              Long.valueOf(-120),
                                                                                              Order.getDefault(),
                                                                                              "f76b465f-1b5d-4ca3-b3c8-c82bf25f135a",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(82),
                                                                                              Long.valueOf(-8),
                                                                                              Order.getDefault(),
                                                                                              "4e0e913d-a1a0-4bed-996e-74ac69b86173",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
