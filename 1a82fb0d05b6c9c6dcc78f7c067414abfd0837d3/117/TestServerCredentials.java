// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566995744517L),
                                                                         "043aca01-9f86-458d-b8a2-3e5c542f2f09",
                                                                         "4efb1651-469b-4511-b106-2d340abfe7db",
                                                                         "dfca9197-f55e-4c8d-8324-2aebae5bd46d");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566995744092L),
                                                                         "30eee456-e712-4154-998c-7972f87f2f26",
                                                                         "ae8d0092-3490-4c04-af05-9180ec6921b9",
                                                                         "4ce68787-055f-4619-a9cd-de4b9b8cd85d");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1566995744092L),
                                                                         "30eee456-e712-4154-998c-7972f87f2f26",
                                                                         "ae8d0092-3490-4c04-af05-9180ec6921b9",
                                                                         "4ce68787-055f-4619-a9cd-de4b9b8cd85d");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1566995747044L),
                                                                    "746ab4a6-b60d-48dd-a43f-ededcc58fdde",
                                                                    "c41fabc1-be80-452b-b938-3ae6d0a3023f",
                                                                    "7ea94c40-43ec-4033-8b1b-45de379f43e5");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566995745988L),
                                                                         "0b5a5de0-7870-4e71-bc9f-e5c7e4600620",
                                                                         "a60a9b76-3c8d-4628-bc66-9bcd20f919a8",
                                                                         "eea26948-b5e7-4fa6-ba1a-626f9ab61418");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1566995745988L),
                                                                         "0b5a5de0-7870-4e71-bc9f-e5c7e4600620",
                                                                         "a60a9b76-3c8d-4628-bc66-9bcd20f919a8",
                                                                         "eea26948-b5e7-4fa6-ba1a-626f9ab61418");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1566995743856L),
                                                                         "6e01cb90-7289-4788-93d9-9bc73a9eea3a",
                                                                         "71f0c36b-c4a8-4c45-96a7-3cb1eb35b467",
                                                                         "893e0529-e901-4e7f-9e19-3e192eeb7ae7");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
