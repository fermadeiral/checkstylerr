// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-112),
                                                                                        Long.valueOf(102),
                                                                                        Order.getDefault(),
                                                                                        "b4166493-adcd-48ce-8d96-70f508785a1d",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1560172170937L),
                                                                                                    new Date(1560172166319L),
                                                                                                    new Date(1560172164454L),
                                                                                                    new Date(1560172165877L),
                                                                                                    new Date(1560172166890L),
                                                                                                    new Date(1560172170252L),
                                                                                                    new Date(1560172167868L),
                                                                                                    new Date(1560172165034L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1560172167322L),
                                                                                                       new Date(1560172165204L),
                                                                                                       new Date(1560172167558L),
                                                                                                       new Date(1560172167149L),
                                                                                                       new Date(1560172173012L),
                                                                                                       new Date(1560172163967L),
                                                                                                       new Date(1560172167790L),
                                                                                                       new Date(1560172168381L),
                                                                                                       new Date(1560172169365L)))
                                                                        .lessThanUpdatedAt(new Date(1560172168513L))
                                                                        .greaterThanUpdatedAt(new Date(1560172163505L))
                                                                        .equalToName("8d179022-56b1-47b3-86d4-bf26b5d183ed")
                                                                        .notEqualToName("4d9c605c-7948-4056-b8b6-db807a86260a")
                                                                        .inNames(Arrays.asList("ee10953f-0552-4293-b315-fdfd67960560",
                                                                                               "974f2ff0-61b4-48d8-931f-f204f5c231d6",
                                                                                               "58e568ca-5ee9-40c9-ba1b-022e11ee18a3",
                                                                                               "bd58994f-a847-468f-bf74-aaf44f13961c",
                                                                                               "7c46a125-ee03-4ef1-a0e3-be95ebd8c703",
                                                                                               "f8197eed-6ed5-4e61-b6f8-aa0ccec8698a",
                                                                                               "a5135f90-64c5-45a0-a9e1-22753a6d740a",
                                                                                               "878ce857-85eb-4470-93d1-1b73a575a537"))
                                                                        .notInNames(Arrays.asList("d2d38dcc-86e8-4bc1-b608-dd6fcb9d7992",
                                                                                                  "91b28a24-fae5-408f-9026-efd37ef95698",
                                                                                                  "ed69399f-2e12-43b1-92c8-6bfb8786964c",
                                                                                                  "8f8a460f-d3c2-4963-bca6-baf2ecb5b005"))
                                                                        .equalToDevicesCount(Integer.valueOf(54))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-107))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(65),
                                                                                                       Integer.valueOf(124),
                                                                                                       Integer.valueOf(104)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(17)))
                                                                        .lessThanDevicesCount(Integer.valueOf(104))
                                                                        .greaterThanDevicesCount(Integer.valueOf(125))
                                                                        .inCreatedAts(Arrays.asList(new Date(1560172167503L),
                                                                                                    new Date(1560172171935L),
                                                                                                    new Date(1560172170317L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1560172168401L),
                                                                                                       new Date(1560172171325L),
                                                                                                       new Date(1560172172450L),
                                                                                                       new Date(1560172172574L),
                                                                                                       new Date(1560172164780L),
                                                                                                       new Date(1560172168431L),
                                                                                                       new Date(1560172172568L),
                                                                                                       new Date(1560172163729L),
                                                                                                       new Date(1560172173080L)))
                                                                        .lessThanCreatedAt(new Date(1560172167744L))
                                                                        .greaterThanCreatedAt(new Date(1560172168398L))
                                                                        .equalToId("a5fa36d1-9bfa-41be-a0e7-58f368e043e9")
                                                                        .notEqualToId("996d89f9-b211-496c-9890-d8a6a2028c89")
                                                                        .inIds(Arrays.asList("2a19b49b-21cc-4ecb-b2bf-d21fe6f01ad4",
                                                                                             "2a50aaaf-0e11-44e5-9d0c-ab3506a4aa66",
                                                                                             "073ec70b-1569-43f8-a226-9e070a29c540",
                                                                                             "86bca34f-6daa-4069-b750-90f50e51a0be",
                                                                                             "fba899db-0fb6-4598-ba2d-629543163e47",
                                                                                             "1db46c4b-49db-4d29-a027-6864986d3b60",
                                                                                             "a5673435-cd43-46cc-b520-2f01878eabb4",
                                                                                             "c909a964-4372-42da-9c9c-ff2065635391"))
                                                                        .notInIds(Arrays.asList("45ee7a31-c5ae-46d3-9879-4ded6b53f2b7"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172170937L), new Date(1560172166319L), new Date(1560172164454L),
                                       new Date(1560172165877L), new Date(1560172166890L), new Date(1560172170252L),
                                       new Date(1560172167868L), new Date(1560172165034L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172167322L), new Date(1560172165204L), new Date(1560172167558L),
                                       new Date(1560172167149L), new Date(1560172173012L), new Date(1560172163967L),
                                       new Date(1560172167790L), new Date(1560172168381L), new Date(1560172169365L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1560172168513L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1560172163505L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("8d179022-56b1-47b3-86d4-bf26b5d183ed",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("4d9c605c-7948-4056-b8b6-db807a86260a",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("ee10953f-0552-4293-b315-fdfd67960560", "974f2ff0-61b4-48d8-931f-f204f5c231d6",
                                       "58e568ca-5ee9-40c9-ba1b-022e11ee18a3", "bd58994f-a847-468f-bf74-aaf44f13961c",
                                       "7c46a125-ee03-4ef1-a0e3-be95ebd8c703", "f8197eed-6ed5-4e61-b6f8-aa0ccec8698a",
                                       "a5135f90-64c5-45a0-a9e1-22753a6d740a", "878ce857-85eb-4470-93d1-1b73a575a537"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("d2d38dcc-86e8-4bc1-b608-dd6fcb9d7992", "91b28a24-fae5-408f-9026-efd37ef95698",
                                       "ed69399f-2e12-43b1-92c8-6bfb8786964c", "8f8a460f-d3c2-4963-bca6-baf2ecb5b005"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(54),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-107),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(65), Integer.valueOf(124), Integer.valueOf(104)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(17)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(104),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(125),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172167503L), new Date(1560172171935L), new Date(1560172170317L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172168401L), new Date(1560172171325L), new Date(1560172172450L),
                                       new Date(1560172172574L), new Date(1560172164780L), new Date(1560172168431L),
                                       new Date(1560172172568L), new Date(1560172163729L), new Date(1560172173080L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1560172167744L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1560172168398L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("a5fa36d1-9bfa-41be-a0e7-58f368e043e9",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("996d89f9-b211-496c-9890-d8a6a2028c89",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("2a19b49b-21cc-4ecb-b2bf-d21fe6f01ad4", "2a50aaaf-0e11-44e5-9d0c-ab3506a4aa66",
                                       "073ec70b-1569-43f8-a226-9e070a29c540", "86bca34f-6daa-4069-b750-90f50e51a0be",
                                       "fba899db-0fb6-4598-ba2d-629543163e47", "1db46c4b-49db-4d29-a027-6864986d3b60",
                                       "a5673435-cd43-46cc-b520-2f01878eabb4", "c909a964-4372-42da-9c9c-ff2065635391"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("45ee7a31-c5ae-46d3-9879-4ded6b53f2b7"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(11),
                                                                                        Long.valueOf(11),
                                                                                        Order.getDefault(),
                                                                                        "b4adb524-c8c6-4872-97bd-65d527c7c175",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(11),
                                                                                        Long.valueOf(11),
                                                                                        Order.getDefault(),
                                                                                        "b4adb524-c8c6-4872-97bd-65d527c7c175",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-94),
                                                                                        Long.valueOf(-41),
                                                                                        Order.getDefault(),
                                                                                        "4033620f-7dfb-46e5-8fd6-33b3991df5a2",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-94),
                                                                                        Long.valueOf(-41),
                                                                                        Order.getDefault(),
                                                                                        "4033620f-7dfb-46e5-8fd6-33b3991df5a2",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-59),
                                                                                        Long.valueOf(-36),
                                                                                        Order.getDefault(),
                                                                                        "df1d2cc1-d88c-4e5a-8b98-abeea31c7388",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
