// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1560172165614L),
                                                          "13bf7c30-60d2-4732-9f1f-0485ff08fed4", false,
                                                          "ebe52317-9ea0-4dc2-9f8d-2538ad9dce08");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1560172168038L),
                                                          "6bb7003e-fcc5-40ca-94fd-214345aaba24", true,
                                                          "6e526be5-728b-45ad-8e63-545399fa89a8");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1560172168038L),
                                                          "6bb7003e-fcc5-40ca-94fd-214345aaba24", true,
                                                          "6e526be5-728b-45ad-8e63-545399fa89a8");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1560172167638L), "5e4ae4d2-9672-43e3-af7c-2876795bbcb3",
                                                     true, "4680ee3b-2e45-4edf-a018-f35bcab6c6a2");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1560172168872L),
                                                          "997a29ea-fdf6-4f20-b19e-eb68029f5d5f", false,
                                                          "32403585-5795-4a2a-82ee-7b406e89324e");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1560172168872L),
                                                          "997a29ea-fdf6-4f20-b19e-eb68029f5d5f", false,
                                                          "32403585-5795-4a2a-82ee-7b406e89324e");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1560172161121L),
                                                          "ea7b6d47-0e0f-48f3-b45e-f85ce5cd3a46", false,
                                                          "2d693e33-9895-4a4d-ba05-d48c9b90bcd6");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
