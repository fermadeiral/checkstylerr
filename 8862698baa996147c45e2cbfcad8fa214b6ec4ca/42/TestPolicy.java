// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("96485fdf-c698-4556-8368-4b67584b73b6", true,
                                        "2807cc8d-11d0-4c13-bc3c-caac60b290ae", true,
                                        "1e319fd9-8d75-4829-99ec-59b26609e366");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("155b6e94-307c-41e5-8882-30d210c25a26", true,
                                        "6ffd70fb-422b-4a48-9f15-83a7680ad5ed", true,
                                        "0334b0a6-cf57-431c-8ef1-d29c47f3bb87");
            Policy policy2 = new Policy("155b6e94-307c-41e5-8882-30d210c25a26", true,
                                        "6ffd70fb-422b-4a48-9f15-83a7680ad5ed", true,
                                        "0334b0a6-cf57-431c-8ef1-d29c47f3bb87");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("ad5583e1-74ff-4d0f-9658-54b0c4dba0bc", false,
                                   "db1ca89c-b1f2-4b8f-bd39-7a69f91b46b0", false,
                                   "4b139cb2-e7a1-447e-8167-ff75597c09c3");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("0e096ffe-6fd8-4bf9-8479-992d2dac7f4a", true,
                                        "37840a2b-3c13-468a-9131-70caa7cfd9e5", false,
                                        "efca0884-83e2-401c-b3a5-4d75ac349944");
            Policy policy2 = new Policy("0e096ffe-6fd8-4bf9-8479-992d2dac7f4a", true,
                                        "37840a2b-3c13-468a-9131-70caa7cfd9e5", false,
                                        "efca0884-83e2-401c-b3a5-4d75ac349944");
            Policy policy3 = new Policy("3a002c08-0abe-4b5b-9a70-a698cfce75e8", true,
                                        "da62b499-e80a-4de9-a085-a59bb528cf41", false,
                                        "ea1d8c4f-8ef9-41c8-8c6f-8c0891e1bb1a");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
