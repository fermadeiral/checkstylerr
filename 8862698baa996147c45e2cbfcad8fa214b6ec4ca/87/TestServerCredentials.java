// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1560172167876L),
                                                                         "20c247c8-fe34-454a-9607-8d5ff194646b",
                                                                         "1c27c6fb-0d62-4654-a572-b99bf3514249",
                                                                         "6e2e623e-db3f-4641-a83b-b36f927d8525");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1560172168569L),
                                                                         "cc0a4469-bbda-4590-b469-a4491b29c8ab",
                                                                         "7d1886ea-3f5a-4ac1-ac55-38e4e167c7fd",
                                                                         "b0ba11e7-983b-4837-8c90-3ff1334480af");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1560172168569L),
                                                                         "cc0a4469-bbda-4590-b469-a4491b29c8ab",
                                                                         "7d1886ea-3f5a-4ac1-ac55-38e4e167c7fd",
                                                                         "b0ba11e7-983b-4837-8c90-3ff1334480af");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1560172167729L),
                                                                    "8b33ff35-db9d-4983-92b7-4b4dce1b988d",
                                                                    "62d5d476-5e73-49b6-8a3b-29c1eb43b7aa",
                                                                    "97ee5c23-7efd-4f12-95a0-373fe782d56e");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1560172170064L),
                                                                         "9901bd11-0b5a-4403-bceb-59b273fbdb0c",
                                                                         "a6a6c421-b79b-4275-a9de-dee783426937",
                                                                         "e7b77867-4b29-43a6-a331-bd3f896b256c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1560172170064L),
                                                                         "9901bd11-0b5a-4403-bceb-59b273fbdb0c",
                                                                         "a6a6c421-b79b-4275-a9de-dee783426937",
                                                                         "e7b77867-4b29-43a6-a331-bd3f896b256c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1560172162608L),
                                                                         "79b07600-804d-4352-b50b-9723cdf386cf",
                                                                         "0789071c-9bd0-4a0d-bf12-ddfaf7020622",
                                                                         "ae709bc5-845f-4fbc-ab2a-9c3d1cf35d43");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
