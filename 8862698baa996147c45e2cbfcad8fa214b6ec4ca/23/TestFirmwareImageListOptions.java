// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImageListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImageListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-102),
                                                                                              Long.valueOf(123),
                                                                                              Order.getDefault(),
                                                                                              "26180dc8-917c-4feb-a5a8-8d1792dea2ec",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = firmwareimagelistoptions1.clone();
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            FirmwareImageListOptions option = new FirmwareImageListOptions().inUpdatedAts(Arrays.asList(new Date(1560172170579L),
                                                                                                        new Date(1560172167697L),
                                                                                                        new Date(1560172167260L)))
                                                                            .notInUpdatedAts(Arrays.asList(new Date(1560172172296L),
                                                                                                           new Date(1560172172001L),
                                                                                                           new Date(1560172171483L),
                                                                                                           new Date(1560172171992L),
                                                                                                           new Date(1560172167911L),
                                                                                                           new Date(1560172170080L),
                                                                                                           new Date(1560172168355L),
                                                                                                           new Date(1560172172278L)))
                                                                            .lessThanUpdatedAt(new Date(1560172163977L))
                                                                            .greaterThanUpdatedAt(new Date(1560172163172L))
                                                                            .equalToName("3d71bb29-1c90-4577-8a4e-a678acd10744")
                                                                            .notEqualToName("279af1d4-0928-4b71-817d-97014a49c96b")
                                                                            .inNames(Arrays.asList("631998ba-57cc-491f-9344-da7402b5d136",
                                                                                                   "661be08f-de9b-4902-87b6-dbc53360f989"))
                                                                            .notInNames(Arrays.asList("d1e0cf69-65a9-478b-89ea-e7b2c6f536f1",
                                                                                                      "270b66a7-62ae-4a45-8e8a-11bfda90c80e",
                                                                                                      "90d1bf33-b878-4050-826b-f4ba7a29ecee",
                                                                                                      "b7c8c623-d301-4469-806d-3c4b78bfc063",
                                                                                                      "a3cd3968-8dfd-4a72-a0a7-613c88777de4",
                                                                                                      "a7e96512-e438-4112-a503-fedaa024e78f"))
                                                                            .equalToDescription("68eb9241-f5a7-4ddb-a07a-30d2df447cfa")
                                                                            .notEqualToDescription("5d90166f-605c-4581-8363-c9c8dd79fde1")
                                                                            .inDescriptions(Arrays.asList("2fbabb48-0f05-4288-b154-304299be4a84",
                                                                                                          "67b3d159-9730-48ca-8a67-b5260318afda",
                                                                                                          "b90e35a3-a5fd-46dc-a595-6ee4e81ee391",
                                                                                                          "3c093304-0f8a-4701-9a40-27f3387f9004",
                                                                                                          "62e0feeb-21cc-4fc8-a80c-de9a91669318",
                                                                                                          "ab42cd6c-d86d-4ae1-9fe1-08fac31f418d",
                                                                                                          "847aadce-054e-4a0f-a9bc-ce7d1c1a9bdd",
                                                                                                          "8333b542-70e3-45e5-9a44-c76d172cc0ba"))
                                                                            .notInDescriptions(Arrays.asList("642260ff-b2d5-4b6c-87a2-fa72b1572b70",
                                                                                                             "628e3dfb-3cad-4b11-a7bc-2954e961287a"))
                                                                            .inCreatedAts(Arrays.asList(new Date(1560172170781L),
                                                                                                        new Date(1560172166296L),
                                                                                                        new Date(1560172165130L),
                                                                                                        new Date(1560172170497L),
                                                                                                        new Date(1560172168189L)))
                                                                            .notInCreatedAts(Arrays.asList(new Date(1560172167249L),
                                                                                                           new Date(1560172172378L),
                                                                                                           new Date(1560172170840L),
                                                                                                           new Date(1560172170936L)))
                                                                            .lessThanCreatedAt(new Date(1560172165719L))
                                                                            .greaterThanCreatedAt(new Date(1560172164612L))
                                                                            .equalToDatafileUrl("b3ccf774-8f64-4673-aaf6-b39120efcc76")
                                                                            .notEqualToDatafileUrl("c83d84a5-0c6e-48a2-97d7-f83c4387f593")
                                                                            .inDatafileUrls(Arrays.asList("1eac4070-d52b-416b-b9b3-3899dfbba0d3",
                                                                                                          "68649e2d-67ab-4724-98e7-6ea089303bca",
                                                                                                          "ef5762f9-33dd-428f-aa80-79ab1529b29f",
                                                                                                          "0db11d7a-85fb-4024-9967-31f197cad1e8",
                                                                                                          "290581e3-c5e3-477a-89bc-759d7d389515",
                                                                                                          "4e4893ec-8193-4e75-8229-253811874566",
                                                                                                          "c47d3aa2-9afe-42f0-b5c0-c9c774d10bce",
                                                                                                          "04497c25-5ccc-4329-82b1-23d32447e82d",
                                                                                                          "8fcc1a48-ed54-43ba-b808-5d84d39b916c"))
                                                                            .notInDatafileUrls(Arrays.asList("d0190bcf-d1b6-4b12-b969-06619179405d",
                                                                                                             "61b256c9-f254-48fb-88b5-682714a40e57",
                                                                                                             "ef5b90d4-f00f-4a6f-9bfc-d784dd0ee2e6",
                                                                                                             "5899344d-1eac-49d1-91ab-3f254fb21fe0",
                                                                                                             "7ff9e84d-f1d2-461f-8934-79ba340e2aa7",
                                                                                                             "c1b32dfd-875d-436b-91fb-c6b108d7c270",
                                                                                                             "4835220e-e7ec-4cc5-bd0d-738d8dd0440e",
                                                                                                             "75b45e48-ffc7-41ef-9b10-08bb8b60f687"))
                                                                            .equalToDatafileSize(Long.valueOf(-24))
                                                                            .notEqualToDatafileSize(Long.valueOf(85))
                                                                            .inDatafileSizes(Arrays.asList(Long.valueOf(-48),
                                                                                                           Long.valueOf(-22)))
                                                                            .notInDatafileSizes(Arrays.asList(Long.valueOf(61),
                                                                                                              Long.valueOf(2),
                                                                                                              Long.valueOf(-52),
                                                                                                              Long.valueOf(-41)))
                                                                            .equalToDatafileChecksum("40adfb56-82e0-46ca-a8f5-1ffe432086a6")
                                                                            .notEqualToDatafileChecksum("4135a0d6-9c36-497a-8945-0144d087ac17")
                                                                            .inDatafileChecksums(Arrays.asList("9e35e0ba-e0c7-4bf4-8c8b-73033c971516",
                                                                                                               "62072c56-733a-49d5-a740-ad807f43c4fd",
                                                                                                               "2a8c8b5e-6ad8-40f8-8ca9-2b31ca456872",
                                                                                                               "f6a120e2-2077-47c4-8831-9a523cd1308c",
                                                                                                               "e1b7a4dc-9e68-4f8f-a9b7-5e87733f558a"))
                                                                            .notInDatafileChecksums(Arrays.asList("2d6c8c82-39e5-4031-b09e-844b3b3c1f82",
                                                                                                                  "2978d4c4-c631-490f-a6f8-e036b4d299b9",
                                                                                                                  "143efc18-7729-497c-a404-f3cadf830704",
                                                                                                                  "975ad0f1-86b8-4e3a-9f77-d351d9944a8a",
                                                                                                                  "fe75d70c-2632-4423-b5f8-8fe4ca8f20a0",
                                                                                                                  "0e11fb2b-3817-43dd-8462-129ddfaf14f5"))
                                                                            .equalToId("f2d1df8b-ce72-4976-83ba-287c2a372cf4")
                                                                            .notEqualToId("9416bc10-a497-455e-a090-60550bcdfb34")
                                                                            .inIds(Arrays.asList("c65646f7-7073-4934-a5f7-bc0d9fde11cb",
                                                                                                 "8957aa61-6621-4ee2-bf80-90629b1b5c4e",
                                                                                                 "990925ae-afb3-4f55-840a-486a2b80a1b0",
                                                                                                 "d05adef0-9d85-4e03-a6e0-973ad0b88626",
                                                                                                 "4bf45f44-bd97-4323-91ef-94c0e5abcd77",
                                                                                                 "6080b6b5-dd49-4240-a60b-c16ea2f6ae09"))
                                                                            .notInIds(Arrays.asList("555776d0-96ac-4806-9f53-2d90663d63fd",
                                                                                                    "3f439e1c-c29b-41e5-98ec-9ec669f860cb",
                                                                                                    "179f84f9-3dd0-4061-b18c-542a38524a80",
                                                                                                    "eee38539-ae73-4de5-bac5-2356faefdf33",
                                                                                                    "4bd2cdeb-dd55-4fb1-b3d9-67ca7b25a0af"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172170579L), new Date(1560172167697L), new Date(1560172167260L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172172296L), new Date(1560172172001L), new Date(1560172171483L),
                                       new Date(1560172171992L), new Date(1560172167911L), new Date(1560172170080L),
                                       new Date(1560172168355L), new Date(1560172172278L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1560172163977L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1560172163172L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("3d71bb29-1c90-4577-8a4e-a678acd10744",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("279af1d4-0928-4b71-817d-97014a49c96b",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("631998ba-57cc-491f-9344-da7402b5d136", "661be08f-de9b-4902-87b6-dbc53360f989"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("d1e0cf69-65a9-478b-89ea-e7b2c6f536f1", "270b66a7-62ae-4a45-8e8a-11bfda90c80e",
                                       "90d1bf33-b878-4050-826b-f4ba7a29ecee", "b7c8c623-d301-4469-806d-3c4b78bfc063",
                                       "a3cd3968-8dfd-4a72-a0a7-613c88777de4", "a7e96512-e438-4112-a503-fedaa024e78f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("68eb9241-f5a7-4ddb-a07a-30d2df447cfa",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("5d90166f-605c-4581-8363-c9c8dd79fde1",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("2fbabb48-0f05-4288-b154-304299be4a84", "67b3d159-9730-48ca-8a67-b5260318afda",
                                       "b90e35a3-a5fd-46dc-a595-6ee4e81ee391", "3c093304-0f8a-4701-9a40-27f3387f9004",
                                       "62e0feeb-21cc-4fc8-a80c-de9a91669318", "ab42cd6c-d86d-4ae1-9fe1-08fac31f418d",
                                       "847aadce-054e-4a0f-a9bc-ce7d1c1a9bdd", "8333b542-70e3-45e5-9a44-c76d172cc0ba"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("642260ff-b2d5-4b6c-87a2-fa72b1572b70", "628e3dfb-3cad-4b11-a7bc-2954e961287a"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172170781L), new Date(1560172166296L), new Date(1560172165130L),
                                       new Date(1560172170497L), new Date(1560172168189L)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1560172167249L), new Date(1560172172378L), new Date(1560172170840L),
                                       new Date(1560172170936L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1560172165719L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1560172164612L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("b3ccf774-8f64-4673-aaf6-b39120efcc76",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals("c83d84a5-0c6e-48a2-97d7-f83c4387f593",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("1eac4070-d52b-416b-b9b3-3899dfbba0d3", "68649e2d-67ab-4724-98e7-6ea089303bca",
                                       "ef5762f9-33dd-428f-aa80-79ab1529b29f", "0db11d7a-85fb-4024-9967-31f197cad1e8",
                                       "290581e3-c5e3-477a-89bc-759d7d389515", "4e4893ec-8193-4e75-8229-253811874566",
                                       "c47d3aa2-9afe-42f0-b5c0-c9c774d10bce", "04497c25-5ccc-4329-82b1-23d32447e82d",
                                       "8fcc1a48-ed54-43ba-b808-5d84d39b916c"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileUrlFilters());
            assertEquals(Arrays.asList("d0190bcf-d1b6-4b12-b969-06619179405d", "61b256c9-f254-48fb-88b5-682714a40e57",
                                       "ef5b90d4-f00f-4a6f-9bfc-d784dd0ee2e6", "5899344d-1eac-49d1-91ab-3f254fb21fe0",
                                       "7ff9e84d-f1d2-461f-8934-79ba340e2aa7", "c1b32dfd-875d-436b-91fb-c6b108d7c270",
                                       "4835220e-e7ec-4cc5-bd0d-738d8dd0440e", "75b45e48-ffc7-41ef-9b10-08bb8b60f687"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(-24),
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Long.valueOf(85),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                       Long.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(-48), Long.valueOf(-22)),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE, FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileSizeFilters());
            assertEquals(Arrays.asList(Long.valueOf(61), Long.valueOf(2), Long.valueOf(-52), Long.valueOf(-41)),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("40adfb56-82e0-46ca-a8f5-1ffe432086a6",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals("4135a0d6-9c36-497a-8945-0144d087ac17",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM, FilterOperator.IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("9e35e0ba-e0c7-4bf4-8c8b-73033c971516", "62072c56-733a-49d5-a740-ad807f43c4fd",
                                       "2a8c8b5e-6ad8-40f8-8ca9-2b31ca456872", "f6a120e2-2077-47c4-8831-9a523cd1308c",
                                       "e1b7a4dc-9e68-4f8f-a9b7-5e87733f558a"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                 List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                        FilterOperator.NOT_IN));
            assertNotNull(option.getDatafileChecksumFilters());
            assertEquals(Arrays.asList("2d6c8c82-39e5-4031-b09e-844b3b3c1f82", "2978d4c4-c631-490f-a6f8-e036b4d299b9",
                                       "143efc18-7729-497c-a404-f3cadf830704", "975ad0f1-86b8-4e3a-9f77-d351d9944a8a",
                                       "fe75d70c-2632-4423-b5f8-8fe4ca8f20a0", "0e11fb2b-3817-43dd-8462-129ddfaf14f5"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                    List.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("f2d1df8b-ce72-4976-83ba-287c2a372cf4",
                         ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("9416bc10-a497-455e-a090-60550bcdfb34",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("c65646f7-7073-4934-a5f7-bc0d9fde11cb", "8957aa61-6621-4ee2-bf80-90629b1b5c4e",
                                       "990925ae-afb3-4f55-840a-486a2b80a1b0", "d05adef0-9d85-4e03-a6e0-973ad0b88626",
                                       "4bf45f44-bd97-4323-91ef-94c0e5abcd77", "6080b6b5-dd49-4240-a60b-c16ea2f6ae09"),
                         ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(FirmwareImageListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("555776d0-96ac-4806-9f53-2d90663d63fd", "3f439e1c-c29b-41e5-98ec-9ec669f860cb",
                                       "179f84f9-3dd0-4061-b18c-542a38524a80", "eee38539-ae73-4de5-bac5-2356faefdf33",
                                       "4bd2cdeb-dd55-4fb1-b3d9-67ca7b25a0af"),
                         ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(25),
                                                                                              Long.valueOf(66),
                                                                                              Order.getDefault(),
                                                                                              "0470240d-6f6b-4e9c-ac05-4740b6de02d0",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(25),
                                                                                              Long.valueOf(66),
                                                                                              Order.getDefault(),
                                                                                              "0470240d-6f6b-4e9c-ac05-4740b6de02d0",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2.hashCode(), firmwareimagelistoptions1.hashCode());
            int hashCode = firmwareimagelistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimagelistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImageListOptions firmwareimagelistoptions1 = new FirmwareImageListOptions(Integer.valueOf(-2),
                                                                                              Long.valueOf(-97),
                                                                                              Order.getDefault(),
                                                                                              "cbd8bedb-c9ea-4916-8785-9682182e1644",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions2 = new FirmwareImageListOptions(Integer.valueOf(-2),
                                                                                              Long.valueOf(-97),
                                                                                              Order.getDefault(),
                                                                                              "cbd8bedb-c9ea-4916-8785-9682182e1644",
                                                                                              null, null);
            FirmwareImageListOptions firmwareimagelistoptions3 = new FirmwareImageListOptions(Integer.valueOf(-52),
                                                                                              Long.valueOf(51),
                                                                                              Order.getDefault(),
                                                                                              "302ce179-beb1-4029-856c-e6567058e83e",
                                                                                              null, null);
            assertNotNull(firmwareimagelistoptions1);
            assertNotNull(firmwareimagelistoptions2);
            assertNotNull(firmwareimagelistoptions3);
            assertNotSame(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertNotSame(firmwareimagelistoptions3, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions2, firmwareimagelistoptions1);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions2);
            assertEquals(firmwareimagelistoptions1, firmwareimagelistoptions1);
            assertFalse(firmwareimagelistoptions1.equals(null));
            assertNotEquals(firmwareimagelistoptions3, firmwareimagelistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
