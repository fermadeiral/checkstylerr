// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1560172163194L),
                                                             "2994904a-b98e-41c1-bb85-ec93bfcfbd5a", 83,
                                                             "e3c70822-abe8-464c-94f4-b26887ba8b9f",
                                                             "0cf0f437-a714-4f1c-8ae3-de36ca6f0bb2",
                                                             "f1c11da5-bdef-4561-a134-320bfe59b48f",
                                                             "991c1be5-e2b1-4ec5-91f9-43c42d3c25c5",
                                                             new Date(1560172161566L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1560172166006L),
                                                             "6f694cf4-5152-422d-b2f0-7b00020f6c6a", -18,
                                                             "5faa16c4-2e3f-4949-9647-cacc34f3bd4c",
                                                             "dc561fc9-6ab4-4d66-bda4-c5f4d0da90f9",
                                                             "7e2e7095-f22a-4d5d-b3f4-1d2a0c512c71",
                                                             "ef8c13e8-0d1f-4526-a3b5-b17535ab38b4",
                                                             new Date(1560172168435L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1560172166006L),
                                                             "6f694cf4-5152-422d-b2f0-7b00020f6c6a", -18,
                                                             "5faa16c4-2e3f-4949-9647-cacc34f3bd4c",
                                                             "dc561fc9-6ab4-4d66-bda4-c5f4d0da90f9",
                                                             "7e2e7095-f22a-4d5d-b3f4-1d2a0c512c71",
                                                             "ef8c13e8-0d1f-4526-a3b5-b17535ab38b4",
                                                             new Date(1560172168435L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1560172162369L),
                                                        "83829e36-f37d-44b8-b5d6-7698c8ffe472", -75,
                                                        "529db66e-bec2-4261-9b64-c05cefe73270",
                                                        "7b305e1c-7e08-479e-8e9d-69efc869c49c",
                                                        "8c2f6cd3-293b-4590-a43e-c782659fe74a",
                                                        "4cf3c9ab-a7b6-4ec7-ba4a-a11d8fd32789",
                                                        new Date(1560172166932L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1560172162768L),
                                                               "7a253e92-0dc7-414d-879e-3523148ecfc5", 19,
                                                               "99c8226c-890d-4a84-9f59-157ae0bd8e1c",
                                                               "9f3651be-7e9f-4c2f-b206-26d39bb1552870a4c7fe-63ea-4881-bce6-37ff87bb331d6c0f8bcf-d25c-4931-a002-0254ed64ef74c41e759d-7a05-4a2e-a3e0-08aa2615c4670898da53-e39c-4bad-82fd-066199d17b17660f07d8-2fdd-4aa5-9c92-24372b754cfa3d47e76a-38d6-40c0-8289-f02e07755e78415cdbb7-9bf6-446e-8593-6ef849c63d9f5433f0f1-1b46-4f03-986d-b999b9b7fef677d1ff51-0571-4238-a62f-185a0ac40c2643a4bc12-ae6e-45d1-8188-70b53302e4b9077091d6-5056-430d-874b-56696aeeefa891522c0d-1367-477e-9f2b-ff4ea025c7ef3f540af2-37a4-42e7-9e1a-c27891cf08dd3ba77c92-1e6d-493b-a010-8511b63e62ef899e7fa1-6873-42b5-a579-fd7810f40e383b2b2c4e-06b6-49c0-bd7a-42e8fc2d027c3af51f38-4ad6-4174-b38a-243f7e15add2217bc20f-bd4f-40c8-bbd3-f0b7ed6b23432d1c94ba-0bd4-41a0-9c48-7d21ae174f944dd24e1a-45d4-4718-840a-f5121cd4f4d5d85ecb2c-1527-4144-8ef3-2b7f5938aab8885b135e-95c1-4a0c-adf9-5005ac5eea2873a02032-3d10-45c3-8ece-6833c3195295814fdc47-b212-4de9-9c1f-b8dfdb66c8a9ebf1c93e-1c01-4786-8c91-0f114546a8a38bbeb6d9-21c7-460a-9eb7-14472d98801ec2ccf9ed-c32e-4d5f-bd73-1434e68a6fb6d26fd919-2fc4-41e2-99c4-51cfa5d06092b5e43765-16b3-4e14-b18a-96ff32f59f497c16a0ca-e053-46de-847b-3d9b4e9c560ad2ff4995-769f-4715-a70c-f53a99c9b36b8b0af6fb-26e2-4ea5-b9dc-a04bf0fbc86ec37abedc-0517-4a25-bfae-9e1412feb85d0a0d52fd-fe4a-4b3b-a944-ac5ed0a3daf3e98355ef-a323-4a29-ae19-424cfaab814944d03cd5-a227-457a-9d01-ddd5bb6b31c7a5631c4e-8ca3-4769-8068-f63de34c7233922be449-b60e-4d3a-a62b-2d5e2bfeff3a5f78fe5f-6e47-4c2e-bcd8-8d4b5b9628467cc28dde-a23a-47ae-988e-737b4b88ce799657c4d3-eeaa-40cd-9d7c-293f1f57e09fdcacdcd7-06f6-4b99-82b1-c3c0b9825563819b7bec-93d5-467d-85a5-44a2221d87d7acc8fff0-8a14-47dd-9807-99db224b078335458964-f204-4b57-85bf-d399d548044def2a471c-a6a0-465f-90db-5beb6fbf3d3910523faa-487a-4c15-95bc-f3728e54803913802c0d-aad3-466d-9776-9930975c756f872855fc-2691-45f8-aac3-b515ef1f0285c3d49fde-140f-4141-a350-5bedebc8c2c43d45f387-a1ac-445b-8f2b-f1a4c4652424181f7f2d-e008-4210-8a2e-6aaeb07299abf129833c-9c44-4758-86c4-e394dc6cef7e7de500cd-75b2-467f-9d96-1eaad9ec08c50ce16898-d6d1-440c-b9df-74c26e824bf2",
                                                               "037ab87f-e5fd-4c8b-9135-8175935e206c",
                                                               "20e1d466-6837-420f-92fa-ff12bb8a1f2c64a50306-7178-4b95-8d4f-087a8a8b035e17962e52-b0db-44fb-b5e5-ca478ea86a2d9e001f15-be36-49e8-9fb7-d78b8fcb9a88",
                                                               new Date(1560172163499L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1560172161901L),
                                                             "f8bba4e8-fedd-4512-919f-e2686ea4a6e4", 21,
                                                             "d2e920ab-ac74-487a-84da-e5d2164cc2b0",
                                                             "c621286f-acfc-402e-a0fc-d4c5990eb836",
                                                             "640a5414-3a5c-42cd-aaa7-a94b4870c4f7",
                                                             "53329d04-4da1-47db-8be4-97cf032a8974",
                                                             new Date(1560172162923L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1560172161901L),
                                                             "f8bba4e8-fedd-4512-919f-e2686ea4a6e4", 21,
                                                             "d2e920ab-ac74-487a-84da-e5d2164cc2b0",
                                                             "c621286f-acfc-402e-a0fc-d4c5990eb836",
                                                             "640a5414-3a5c-42cd-aaa7-a94b4870c4f7",
                                                             "53329d04-4da1-47db-8be4-97cf032a8974",
                                                             new Date(1560172162923L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1560172166518L),
                                                             "1446f63e-b90d-472e-bdad-cece0a7599ff", -72,
                                                             "760d895f-2473-4447-8360-1469b0960011",
                                                             "3db6b4d6-d56d-4c23-aa57-29395aa0cb5a",
                                                             "5f5987e8-0b79-49f8-ade5-e8baa3ef99ad",
                                                             "2692b06c-7d57-4546-a648-0c2495eff418",
                                                             new Date(1560172164969L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
