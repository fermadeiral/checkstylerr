// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561572709361L),
                                                          "96b91676-4807-41d8-b24d-f84ff655b041", true,
                                                          "b8f8d892-24dc-45f8-bf5c-3273cd2f5464");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561572700175L),
                                                          "54abe4bf-5baf-4aa7-b08c-717a819e8ad5", false,
                                                          "13476543-7214-4354-8fb9-9e65ece374fa");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561572700175L),
                                                          "54abe4bf-5baf-4aa7-b08c-717a819e8ad5", false,
                                                          "13476543-7214-4354-8fb9-9e65ece374fa");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561572701169L), "34d28e94-4654-4a4d-bebc-ce9beda2b0cf",
                                                     false, "6dc663d8-2428-4f65-b106-dd5bc61e2bd9");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561572707960L),
                                                          "c25d6b93-15ee-4549-9b6d-7a85ca121a57", false,
                                                          "44b78316-92c8-433f-ae10-f5d2fafa9a17");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561572707960L),
                                                          "c25d6b93-15ee-4549-9b6d-7a85ca121a57", false,
                                                          "44b78316-92c8-433f-ae10-f5d2fafa9a17");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561572707526L),
                                                          "fe3c7fc7-7d79-41a4-b2b4-e47b5b73e815", false,
                                                          "ba01d176-ea67-4771-9b4c-185c7aafbdd7");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
