// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559835560355L),
                                                          "43e88113-79c9-441e-8516-2ca3ff681626", true,
                                                          "4fb6eef6-95fe-4910-9c9f-11c61efbf495");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559835555044L),
                                                          "979a45eb-a4f5-41dd-9d2e-4f32f75b0cf1", false,
                                                          "5c41c046-522a-4790-b3b5-b34bed8a3091");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559835555044L),
                                                          "979a45eb-a4f5-41dd-9d2e-4f32f75b0cf1", false,
                                                          "5c41c046-522a-4790-b3b5-b34bed8a3091");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559835557693L), "43911913-e2c5-46c0-aa12-6e72e963f4b2",
                                                     true, "0264e99f-fe66-4cf1-9725-4a9a64592477");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559835555373L),
                                                          "567e3eed-f470-4215-babd-86d7c9d861a2", false,
                                                          "857f7d16-5d7a-4d74-94f8-00f6733096cb");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559835555373L),
                                                          "567e3eed-f470-4215-babd-86d7c9d861a2", false,
                                                          "857f7d16-5d7a-4d74-94f8-00f6733096cb");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559835551316L),
                                                          "6be1ff6b-5811-41b4-ae4d-b30ecad78df5", false,
                                                          "b7bf52f7-1520-4cc1-b31a-a015c7f9dc38");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
