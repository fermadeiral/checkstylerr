// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        new Date(1559835559914L),
                                                                                        "9f1113e0-bc20-4946-a2c1-910c7ca25670",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        new Date(1559835559432L),
                                                                                        "eee1d7ba-ac6c-475a-b321-bfc1d0b96ae4",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        new Date(1559835559432L),
                                                                                        "eee1d7ba-ac6c-475a-b321-bfc1d0b96ae4",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                   new Date(1559835552045L),
                                                                                   "ef4af207-ce71-4108-9924-84e27f0dc1c3",
                                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("8\u001aN8<8\u0014%Gâ ­888Oè˜”8U\u000f88888C88B\u001bê½?I[\u0018WéŽ?\u001cç›™êº‹é··M8&\f\u0005)èœ½88TGï¾Ž8A8$$Bâž -8ç?Œ8\u0002\u0002.R",
                                                                                          new Date(1559835556698L),
                                                                                          "68dd4dd9-456d-45d4-8c7e-21d90851cc58",
                                                                                          "8\u001aN8<8\u0014%Gâ ­888Oè˜”8U\u000f88888C88B\u001bê½?I[\u0018WéŽ?\u001cç›™êº‹é··M8&\f\u0005)èœ½88TGï¾Ž8A8$$Bâž -8ç?Œ8\u0002\u0002.R",
                                                                                          "8\u001aN8<8\u0014%Gâ ­888Oè˜”8U\u000f88888C88B\u001bê½?I[\u0018WéŽ?\u001cç›™êº‹é··M8&\f\u0005)èœ½88TGï¾Ž8A8$$Bâž -8ç?Œ8\u0002\u0002.R");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        new Date(1559835552478L),
                                                                                        "9b96a229-26c2-4e95-a905-28f33db4a095",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        new Date(1559835552478L),
                                                                                        "9b96a229-26c2-4e95-a905-28f33db4a095",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        new Date(1559835558557L),
                                                                                        "0ebb5b23-26cf-499a-a70a-6c2f6e73258a",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                        "a2460a11b07ab6ba3b25a51e92b72dc7");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
