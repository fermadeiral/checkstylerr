// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559835554578L),
                                                                         "091fdf37-fb28-45f1-a5ca-ed48d7173dac",
                                                                         "01c7bbb3-df3a-48b2-b9b8-b15f34e48cb1",
                                                                         "5b62968e-48d3-4625-9a14-82b8c07daf14");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559835557211L),
                                                                         "96b9cc39-ed30-4e3f-a207-22bc1c3a9c1b",
                                                                         "32cb1dda-d524-445b-844c-1877c0399935",
                                                                         "fa0b729b-ff8c-4913-bf13-4200318edcc6");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559835557211L),
                                                                         "96b9cc39-ed30-4e3f-a207-22bc1c3a9c1b",
                                                                         "32cb1dda-d524-445b-844c-1877c0399935",
                                                                         "fa0b729b-ff8c-4913-bf13-4200318edcc6");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559835552436L),
                                                                    "75ab87ee-6cbf-4c3f-89d0-6b0a27395b45",
                                                                    "4cca531e-c865-4edb-988b-c5bcf2a8acc7",
                                                                    "4e2ff9f6-053c-4010-84c1-d515878b3caa");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559835551692L),
                                                                         "f08c4cd6-e252-4bd4-92f1-a8a13cd2b363",
                                                                         "66200ffb-2878-4ef9-bb0f-de07df6a0f90",
                                                                         "48d6fcc0-811c-4261-a32d-9466c81fd71c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559835551692L),
                                                                         "f08c4cd6-e252-4bd4-92f1-a8a13cd2b363",
                                                                         "66200ffb-2878-4ef9-bb0f-de07df6a0f90",
                                                                         "48d6fcc0-811c-4261-a32d-9466c81fd71c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559835560379L),
                                                                         "90f4af89-8317-4e5e-bfdd-e0d9ad8a964f",
                                                                         "ba7e0963-6b08-4fa2-9853-b8e3a6235c50",
                                                                         "de6ed005-c172-411c-a149-4d6a4f86c42e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
