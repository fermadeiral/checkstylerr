// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           new Date(1559835555944L),
                                                                                           "be30b.0f490@12065.me",
                                                                                           new Date(1559835558210L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           null,
                                                                                           new Date(1559835559388L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           new Date(1559835557976L),
                                                                                           "0997d.96ca3@0f5fc.me",
                                                                                           new Date(1559835554823L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           null,
                                                                                           new Date(1559835555197L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           new Date(1559835557976L),
                                                                                           "0997d.96ca3@0f5fc.me",
                                                                                           new Date(1559835554823L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           null,
                                                                                           new Date(1559835555197L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                      new Date(1559835559137L),
                                                                                      "db9e1.ea131@aa514.me",
                                                                                      new Date(1559835552076L),
                                                                                      "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                      null, new Date(1559835558096L),
                                                                                      "a2460a11b07ab6ba3b25a51e92b72dc7");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559835553898L),
                                                                                             null,
                                                                                             new Date(1559835556657L),
                                                                                             "8\u001aN8<8\u0014%Gâ ­888Oè˜”8U\u000f88888C88B\u001bê½?I[\u0018WéŽ?\u001cç›™êº‹é··M8&\f\u0005)èœ½88TGï¾Ž8A8$$Bâž -8ç?Œ8\u0002\u0002.R",
                                                                                             null,
                                                                                             new Date(1559835560706L),
                                                                                             "8\u001aN8<8\u0014%Gâ ­888Oè˜”8U\u000f88888C88B\u001bê½?I[\u0018WéŽ?\u001cç›™êº‹é··M8&\f\u0005)èœ½88TGï¾Ž8A8$$Bâž -8ç?Œ8\u0002\u0002.R");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           new Date(1559835552314L),
                                                                                           "62d36.0dd7e@30037.fr",
                                                                                           new Date(1559835559785L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           null,
                                                                                           new Date(1559835552248L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           new Date(1559835552314L),
                                                                                           "62d36.0dd7e@30037.fr",
                                                                                           new Date(1559835559785L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           null,
                                                                                           new Date(1559835552248L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           new Date(1559835554389L),
                                                                                           "4a180.6c3b2@8b265.fr",
                                                                                           new Date(1559835558869L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                                           null,
                                                                                           new Date(1559835556648L),
                                                                                           "a2460a11b07ab6ba3b25a51e92b72dc7");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
