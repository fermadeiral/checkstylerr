// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "7e2ae6a7-7f3b-4d1f-9fa8-b85903e3d0bb",
                                  new Date(1566811767435L), 105, null, "c45e3.7f257@d1a42.fr", true,
                                  "d72a66b0-399f-4625-a0d3-656660fc2a86", null, "0f0fddcbb77d22b2ab801eb65dfbca42",
                                  true, true, false, 2, null, null, "5a540ecb-8ee5-4bc0-b6a0-7a26e4235e5a", -13,
                                  "8dd4ab3d-ad0e-4318-a4dd-562b59d56173", UserStatus.getDefault(), null,
                                  new Date(1566811763339L), "=F_7");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "fa408856-3768-4095-af33-3ec2f8b848f4",
                                  new Date(1566811761311L), -41, null, "1fbda.272ea@4559d.me", false,
                                  "9c841624-16b9-4912-992c-e1da40b7ea6e", null, "0f0fddcbb77d22b2ab801eb65dfbca42",
                                  false, false, true, -76, null, null, "bc40ebea-aad0-429f-9407-2e27df489cf9", 56,
                                  "b39f456d-62bb-4361-bbf2-540ec575922d", UserStatus.getDefault(), null,
                                  new Date(1566811761540L), "=F_7");
            User user2 = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "fa408856-3768-4095-af33-3ec2f8b848f4",
                                  new Date(1566811761311L), -41, null, "1fbda.272ea@4559d.me", false,
                                  "9c841624-16b9-4912-992c-e1da40b7ea6e", null, "0f0fddcbb77d22b2ab801eb65dfbca42",
                                  false, false, true, -76, null, null, "bc40ebea-aad0-429f-9407-2e27df489cf9", 56,
                                  "b39f456d-62bb-4361-bbf2-540ec575922d", UserStatus.getDefault(), null,
                                  new Date(1566811761540L), "=F_7");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "a8ce26a3-4f6d-4f29-a391-d5834a22c3ca",
                             new Date(1566811758542L), -76, null, "bcd28.34216@3e9e9.fr", true,
                             "5bbaa7af-bbe4-4a48-add1-ac2f8a86751c", null, "0f0fddcbb77d22b2ab801eb65dfbca42", false,
                             false, false, -85, null, null, "0dd39da4-c747-4a73-b0f8-76ed9a68f033", 11,
                             "b8fdcb5a-9f76-4a96-af0e-a5130d1dbed8", UserStatus.getDefault(), null,
                             new Date(1566811759061L), "=F_7");
        assertTrue(user.isValid());
        User userInvalid = new User("*é¦ \u0013+\u00123På?¦3äƒ¹\u0017M3Q3â–¡(\t3\u0012:å¤¬\u001e^3Dé§›ë¢?<å§¾\u000fÍ¼åƒ»3333?3;Iæ·‘3[æ‡¯Få“”Sê‰ˆ\u0012\u00153ßŒ!ã²¹\u00133\u00163å©±3å”µé‘¢",
                                    null, "8427019f-e5bf-467e-8154-1b18b7233343", new Date(1566811759117L), -105, null,
                                    null, true,
                                    "044acb48-dae3-4644-8c82-4f417157fa85167a873e-8485-484b-a892-26a932fbe38dd7108389-1c50-4a4a-899b-2ccc641c8f93",
                                    null,
                                    "*é¦ \u0013+\u00123På?¦3äƒ¹\u0017M3Q3â–¡(\t3\u0012:å¤¬\u001e^3Dé§›ë¢?<å§¾\u000fÍ¼åƒ»3333?3;Iæ·‘3[æ‡¯Få“”Sê‰ˆ\u0012\u00153ßŒ!ã²¹\u00133\u00163å©±3å”µé‘¢",
                                    false, true, false, 85, null, null, "5e4d9f54-98f3-4868-985c-5435165eb4ad", -114,
                                    "21b2ca19-cd6c-4905-85ec-be4b9c69bc3e1e2d627e-958e-4b19-973e-e3143ea4ac3bb8a3d02d-0d78-4e6f-aea2-99d8081f22ea",
                                    UserStatus.getDefault(), null, new Date(1566811758787L),
                                    "Q;4D?\u000f\u00048??@:NEXë¨¡<E[I\u0014;@Sæ…©<\u0010[î±™BXD\\\\ç©‹(Eë¶›H.9PV;Z8@\u000eæ»½A:\u001e]ã™š;A\u0013?á»?\u001fBS\b");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "6c7f51cc-cad2-4e2f-b91a-0bd046a54c58",
                                  new Date(1566811758217L), 88, null, "7a277.8fa58@1749e.me", false,
                                  "91c45c64-fbd3-4847-964e-c5bbfa1caa82", null, "0f0fddcbb77d22b2ab801eb65dfbca42",
                                  false, true, false, 10, null, null, "24f84587-128c-4328-b6a8-968b5e038120", 85,
                                  "4f47fd60-4325-4a1e-9b4e-c5651ab0becb", UserStatus.getDefault(), null,
                                  new Date(1566811758107L), "=F_7");
            User user2 = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "6c7f51cc-cad2-4e2f-b91a-0bd046a54c58",
                                  new Date(1566811758217L), 88, null, "7a277.8fa58@1749e.me", false,
                                  "91c45c64-fbd3-4847-964e-c5bbfa1caa82", null, "0f0fddcbb77d22b2ab801eb65dfbca42",
                                  false, true, false, 10, null, null, "24f84587-128c-4328-b6a8-968b5e038120", 85,
                                  "4f47fd60-4325-4a1e-9b4e-c5651ab0becb", UserStatus.getDefault(), null,
                                  new Date(1566811758107L), "=F_7");
            User user3 = new User("0f0fddcbb77d22b2ab801eb65dfbca42", null, "74229ba5-e745-4701-b99d-cec52d9a21c8",
                                  new Date(1566811767011L), -91, null, "a8c09.f3230@5ba82.me", false,
                                  "fa4d11fd-c3d3-4432-a6f5-643e796b56d0", null, "0f0fddcbb77d22b2ab801eb65dfbca42",
                                  false, true, false, -62, null, null, "52631a14-ea0d-41e1-aca2-6fbbf98d967e", 47,
                                  "f5bc6a95-0b75-4e0c-a998-7a398703542f", UserStatus.getDefault(), null,
                                  new Date(1566811762580L), "=F_7");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
