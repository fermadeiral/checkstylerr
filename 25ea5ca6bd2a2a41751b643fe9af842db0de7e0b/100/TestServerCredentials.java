// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566811764387L),
                                                                         "af9d49b3-ecb5-4623-b1a1-7caeacdc0e87",
                                                                         "63c3d1d2-94e1-47a9-b917-e3b3f51eb89b",
                                                                         "69bc823a-568d-477a-aaf6-b8a169db58b8");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566811761497L),
                                                                         "255fef70-c61e-4378-9b27-fd57458918dd",
                                                                         "6b7ff6bc-ab7b-4ad5-9c7a-562ae9d294b2",
                                                                         "254c75fb-7f43-472d-8b3f-86e3c803074c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1566811761497L),
                                                                         "255fef70-c61e-4378-9b27-fd57458918dd",
                                                                         "6b7ff6bc-ab7b-4ad5-9c7a-562ae9d294b2",
                                                                         "254c75fb-7f43-472d-8b3f-86e3c803074c");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1566811764580L),
                                                                    "a8d1fbdc-e4eb-4bf5-bb67-5cbecaf82e32",
                                                                    "08ef9a2e-e364-4823-aa62-b8e8cb06e914",
                                                                    "06344f24-2bb5-4676-8d13-9e2b56fca1ce");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1566811759787L),
                                                                         "09e00d9b-6d8a-41a8-89f7-75059db07596",
                                                                         "7aafda58-62d2-4540-920c-66e1f9e7947d",
                                                                         "20fda8cd-29d8-43d3-8aeb-fec4dc8dead4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1566811759787L),
                                                                         "09e00d9b-6d8a-41a8-89f7-75059db07596",
                                                                         "7aafda58-62d2-4540-920c-66e1f9e7947d",
                                                                         "20fda8cd-29d8-43d3-8aeb-fec4dc8dead4");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1566811759983L),
                                                                         "147b165d-8a04-426b-95c2-529eb65f4eae",
                                                                         "e602d1ef-1774-482c-bdbe-42e9f1d7ba9b",
                                                                         "072affec-0a8f-4852-bdbb-39516f768256");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
