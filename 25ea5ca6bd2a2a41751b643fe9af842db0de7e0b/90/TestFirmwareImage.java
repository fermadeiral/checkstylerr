// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1566811766729L),
                                                             "687843b3-8640-45dd-ae75-a1666fb6a806", -61,
                                                             "461dc855-9bb1-43da-8a9c-6f36e86047fc",
                                                             "a06e6a1e-7c0e-4d41-b546-160990c6d19b",
                                                             "f0177c35-f771-4d9a-8980-f5120ed05d32",
                                                             "7805ce11-d72c-450c-ac57-1332413045ee",
                                                             new Date(1566811765234L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1566811765181L),
                                                             "7d538581-408b-478a-8985-4c90c4350b76", -37,
                                                             "c900590c-aa5c-4060-a37b-f38bb937bec2",
                                                             "3dec12cf-3f13-4d6c-99e9-692fac2bc139",
                                                             "888ee760-81c8-427e-9909-f8f2e8ff69d7",
                                                             "20fec32b-3a38-4551-84e8-df01b7b49d74",
                                                             new Date(1566811759065L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1566811765181L),
                                                             "7d538581-408b-478a-8985-4c90c4350b76", -37,
                                                             "c900590c-aa5c-4060-a37b-f38bb937bec2",
                                                             "3dec12cf-3f13-4d6c-99e9-692fac2bc139",
                                                             "888ee760-81c8-427e-9909-f8f2e8ff69d7",
                                                             "20fec32b-3a38-4551-84e8-df01b7b49d74",
                                                             new Date(1566811759065L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1566811767020L),
                                                        "a126f5da-d2db-407b-b675-3bc7d21b653c", 110,
                                                        "14084b10-c808-42b7-8a97-384729d4d39e",
                                                        "7e82b0f7-89e1-487b-8bba-aec99f4823bf",
                                                        "1122606b-e344-4754-9bcf-80b5db37f1e0",
                                                        "33c97f30-07cc-4935-8170-1ac075adca8f",
                                                        new Date(1566811762085L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1566811763584L),
                                                               "0ae213a0-f073-4703-8480-38eaf794e193", -122,
                                                               "fafdf85f-be20-4cfe-a443-a3b05b78d80f",
                                                               "f7227527-609e-4e49-8e5d-ea4fe7926ce3926fe771-a129-4583-9270-f4942b1f96b2769d539b-8210-4b6b-b405-d82eacea5a99f046ab90-a6eb-4ed2-ad75-6d521a9e4e08936af5b8-0bfa-442f-b84c-23034684d3e989a2bf95-d973-4bfe-8e97-cffaf519eedfe7ab275e-7f3a-471f-bb0f-8af5873b2330cbec4ae2-04e8-43b6-8ba0-13253ea7d9cf7fa57bee-0d4b-411b-b237-e7084089f5e3e197623c-3665-445a-adc0-f34600d80c5703d94882-abd7-4579-9877-37d6f1554ce7354312c8-c9da-492a-a482-540ff4c623f6417aabe0-ad11-4350-b44a-e2c3bfca0e030ddf2630-aee5-424c-99fa-e555fe4c7a2e90b35d9e-d126-4508-9d3e-146a366ef2e5031059c9-bb4b-4c3e-a3f0-6509467e2dd7d3a99f3f-74c7-4985-8895-d5ebf9a989f892dc05fb-e5ae-46bc-9b8a-7ccb8bceacb4286a1477-2533-4233-b4c0-16b9fa21761423b6d818-0045-41c2-842d-584df94573853607766c-d47e-40bb-b271-7d65345aa6174c2cfc0e-5448-4526-9d2b-499060aafecc0020e7b5-1d5d-4523-9494-6965bfcac7d970d9bb5a-d1ab-444e-bbec-e862b54ff627044b2228-bb4e-4c0b-bcea-712ab261ba219759e352-1b95-4e6b-b579-32d5dde8db6b844cd89a-6473-4d46-9243-baf05094377c7b62e4e3-c4a2-44af-b599-dd16a2fd36f2c45ea168-ce8d-4042-9f1f-68076ae6bb461bca7f78-712a-4895-9398-4746df206e0882b90a65-8d8b-461e-b5d5-7ea0a05643353df2f9ef-56ad-4b00-9f0f-88620b0a841d0dbe04d4-ee9a-42b8-98df-a5ce1fe249a2c496acbf-0db3-4690-9da8-ad3f52cb3d8ce904503c-db84-4f23-abc8-0e38bd1a18ff39804e0b-94f7-4925-9665-5dd86062019f90baebc2-aada-46ac-98b4-db95f81c0350d568e963-6ac3-4ca3-947b-9cc36b5afd96c4ea08d9-f89b-42ec-bb73-6e3b94ce975a39dedf55-fd28-439e-8dd5-13c3924060b661713767-eb1c-4b85-9b8c-cc95716709309e8f84ca-74d7-4b9b-87cd-c8cadec213f90862a06a-4a83-4038-a177-3c68b71e021d70fbfc29-d92c-4ff8-a3cd-d915c49d894ba9418af8-7a4d-4e1a-ae0d-8ac874141d504bfa9802-ca72-4817-a602-4c5bbb3d1f03ca43ce6c-6724-4131-91d8-35e6785174d9a1c042c3-bfa3-40bb-81a8-ec9444d57c1ff3a659da-fe9e-485f-9c6e-c7f256d32f71be469e03-432c-4982-840a-0993a58febfeeab3de7f-182b-4c7a-9e40-241d31bbcb2c5a0b6d40-3e18-4312-a2ae-d66f00c8f3f20a707169-5b97-484f-936a-6a53f4a3a6a96d3b91fc-3718-4671-88da-46960611afdebdaea821-c3bf-4e42-b03d-6a9f050f9b8934308d70-a72b-4dc9-82ab-bfd76b7151cd",
                                                               "8bed82df-2090-4923-864e-df8d20f78706",
                                                               "100848d2-976c-49e1-b8ba-100a3ea3c57d538dfe13-141d-4a6b-91aa-f704807289827ee965f7-93c5-4d44-8f8a-d1d5cd40a20d17ba7f59-ba42-4712-bcc0-bf47dc7a7bfe",
                                                               new Date(1566811763543L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1566811761553L),
                                                             "7a051e09-4729-4567-8042-6db003822356", 24,
                                                             "8407febf-580a-4247-96b4-bab8ceee29fa",
                                                             "210a1058-a616-4d76-9255-31d2cb947295",
                                                             "66592b8a-8959-4e4c-ab69-4c628e8baced",
                                                             "ce934b54-992d-4d44-8c31-ce7ae9cc937a",
                                                             new Date(1566811761254L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1566811761553L),
                                                             "7a051e09-4729-4567-8042-6db003822356", 24,
                                                             "8407febf-580a-4247-96b4-bab8ceee29fa",
                                                             "210a1058-a616-4d76-9255-31d2cb947295",
                                                             "66592b8a-8959-4e4c-ab69-4c628e8baced",
                                                             "ce934b54-992d-4d44-8c31-ce7ae9cc937a",
                                                             new Date(1566811761254L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1566811760441L),
                                                             "d4f53279-f0dd-49bf-ad10-240cd4694172", -58,
                                                             "442540a3-e15b-4378-af8a-f733f4fc8ca4",
                                                             "2347b562-af7d-4266-ac04-c56885a14a9f",
                                                             "05fc6d5d-ee84-46cd-9054-ea4ab3a1d915",
                                                             "64f71a76-6b24-4b7d-b6fd-7118e49e9a22",
                                                             new Date(1566811763659L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
