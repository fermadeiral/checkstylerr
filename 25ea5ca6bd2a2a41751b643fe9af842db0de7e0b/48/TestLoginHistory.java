// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566811766135L),
                                                          "0dcea86c-71da-4a73-af08-cc2b9434fc69", false,
                                                          "9b9f7066-3500-42b5-b282-5db733d22349");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566811763373L),
                                                          "76c7dd63-824d-4b53-a13f-f57e5efefc93", true,
                                                          "25b04d4c-bd78-4e78-8686-4afc15f616e6");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1566811763373L),
                                                          "76c7dd63-824d-4b53-a13f-f57e5efefc93", true,
                                                          "25b04d4c-bd78-4e78-8686-4afc15f616e6");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1566811763552L), "91a7f2a8-4604-4e25-97c0-23923930f129",
                                                     true, "ea2590b4-23f8-459e-b269-a6ac832cbb9c");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1566811766172L),
                                                          "af5fc7ad-399c-471c-bbc3-f18af692834e", true,
                                                          "e7ae6910-e01e-4360-a793-6102faf09a4b");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1566811766172L),
                                                          "af5fc7ad-399c-471c-bbc3-f18af692834e", true,
                                                          "e7ae6910-e01e-4360-a793-6102faf09a4b");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1566811763095L),
                                                          "93c2fe45-ee15-4530-a367-fc0a1ae1b593", true,
                                                          "620e97f9-addc-4b45-b442-128f1f4054ad");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
