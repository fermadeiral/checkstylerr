// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-44),
                                                                                        Long.valueOf(-102),
                                                                                        Order.getDefault(),
                                                                                        "11aece10-46ed-4f11-a3e9-50734322939c",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1566811766169L),
                                                                                                    new Date(1566811767291L),
                                                                                                    new Date(1566811763933L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1566811763018L),
                                                                                                       new Date(1566811767853L),
                                                                                                       new Date(1566811762123L)))
                                                                        .lessThanUpdatedAt(new Date(1566811758944L))
                                                                        .greaterThanUpdatedAt(new Date(1566811760259L))
                                                                        .equalToName("21707cb2-ba26-4285-b342-487353cbffb3")
                                                                        .notEqualToName("9e708d27-c3c5-43c7-811e-ce2a3dc277eb")
                                                                        .inNames(Arrays.asList("fe051841-1a27-4bfa-8fd0-6e344521f9b6",
                                                                                               "5a8ea1b9-d8aa-4bfe-8ae7-6f24f364038b",
                                                                                               "45279fa2-dfc4-498a-b3df-7e70c0492d22",
                                                                                               "dae6edaf-dfa3-451a-ab0b-ac533cb01189"))
                                                                        .notInNames(Arrays.asList("c21e1fab-2c0d-4b1e-99d7-5981bb42df0a",
                                                                                                  "a416715f-96a2-4afc-b02f-d2918061bba9",
                                                                                                  "939b78d5-c343-4d7e-80c5-38363888f167",
                                                                                                  "1c9d1444-a3dc-48bc-b14e-bffddec098f0",
                                                                                                  "f81836e4-350d-410f-a875-59fa4c049aaa",
                                                                                                  "a656518c-cd13-445c-90d8-0ec4b1649e66",
                                                                                                  "ca3f0650-014d-4269-8b97-e1ef449bed2b",
                                                                                                  "f2fb417c-54e3-4d84-aa78-be84606cdbfa",
                                                                                                  "d8520dca-55c0-41ce-be3f-025c573b39cd"))
                                                                        .equalToDevicesCount(Integer.valueOf(55))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-32))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(32),
                                                                                                       Integer.valueOf(-87),
                                                                                                       Integer.valueOf(-46),
                                                                                                       Integer.valueOf(-77),
                                                                                                       Integer.valueOf(-12),
                                                                                                       Integer.valueOf(-36)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-77),
                                                                                                          Integer.valueOf(-65),
                                                                                                          Integer.valueOf(-107),
                                                                                                          Integer.valueOf(42),
                                                                                                          Integer.valueOf(114),
                                                                                                          Integer.valueOf(118)))
                                                                        .lessThanDevicesCount(Integer.valueOf(76))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-119))
                                                                        .inCreatedAts(Arrays.asList(new Date(1566811761945L),
                                                                                                    new Date(1566811760102L),
                                                                                                    new Date(1566811760133L),
                                                                                                    new Date(1566811763958L),
                                                                                                    new Date(1566811759586L),
                                                                                                    new Date(1566811764633L),
                                                                                                    new Date(1566811760683L),
                                                                                                    new Date(1566811759313L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1566811766363L),
                                                                                                       new Date(1566811762865L),
                                                                                                       new Date(1566811764184L),
                                                                                                       new Date(1566811761834L),
                                                                                                       new Date(1566811763471L),
                                                                                                       new Date(1566811762287L),
                                                                                                       new Date(1566811766723L)))
                                                                        .lessThanCreatedAt(new Date(1566811764692L))
                                                                        .greaterThanCreatedAt(new Date(1566811759843L))
                                                                        .equalToId("feb9276a-71b2-4c3e-adf4-45eb090c9b0b")
                                                                        .notEqualToId("d33d08f2-35e1-4066-b1a8-b4005554ab7e")
                                                                        .inIds(Arrays.asList("1bb98e19-11cd-43b2-aca3-6ebd720908e5",
                                                                                             "4b45e419-7838-4eb1-86c3-11fcb0b95715"))
                                                                        .notInIds(Arrays.asList("d89a18f2-f9b4-436b-a675-9d04bfbef78e",
                                                                                                "d751baa0-d405-4534-8285-b095b6266460",
                                                                                                "67795481-81e3-41ad-b3f7-f2ee6cafaa15",
                                                                                                "d4c26665-4375-4e1a-8aec-53a685df2cfb",
                                                                                                "868ea759-ff38-4bd7-bff0-c12e529cc159"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566811766169L), new Date(1566811767291L), new Date(1566811763933L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566811763018L), new Date(1566811767853L), new Date(1566811762123L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566811758944L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1566811760259L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("21707cb2-ba26-4285-b342-487353cbffb3",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("9e708d27-c3c5-43c7-811e-ce2a3dc277eb",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("fe051841-1a27-4bfa-8fd0-6e344521f9b6", "5a8ea1b9-d8aa-4bfe-8ae7-6f24f364038b",
                                       "45279fa2-dfc4-498a-b3df-7e70c0492d22", "dae6edaf-dfa3-451a-ab0b-ac533cb01189"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("c21e1fab-2c0d-4b1e-99d7-5981bb42df0a", "a416715f-96a2-4afc-b02f-d2918061bba9",
                                       "939b78d5-c343-4d7e-80c5-38363888f167", "1c9d1444-a3dc-48bc-b14e-bffddec098f0",
                                       "f81836e4-350d-410f-a875-59fa4c049aaa", "a656518c-cd13-445c-90d8-0ec4b1649e66",
                                       "ca3f0650-014d-4269-8b97-e1ef449bed2b", "f2fb417c-54e3-4d84-aa78-be84606cdbfa",
                                       "d8520dca-55c0-41ce-be3f-025c573b39cd"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(55),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-32),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(32), Integer.valueOf(-87), Integer.valueOf(-46),
                                       Integer.valueOf(-77), Integer.valueOf(-12), Integer.valueOf(-36)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-77), Integer.valueOf(-65), Integer.valueOf(-107),
                                       Integer.valueOf(42), Integer.valueOf(114), Integer.valueOf(118)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(76),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-119),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566811761945L), new Date(1566811760102L), new Date(1566811760133L),
                                       new Date(1566811763958L), new Date(1566811759586L), new Date(1566811764633L),
                                       new Date(1566811760683L), new Date(1566811759313L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1566811766363L), new Date(1566811762865L), new Date(1566811764184L),
                                       new Date(1566811761834L), new Date(1566811763471L), new Date(1566811762287L),
                                       new Date(1566811766723L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566811764692L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1566811759843L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("feb9276a-71b2-4c3e-adf4-45eb090c9b0b",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("d33d08f2-35e1-4066-b1a8-b4005554ab7e",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("1bb98e19-11cd-43b2-aca3-6ebd720908e5", "4b45e419-7838-4eb1-86c3-11fcb0b95715"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("d89a18f2-f9b4-436b-a675-9d04bfbef78e", "d751baa0-d405-4534-8285-b095b6266460",
                                       "67795481-81e3-41ad-b3f7-f2ee6cafaa15", "d4c26665-4375-4e1a-8aec-53a685df2cfb",
                                       "868ea759-ff38-4bd7-bff0-c12e529cc159"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-125),
                                                                                        Long.valueOf(-4),
                                                                                        Order.getDefault(),
                                                                                        "5e1248b5-b178-43e9-8af2-b99adad8c885",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-125),
                                                                                        Long.valueOf(-4),
                                                                                        Order.getDefault(),
                                                                                        "5e1248b5-b178-43e9-8af2-b99adad8c885",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-35),
                                                                                        Long.valueOf(-8),
                                                                                        Order.getDefault(),
                                                                                        "5d092b42-e6dd-4cc8-8816-5377183aa92d",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-35),
                                                                                        Long.valueOf(-8),
                                                                                        Order.getDefault(),
                                                                                        "5d092b42-e6dd-4cc8-8816-5377183aa92d",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-103),
                                                                                        Long.valueOf(112),
                                                                                        Order.getDefault(),
                                                                                        "5e88fbe1-c450-4218-b7fa-1d43eaca9aff",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
