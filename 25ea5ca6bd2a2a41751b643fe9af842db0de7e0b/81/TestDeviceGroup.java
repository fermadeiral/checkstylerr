// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1566811765108L), null,
                                                       "7928a61b-c41b-492d-b336-b6d8e6bef593", 37,
                                                       "4165845b-bffe-4a65-b7ea-7094907e360c",
                                                       "16d4b505-4dfa-430b-a080-9b65eb47ec1c",
                                                       new Date(1566811765992L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1566811763213L), null,
                                                       "32608967-f693-4d29-a097-c2e3ef2f1fff", 111,
                                                       "29a097ce-cede-4da0-b11f-3d95d4d7e91e",
                                                       "5d10904e-b708-4899-a866-a1de89e24f59",
                                                       new Date(1566811761982L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1566811763213L), null,
                                                       "32608967-f693-4d29-a097-c2e3ef2f1fff", 111,
                                                       "29a097ce-cede-4da0-b11f-3d95d4d7e91e",
                                                       "5d10904e-b708-4899-a866-a1de89e24f59",
                                                       new Date(1566811761982L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1566811767338L), null,
                                                  "734f2623-753d-4eb0-a3c9-a56c60a486e4", -11,
                                                  "c8530244-cb82-4cba-ac93-2c8995df8708",
                                                  "aad37d7c-cc9d-4f1b-8d75-55839fc22be2", new Date(1566811758315L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1566811758488L), null,
                                                         "c85cd3cc-2d1e-4eb9-b4bd-f4b513eccd08bde528c4-9eca-4536-9e67-34015da6ef2d0d2f729b-3d9b-46d2-8379-0289b5781abe850f98cb-81bb-483d-9571-5a70341c86e5ab51276f-bf38-4e4e-871d-94e81440319496a763a2-aeb6-4529-bd6f-6724238553cca33bd6d5-3c6c-4ab4-89fd-25a382e153101722bc43-d996-486d-b646-e611d89e305060c16a27-d92a-4434-8779-2272df601c713374b85e-aa75-4737-a722-125cb796b9602c51de84-6f02-401e-969c-cbafcd6651c840ada582-4b7a-464e-a63d-145506981d5f0c6fd95e-77ed-4abe-a8e5-b1854138e5cd45132b6b-d024-413d-b71e-a42a6bf61e59b3f41455-97e6-4365-a7e3-c7eaa285be6b3d948757-e753-4af2-bc1d-d08f66acd1acbf71adbf-2971-4e7d-b699-bf58f209f80bfbba49ce-b8fa-432b-a1b4-8c8f60b3ff30f8bccda0-3c5a-4cbb-8e61-d622f3c8e7acfe38175c-a69e-40e3-a38e-28e004440ef78c09c956-3237-4595-a6bb-19501511dd59039b834c-9a51-4ee2-878d-3559862501e8155295e0-3fd9-423d-84df-73a2dfa20c18112c8284-ad3a-4a5d-8f78-2315f38f6a1f6390acb5-86ca-4f2c-81f7-963b866c74e223cd0933-9a0a-4e55-988b-dbbce94829d131cb42ec-5636-40e6-9d10-0e9222e92787da50ed23-a328-4f96-abc7-0b3ec86d04b96d7e067e-0176-4e76-b567-941e19bd6f4168072b54-5f48-4b3d-b752-31005339dcb3043994f9-fce3-4968-9774-b945866144f56ad48561-198b-460d-8bde-8c554e34ea02b11ed19b-7d12-4e83-bba5-70c8c8479333938fc206-be6b-40b8-a68f-d58889185ef72e949139-a345-4669-b570-069dc17b3407aa109b7f-6a3a-45ee-a0fd-1836dcf53f8ff4cfea30-57cc-404b-a28c-6249a6221e1707721547-e35f-45be-a4c6-b50820aa3f87e96bcbbf-f705-4f73-a191-3a926b796788bdc9779f-1e6a-4e5f-9898-b93419b3197ad1ccf4e2-5215-44b3-b588-7e68749da5c7e7f4699b-d39f-4e28-8d0d-0b6b1eaa9652a0c101d3-90af-4329-8a85-6a8205335cd4cb2b17a0-79e7-4a5c-9a23-a00d77f874794a9d9f23-78ff-44ea-b15c-2a575794405c57ed7b86-a1af-436f-aab6-2688a933d42eb1542c3a-fc80-4e4c-b17d-4df3320186d6face9fdc-31b6-414f-ba70-1b29d5e1398edfc2e5ea-e93c-4267-9e6e-638065da3ccaf07333a5-516b-4645-8a89-2cedf9a9323357f243a1-c32a-4c2a-85fd-484f3fb00988c446277d-9642-4b7b-a080-2664231b0ce244411e4d-e3ec-4d57-ae1d-7b7f26ec3de1a24b79c9-563a-47b1-aa3e-a1e4001cfcfd119d603f-b6d2-4c95-88aa-8ae54ccb794aa273ee9d-b958-4c5a-ac1d-434aaa8f5c10",
                                                         -64, "381a8674-351a-402c-84f9-9242147a3b4f",
                                                         "37dc58a7-02fd-41fe-8294-684998be9e28b4ae1e9f-6018-4990-b1aa-550666eb47ed22823ca4-8388-4e80-92b2-460657cfdb25c06bf7c5-df17-4c71-94c8-cac2ecef9051",
                                                         new Date(1566811763926L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1566811759083L), null,
                                                       "e1d56039-78e8-44a0-8dab-644754670001", -50,
                                                       "2b4cc139-bc7f-4a04-9137-219fc6605f26",
                                                       "e468d942-7b9d-4abb-bef2-d05402b6edf3",
                                                       new Date(1566811767185L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1566811759083L), null,
                                                       "e1d56039-78e8-44a0-8dab-644754670001", -50,
                                                       "2b4cc139-bc7f-4a04-9137-219fc6605f26",
                                                       "e468d942-7b9d-4abb-bef2-d05402b6edf3",
                                                       new Date(1566811767185L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1566811767138L), null,
                                                       "fc58cea9-f668-47d5-9051-fe39313bb8bd", 84,
                                                       "77524302-60af-4f60-9354-d9904c7530cc",
                                                       "8ffa1044-ae50-46e8-a868-bf782abbb61a",
                                                       new Date(1566811758930L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
