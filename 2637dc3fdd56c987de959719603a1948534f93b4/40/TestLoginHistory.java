// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561989478322L),
                                                          "66b46fa3-4a3d-4a6e-8dba-a1e1daff9040", true,
                                                          "a6241084-c701-4d6f-ae6c-06b41edcacc0");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561989475521L),
                                                          "6f17820d-66bd-4567-9520-0260d3a3a7a4", false,
                                                          "3c2d3dda-5734-4139-98a3-519fd0ffa088");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561989475521L),
                                                          "6f17820d-66bd-4567-9520-0260d3a3a7a4", false,
                                                          "3c2d3dda-5734-4139-98a3-519fd0ffa088");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561989471409L), "f7a3500a-8127-49ef-8eca-db688fa4ed99",
                                                     true, "fd49bbe5-fb8a-4f23-9a80-c930f69c42b4");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561989474840L),
                                                          "7dcef9c1-b65a-4c06-8f69-65b8b37e6d88", false,
                                                          "fb32d418-50db-4382-ae11-7db265c7cd46");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561989474840L),
                                                          "7dcef9c1-b65a-4c06-8f69-65b8b37e6d88", false,
                                                          "fb32d418-50db-4382-ae11-7db265c7cd46");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561989472981L),
                                                          "0d526e7b-fd3b-4204-bfd1-4847a06d1b62", false,
                                                          "9f73f9bb-8ffd-4173-8a6f-c285298b2d67");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
