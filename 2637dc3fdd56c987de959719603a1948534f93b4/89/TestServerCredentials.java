// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561989472630L),
                                                                         "e8c5538c-4b0f-421a-b507-c3bfc3cc9002",
                                                                         "18f09ed0-c542-483a-ac86-38b94cd4f5f6",
                                                                         "cca54f2c-cd64-4ecd-bb27-89d0a5c5fd2f");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561989470005L),
                                                                         "d31b138f-9be9-4a9f-87a7-1932fdf35783",
                                                                         "00155bf7-e2b0-4883-b710-cf2e61e72006",
                                                                         "6d65165d-3a9b-4023-99e5-fc4dcf966636");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561989470005L),
                                                                         "d31b138f-9be9-4a9f-87a7-1932fdf35783",
                                                                         "00155bf7-e2b0-4883-b710-cf2e61e72006",
                                                                         "6d65165d-3a9b-4023-99e5-fc4dcf966636");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561989474135L),
                                                                    "6dd38197-b73b-4d9a-968d-a7610ba3c823",
                                                                    "991e3ee4-b2d4-47b5-a3a8-137e6d4e86a8",
                                                                    "d5673a16-b8d4-434b-b9b5-ca3a46ee54ed");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561989476379L),
                                                                         "9f62e317-9bf6-42fc-a171-4641bff575f0",
                                                                         "92c95ae9-654d-44c5-a78e-800edad5aa1b",
                                                                         "23f9769d-d714-479a-90c7-f009e6327d8c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561989476379L),
                                                                         "9f62e317-9bf6-42fc-a171-4641bff575f0",
                                                                         "92c95ae9-654d-44c5-a78e-800edad5aa1b",
                                                                         "23f9769d-d714-479a-90c7-f009e6327d8c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561989478212L),
                                                                         "afa366ba-4e2c-4c50-a118-848fb8949e41",
                                                                         "af19d807-3a06-4e86-b291-76c82367a08f",
                                                                         "9be48878-e4c7-4a5c-a049-4bcc03a83b3b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
