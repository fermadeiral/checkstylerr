// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                             "59559721-0ea6-4c49-8c79-e7e555abe81e",
                                                             new Date(1561989470027L), -80, null,
                                                             "afa6b.29a6c@04f5d.me", true,
                                                             "c94aeb3b-a5d8-47fe-b6d1-5f325b4b3203",
                                                             "de2068c9e6dbf6d9ee9c45e25da5b3ec", false, true, true,
                                                             -102, null, null, "7c45ba48-cfbb-4a12-aaaf-ed9ef911ddb7",
                                                             47, "c9a22772-de21-4a26-b9cb-e30dd524b861",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561989476009L), "8u,-");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                             "1d9c3187-c1cf-48e5-a47b-75d6bf2a94ce",
                                                             new Date(1561989476788L), 91, null, "9cfce.b7eb6@dd12a.fr",
                                                             false, "9cf6f553-7659-40d9-b7ff-62fa74e4ff4d",
                                                             "de2068c9e6dbf6d9ee9c45e25da5b3ec", true, true, true, -106,
                                                             null, null, "a99e5061-d61e-45ef-9de1-cd16c581394f", -34,
                                                             "5eafa424-e508-479b-8434-f7d6d9c7e8b3",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561989473711L), "8u,-");
            SubtenantUser subtenantuser2 = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                             "1d9c3187-c1cf-48e5-a47b-75d6bf2a94ce",
                                                             new Date(1561989476788L), 91, null, "9cfce.b7eb6@dd12a.fr",
                                                             false, "9cf6f553-7659-40d9-b7ff-62fa74e4ff4d",
                                                             "de2068c9e6dbf6d9ee9c45e25da5b3ec", true, true, true, -106,
                                                             null, null, "a99e5061-d61e-45ef-9de1-cd16c581394f", -34,
                                                             "5eafa424-e508-479b-8434-f7d6d9c7e8b3",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561989473711L), "8u,-");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                        "559a7575-1f9c-4c9e-8ab9-14dfaa4dbeb1",
                                                        new Date(1561989478273L), -90, null, "0956f.dffed@f4b0e.me",
                                                        false, "e928687d-092e-4612-ba07-debf6e3460fd",
                                                        "de2068c9e6dbf6d9ee9c45e25da5b3ec", true, false, true, 63, null,
                                                        null, "9476431e-925a-4b7f-b0c0-3d4285257cc4", -81,
                                                        "6dffe39e-26c8-4563-853f-f89f9df2433f",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1561989470449L), "8u,-");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "93a06869-76c7-49e9-a336-06bfe25eeb2d",
                                                               new Date(1561989469411L), 104, null, null, true,
                                                               "a11198b7-7968-4e1a-8182-77d0b6ae7c7be4fe0598-2da1-4f31-918c-97ab0c6906fc0dc8d823-3e98-4386-a591-a8f2b785c5fd",
                                                               ":7;è½œ11ë¼±77ç¤«A11ìª Säœ‰ïµ¦7\u0000è¸±DD11F1H7M1Gã‡ª\u0000\u000411å£©YR111*71Vé¢¯11Yå©ˆ777ç³?ì§‘+\u0016711.?à±–",
                                                               true, false, true, -25, null, null,
                                                               "c7881b31-b3f9-4faf-9bff-f61917b658f2", 53,
                                                               "cd652281-9cef-4237-befb-f744bc575894179a3aa8-3e77-45f6-a3b7-6a07e64bb578c2fa5bef-94c3-441a-98bb-ee7de5ad712b",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1561989469383L),
                                                               "ë»‹\u0016\u001d\u0004A\u001c4\u0019æ˜?\u000f.5å¯ 6K3Vaêšˆ)1æ»²@\u0004C\b\u0017á‚¸j7Q6-\u0018-ì•®+é¢™ ëŒ«hç¦?.-'\u0000é¦¸'0]B25B*/2å??.í…–è†¢60\u001a");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                             "54adb257-b913-449a-a27d-4e7cb60d3229",
                                                             new Date(1561989478552L), 81, null, "aaf5c.f1ff9@5ae5b.me",
                                                             true, "d3e11ee3-4625-4c0a-ae6d-620e31fab7b7",
                                                             "de2068c9e6dbf6d9ee9c45e25da5b3ec", true, true, false, 32,
                                                             null, null, "56fa236e-202c-4b40-84e1-9eaf926b50fd", 17,
                                                             "69cf8564-715c-4dfc-b564-4096c354e5ae",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561989474646L), "8u,-");
            SubtenantUser subtenantuser2 = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                             "54adb257-b913-449a-a27d-4e7cb60d3229",
                                                             new Date(1561989478552L), 81, null, "aaf5c.f1ff9@5ae5b.me",
                                                             true, "d3e11ee3-4625-4c0a-ae6d-620e31fab7b7",
                                                             "de2068c9e6dbf6d9ee9c45e25da5b3ec", true, true, false, 32,
                                                             null, null, "56fa236e-202c-4b40-84e1-9eaf926b50fd", 17,
                                                             "69cf8564-715c-4dfc-b564-4096c354e5ae",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561989474646L), "8u,-");
            SubtenantUser subtenantuser3 = new SubtenantUser("de2068c9e6dbf6d9ee9c45e25da5b3ec", null,
                                                             "9f879a24-89b4-4a52-ba04-01220e11c397",
                                                             new Date(1561989475730L), -114, null,
                                                             "e3d4e.f9680@649f2.fr", true,
                                                             "d718ee30-16e0-4a8d-bb4f-f6ae1624cd17",
                                                             "de2068c9e6dbf6d9ee9c45e25da5b3ec", true, true, false, 103,
                                                             null, null, "ced6c2cf-7198-4b28-a9f6-8023d893810c", 50,
                                                             "fc4f83f3-0d26-41c9-bbcc-281eb18d5e67",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561989470088L), "8u,-");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
