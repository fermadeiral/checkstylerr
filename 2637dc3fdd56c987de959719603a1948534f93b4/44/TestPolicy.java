// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("9a80d3dd-84f8-4742-aa8c-0c877a50210c", false,
                                        "631b239e-01fe-450f-9d5e-02cdd249acb7", false,
                                        "a5588015-17cc-4aac-93cf-5fc66aba957d");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("e025b919-1f18-481f-892c-e13a16e34c2d", false,
                                        "d200c6c4-a2d5-4890-9a23-4dae098fa741", true,
                                        "5e50e00b-512c-4da5-a543-e1d108c04fcf");
            Policy policy2 = new Policy("e025b919-1f18-481f-892c-e13a16e34c2d", false,
                                        "d200c6c4-a2d5-4890-9a23-4dae098fa741", true,
                                        "5e50e00b-512c-4da5-a543-e1d108c04fcf");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("ba7e8fc9-af96-41e7-bac2-8b0349b0c9d6", true, "a030f265-8c8f-4b71-9480-f8d809849abe",
                                   true, "6985a18a-d1a8-452f-8b7f-8d603c65eff6");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("84b27e31-cd5f-4bfb-8992-a7d9728f7c8c", true,
                                        "2367c27f-2c6a-427d-8b7c-27cf94a6b48c", true,
                                        "b0dfa856-f6ea-4ae8-9b89-d6a4fc66eccb");
            Policy policy2 = new Policy("84b27e31-cd5f-4bfb-8992-a7d9728f7c8c", true,
                                        "2367c27f-2c6a-427d-8b7c-27cf94a6b48c", true,
                                        "b0dfa856-f6ea-4ae8-9b89-d6a4fc66eccb");
            Policy policy3 = new Policy("d69dbc33-d4c6-4558-89fd-3028294de38e", true,
                                        "33d5fcb3-38c4-4b48-855b-828dc6138605", true,
                                        "4b0e5be4-90a0-4ed0-959b-6b44e4a3f04c");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
