// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("426b83ad-694c-4f1b-89b2-58bb86218806",
                                                                      new Date(1561989474792L),
                                                                      new Date(1561989470322L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                      "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                      new Date(1561989476441L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("05fc4f20-df1d-44ba-ad94-60798e9bc29b",
                                                                      new Date(1561989471835L),
                                                                      new Date(1561989478132L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                      "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                      new Date(1561989476172L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("05fc4f20-df1d-44ba-ad94-60798e9bc29b",
                                                                      new Date(1561989471835L),
                                                                      new Date(1561989478132L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                      "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                      new Date(1561989476172L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("e26e265b-9aef-42f0-a154-daa526f701a6",
                                                                 new Date(1561989474732L), new Date(1561989469080L),
                                                                 "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                 "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                 new Date(1561989469203L),
                                                                 "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("abf48b18-36db-4d5b-870b-dafc3ed62b84",
                                                                        new Date(1561989475998L),
                                                                        new Date(1561989477923L),
                                                                        "GEeE27r9]S7[w\u00002x,NVfJJJ\u0011CmT?N<tAC꾶st2ICLQ2a;跿/?hnw喔2GᴎFkM7rQr2r+",
                                                                        null, new Date(1561989470611L),
                                                                        "GEeE27r9]S7[w\u00002x,NVfJJJ\u0011CmT?N<tAC꾶st2ICLQ2a;跿/?hnw喔2GᴎFkM7rQr2r+");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("53cce6aa-bb89-43c7-b0de-81a325a87a65",
                                                                      new Date(1561989478721L),
                                                                      new Date(1561989475114L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                      "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                      new Date(1561989473278L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("53cce6aa-bb89-43c7-b0de-81a325a87a65",
                                                                      new Date(1561989478721L),
                                                                      new Date(1561989475114L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                      "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                      new Date(1561989473278L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("d9b4548a-8ae8-4633-8981-4ffbaa22b283",
                                                                      new Date(1561989470530L),
                                                                      new Date(1561989470923L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8",
                                                                      "A-Sk5Jk9tlPh279yLZf6XQCNp8D5VIuCAl2igl5z2fzYG86Mzs7PCk56UgPPsr2Sg1onr38GSPRRFHYp2:0SmJV0mVjobp41m",
                                                                      new Date(1561989472393L),
                                                                      "6KW4qD5U6y1344upXW0110BYiyWH5Wj8");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
