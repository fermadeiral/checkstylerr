// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561989474681L), 34,
                                                                      "b4abd265-9df1-4d21-a3d5-16ed3a73660a",
                                                                      "ffdaa92e-341b-456d-82c4-75b4b09a51a2",
                                                                      "2533c603-ef33-486e-a07e-961f285a8cde",
                                                                      "f6d06f33-010a-4adc-bb06-7c1aa4c5f181",
                                                                      "1fc55ddd-8078-4a1d-81da-a2f75b9df889",
                                                                      "3a84f0b8-d434-408b-b3e0-b3519ee81946",
                                                                      new Date(1561989474241L),
                                                                      new Date(1561989478487L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561989475352L), 12,
                                                                      "22f140d3-692e-4bde-99fa-7b4388f0ac5d",
                                                                      "956606ae-2274-4505-86fb-73783d106d17",
                                                                      "7b7c2e8a-a1c4-4b62-9bd4-e73789452430",
                                                                      "1ce10132-4b1d-49ba-a2db-8a3e846096a9",
                                                                      "e362934b-9c11-46b7-8d2b-59e50bf50a6d",
                                                                      "95fb187c-51fd-4e42-a91f-c7a433f91807",
                                                                      new Date(1561989471514L),
                                                                      new Date(1561989476150L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561989475352L), 12,
                                                                      "22f140d3-692e-4bde-99fa-7b4388f0ac5d",
                                                                      "956606ae-2274-4505-86fb-73783d106d17",
                                                                      "7b7c2e8a-a1c4-4b62-9bd4-e73789452430",
                                                                      "1ce10132-4b1d-49ba-a2db-8a3e846096a9",
                                                                      "e362934b-9c11-46b7-8d2b-59e50bf50a6d",
                                                                      "95fb187c-51fd-4e42-a91f-c7a433f91807",
                                                                      new Date(1561989471514L),
                                                                      new Date(1561989476150L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561989478589L), -5,
                                                                 "0a2bdbf5-1cf3-4874-8a31-4f3f1bb2f0d3",
                                                                 "5db745f9-2708-40ee-a0e0-0708e7673e29",
                                                                 "7e3dc05d-0eb8-49b3-a509-ea0ef694879c",
                                                                 "6b469db2-8a80-4908-8def-e29d99a03177",
                                                                 "8c1da2a3-90d8-4b73-bdc3-0c98b8e461d8",
                                                                 "71901611-e14a-4774-b933-ec9c419e03da",
                                                                 new Date(1561989468899L), new Date(1561989469778L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561989474778L), -124,
                                                                        "bbee28be-eadf-44e4-b354-54a7e985fc99",
                                                                        "1e570531-07cb-4ce1-b538-34e5e4f2961492588c9f-d786-4da3-b32c-c9d624e192b1ff676f14-1410-4238-aa02-553a3e0206ec3499049c-c8f1-404f-a81e-0655f097a2229c03949f-8eb6-4862-b239-ee8c898903ba61d2eb3f-2636-451c-bfa0-6a26986b708c7af788e9-19be-40af-97a6-0a060d075542f1110ea8-6c5a-4584-8b8c-66f32fecd8b1c2333054-c045-4143-af60-7046da678c51bf860e69-ef82-46db-b1b0-adc5be95cc11db100146-9f1d-4a16-99b2-3251af00db87ba1bff45-f441-484a-98e7-9baa00ab19e430a14e58-60a9-449b-afc3-0fdb1ac067974ca87449-fc19-4182-8f0a-580e839f9069bd26fa02-e8a2-4685-95bf-52b73e301e3f8b9d1e97-382f-4131-8f70-207658fa3056dfcca08e-6cac-4a4f-816c-df3c6e9d13e5b00b542f-19df-4cc1-a708-99cf8b5076563c49243e-26f7-49e4-9a1d-66bc2851f429cf4027f7-9508-4f32-b6e6-37909c7785f82db246a1-6477-4ea5-b883-7c85ce971c762e09b34c-add9-453c-bf9c-6cbf767f213e5e8f71c7-430b-4211-ad33-ba474e4ea644ed5be6aa-f037-42d8-b410-27491f7868dcffcdb988-6275-4523-ac4c-99093a026d50a64cc3fa-8b1d-46c6-9162-a481117ab3f69654280a-f918-43f2-9051-e4731f6de37055686e9a-9c07-4a42-9dd0-c89b0fb804f0460cb613-ec9d-42ee-8a92-bea536482f362306aaac-2da4-4c6b-b202-75fa2a27ff8c5d1f9851-5109-49e2-8f02-6ab832c5d4276c3cb334-5f99-4d62-a8a8-2335c1fb5875d8fc3738-a63b-4394-8497-9b23f4ea1c52aff60e51-eb4d-463d-9e52-4238215826cf3872e5b6-8300-47fb-8ccf-3338231d8fd6a92c46b0-385f-49d3-b20a-bd19565015283b132db4-c410-4d5d-a0df-f26dc1a31ed70955505d-356a-4d3f-8e5c-4df5c1c9c1f562a4e4a9-7fb9-4e74-906f-3a009b120542f346a045-4e72-4836-b568-d6c272c4ae57b6b7d70a-d785-4db6-abf7-00738f222c6d1737e163-0832-4284-a546-ac0bea593d66aa85a145-0423-4bfd-955c-27de433c04fef5fca6f9-00b3-4fb3-bbbc-7d482e8a65f36f710a65-882d-4087-9aba-f7c091e2592c984d0987-9a58-4777-a5f9-f17c38b9fe92ad099318-b80c-4037-a55d-d85e98e66a465b44981b-2113-41eb-9c17-77f0f5d6289e86930665-f3e3-4849-bc4e-3d822798ca552ec86071-1aa8-414d-86ba-835bdad6834bdf77f6ad-e0c9-4b24-b78e-c56997030417515970ff-f58d-465f-8867-2209c10b9dd7dc737ecc-a82d-4f8e-930c-7be6cb50a66aff428347-652b-44f2-bf17-d720c24c905d8c94073e-3d20-4b62-96a3-4266c6fd10b414a7ed89-93d5-4ea9-be88-8e92e481e493",
                                                                        "32b4da77-f05b-4fa3-b186-4f845e54ba34",
                                                                        "a69f642a-f219-454d-ba0a-e81d51a0d0cc",
                                                                        "5b9cddb7-df9d-48c3-88c7-5401cb71a3e0",
                                                                        "a0dfbc38-7980-4a27-bf4a-ffad69d9f17013e4d747-7cc4-46b3-bda3-c4b9d51ed6935e606fa7-ae82-43c6-86c9-02d198fa0d14dbadb9ce-67e5-48f8-81fd-0f7ef115364e",
                                                                        new Date(1561989474742L),
                                                                        new Date(1561989475376L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561989476885L), -30,
                                                                      "65155861-922b-4ee3-9f0b-1f88f5e4ebbf",
                                                                      "7823b995-ae76-4f18-90b4-e631beb29562",
                                                                      "7ad51498-5471-4503-a6ae-a511be23bd82",
                                                                      "389e98bc-3ec0-4f94-8e8d-3835b480c6c5",
                                                                      "b8967e81-49f1-4451-8d20-3c3378c4da40",
                                                                      "10bec311-e08a-4564-963f-ed43300eb99f",
                                                                      new Date(1561989476878L),
                                                                      new Date(1561989473247L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561989476885L), -30,
                                                                      "65155861-922b-4ee3-9f0b-1f88f5e4ebbf",
                                                                      "7823b995-ae76-4f18-90b4-e631beb29562",
                                                                      "7ad51498-5471-4503-a6ae-a511be23bd82",
                                                                      "389e98bc-3ec0-4f94-8e8d-3835b480c6c5",
                                                                      "b8967e81-49f1-4451-8d20-3c3378c4da40",
                                                                      "10bec311-e08a-4564-963f-ed43300eb99f",
                                                                      new Date(1561989476878L),
                                                                      new Date(1561989473247L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561989474227L), -66,
                                                                      "517b1fd6-be17-4cbd-a4a2-98df3264b6b3",
                                                                      "befca6e2-47a3-4f6d-8273-065b3cf24331",
                                                                      "4413a5af-9626-4f64-8aab-8a5e90d6a603",
                                                                      "3a983d23-cb45-4020-a3b3-786c1828869d",
                                                                      "f0b38470-03e2-497a-bfa1-81aeb9e6dfb0",
                                                                      "2ccf520c-79ab-4fad-bc1e-931861e54f17",
                                                                      new Date(1561989475730L),
                                                                      new Date(1561989469725L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
