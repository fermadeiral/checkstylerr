// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561989478663L), null,
                                                          new Date(1561989473499L),
                                                          "48052dad-74d1-4a5d-84ac-8ba0d0bbe42b",
                                                          "ec035746-a5b6-4de9-a89a-dc90346b11e0",
                                                          "37226eea-a709-486b-b6d7-b6ed2400ec21",
                                                          "6e7a2873-42c1-4b68-97cc-a4bb0dabdf11",
                                                          "d45d7cf8-3ef1-4828-b697-8db9de20cbd5",
                                                          "6595657c-39e4-428b-a961-b4ab501de2a7", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561989477051L), null,
                                                          new Date(1561989472549L),
                                                          "b6183a4e-4de4-4d04-b3ed-64dbd2c35767",
                                                          "25ccfd25-eda0-4a85-ba5a-7c128ab00003",
                                                          "8c75d1b8-7e79-4e55-a313-5059efc4201a",
                                                          "1d0d8cdc-07b7-451b-8b26-ae5afe8821a7",
                                                          "46ea8d53-2ba4-426c-901b-99a438f6e44d",
                                                          "cc2fd9d9-4c19-4333-aa88-ffb50b3dd042", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1561989477051L), null,
                                                          new Date(1561989472549L),
                                                          "b6183a4e-4de4-4d04-b3ed-64dbd2c35767",
                                                          "25ccfd25-eda0-4a85-ba5a-7c128ab00003",
                                                          "8c75d1b8-7e79-4e55-a313-5059efc4201a",
                                                          "1d0d8cdc-07b7-451b-8b26-ae5afe8821a7",
                                                          "46ea8d53-2ba4-426c-901b-99a438f6e44d",
                                                          "cc2fd9d9-4c19-4333-aa88-ffb50b3dd042", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1561989475420L), null, new Date(1561989468882L),
                                                     "54de586f-215f-4ed9-9258-62ee94624866",
                                                     "48f3ec4d-ec76-4b91-8a43-27cc4b92ef5a",
                                                     "33eeb390-e53e-4a87-93bf-c8e16c55eb55",
                                                     "60da1089-0537-46ae-ae8a-630b649790a0",
                                                     "3c0c62fe-0eed-431d-95ef-6ddcff1a6e28",
                                                     "1c89f29d-1cdd-4eb3-b458-82f4390ffa11", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561989475544L), null,
                                                          new Date(1561989470346L),
                                                          "32bd5752-2943-4a78-bd8b-986bba95aea4",
                                                          "b5835c86-dc16-468d-968b-4dcc7eeab481",
                                                          "1d423669-84df-4da3-81bc-0af89cf80c58",
                                                          "25dc4a29-3701-437b-8b7e-f17f8bfbc1b4",
                                                          "98a597c7-eb1a-40df-b356-4864af3a24e7",
                                                          "5a51c993-75e7-4d30-a85a-80a9032469f3", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1561989475544L), null,
                                                          new Date(1561989470346L),
                                                          "32bd5752-2943-4a78-bd8b-986bba95aea4",
                                                          "b5835c86-dc16-468d-968b-4dcc7eeab481",
                                                          "1d423669-84df-4da3-81bc-0af89cf80c58",
                                                          "25dc4a29-3701-437b-8b7e-f17f8bfbc1b4",
                                                          "98a597c7-eb1a-40df-b356-4864af3a24e7",
                                                          "5a51c993-75e7-4d30-a85a-80a9032469f3", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1561989473062L), null,
                                                          new Date(1561989470262L),
                                                          "d6cc7284-8c54-4b71-9b0b-43131ac3fd31",
                                                          "c913d61e-ffd4-4b00-a3a9-d1317497c23a",
                                                          "d01f13c0-90bd-4cc7-8f30-96429e6806ea",
                                                          "e602a20c-dca2-4035-a9f8-8dab7b5b781d",
                                                          "19c08417-3b42-4bc9-ba9d-8ed33160e1d2",
                                                          "5007ae30-9b33-48b9-b582-d9cbd5449997", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
