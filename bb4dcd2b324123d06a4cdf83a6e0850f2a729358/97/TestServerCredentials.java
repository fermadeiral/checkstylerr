// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1567417604352L),
                                                                         "752752c2-b120-462b-a317-6224ebe37ec1",
                                                                         "ac0f337f-adfd-4d60-b92b-a73d98a074c1",
                                                                         "5d2c4959-3f5f-455d-b0a5-082220402d16");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1567417609751L),
                                                                         "887adc4a-7b4b-461d-adda-5fee73764986",
                                                                         "1bc70be8-a2cb-4145-a4b6-2b6e51280c77",
                                                                         "89a3ed86-81f0-40b9-b2c4-693775cd08a5");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1567417609751L),
                                                                         "887adc4a-7b4b-461d-adda-5fee73764986",
                                                                         "1bc70be8-a2cb-4145-a4b6-2b6e51280c77",
                                                                         "89a3ed86-81f0-40b9-b2c4-693775cd08a5");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1567417609834L),
                                                                    "ba5f413a-6229-4661-9a57-e445f03d7830",
                                                                    "e32bbf22-7c6c-4fe5-be30-72243a89449a",
                                                                    "d0b46b3b-1fba-4327-a736-82d6bec587ca");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1567417607505L),
                                                                         "444741b3-92b6-4ea4-a0ca-7c90d2439386",
                                                                         "142490e7-ea08-49f1-a264-d315c2b81f11",
                                                                         "a2a7b13b-f15e-4992-a2b8-e7b75e563c2c");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1567417607505L),
                                                                         "444741b3-92b6-4ea4-a0ca-7c90d2439386",
                                                                         "142490e7-ea08-49f1-a264-d315c2b81f11",
                                                                         "a2a7b13b-f15e-4992-a2b8-e7b75e563c2c");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1567417608428L),
                                                                         "c85d581d-b654-4212-91f8-c0b5ca9298ce",
                                                                         "46c9a4d8-fe16-4939-84b3-f3ff15fc7cb2",
                                                                         "bd6e3a72-8ca4-40ff-9624-dabd8f429ed6");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
