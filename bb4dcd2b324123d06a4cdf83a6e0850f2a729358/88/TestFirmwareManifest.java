// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1567417601778L), -57,
                                                                      "1f97a130-31bf-484b-abb5-691457d0ecd3",
                                                                      "157fa525-1a8f-4c70-80e6-ddb3b12c9d4f",
                                                                      "8c6e5580-3c97-4ecf-a494-c11cb1a6cb12",
                                                                      "d07cea9e-2fe1-455e-9b3f-f8f81f11f2a7",
                                                                      "91335234-a989-446b-a6a5-68c9c63b00b9",
                                                                      "1551eef4-b371-44f4-8672-a9ca359f36b4",
                                                                      new Date(1567417605581L),
                                                                      new Date(1567417607891L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1567417606862L), 75,
                                                                      "a3211e01-68cd-4d64-9d52-edf5de92daa8",
                                                                      "59f3d1da-21a7-482d-8db1-ede852ec5e00",
                                                                      "6d201878-3e0f-48da-9aca-ecee6c95b127",
                                                                      "8e389774-250d-4eae-9e76-60f616753571",
                                                                      "c42a587f-17a0-45e2-a2cf-fbc131931d25",
                                                                      "341b4110-efcd-4c48-be49-0559310d1885",
                                                                      new Date(1567417605410L),
                                                                      new Date(1567417608416L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1567417606862L), 75,
                                                                      "a3211e01-68cd-4d64-9d52-edf5de92daa8",
                                                                      "59f3d1da-21a7-482d-8db1-ede852ec5e00",
                                                                      "6d201878-3e0f-48da-9aca-ecee6c95b127",
                                                                      "8e389774-250d-4eae-9e76-60f616753571",
                                                                      "c42a587f-17a0-45e2-a2cf-fbc131931d25",
                                                                      "341b4110-efcd-4c48-be49-0559310d1885",
                                                                      new Date(1567417605410L),
                                                                      new Date(1567417608416L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1567417603195L), -9,
                                                                 "401bb3b3-44ab-48b8-8491-e27563bc5acf",
                                                                 "663226a2-8f4e-4d79-b47d-95a1afa502d0",
                                                                 "ae4b7f0f-ef49-4ee2-8804-0060816fbf8a",
                                                                 "c9add2e9-f651-4c98-be7e-1ab335103bc9",
                                                                 "33de4a54-0e25-4888-b5bf-9753f1d719b7",
                                                                 "e7369061-7844-4aab-88d3-f90643872a01",
                                                                 new Date(1567417603324L), new Date(1567417608846L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1567417600824L), 13,
                                                                        "41addbed-a314-40ca-a61b-816b4c8b3b75",
                                                                        "84a8bef2-a043-4217-9145-103baaaa62028e165166-414f-4041-8ea9-9c20045854a5241ea7a9-e5dc-467e-98ab-e9249e3e4cf087a90725-32f8-47a5-8672-8cbfb81253b4eef98882-78c1-4df2-ae73-824a33bbc23d3acbcd0b-d92b-4ac9-abac-63b673b98f3bd9cc9c8e-0d22-4e1a-8aba-4178b251f6d7d9f6fd4b-8065-4c2d-9909-b0e374b1e68e8e999021-2d4c-4c44-8f86-735399dc6ff6329bcdd6-be78-4ea0-acd9-ea4e8d652f33a74f0c16-df62-445d-b770-7ff713cfe041134dffbc-bd60-43b0-8d26-6523b1ea4e11df307eb8-40ad-403c-96e0-4ff9ac004a42b05ed453-7699-4450-bfb5-38ad60f41f07836f2104-c112-497d-8a6e-9dfa8648bae06adf745f-ad08-4bb6-8e12-4f6fe918438fe19c041d-1a38-4093-90ca-f164aea7e5dcb31e5134-65ca-4df6-8f9c-7b6d5f6b4ffa60870a3b-33db-4324-8a40-52862f0b2dcee1a257b3-0d69-4f39-8471-ed4403318017d336d48a-fd4c-40b0-ba92-81254bfbcd3a7d9eef25-faa8-4989-b66d-f653cecccf64cf26eefc-7348-4ca2-94b8-168f4e5d0a662d4b000c-5184-4742-b53e-5c49a4716a34746e7a23-318e-42ac-acb7-997725438373ccb12bbb-72d5-4d9c-a529-a8fecff0f5681158791d-56d5-492c-902b-cdd4e9f15a1afee847eb-fb5b-4e58-a044-0d8aad4c55723a41123e-5c88-432f-8a28-2125685949f4c2f334a1-f726-410c-ab7d-7e9f42f0c0029d9a7336-fe49-4ffd-abda-217a7974c97425b63722-9176-45bf-8674-6adfc56e9f23450a3912-1d2c-403c-a78f-891ec327ae154da582a2-ce2a-455d-b7c4-7ab05ca3b2d7240a9f8f-7287-4e6d-b936-6e654a8190a6f6d5f426-d54a-48f9-8bd7-d7a5dd6762c0cf0d42f1-4943-404e-b8af-200faca460b470d53d3d-a848-48d7-8e86-75dd0765886508bc359a-ffb0-4b5f-bc2b-1491d4d35e7af5b9b1e6-b027-473e-83d2-835aac7d885472ea2924-fee5-459f-9b21-2e476041c531b9096608-fbcb-4111-aea3-886088fb7e43bc6a816c-72d0-4430-bb90-35702aa3f1616a4ddbdb-be2a-45d9-8fba-8057bb350f6c663c7b41-dcca-4215-a645-0ea653910cf09f52f1e6-ec7e-4417-bce5-420b1bebcc55f5054363-07f4-46eb-8f70-ad73fd41c3f8783ec5f5-656f-4e27-abe8-a11f9eb02e08f3618e03-903b-48ea-a512-b87be73794f1a96a4354-cebd-49b6-9058-c2539d1929e1153e4cee-982e-4e33-8609-27e75d320d8cfb949758-f41a-4a6e-843c-4e8dd213c62c60463fb1-46c7-45f7-88d6-692754a4362c726ae679-ae52-4b5d-a716-2804d6c915884775a469-1803-498d-96f2-7e092dbb8c014938e09d-00c0-44a3-9c6a-f2bcabdc426b",
                                                                        "030e233e-6c4f-4d2d-b38a-4610a5c2c684",
                                                                        "5478cd9f-2f00-45d3-9881-b08e305c6f7e",
                                                                        "582272c9-deb8-4eb6-b355-fb100f4155b0",
                                                                        "12e175d1-58e0-450a-bbb4-735726b485e627640ca4-1cab-4e2e-a12b-148ff2e434458c9f527c-6eab-4969-8a7a-ed8eddf133cfb6a79a0c-9d59-4073-aa7a-1f5b0e0e2f7d",
                                                                        new Date(1567417607086L),
                                                                        new Date(1567417601360L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1567417601282L), 30,
                                                                      "0895fc37-6e05-43ae-a022-1cfd5076bc27",
                                                                      "4db8ead3-bcf1-40ee-b9a6-e9384e229623",
                                                                      "935d44b9-73a9-4cb8-8704-de2fc894eb16",
                                                                      "080b69ef-1f09-4011-b33d-4c964173bde9",
                                                                      "e3152ebc-b13d-44b6-adb7-e3b418302f04",
                                                                      "fae1f234-1800-443e-bc53-fc20d40a3484",
                                                                      new Date(1567417603726L),
                                                                      new Date(1567417607270L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1567417601282L), 30,
                                                                      "0895fc37-6e05-43ae-a022-1cfd5076bc27",
                                                                      "4db8ead3-bcf1-40ee-b9a6-e9384e229623",
                                                                      "935d44b9-73a9-4cb8-8704-de2fc894eb16",
                                                                      "080b69ef-1f09-4011-b33d-4c964173bde9",
                                                                      "e3152ebc-b13d-44b6-adb7-e3b418302f04",
                                                                      "fae1f234-1800-443e-bc53-fc20d40a3484",
                                                                      new Date(1567417603726L),
                                                                      new Date(1567417607270L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1567417604770L), -70,
                                                                      "817b7fe3-7cbb-4e3f-9152-69212542121a",
                                                                      "a4efaed6-cd15-40c1-98d7-951d04844816",
                                                                      "62b986a9-fc45-43f6-87ad-50e7b3a28af0",
                                                                      "9c1d5f5a-ccc2-4edd-8611-c15c52696c2e",
                                                                      "67382089-5834-4ba4-9569-284150e9d99b",
                                                                      "65298862-f69d-47d9-a028-bafae071fab6",
                                                                      new Date(1567417603087L),
                                                                      new Date(1567417600916L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
