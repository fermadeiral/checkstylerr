// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558000754278L),
                                                                         "bdc6d320-34f4-48ca-8eb0-76c2c9f05df1",
                                                                         "fd1d8cd0-38f5-42f0-bba3-a7a7caef5be5",
                                                                         "d49f6e99-2c0c-4d40-8dc3-647c329d63e5");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558000752416L),
                                                                         "bdbfded5-ec7a-4e64-9f7c-84b123c2c001",
                                                                         "88027107-f09e-47f8-94b6-85dc0634e1c1",
                                                                         "ebf18472-154f-40c0-a856-a432df4778fb");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558000752416L),
                                                                         "bdbfded5-ec7a-4e64-9f7c-84b123c2c001",
                                                                         "88027107-f09e-47f8-94b6-85dc0634e1c1",
                                                                         "ebf18472-154f-40c0-a856-a432df4778fb");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558000752385L),
                                                                    "b5b996f7-eed0-4141-884f-9f1598d2c8da",
                                                                    "1e03f895-1dc6-441f-aaa6-13559506503d",
                                                                    "d68bfeb9-79b0-4eb8-9e4e-d2fc11a5b2bf");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558000746997L),
                                                                         "5374ea93-94d1-4b2c-9985-44eb14b21108",
                                                                         "c55e8997-a737-492d-916b-4abfaf060c64",
                                                                         "c45a2c6d-e761-42b9-a3e5-966ce5246355");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558000746997L),
                                                                         "5374ea93-94d1-4b2c-9985-44eb14b21108",
                                                                         "c55e8997-a737-492d-916b-4abfaf060c64",
                                                                         "c45a2c6d-e761-42b9-a3e5-966ce5246355");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558000746273L),
                                                                         "c5ca6086-ba64-4852-8882-194cd13be2bc",
                                                                         "36fda4c4-afb0-4ccb-8465-aa85bd148eea",
                                                                         "a4d2e16e-5b6d-465c-8218-cc0ee035ff2a");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
