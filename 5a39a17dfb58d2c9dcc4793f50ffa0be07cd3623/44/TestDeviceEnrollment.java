// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("a929a931-e431-4ded-a1c3-e00a9a913407",
                                                                      new Date(1558000755289L),
                                                                      new Date(1558000747277L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                      "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                      new Date(1558000751387L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("7b6ef5d2-a967-468d-9bc0-6509a3cefcff",
                                                                      new Date(1558000745949L),
                                                                      new Date(1558000748973L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                      "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                      new Date(1558000745908L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("7b6ef5d2-a967-468d-9bc0-6509a3cefcff",
                                                                      new Date(1558000745949L),
                                                                      new Date(1558000748973L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                      "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                      new Date(1558000745908L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("ae1db33a-a288-4abc-b355-ee11f5fc8397",
                                                                 new Date(1558000751617L), new Date(1558000754549L),
                                                                 "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                 "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                 new Date(1558000748013L),
                                                                 "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("6367822c-3744-45dc-9faa-5169e8bc31d9",
                                                                        new Date(1558000751598L),
                                                                        new Date(1558000752503L),
                                                                        "xBdi9FuPtUPS31tw1P9`ꕻrxB31aB`=PgPFx\u00163㲴,1jgP1rI\\\\jxGTgq:G\u000bPPF]KP3t",
                                                                        null, new Date(1558000753763L),
                                                                        "xBdi9FuPtUPS31tw1P9`ꕻrxB31aB`=PgPFx\u00163㲴,1jgP1rI\\\\jxGTgq:G\u000bPPF]KP3t");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("625cc81f-ce6b-4b77-b66f-f9909fb8167d",
                                                                      new Date(1558000747640L),
                                                                      new Date(1558000748357L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                      "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                      new Date(1558000747361L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("625cc81f-ce6b-4b77-b66f-f9909fb8167d",
                                                                      new Date(1558000747640L),
                                                                      new Date(1558000748357L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                      "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                      new Date(1558000747361L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("4d7d905c-873b-4627-8884-81b6e6760f84",
                                                                      new Date(1558000751952L),
                                                                      new Date(1558000753966L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA",
                                                                      "A-uWPe96D2Vopus2rK5qgenH9Nu6HUhECbcEWG14Ug7p09Nz35BwB19p4cA4B2QLoM4Aeoh4nk8OhVxc19j6AMxer3FrSXsh5",
                                                                      new Date(1558000752720L),
                                                                      "voQsn47N620M8fOlQZAmhRsy5khkLbvA");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
