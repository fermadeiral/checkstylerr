// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("80d2a030-b0c2-4967-8192-a4703091f664",
                                                          "846128c7-b868-47fc-9ea2-67437364ec32");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("24f85c22-57a3-428b-9422-cfb88e29fb3b",
                                                          "a9df87e8-0548-463d-8a76-0a1c7c2960ad");
            LoginProfile loginprofile2 = new LoginProfile("24f85c22-57a3-428b-9422-cfb88e29fb3b",
                                                          "a9df87e8-0548-463d-8a76-0a1c7c2960ad");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("3d1c606b-d437-405f-b36b-1f7c5ac8f273",
                                                     "83bc4b65-bf33-48f6-bffc-ccbdbd82957e");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("b19b9373-30f8-4ec3-b92d-aac310618734",
                                                          "44b4531a-1735-4ce6-926e-538640971dae");
            LoginProfile loginprofile2 = new LoginProfile("b19b9373-30f8-4ec3-b92d-aac310618734",
                                                          "44b4531a-1735-4ce6-926e-538640971dae");
            LoginProfile loginprofile3 = new LoginProfile("5bf1f8b1-2392-4d69-8c53-c904d0cfd8e0",
                                                          "dfd4653a-e66e-4de2-92ff-bcbdfcfe1e32");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
