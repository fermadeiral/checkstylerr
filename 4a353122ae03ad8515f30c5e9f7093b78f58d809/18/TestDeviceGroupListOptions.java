// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-30),
                                                                                        Long.valueOf(-42),
                                                                                        Order.getDefault(),
                                                                                        "1a610e1e-dc77-4ca9-a67f-52fcc5edab93",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1561477839319L),
                                                                                                    new Date(1561477837310L),
                                                                                                    new Date(1561477836259L),
                                                                                                    new Date(1561477837006L),
                                                                                                    new Date(1561477837259L),
                                                                                                    new Date(1561477838070L),
                                                                                                    new Date(1561477838279L),
                                                                                                    new Date(1561477837137L),
                                                                                                    new Date(1561477839644L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1561477841480L),
                                                                                                       new Date(1561477835468L),
                                                                                                       new Date(1561477840644L),
                                                                                                       new Date(1561477843160L),
                                                                                                       new Date(1561477839146L),
                                                                                                       new Date(1561477842443L)))
                                                                        .lessThanUpdatedAt(new Date(1561477843261L))
                                                                        .greaterThanUpdatedAt(new Date(1561477839259L))
                                                                        .equalToName("794142c1-8002-4bf4-9c85-3ce2509dfa3f")
                                                                        .notEqualToName("446d2a43-be28-4784-a370-0f697fc2e98d")
                                                                        .inNames(Arrays.asList("05867d2a-d47b-4fc3-9160-57e38c363455",
                                                                                               "52e303e4-f551-4150-b84f-543a118e2301",
                                                                                               "536f8236-aefd-4783-83a0-d362b05a2af6",
                                                                                               "171d20c8-7500-4f17-b518-1fc3d8ed2dbc",
                                                                                               "91d189fe-72af-4284-9bf7-0f81767a530a",
                                                                                               "04c83b2d-0f04-40eb-ac02-e0720cbfdd82",
                                                                                               "8c542595-3fc0-44d4-9581-ca085ab09f08",
                                                                                               "25858528-d179-4166-801b-b67fa75946d0"))
                                                                        .notInNames(Arrays.asList("06565125-31da-44fd-ab0f-9e731566769f"))
                                                                        .equalToDevicesCount(Integer.valueOf(-13))
                                                                        .notEqualToDevicesCount(Integer.valueOf(64))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(-106),
                                                                                                       Integer.valueOf(-88),
                                                                                                       Integer.valueOf(-55)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-2)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-15))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-99))
                                                                        .inCreatedAts(Arrays.asList(new Date(1561477840105L),
                                                                                                    new Date(1561477840617L),
                                                                                                    new Date(1561477837826L),
                                                                                                    new Date(1561477834529L),
                                                                                                    new Date(1561477835112L),
                                                                                                    new Date(1561477836322L),
                                                                                                    new Date(1561477842858L),
                                                                                                    new Date(1561477836743L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1561477844134L),
                                                                                                       new Date(1561477834712L),
                                                                                                       new Date(1561477839947L),
                                                                                                       new Date(1561477841357L),
                                                                                                       new Date(1561477844421L),
                                                                                                       new Date(1561477837957L)))
                                                                        .lessThanCreatedAt(new Date(1561477837521L))
                                                                        .greaterThanCreatedAt(new Date(1561477842007L))
                                                                        .equalToId("79968165-96d4-43f9-8662-a813bdd467b3")
                                                                        .notEqualToId("18e6d128-833d-47b7-b38a-7f8ef1c16183")
                                                                        .inIds(Arrays.asList("4b2a5cb6-1e86-4831-8121-c3a7e21005e2",
                                                                                             "10e2f9e8-ae89-42cd-9854-693c69640777",
                                                                                             "3a539ad5-888c-4715-aeef-8035ae34b302",
                                                                                             "34156ad4-7b63-4fe2-9655-ac236829f05f",
                                                                                             "f802d2e1-cddb-4900-91be-dace87132914",
                                                                                             "d4db029a-a30f-4383-a521-0c247e8491c1",
                                                                                             "da57871d-95fc-4876-8451-91c61548088b",
                                                                                             "e07727c1-dd8b-44b4-b3e8-3715e1ac6fc0",
                                                                                             "7b832cf3-07b9-4a36-ac9e-b7791cb881ed"))
                                                                        .notInIds(Arrays.asList("0d21429d-0dc9-4651-be59-fd7599344afc",
                                                                                                "bc14af88-8ef7-4c3a-91c2-5c594c243b39",
                                                                                                "282546ac-0b47-4ec8-8f08-10ba00e2bd92"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561477839319L), new Date(1561477837310L), new Date(1561477836259L),
                                       new Date(1561477837006L), new Date(1561477837259L), new Date(1561477838070L),
                                       new Date(1561477838279L), new Date(1561477837137L), new Date(1561477839644L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561477841480L), new Date(1561477835468L), new Date(1561477840644L),
                                       new Date(1561477843160L), new Date(1561477839146L), new Date(1561477842443L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561477843261L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561477839259L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("794142c1-8002-4bf4-9c85-3ce2509dfa3f",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("446d2a43-be28-4784-a370-0f697fc2e98d",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("05867d2a-d47b-4fc3-9160-57e38c363455", "52e303e4-f551-4150-b84f-543a118e2301",
                                       "536f8236-aefd-4783-83a0-d362b05a2af6", "171d20c8-7500-4f17-b518-1fc3d8ed2dbc",
                                       "91d189fe-72af-4284-9bf7-0f81767a530a", "04c83b2d-0f04-40eb-ac02-e0720cbfdd82",
                                       "8c542595-3fc0-44d4-9581-ca085ab09f08", "25858528-d179-4166-801b-b67fa75946d0"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("06565125-31da-44fd-ab0f-9e731566769f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-13),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(64),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-106), Integer.valueOf(-88), Integer.valueOf(-55)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-2)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-15),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-99),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561477840105L), new Date(1561477840617L), new Date(1561477837826L),
                                       new Date(1561477834529L), new Date(1561477835112L), new Date(1561477836322L),
                                       new Date(1561477842858L), new Date(1561477836743L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561477844134L), new Date(1561477834712L), new Date(1561477839947L),
                                       new Date(1561477841357L), new Date(1561477844421L), new Date(1561477837957L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561477837521L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561477842007L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("79968165-96d4-43f9-8662-a813bdd467b3",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("18e6d128-833d-47b7-b38a-7f8ef1c16183",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("4b2a5cb6-1e86-4831-8121-c3a7e21005e2", "10e2f9e8-ae89-42cd-9854-693c69640777",
                                       "3a539ad5-888c-4715-aeef-8035ae34b302", "34156ad4-7b63-4fe2-9655-ac236829f05f",
                                       "f802d2e1-cddb-4900-91be-dace87132914", "d4db029a-a30f-4383-a521-0c247e8491c1",
                                       "da57871d-95fc-4876-8451-91c61548088b", "e07727c1-dd8b-44b4-b3e8-3715e1ac6fc0",
                                       "7b832cf3-07b9-4a36-ac9e-b7791cb881ed"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("0d21429d-0dc9-4651-be59-fd7599344afc", "bc14af88-8ef7-4c3a-91c2-5c594c243b39",
                                       "282546ac-0b47-4ec8-8f08-10ba00e2bd92"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(47),
                                                                                        Long.valueOf(74),
                                                                                        Order.getDefault(),
                                                                                        "ab0ad67d-0f6c-4553-a9a4-7c917c6e17fc",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(47),
                                                                                        Long.valueOf(74),
                                                                                        Order.getDefault(),
                                                                                        "ab0ad67d-0f6c-4553-a9a4-7c917c6e17fc",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(122),
                                                                                        Long.valueOf(-21),
                                                                                        Order.getDefault(),
                                                                                        "cba464b0-431e-4c12-8e08-ca5bf20783a1",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(122),
                                                                                        Long.valueOf(-21),
                                                                                        Order.getDefault(),
                                                                                        "cba464b0-431e-4c12-8e08-ca5bf20783a1",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-122),
                                                                                        Long.valueOf(-58),
                                                                                        Order.getDefault(),
                                                                                        "0f2a214e-f4bb-4bb2-862d-3599c099d3ea",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
