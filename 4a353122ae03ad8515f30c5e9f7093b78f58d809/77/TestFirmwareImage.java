// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1561477840037L),
                                                             "8ca2eea9-2c5b-4fd8-a810-e8bf0eb0b6a5", -66,
                                                             "a57d0a55-c0cd-44e4-9162-1e5be4a1f33e",
                                                             "95b5cb2e-5712-41e2-acb7-0145aa887645",
                                                             "30e406e9-cfdf-426c-9239-ca835a19e120",
                                                             "ecd6c2e6-658f-4722-b800-e0a23574cda2",
                                                             new Date(1561477839200L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1561477841246L),
                                                             "1a4f85a3-44c7-47f9-b703-1ed9aa9189fb", -97,
                                                             "9cfb89d9-3ad0-4ea1-a3b2-2b1b376519eb",
                                                             "3d2e677b-dc55-4f3d-adc8-cd6f0b846411",
                                                             "1b269448-54a1-40e3-bb8e-1d1992d47047",
                                                             "3a6edc46-0ebf-4d71-98ee-6b1b1d30c5e6",
                                                             new Date(1561477834416L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1561477841246L),
                                                             "1a4f85a3-44c7-47f9-b703-1ed9aa9189fb", -97,
                                                             "9cfb89d9-3ad0-4ea1-a3b2-2b1b376519eb",
                                                             "3d2e677b-dc55-4f3d-adc8-cd6f0b846411",
                                                             "1b269448-54a1-40e3-bb8e-1d1992d47047",
                                                             "3a6edc46-0ebf-4d71-98ee-6b1b1d30c5e6",
                                                             new Date(1561477834416L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1561477839513L),
                                                        "4881b629-e864-4dc5-a7df-9773d368f67d", 71,
                                                        "fb5bbe36-9928-4fae-a7d7-1920043e0578",
                                                        "dc4b1c58-1583-415b-9fb7-bd5419378003",
                                                        "08726b23-855b-49b1-9a26-301d2ee6c0cc",
                                                        "2ee69de1-d984-44d1-b7fc-2d38f28cfd4e",
                                                        new Date(1561477840931L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1561477836903L),
                                                               "99665608-fcb2-4e0c-b067-be3c952b5fa4", 43,
                                                               "aa429109-1826-4926-a840-3a02161fd25e",
                                                               "35e3bac2-e773-4a43-a33e-e65c7c3790203237cd6e-bea6-4530-9732-de2b7d9f4412a35e3f95-d789-493a-a107-cf8ef9ead425c755171e-c7e9-473b-b686-d4b03be1b51e86b78a95-aecd-414e-b4e0-97577f3ad6ecb4c95137-8ef6-4ff6-ae6a-f1dc6279e318e09e713b-d25f-4e99-bcbc-35ff1e89f6cf9cc06cff-d35a-4ded-859d-398fe7cc6139c45b39c4-410f-47c5-b12a-924bdb8270c11e66f532-69d6-4689-80a1-da3e9cd1d6219290c170-3bcb-4372-a448-b30fd0cd8813cf402459-a1fe-4c91-afee-149077c6aba0efe60db5-539a-4b5e-8b24-91ae46484c92fcda77ce-a9c5-4746-997e-79bd82408173d997610f-1ff2-4b63-8550-af2582ea51f6f4d97a18-1cce-4523-b0b5-52146a3e088d05063671-af0a-4682-a58f-f04cf3f1a3475dd05ab7-4cfc-4298-aaaa-d2d3f0f2f0f58e3bab54-28ac-4a00-964d-5264502b070bf562357a-81a2-4f76-a966-783242dfc807f1f2804d-fa50-467b-9978-8df02069eebf370159e3-d62a-4d34-b18a-8138f5d6f94803be2984-53f9-48fd-a021-d00a32fc7af43849e4b6-9891-47dd-a9c0-a9c383a5212e0309e55b-40d6-476a-918b-d9112cecc81ed68cf4ff-8269-4fe8-8f79-a1ce79dda0b575985557-36b6-454e-99e9-17b3c2ece574a1cb70a5-8111-41e4-9597-a34498dbe21d2f2b4422-cfcb-4f56-8da0-c1fd9d72383494d9bf00-20e8-493b-a5c9-5918594de82b291ceb42-8cd4-473c-b1da-2a8be7a3d30cc9f181c1-1843-43e3-87c8-5ecc4b2fb3eec4626069-8803-43b6-beca-70407aeabe6e6427f383-44cf-46a9-9c85-cbd6c3a2b655be63479f-968f-4190-a616-77195b48f3b220f38d16-e6b4-4e9f-b0c6-d76deff10fc4cf70029c-5ae0-45e3-aa7b-5b35480603d629b840a5-9dd5-4b3e-ae93-9061d09260acff3ce9cf-2375-41db-9610-9b788d250b9024be468c-0527-46fc-9320-66d413a7700a09a6ff60-a47c-453d-b6a4-d9bf8e3cf7293ffbcdb6-028a-4c5d-9567-a8d29e7d3468784207c2-32a6-4829-8e8a-af2f6dec5370c4851edd-3a20-439d-a18a-ba62b14f1a0cfa4c876c-48a6-4df5-875d-70d5e352f7065771a3b6-bb9e-4380-9f11-a8de64f589e1c3ec42b3-911f-4695-8dbe-6d7d3a928eff0836dfe0-bd19-49ff-8f59-c4d216a830e002049066-d358-4b99-bce4-83bb9b7d5c9987ff96cd-534f-4496-b6a3-f5ebb684e4864cae339f-adfe-4e1c-ae43-e3cd21bbff23381a3668-81b4-4b1b-a97e-a87daa26872f78636d8d-6228-4bc3-80b5-16b136753efa105439bf-b46c-4c7d-b646-2357597ed4bb1cd37ee0-76dd-4328-a77e-6a47c600f5ec717a6cbc-f89c-453c-b89b-854b0cb1ae7b",
                                                               "fde1f7ec-5d6a-4498-a22d-88ebabf3f3bd",
                                                               "281cadf0-4529-4429-9b27-4ad93f7c023153519aac-1549-4306-98a5-13fcc9d549658e7e860e-fc63-4f72-9f9a-fe24ac07bff03ad42d91-5c00-4d7b-9deb-76e199f870a9",
                                                               new Date(1561477834854L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1561477833777L),
                                                             "4fd96b29-863b-484d-95b0-9c930779ae07", -95,
                                                             "e1771b71-b03e-42ec-a99b-ec3486fe1a02",
                                                             "c2579858-e6f1-42d8-91d7-1576c8cfb285",
                                                             "906fcc73-915d-4aa7-a174-f1541e873b15",
                                                             "ed2f0447-780f-4b63-93c3-ab63b9792086",
                                                             new Date(1561477834750L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1561477833777L),
                                                             "4fd96b29-863b-484d-95b0-9c930779ae07", -95,
                                                             "e1771b71-b03e-42ec-a99b-ec3486fe1a02",
                                                             "c2579858-e6f1-42d8-91d7-1576c8cfb285",
                                                             "906fcc73-915d-4aa7-a174-f1541e873b15",
                                                             "ed2f0447-780f-4b63-93c3-ab63b9792086",
                                                             new Date(1561477834750L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1561477839008L),
                                                             "717da44f-427b-4539-91bb-d0bd3cd834ba", 76,
                                                             "6d918d59-d331-43f4-816e-c7e1a14e9192",
                                                             "5c58201b-225c-4b1c-b3ae-669cfd9bccd2",
                                                             "f039b8a6-6f7b-4f9a-896a-988f6129b348",
                                                             "1b8d27e8-eb14-44f0-81fd-93ef29e24a70",
                                                             new Date(1561477837060L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
