// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("32e601c4-72a3-403f-a0e0-58f32a771f91",
                                                                      new Date(1561477835465L),
                                                                      new Date(1561477838506L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                      "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                      new Date(1561477838205L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("17d77d86-dc70-43e6-acab-bc9913dd68c9",
                                                                      new Date(1561477839726L),
                                                                      new Date(1561477840763L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                      "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                      new Date(1561477841532L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("17d77d86-dc70-43e6-acab-bc9913dd68c9",
                                                                      new Date(1561477839726L),
                                                                      new Date(1561477840763L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                      "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                      new Date(1561477841532L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("93178e99-9283-4b1a-9872-e458ec13a8d5",
                                                                 new Date(1561477833019L), new Date(1561477838001L),
                                                                 "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                 "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                 new Date(1561477835382L),
                                                                 "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("bd87a749-175a-459b-b384-a0a37b05c439",
                                                                        new Date(1561477838831L),
                                                                        new Date(1561477842365L),
                                                                        "cvRP>rUCeNwHc;JfM^rvꆖH㽹wJiHvccv?MP⎗\tUcBHJU3儳엷lUUJ\u001bL1U3R俱PcMPcRuP",
                                                                        null, new Date(1561477836404L),
                                                                        "cvRP>rUCeNwHc;JfM^rvꆖH㽹wJiHvccv?MP⎗\tUcBHJU3儳엷lUUJ\u001bL1U3R俱PcMPcRuP");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("5f9443f4-0d70-488e-90c3-7db2ccd151ba",
                                                                      new Date(1561477839686L),
                                                                      new Date(1561477833343L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                      "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                      new Date(1561477835797L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("5f9443f4-0d70-488e-90c3-7db2ccd151ba",
                                                                      new Date(1561477839686L),
                                                                      new Date(1561477833343L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                      "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                      new Date(1561477835797L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("52fb58d5-866b-41ec-8386-e7f191b7c1b3",
                                                                      new Date(1561477833140L),
                                                                      new Date(1561477835817L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2",
                                                                      "A-1l:8LhVT0wN5dN2PR05G341WF0SpNn50Ok4Jo7VMEgHVwc63jn96X9S:CCW:zm29uKxzylKPqY2:e25eOu5EQ802ihxf5ah",
                                                                      new Date(1561477837634L),
                                                                      "K6Ahxy7GdVsg2T6I78tQ58Tb794apqO2");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
