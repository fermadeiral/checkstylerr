// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553467845941L),
                                                          "b45187cf-a8e3-4c1f-8ab4-c0cb29e43048", true,
                                                          "96328570-1151-44d5-adb3-9c2642c70359");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553467847540L),
                                                          "1749fdbd-500e-4bd7-9542-1ac72c4c518f", true,
                                                          "a088a951-f26a-4218-b795-33fec5e3f4c0");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553467847540L),
                                                          "1749fdbd-500e-4bd7-9542-1ac72c4c518f", true,
                                                          "a088a951-f26a-4218-b795-33fec5e3f4c0");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553467841302L), "59da673c-f0d5-42d4-b98b-33700f884a58",
                                                     true, "110150d5-366a-49ad-b48f-957d8185172e");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553467841529L),
                                                          "a52d7fa0-b22c-4119-ba48-dc504c1b0122", false,
                                                          "46221dae-d098-4965-bdd1-27a5a3e5d0e9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553467841529L),
                                                          "a52d7fa0-b22c-4119-ba48-dc504c1b0122", false,
                                                          "46221dae-d098-4965-bdd1-27a5a3e5d0e9");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553467844213L),
                                                          "5f616ba6-ab98-4539-a72f-35257a5894dc", false,
                                                          "dad31e15-a617-4b21-bc5e-488ee3ce40b3");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
