// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("170dfda5-62e8-4cf6-a212-0075d57855c5",
                                                             "1ded336c-116f-46ab-a908-d450de7f8a48",
                                                             new Date(1553467840188L),
                                                             "3722d720-eb1f-4320-97c7-eb24b46c4023",
                                                             "59a9781f-ce08-4a51-8b89-fdd43768a672");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("702c4586-dbe8-4138-9ab4-e4dab8bdda1a",
                                                             "b46bf39d-41a5-4fa8-aefd-1ce6d6607aa8",
                                                             new Date(1553467842108L),
                                                             "2ba58b08-a5c6-4098-bd19-88d88b574be6",
                                                             "045a4f02-003f-4465-aef6-02b8640a0a0d");
            ActiveSession activesession2 = new ActiveSession("702c4586-dbe8-4138-9ab4-e4dab8bdda1a",
                                                             "b46bf39d-41a5-4fa8-aefd-1ce6d6607aa8",
                                                             new Date(1553467842108L),
                                                             "2ba58b08-a5c6-4098-bd19-88d88b574be6",
                                                             "045a4f02-003f-4465-aef6-02b8640a0a0d");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("b1e3f459-592d-463e-9d54-3cbe8e5866aa",
                                                        "99f2cd50-ca31-40fe-a53b-e7c9b519a27b",
                                                        new Date(1553467845955L),
                                                        "13ebea42-2c6f-467c-b509-bf0a0ad9a938",
                                                        "2727ed27-65d5-4da0-923e-101eb21ecf34");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("695fe323-4ffe-4c59-9383-85d2c595f4df",
                                                             "43f04248-def5-4597-8593-d6fe113dfc67",
                                                             new Date(1553467843886L),
                                                             "2d23c0c8-df36-4a5a-a2f0-5b85524d4e89",
                                                             "378a94ca-a454-4abf-9261-fc9ca77fcb1a");
            ActiveSession activesession2 = new ActiveSession("695fe323-4ffe-4c59-9383-85d2c595f4df",
                                                             "43f04248-def5-4597-8593-d6fe113dfc67",
                                                             new Date(1553467843886L),
                                                             "2d23c0c8-df36-4a5a-a2f0-5b85524d4e89",
                                                             "378a94ca-a454-4abf-9261-fc9ca77fcb1a");
            ActiveSession activesession3 = new ActiveSession("b5a9d21d-7562-46e2-8eec-800cba94e79c",
                                                             "f315f3d3-ec48-41fb-8e10-d6da52e316d0",
                                                             new Date(1553467842805L),
                                                             "7fc35822-672e-4634-b933-5bb99d7f85a4",
                                                             "e5fd3e58-29a4-4713-8050-cc734348ab60");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
