// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553467847799L),
                                                                         "76a93026-1721-4d68-8691-adefa6a08b6e",
                                                                         "b62840a1-f70e-455f-8b2e-17fce0d55b34",
                                                                         "551bb3d6-23c7-424f-8ff0-b4839f9aafad");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553467846578L),
                                                                         "901507c3-aa10-4094-80d0-2a126881dc39",
                                                                         "64fae436-f973-4e65-8d54-4c17588eb0cc",
                                                                         "4d9f07d1-70d0-4b64-95ec-c2dfd1507e67");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553467846578L),
                                                                         "901507c3-aa10-4094-80d0-2a126881dc39",
                                                                         "64fae436-f973-4e65-8d54-4c17588eb0cc",
                                                                         "4d9f07d1-70d0-4b64-95ec-c2dfd1507e67");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1553467838993L),
                                                                    "46ac3c1e-ff70-4d73-b7e8-14331259c0b1",
                                                                    "4f289aa5-4680-4834-af6c-a80ff8d7c405",
                                                                    "ce79c252-9a3d-463c-873e-6dc7b1496672");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553467841919L),
                                                                         "a92bb088-02cf-46c2-bdd1-2499a33d1b33",
                                                                         "84aeaeae-5e0d-4ab1-9bd2-c7f0f6b8c64b",
                                                                         "50128b3c-0a06-4036-a67f-cb6fe9559dd1");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553467841919L),
                                                                         "a92bb088-02cf-46c2-bdd1-2499a33d1b33",
                                                                         "84aeaeae-5e0d-4ab1-9bd2-c7f0f6b8c64b",
                                                                         "50128b3c-0a06-4036-a67f-cb6fe9559dd1");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1553467842738L),
                                                                         "b96bc622-7153-4fbd-9796-0cb4a1f523ff",
                                                                         "39d47a42-96b1-4302-9039-c36d66602622",
                                                                         "8cd34d75-d252-463c-b97c-a704b983d78e");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
