// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("3e9bf74f-f71c-48a4-9ed9-14cb546eb8b5", false,
                                        "995b4f7a-2860-43bd-b901-c401251a5ff7", true,
                                        "54d5c880-2401-4a5f-83e3-ffb914bc2a1e");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("346f8c72-8a78-4cea-bd74-2ca76ff11fdb", true,
                                        "eef287bb-e584-469c-8197-eb9773bb0804", false,
                                        "7a9e70ea-41c9-49e6-9e7e-1b13983263a0");
            Policy policy2 = new Policy("346f8c72-8a78-4cea-bd74-2ca76ff11fdb", true,
                                        "eef287bb-e584-469c-8197-eb9773bb0804", false,
                                        "7a9e70ea-41c9-49e6-9e7e-1b13983263a0");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("007ce5bf-8092-42b9-bd76-10289a491af8", true, "b1dc5903-a424-4211-8fa7-afc09c6e4b4a",
                                   false, "67590ea2-bb86-4917-b861-7e19d14db6f1");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("8df0bc09-443a-4153-984d-fd35d55d2ec5", true,
                                        "a7cce7ab-a6e9-4948-bbbb-4b52f5fd1e13", false,
                                        "abca089c-d59e-430e-a69b-c881e32ac142");
            Policy policy2 = new Policy("8df0bc09-443a-4153-984d-fd35d55d2ec5", true,
                                        "a7cce7ab-a6e9-4948-bbbb-4b52f5fd1e13", false,
                                        "abca089c-d59e-430e-a69b-c881e32ac142");
            Policy policy3 = new Policy("21b680de-1641-4b3a-9588-1c9558be1bc3", true,
                                        "17dd37e4-84aa-4f27-be72-64b3a9113929", false,
                                        "8e225ee6-0d89-405b-8e63-06fb839af868");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
