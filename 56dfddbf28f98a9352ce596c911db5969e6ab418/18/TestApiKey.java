// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("0fdc0a288ed845badcae06a24d7b18b5", new Date(1553467844865L), 124,
                                        "dfb7f4f6-2f11-469b-95e5-4f0ec05b7b6f", "ed54397a-1792-4f80-9765-40dc027f39c9",
                                        -92, "d57d3abd-18c5-460d-886e-258581d1a05e",
                                        "ea2cbbe7-ba86-4594-9c84-4260f7039ce8", ApiKeyStatus.getDefault(),
                                        new Date(1553467843982L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("dbe06e90257efb3a232e841fdc798a73", new Date(1553467847394L), 1,
                                        "b3412e31-6888-4ee2-b7fe-957b2041c3e4", "03e30934-9003-4e8e-8737-2c7bbfbef5b8",
                                        65, "6d97d09c-c8ed-47e1-a027-8de7db7573d3",
                                        "2ddeb115-c898-4a4e-aee3-a3eec255a3c1", ApiKeyStatus.getDefault(),
                                        new Date(1553467839281L));
            ApiKey apikey2 = new ApiKey("dbe06e90257efb3a232e841fdc798a73", new Date(1553467847394L), 1,
                                        "b3412e31-6888-4ee2-b7fe-957b2041c3e4", "03e30934-9003-4e8e-8737-2c7bbfbef5b8",
                                        65, "6d97d09c-c8ed-47e1-a027-8de7db7573d3",
                                        "2ddeb115-c898-4a4e-aee3-a3eec255a3c1", ApiKeyStatus.getDefault(),
                                        new Date(1553467839281L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("cfeded8f2ed9fcacf272c867177d4389", new Date(1553467842746L), -95,
                                   "ae4d855e-3e5a-41da-a425-612c7f925fae", "c7653940-480d-45d5-a30a-870bc60c1899", -46,
                                   "f78aa279-1c42-4cc4-9ea3-11e2268cceca", "f2f3b9a0-568b-4bca-a24e-c313ab0db783",
                                   ApiKeyStatus.getDefault(), new Date(1553467846868L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("B.á†ŽA\u0014?cè—†7@Wcá»²cR_c\u001aá¨»cccæ«…ç¨ª\u0011c7ã´¸ \b]7cR777\u0007\u0017\u0017ïŸ¿æ‰¡ccI\u0011c77#à¬²>7c@\u0019à¸?,77=%G",
                                          new Date(1553467843098L), -56, "5f4a4483-ba28-4a4d-bf6c-422b78cec32e",
                                          "09d5c56a-93c3-49fb-9fe2-ce6061b0dfdb", -87, null,
                                          "6ee1b159-b126-4325-bc27-c4e2234c3d5b", ApiKeyStatus.getDefault(),
                                          new Date(1553467840529L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("e8591aacfc48b57cccdbe0860fde1ddc", new Date(1553467845618L), 43,
                                        "d7b7d2ee-5393-413a-ab1d-b66eb27f9074", "9ac642da-ac8d-4a18-9378-00c4cafcdf59",
                                        -55, "880102cb-ce2a-4a45-a15f-11d24764ba69",
                                        "26af55c0-6651-4ac7-9cb7-5bc69f34ea05", ApiKeyStatus.getDefault(),
                                        new Date(1553467842742L));
            ApiKey apikey2 = new ApiKey("e8591aacfc48b57cccdbe0860fde1ddc", new Date(1553467845618L), 43,
                                        "d7b7d2ee-5393-413a-ab1d-b66eb27f9074", "9ac642da-ac8d-4a18-9378-00c4cafcdf59",
                                        -55, "880102cb-ce2a-4a45-a15f-11d24764ba69",
                                        "26af55c0-6651-4ac7-9cb7-5bc69f34ea05", ApiKeyStatus.getDefault(),
                                        new Date(1553467842742L));
            ApiKey apikey3 = new ApiKey("03803fda60456cc0c4b6e7812fab4f0c", new Date(1553467839009L), 57,
                                        "87616133-a67a-4f94-ad09-317ea4f828d2", "35cd5033-8315-480f-aed2-308b8cb19ddb",
                                        77, "6a904adc-5d5c-40d9-a870-9bb63a01d0cf",
                                        "d1cd45ae-de0d-4876-978e-ed52f211f2cf", ApiKeyStatus.getDefault(),
                                        new Date(1553467842966L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
