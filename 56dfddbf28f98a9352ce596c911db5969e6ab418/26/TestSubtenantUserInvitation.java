// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("907b12a2-8eda-45f7-8bcd-750374ed4d18",
                                                                                           new Date(1553467840115L),
                                                                                           "d0f2d87d-9ea6-4fd6-94f1-8eaca9258824",
                                                                                           new Date(1553467843661L),
                                                                                           "d1c16a28-4013-46ae-b756-d568c6cf5f01",
                                                                                           null,
                                                                                           new Date(1553467838585L),
                                                                                           "acdab1aa-6fd2-472e-ae3d-02167b0b1e34");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("819f4248-7b66-493e-be44-0c31c12a6af8",
                                                                                           new Date(1553467844501L),
                                                                                           "411a67e9-ee08-43f7-8a5d-95a3e6a966f5",
                                                                                           new Date(1553467841158L),
                                                                                           "a6cca128-03ad-40a2-9db5-c812e3a05801",
                                                                                           null,
                                                                                           new Date(1553467838748L),
                                                                                           "e0bd641c-ff4d-4286-93dd-9180eb030ca3");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("819f4248-7b66-493e-be44-0c31c12a6af8",
                                                                                           new Date(1553467844501L),
                                                                                           "411a67e9-ee08-43f7-8a5d-95a3e6a966f5",
                                                                                           new Date(1553467841158L),
                                                                                           "a6cca128-03ad-40a2-9db5-c812e3a05801",
                                                                                           null,
                                                                                           new Date(1553467838748L),
                                                                                           "e0bd641c-ff4d-4286-93dd-9180eb030ca3");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("ed6f83d2-8650-4bfe-959d-48a36e2a1864",
                                                                                      new Date(1553467840901L),
                                                                                      "b732a32e-a642-4cef-b6e4-1c6a16f726f6",
                                                                                      new Date(1553467843603L),
                                                                                      "2a1dfe41-c66b-42f0-b09b-22eb903a08ee",
                                                                                      null, new Date(1553467847270L),
                                                                                      "287b72bc-ded6-443e-a96d-bdc4a673cce5");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553467840276L),
                                                                                             null,
                                                                                             new Date(1553467847201L),
                                                                                             "7114c5ff-7e74-4182-825e-76551fc9dc03",
                                                                                             null,
                                                                                             new Date(1553467840294L),
                                                                                             "1b09ab99-3bd7-43b4-b150-6b375598eef2");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("e03e1010-225a-415d-9098-2e57b813bc16",
                                                                                           new Date(1553467841296L),
                                                                                           "05dfc900-4cd4-4433-8b25-22af19704b80",
                                                                                           new Date(1553467847648L),
                                                                                           "59a57484-92a5-4d0f-af94-388707a3c5e0",
                                                                                           null,
                                                                                           new Date(1553467840448L),
                                                                                           "15238caa-bfd0-4c2e-8594-9fb2c24567c1");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("e03e1010-225a-415d-9098-2e57b813bc16",
                                                                                           new Date(1553467841296L),
                                                                                           "05dfc900-4cd4-4433-8b25-22af19704b80",
                                                                                           new Date(1553467847648L),
                                                                                           "59a57484-92a5-4d0f-af94-388707a3c5e0",
                                                                                           null,
                                                                                           new Date(1553467840448L),
                                                                                           "15238caa-bfd0-4c2e-8594-9fb2c24567c1");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("a7fbc482-7e36-41b4-b71c-2e3dcefb3848",
                                                                                           new Date(1553467842606L),
                                                                                           "3b8d09e9-e788-4a19-9c96-d1d3951d1d58",
                                                                                           new Date(1553467840395L),
                                                                                           "189117da-9215-406d-8032-f0ac42e5f216",
                                                                                           null,
                                                                                           new Date(1553467846362L),
                                                                                           "13eac9c0-2f9a-4aa3-b1d7-8774965a2bee");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
