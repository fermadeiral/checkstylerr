// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147592489L), -92,
                                        "dbffc04464ee5d492da2ca1837b00ec4", "a39c0946-e504-43ea-a9ea-191e2bc5c084", -87,
                                        "e8d098fa-c9b8-4970-a927-6ba3d938da20", "dbffc04464ee5d492da2ca1837b00ec4",
                                        ApiKeyStatus.getDefault(), new Date(1559147598053L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147593039L), -26,
                                        "dbffc04464ee5d492da2ca1837b00ec4", "c872a7c9-fc53-4638-afcf-64de9aee303b", -82,
                                        "58b860c3-71ef-414e-a0af-87fe6beeda50", "dbffc04464ee5d492da2ca1837b00ec4",
                                        ApiKeyStatus.getDefault(), new Date(1559147596422L));
            ApiKey apikey2 = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147593039L), -26,
                                        "dbffc04464ee5d492da2ca1837b00ec4", "c872a7c9-fc53-4638-afcf-64de9aee303b", -82,
                                        "58b860c3-71ef-414e-a0af-87fe6beeda50", "dbffc04464ee5d492da2ca1837b00ec4",
                                        ApiKeyStatus.getDefault(), new Date(1559147596422L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147595950L), -113,
                                   "dbffc04464ee5d492da2ca1837b00ec4", "7e4cbd51-1b4e-4364-8a5c-b246955da26c", 121,
                                   "8f76921d-32ef-45cc-a339-31663fc89156", "dbffc04464ee5d492da2ca1837b00ec4",
                                   ApiKeyStatus.getDefault(), new Date(1559147596239L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("ï§?ç–£U\tæ†’é¸?é¼˜Yã«?\u0002á¶£\u000e\u0015é«ƒ\u0004Yã¨ƒQá“’TNX)â€–]ì²œ:\u0000í„?\u0013å®‡î¡µ/á“—Læª™C\u0005L^X.æ¢?ç¾Ž\u0014â¦Œé¸¬\u0005ë‹«ê§®ã€¢ë§•\u0011î?ž%Aîœ’H\u0014à±„",
                                          new Date(1559147593609L), -81,
                                          "ï§?ç–£U\tæ†’é¸?é¼˜Yã«?\u0002á¶£\u000e\u0015é«ƒ\u0004Yã¨ƒQá“’TNX)â€–]ì²œ:\u0000í„?\u0013å®‡î¡µ/á“—Læª™C\u0005L^X.æ¢?ç¾Ž\u0014â¦Œé¸¬\u0005ë‹«ê§®ã€¢ë§•\u0011î?ž%Aîœ’H\u0014à±„",
                                          "fe61379e-eea8-417b-979d-f6001292fdc4", -84, null,
                                          "ï§?ç–£U\tæ†’é¸?é¼˜Yã«?\u0002á¶£\u000e\u0015é«ƒ\u0004Yã¨ƒQá“’TNX)â€–]ì²œ:\u0000í„?\u0013å®‡î¡µ/á“—Læª™C\u0005L^X.æ¢?ç¾Ž\u0014â¦Œé¸¬\u0005ë‹«ê§®ã€¢ë§•\u0011î?ž%Aîœ’H\u0014à±„",
                                          ApiKeyStatus.getDefault(), new Date(1559147592463L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147594050L), -114,
                                        "dbffc04464ee5d492da2ca1837b00ec4", "b83a4061-79fa-43bc-8e19-17e7bba8b0dd", 26,
                                        "e56c20ad-b26b-4c98-a0f8-11f0714fac2a", "dbffc04464ee5d492da2ca1837b00ec4",
                                        ApiKeyStatus.getDefault(), new Date(1559147599800L));
            ApiKey apikey2 = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147594050L), -114,
                                        "dbffc04464ee5d492da2ca1837b00ec4", "b83a4061-79fa-43bc-8e19-17e7bba8b0dd", 26,
                                        "e56c20ad-b26b-4c98-a0f8-11f0714fac2a", "dbffc04464ee5d492da2ca1837b00ec4",
                                        ApiKeyStatus.getDefault(), new Date(1559147599800L));
            ApiKey apikey3 = new ApiKey("dbffc04464ee5d492da2ca1837b00ec4", new Date(1559147601281L), 65,
                                        "dbffc04464ee5d492da2ca1837b00ec4", "28a2e1a9-f43d-438a-88c8-87d8f052b5a4",
                                        -127, "42897220-c95b-489b-970b-d8992b30ec87",
                                        "dbffc04464ee5d492da2ca1837b00ec4", ApiKeyStatus.getDefault(),
                                        new Date(1559147594443L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
