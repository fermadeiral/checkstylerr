// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        new Date(1559147598685L),
                                                                                        "026a3351-508d-45df-8533-d5f52da0d15f",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        new Date(1559147600614L),
                                                                                        "bf55bc9a-1f2b-4814-8b0d-51543ebb0641",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        new Date(1559147600614L),
                                                                                        "bf55bc9a-1f2b-4814-8b0d-51543ebb0641",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                   new Date(1559147595036L),
                                                                                   "c9daaa78-afef-4c36-bb72-dbc88854336e",
                                                                                   "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                   "dbffc04464ee5d492da2ca1837b00ec4");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("ï§?ç–£U\tæ†’é¸?é¼˜Yã«?\u0002á¶£\u000e\u0015é«ƒ\u0004Yã¨ƒQá“’TNX)â€–]ì²œ:\u0000í„?\u0013å®‡î¡µ/á“—Læª™C\u0005L^X.æ¢?ç¾Ž\u0014â¦Œé¸¬\u0005ë‹«ê§®ã€¢ë§•\u0011î?ž%Aîœ’H\u0014à±„",
                                                                                          new Date(1559147599609L),
                                                                                          "14ce6f95-6713-41ad-8e95-c680a5165670",
                                                                                          "ï§?ç–£U\tæ†’é¸?é¼˜Yã«?\u0002á¶£\u000e\u0015é«ƒ\u0004Yã¨ƒQá“’TNX)â€–]ì²œ:\u0000í„?\u0013å®‡î¡µ/á“—Læª™C\u0005L^X.æ¢?ç¾Ž\u0014â¦Œé¸¬\u0005ë‹«ê§®ã€¢ë§•\u0011î?ž%Aîœ’H\u0014à±„",
                                                                                          "ï§?ç–£U\tæ†’é¸?é¼˜Yã«?\u0002á¶£\u000e\u0015é«ƒ\u0004Yã¨ƒQá“’TNX)â€–]ì²œ:\u0000í„?\u0013å®‡î¡µ/á“—Læª™C\u0005L^X.æ¢?ç¾Ž\u0014â¦Œé¸¬\u0005ë‹«ê§®ã€¢ë§•\u0011î?ž%Aîœ’H\u0014à±„");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        new Date(1559147598423L),
                                                                                        "2b2ed8d2-34c7-4faa-955d-3b44c4a6e9ac",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        new Date(1559147598423L),
                                                                                        "2b2ed8d2-34c7-4faa-955d-3b44c4a6e9ac",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        new Date(1559147599448L),
                                                                                        "e21045cf-cfe2-47d6-87f8-ec226a47d7ec",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4",
                                                                                        "dbffc04464ee5d492da2ca1837b00ec4");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
