// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559147599566L), 79,
                                                                      "b5079969-aea9-4f65-a566-a718abcb39e9",
                                                                      "d053cf6c-33f6-4da0-b92c-9568ff9bc5bc",
                                                                      "979a0a9a-0333-46e6-b880-98f15d00364a",
                                                                      "702ca92d-0ed3-4017-9f8e-305ddfe8a812",
                                                                      "1eaded59-9c94-470b-b8c4-7fd2956dc671",
                                                                      "69eb959c-2818-423a-a545-daea22fddd30",
                                                                      new Date(1559147597756L),
                                                                      new Date(1559147598596L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559147592721L), -4,
                                                                      "7179cceb-5a1a-4990-9804-a67dc03f4c0e",
                                                                      "01f3187e-a1ce-44a4-8fcd-83f70becf438",
                                                                      "ef8d1c17-d1aa-4522-88c6-d8c5fd88d3e6",
                                                                      "83729b10-bcfc-4331-b448-f2ec727dfded",
                                                                      "220ecab3-7360-42d0-b55a-5e3924f71ec1",
                                                                      "a8938ffa-e3f6-4f48-9fae-e604ff31a22f",
                                                                      new Date(1559147593794L),
                                                                      new Date(1559147599103L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559147592721L), -4,
                                                                      "7179cceb-5a1a-4990-9804-a67dc03f4c0e",
                                                                      "01f3187e-a1ce-44a4-8fcd-83f70becf438",
                                                                      "ef8d1c17-d1aa-4522-88c6-d8c5fd88d3e6",
                                                                      "83729b10-bcfc-4331-b448-f2ec727dfded",
                                                                      "220ecab3-7360-42d0-b55a-5e3924f71ec1",
                                                                      "a8938ffa-e3f6-4f48-9fae-e604ff31a22f",
                                                                      new Date(1559147593794L),
                                                                      new Date(1559147599103L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559147597846L), -126,
                                                                 "28439d6e-cd07-4170-9492-36f8d2856fd0",
                                                                 "a5ffce4a-3510-4570-b234-533a79b8e8e1",
                                                                 "f096754c-4bf0-4600-8b76-b1f32e8972d0",
                                                                 "4c27bb6d-e88a-40f2-b2b5-c9ac7e050ca8",
                                                                 "de29d96c-0604-4843-bc40-a7f222ad6ac3",
                                                                 "f1c092af-fb6f-490c-920a-dff4129d266f",
                                                                 new Date(1559147595428L), new Date(1559147596934L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559147601470L), 37,
                                                                        "1134b5c1-edd1-4deb-a1df-4816d096d091",
                                                                        "4e35a961-64d6-475c-8f71-55e517bace5957ad2405-cb62-4a14-93cf-8f084451a8793be6bb55-b457-4c71-8ad3-918168b06cf6db94e8bb-73b9-427e-be9e-ba13eecbd18733dc30f0-7a2e-4a30-9d5f-411fd28dabba67e3fdca-d04c-4e79-a64d-e7eb2c2260e7a557b16d-5923-4f5d-b336-9a7ae01fa2dd44b7412d-9528-427e-93b5-58520980ff5717f202e9-0cd9-4e4a-b5d4-bacfaf8c8ece36c563d8-f16a-4aff-a4ac-ce25fd83076835a129a5-1df9-4375-be76-95d214b54938542c2fe6-f3ee-4d35-a3be-27c9cc2d67b4486f4fde-25f9-4b93-9f39-11493c3d108ac439295c-2e44-4f2f-83a5-8cf8f7280de383aa5fa4-b081-437f-bf43-c95a3bfec0ce470d9835-70f3-4ba0-8672-f4d45c97d80da74df870-2b5e-4d76-a6a1-93422286828e76b5d224-05f9-4cb1-98b2-adc2cd4d3dd81706b7fa-ca96-4fe9-9750-3ebb916c960fc0256c9f-3101-41d4-a4cf-5a3792b80b07ed4c8bdd-c69b-4b60-89fb-3097a17b8e42d9845811-13a3-4e23-8433-cd897fb3ed3ec168e05f-b81d-4b52-98a7-304c18e18398f88410c9-9e57-4e7a-8fb7-ec2d3e9bd21fd70d9fad-e91a-4710-9355-83693372dd4ce0626a45-9a3e-451c-957f-8755415665e9f3f743a6-8949-41d4-a302-147e90961827679ce2e9-c069-4a20-9a0f-ade01518d350b070a657-c151-42be-88cb-dbf22e1ae42b65186493-6e67-46f6-bc24-09dfc9b41a9ef2485aeb-3b62-4a93-a230-7ed03fc889ed252ca03f-86ab-4825-8315-6baa0784ddbf34ac6c76-78d6-4aef-9ba2-acb4ed0dd2b65c42e9be-3470-451c-970e-f3e0b6f88d703b33f2e1-a517-4ee3-b8af-38c20cc041f53cda16b4-0104-4a0a-bb48-b4a71c00eb38bc069417-922e-4ed1-a2d5-8c7295ff573aca517a99-4b19-4931-814f-a16dcf7a222e271d92b3-5428-4913-9b43-0c591a5afc73fa88a999-9cee-4558-bc8c-230d9227327c76cdfa3e-6747-4afe-88f5-b5f366d999fda43f9bea-b320-46fe-8339-4e9a397061ca03eb4b16-0a41-4f06-abf2-9a78ca0616104effa911-2028-4385-baaa-1a489534a75434274952-4de9-4972-8ce0-9ab6248e00b6904cc8c8-63d2-44de-a3ad-513b747056d1fa4d07d9-42a9-454d-8cd1-8620452cb0951db5cebb-b234-4aa4-a060-c388aa395129da6122cc-198e-4d13-abf3-600aaaa71009a5c189c3-578e-4b66-854c-bdf9211a2deb4dcf693b-cb5a-4dd6-bf88-cd5146843598d9e32a50-077d-4faa-af36-0ea6364cc24528f67a5a-ec82-4716-99d3-52fc1184bb65aba6a7ca-efdd-4754-a519-01b6433dbc6ca11df809-853b-479e-9d66-65a853fb3c43985328c0-f80c-4393-9e2f-0bd9c706ff8c",
                                                                        "ee97cb0d-365d-49df-a3ea-fc8a61adc7d0",
                                                                        "b4dfd62e-8b51-4721-b4c5-4f667925b4fd",
                                                                        "05f2e3c9-2302-4dae-b9fe-a1da278361bd",
                                                                        "a6980f71-4251-4039-aa95-99aede81ca2d917f180e-713c-417d-99da-93e647f482b3da99aca6-0e83-478a-b60d-88534b2139282f9211df-2be4-43dd-8ea2-e3207a6aee8a",
                                                                        new Date(1559147597981L),
                                                                        new Date(1559147595380L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559147596975L), 37,
                                                                      "8b7b49ae-e5bc-4c7b-baad-69627f78a3d3",
                                                                      "3a72b6c1-a2a8-48b5-b8bb-da59143811ae",
                                                                      "d0e20a43-ffe8-4137-8c5a-f04a1036540b",
                                                                      "eb6dfb55-1f21-48e7-8676-849d0d181085",
                                                                      "b9d488fd-caad-43b6-ada7-340b0c4ca04b",
                                                                      "2980d38d-01f4-4656-9869-cf5f9fece51b",
                                                                      new Date(1559147592603L),
                                                                      new Date(1559147597436L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559147596975L), 37,
                                                                      "8b7b49ae-e5bc-4c7b-baad-69627f78a3d3",
                                                                      "3a72b6c1-a2a8-48b5-b8bb-da59143811ae",
                                                                      "d0e20a43-ffe8-4137-8c5a-f04a1036540b",
                                                                      "eb6dfb55-1f21-48e7-8676-849d0d181085",
                                                                      "b9d488fd-caad-43b6-ada7-340b0c4ca04b",
                                                                      "2980d38d-01f4-4656-9869-cf5f9fece51b",
                                                                      new Date(1559147592603L),
                                                                      new Date(1559147597436L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559147599037L), 4,
                                                                      "47eabb1c-004d-4bd3-8646-3d8504aebfc3",
                                                                      "c754c421-3963-4087-b4fe-a33f854ecd1e",
                                                                      "82ea120b-d28b-43b3-b9b6-5588cffb6abf",
                                                                      "c014e4df-c2fb-4b82-93f4-aa815a705274",
                                                                      "63fe88c0-3d2e-4320-877a-b43a26a4302c",
                                                                      "390a5342-c331-4d6a-b0fa-b4669fb5e48f",
                                                                      new Date(1559147599317L),
                                                                      new Date(1559147601187L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
