// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561032445132L), -47,
                                                                      "2baaa9e6-58f7-409f-9b6f-9a28e3817994",
                                                                      "2d81b45f-8f25-41c7-aff6-07bdafed3492",
                                                                      "80a1b737-0464-461e-a68f-48aa798ed500",
                                                                      "79e400ce-112a-45a1-bcfd-8b55885fe960",
                                                                      "72905863-ed63-458c-a6ef-1d1f8a33f6e5",
                                                                      "f55c40b5-9101-4d6e-b965-4d75d7586e5f",
                                                                      new Date(1561032445256L),
                                                                      new Date(1561032447482L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561032450742L), -10,
                                                                      "3e4ce88a-dcb3-463e-a084-e745b17f4bbc",
                                                                      "dbdff1f1-cc13-48cc-83c9-17f5fa1bdf57",
                                                                      "21d4333d-bc72-4453-bcea-fb5aa36800d5",
                                                                      "6060246d-f9af-4e8d-a3d8-98b3bd755234",
                                                                      "8bcac185-dc8e-49e4-9c2b-c209290255ed",
                                                                      "6c425bca-8bce-4143-9757-fc012505b6ef",
                                                                      new Date(1561032444086L),
                                                                      new Date(1561032446287L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561032450742L), -10,
                                                                      "3e4ce88a-dcb3-463e-a084-e745b17f4bbc",
                                                                      "dbdff1f1-cc13-48cc-83c9-17f5fa1bdf57",
                                                                      "21d4333d-bc72-4453-bcea-fb5aa36800d5",
                                                                      "6060246d-f9af-4e8d-a3d8-98b3bd755234",
                                                                      "8bcac185-dc8e-49e4-9c2b-c209290255ed",
                                                                      "6c425bca-8bce-4143-9757-fc012505b6ef",
                                                                      new Date(1561032444086L),
                                                                      new Date(1561032446287L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561032442697L), 126,
                                                                 "030141b4-6535-4b8b-b312-69b322bc25ff",
                                                                 "128a9279-c7b8-4b58-9716-289bc6e916fe",
                                                                 "5744f587-356f-4041-a7e7-12e6267836c3",
                                                                 "5f3d9ffd-9f4b-4c97-8f8c-45c487fac686",
                                                                 "05a872bc-6cb5-47f1-bc88-e8728278a9a2",
                                                                 "4d95380c-6389-4447-a288-bead5043d55c",
                                                                 new Date(1561032451584L), new Date(1561032449108L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561032442665L), -61,
                                                                        "430e355a-55db-49a8-863a-6713f4fc74e4",
                                                                        "67e8c54a-2ff5-4a13-bdd8-d089d028162e90d59a93-c9bd-4473-ac7d-50197d02baccc048b109-8ce9-482a-853f-efcc3dce6e9b116a6df5-1ded-49d2-a441-4a14e704e35f44194c53-e8f0-4c49-b023-984cb0bb52c584af4d36-4e35-4187-afba-1326934d2af1090253b5-e7b9-466b-a0b8-5dcb821ee12600d56cbc-695b-4a41-a159-a05c06e7e7f23609a220-6b2f-4ab2-ad6c-bfb488dc9cbfb1fd6d9d-fc76-4b79-88e9-877b6642a6512a4be79a-cc49-4544-abd2-7bd8f79e3b1c1a4964e4-e5a4-417b-9fe8-bbd38acb93fb62fcbba5-7a4f-4078-9d49-810dc1533a1a901b3c3e-92a0-4373-b20a-1312ec1b2fe5cfcf4852-a6f0-48ec-851d-d119f40448caf6a017ad-f84f-400a-bfda-8787d78294b0cc598bfe-b13f-4aca-ba53-7f96825281f98c98d916-82e4-42b4-b68c-d7f94df1e7026af91cc3-c66e-4e27-acb5-f8929739d51002582041-a76b-418a-8435-5e8fa306468aea45ce89-82d6-427c-a5b5-6ae2a7f163979f754ce4-aae6-4c9f-a75e-a4da475c13518d5fb3c0-42c0-4cdf-8d99-37c2377868deac21d120-8a62-4e9b-880a-4cf1a9681307a51815cb-a52c-43d6-bad7-a5d920680a661df3f8ae-7db7-45e5-82de-8744da860a17b80dd71d-448b-4108-a1a7-1feac3c77c119d2dde05-a917-4289-8314-2c6d756d56b27454f965-ba02-48a1-b865-4d9effb9a194cc38af49-e577-4451-9000-b5cc22d8cccbd08ca460-20d9-4bd9-8279-ae0928add5d0955c238d-9cce-4c63-9bf2-268f4d1de1e30a747e05-44db-40ea-863d-cff9de288c3ae11ddf2a-b87b-49c1-8cb4-d8e6b5a775be2b8dfdfd-fcf2-4d87-a67c-f199615109053edfe5d4-402c-4661-9064-22a3605f3fc1eaeeb9b4-2a13-4765-b0d6-86bdade2c706e65c5e2e-912a-4fbc-8e10-7f84fc71d993d9aaaeee-9f1a-4beb-9b28-bfba6225d0f85b7777c3-e0d0-4a59-afa0-372655a5e11ab96e17ee-dec0-4d8b-80b6-f5b657c099e1d6b3f65c-361d-4de9-9297-6abd00782f578627ccbc-8e1a-4d3f-9051-1d85eb134c4de70a1414-9211-43be-82e6-479ebf157de073e38878-768b-4752-bba2-308903534b92a0d6c416-39da-47e8-b2c0-b4ffcdc46600fee0b4a1-7820-40de-b174-1b02cbfbb679d17d80f5-683a-4fa2-a873-d2e7dc1e549629862c7b-f19a-48e9-a729-ac1895a5638f4638abe9-cf1a-4316-8aad-e3eeac87bae741b371e7-e8e3-41c8-8230-4efc61e02c16d8c5673b-cabc-42c9-8686-d44f70a3d876b8896888-54dd-4cb9-b7ac-24b3214bfb8be50233c3-cc33-479e-85dd-3406e0cdee04e747c78f-9836-49d9-8f82-00b05ef622fa2f2bad0a-39d1-467d-ae8e-e32f314ab3e5",
                                                                        "455d7652-5a67-4828-849f-cb5f821797e5",
                                                                        "ff2a4d0b-53ef-4003-9b1d-9f00c9ae1ed5",
                                                                        "60b0c9af-86ae-4d0b-923f-3463a758b8a5",
                                                                        "cb042087-1617-458f-a574-7f6da2929ae024429ed4-d37e-4b8a-8aa6-db654493f0bf6bdd5fc7-5cf0-4aa3-98f8-bba34b534c77dcc03e78-0ee2-4430-ab42-d16985441a90",
                                                                        new Date(1561032442978L),
                                                                        new Date(1561032444231L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561032451500L), -20,
                                                                      "10e7c54b-5414-4284-9551-afa067d2e67a",
                                                                      "98259f9d-da5e-4278-b809-7e7aaa995591",
                                                                      "7e864714-233c-4cf2-b8fb-ba67cbbefeb9",
                                                                      "e407f33e-6402-4e4e-971c-8643e4e894a9",
                                                                      "e8a86543-923e-418a-9f75-4d1c6ea0b81a",
                                                                      "56c7e862-157d-40e9-bb61-992cb7044162",
                                                                      new Date(1561032451269L),
                                                                      new Date(1561032445505L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561032451500L), -20,
                                                                      "10e7c54b-5414-4284-9551-afa067d2e67a",
                                                                      "98259f9d-da5e-4278-b809-7e7aaa995591",
                                                                      "7e864714-233c-4cf2-b8fb-ba67cbbefeb9",
                                                                      "e407f33e-6402-4e4e-971c-8643e4e894a9",
                                                                      "e8a86543-923e-418a-9f75-4d1c6ea0b81a",
                                                                      "56c7e862-157d-40e9-bb61-992cb7044162",
                                                                      new Date(1561032451269L),
                                                                      new Date(1561032445505L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561032446718L), -21,
                                                                      "45864323-212d-48f7-a876-4d821202f0b7",
                                                                      "b54d707e-ba32-4e57-a10c-cd2556972c6f",
                                                                      "e7cd2ccb-c03e-4bf7-b872-306733abe783",
                                                                      "9cb3e837-a3e2-4ecc-958c-2b53130325fa",
                                                                      "3954faf8-44c6-4f33-a39b-60527eb58da9",
                                                                      "4ffa173f-0d65-47d8-a1b2-558bd6d6f753",
                                                                      new Date(1561032448898L),
                                                                      new Date(1561032446024L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
