// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561032448259L), null,
                                                       "461c8f21-2156-4bdf-8657-903b75e7e105", -23,
                                                       "fbab0a67-c03f-4186-bfa3-55d211c7c678",
                                                       "31e52ca5-9c38-4b97-9fcd-76c8e49526ea",
                                                       new Date(1561032447534L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561032446415L), null,
                                                       "3f353c61-cb6f-4dda-80f8-d1067c5b3e3b", 10,
                                                       "4c9dbfd6-3f63-4040-a148-2917540c242d",
                                                       "0848571d-68b3-4b9f-b515-2c9367fe0c29",
                                                       new Date(1561032447234L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561032446415L), null,
                                                       "3f353c61-cb6f-4dda-80f8-d1067c5b3e3b", 10,
                                                       "4c9dbfd6-3f63-4040-a148-2917540c242d",
                                                       "0848571d-68b3-4b9f-b515-2c9367fe0c29",
                                                       new Date(1561032447234L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1561032449080L), null,
                                                  "60ff0985-0cb5-4dcd-a0e9-c3c40ce99aa2", 124,
                                                  "dae6a4d5-c4f7-4cb5-ac3f-67ff75a6be19",
                                                  "8e68db68-370a-4dfc-a846-e4734a8daf97", new Date(1561032451439L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1561032451975L), null,
                                                         "a13938c1-da84-46c4-a827-a56a07c99fa9ba12d235-444e-4538-966d-688040689a3e9d44e782-0fc3-446f-8f56-f389c539778de4f5caa4-22d8-4a67-b2d9-bc969e54dba4dd1db393-e873-41da-875a-20efcf389c8aa861d7c0-e5f0-4a2c-a8a7-1332b4b3c25796206e0d-f3ee-4f78-afa6-da12847615dddbeee627-5dd9-4c77-b935-bf74bd16584e0bb3f99c-2de7-42e1-bb15-f5931493d1f4b5773760-dbf1-4cc4-b331-1fdf6d678e835e2e40bc-ec66-4623-9eb2-35e760ddb22d0d53a70b-1a05-410a-aee7-88a844fb93fa15a32211-c5c5-42e5-80c3-e9e1335e29d43b7b0dcf-a0e1-4ef5-b487-38abae15fc698abe46f2-b157-48c1-9af0-c2b3c0f8634fdb2d39d4-cf20-4938-8c3d-d07d7407c291b6bdb8fa-69db-4cdc-bf3c-c7f9d80858d6a2db6c59-f706-4be3-bdc2-fcf8d96a249a1ba3e846-f853-4c0c-8c0a-c482a6761dd7a72d5993-87e1-4987-9d96-be3ab54b40da2d3d0217-44cd-41f5-b6d6-a4b1647ea87ee048e4e4-16d7-4c74-98fd-20ea51cccb1aa1647247-d973-4412-9c79-a3a0dce5fc5ad7bb4032-d7c6-4221-a743-f1bb97eaa9dd7c104a84-9e4c-4c74-8d2b-395db714b038a46d4441-e02b-415a-aeed-c6fe1e1e73405019d0ff-13ad-4ae1-bd69-cef57e1e7f5cec60b38e-08b6-4fbe-a0b2-34d5a1876f46594b678a-a2a9-4c74-8bbe-68b39e6390ae3b9acf00-e3a8-4126-811e-81afc07649bef6360a39-a2f4-4b3b-a138-d3bc5b14b48b09775f1b-52ce-49a5-9bf7-f90a19b1b8ea84d91b51-63d3-4790-bfbc-dbf5cfb3179c88bb110d-8683-43c0-8657-a6b9d2d4998c42aaab75-e545-4e4f-962a-ce2ed175b9aebab1ff80-3495-4e8a-a7ec-8fb6b6e650614bb6a9d5-57b5-4cc5-8781-bd8e5fade48800f7a9c1-31dd-4644-862f-b702018c1b46988abdc7-198f-401e-8c41-c5a8ce9ce7971076dd0c-aa1a-442b-9c72-30c7a33c1ac99acbc925-6cfa-4e05-902d-4b080eea58327f0ab3bd-6ebc-469b-96cf-fa765c8eb7037b920fd5-8c1f-44c1-9c03-6fd130267d9212daa964-a588-462e-bf54-6e8f7928dd7946b9f676-2679-4357-a9ca-c64c8bd97b2283e55142-f8f2-4cb4-8e39-0f58f398a5b0ebfb9f6f-58cd-43d8-ad33-20aab9f20ca96f7a186a-e731-4d49-9e7d-cfcd0e29bdd5fbb29a16-2175-467b-add4-34e7d1da251cec930143-be96-41aa-988f-bbee6aa111c1195c63f7-6276-43c9-bed0-8b7eda4fe46582e51fef-8261-488f-8ace-dfb72ed5fcf6698e1e21-789b-47fa-8b7b-c256d231174022f5cd5b-ed7d-4bb8-8119-025ba93cbbed09b9b635-8376-4776-9abc-e1e172430cd486e96bac-83bb-48a1-aa3d-265e022d07c5",
                                                         -13, "55ea9a86-6b62-4f63-8f90-bff33038fdba",
                                                         "63018b0a-b800-4fbe-8b42-5f4177e781419cd02a1e-32ba-4ab2-920d-af11f12418325e70fba0-a3d6-4b9b-a9e6-7a1f3dea7e1a9fc04322-7a19-4911-b161-76e9fc7f6920",
                                                         new Date(1561032447751L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561032448208L), null,
                                                       "b092e749-81b4-45e0-86eb-036755d23725", -89,
                                                       "e8c05aa5-19d6-463b-bcaf-fdbd00d97679",
                                                       "d1b85f89-31cf-4c29-bbe9-a5e475af1095",
                                                       new Date(1561032449752L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561032448208L), null,
                                                       "b092e749-81b4-45e0-86eb-036755d23725", -89,
                                                       "e8c05aa5-19d6-463b-bcaf-fdbd00d97679",
                                                       "d1b85f89-31cf-4c29-bbe9-a5e475af1095",
                                                       new Date(1561032449752L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1561032450723L), null,
                                                       "f9b0d058-55e9-46eb-9c0a-4480708849c8", -62,
                                                       "e0654b92-8895-455b-9c02-61e711ab8384",
                                                       "559678dc-260e-41f3-b0f2-9620592ebe91",
                                                       new Date(1561032445040L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
