// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561032446252L),
                                                          "75494bd7-9d01-43d6-a368-eaa11792741e", true,
                                                          "3d35222b-8b7f-44ec-9a52-ffa4945d913a");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561032450198L),
                                                          "83782ec1-2e4d-4283-b229-f8844e95b677", true,
                                                          "aada97a2-3bb4-42b9-b848-66aa9187e3a9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561032450198L),
                                                          "83782ec1-2e4d-4283-b229-f8844e95b677", true,
                                                          "aada97a2-3bb4-42b9-b848-66aa9187e3a9");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561032445247L), "7a9858e1-61c3-4444-b714-b8c39af98569",
                                                     true, "e349c28c-a201-4d0b-8ff4-36da83d08bfd");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561032443531L),
                                                          "f386a70c-25a5-482f-9d8b-db1ab4a74a44", false,
                                                          "48cf0096-8b97-4910-a52a-97e5fe157365");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561032443531L),
                                                          "f386a70c-25a5-482f-9d8b-db1ab4a74a44", false,
                                                          "48cf0096-8b97-4910-a52a-97e5fe157365");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561032446731L),
                                                          "a2d1b749-9688-41d9-ae3f-d5fd1ea714b0", false,
                                                          "9d911357-9c72-49ea-b5b0-7e58df7cfb05");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
