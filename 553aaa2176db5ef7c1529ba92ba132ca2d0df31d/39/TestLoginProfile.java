// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("299db1df-9ab7-4706-a30f-b8e9d91986a2",
                                                          "e929a81e-aad2-45c8-a791-f2a3b6e1b0d3");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("03d41695-d745-421c-8b73-1782051a6af5",
                                                          "c8171de9-444c-4f99-b28c-e6d2875e13a3");
            LoginProfile loginprofile2 = new LoginProfile("03d41695-d745-421c-8b73-1782051a6af5",
                                                          "c8171de9-444c-4f99-b28c-e6d2875e13a3");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("909f7e00-159e-4374-b74f-7289d5cc5041",
                                                     "9a8bdf6a-ad2d-44eb-9b03-bd5d05c4ab7d");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("fad896e4-5696-4b18-8ced-9b644a80de82",
                                                          "0ccdeed5-063e-481b-bece-d7517ac8ed8d");
            LoginProfile loginprofile2 = new LoginProfile("fad896e4-5696-4b18-8ced-9b644a80de82",
                                                          "0ccdeed5-063e-481b-bece-d7517ac8ed8d");
            LoginProfile loginprofile3 = new LoginProfile("8d0cbd57-a49f-4ec5-8271-7182344b973c",
                                                          "b2f92e81-47d9-48e8-b8a2-b7384b6b7244");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
