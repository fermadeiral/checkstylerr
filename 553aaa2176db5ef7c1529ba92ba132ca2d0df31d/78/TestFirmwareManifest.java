// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1560440635702L), -99,
                                                                      "877c7728-6b94-4a36-afe0-9c25f583a1ed",
                                                                      "1f5f81dd-fcce-47b3-a62b-3ba8b682169c",
                                                                      "473e9ac9-ce01-40ec-ac32-c77dadae528a",
                                                                      "bc8abca7-536d-4702-825c-9abd199d7be5",
                                                                      "222ccfe3-7188-4e2a-815d-a4d24e95d652",
                                                                      "f3f9283c-b44f-4f75-9e64-f0c130158a92",
                                                                      new Date(1560440630533L),
                                                                      new Date(1560440630709L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1560440628420L), 11,
                                                                      "0e50d1c4-045b-493f-bf55-a29defcab16e",
                                                                      "bad7f053-7b1a-4b67-bd05-9c69e5aec9e4",
                                                                      "175dbba7-917f-48df-acbb-28df20f41618",
                                                                      "6c1575f7-f734-4499-8eff-7f425dd2b217",
                                                                      "ba6bc4f4-c4a4-4448-b9a0-959fa70d2809",
                                                                      "0929a49b-c5a6-4481-bc78-1dacdb16d21f",
                                                                      new Date(1560440627857L),
                                                                      new Date(1560440627299L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1560440628420L), 11,
                                                                      "0e50d1c4-045b-493f-bf55-a29defcab16e",
                                                                      "bad7f053-7b1a-4b67-bd05-9c69e5aec9e4",
                                                                      "175dbba7-917f-48df-acbb-28df20f41618",
                                                                      "6c1575f7-f734-4499-8eff-7f425dd2b217",
                                                                      "ba6bc4f4-c4a4-4448-b9a0-959fa70d2809",
                                                                      "0929a49b-c5a6-4481-bc78-1dacdb16d21f",
                                                                      new Date(1560440627857L),
                                                                      new Date(1560440627299L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1560440631371L), -42,
                                                                 "d65cca6e-0073-4e92-816d-378da50aadce",
                                                                 "95ac6de8-1989-4be4-a144-707fb481da20",
                                                                 "44673dc9-a31a-4d7f-a7ee-c685fea4afe2",
                                                                 "cbdaa479-30e6-4345-b405-18e75ce6477d",
                                                                 "89570cb9-0196-46b1-b2f7-02dcced9fbac",
                                                                 "f05ded63-8034-4212-aecf-4b3fb9ffe5d4",
                                                                 new Date(1560440633416L), new Date(1560440629802L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1560440632451L), 70,
                                                                        "473b4cd9-96ec-43db-b377-e62810da38c5",
                                                                        "307bd758-7a96-4471-87d4-e6e0edbfdec285f4984f-666b-4fd0-bc60-19f4b802863d6050773e-7d5f-443d-bd10-83fc90d3ca6d258c0c36-ed35-4c81-a4fc-038b136f7bdfe1108d84-5a9a-42e2-a4e6-30bc8965299711d4ce86-e375-4665-8718-892247da3985ab03565c-6907-4e9e-8929-10a657e27af434b14291-d85a-4163-b98b-3ff6892e888f50d0f46a-c8c9-47bb-8cea-184518c32f4ff46411ea-188c-4661-9087-d82e3178f8d971b0cdf1-1357-4979-a017-34d72232330227330f55-f1df-4d44-bc14-18ad01a8dc1813841672-53c7-43a2-be59-46f13de28d3013472fde-a082-44a6-9322-d79d44029dcd84dbf84a-e26c-40e6-a7d9-117051d3753a88acce56-e34f-4c93-81cc-bc9e400c050e0807c1c7-e065-4669-b0fd-7cb5e727e69cc425667d-9132-4bfa-85b3-919823586317638a183c-5b3e-4174-832c-2624895b63f21acf119f-43da-47ce-bf22-4d9182038920e47bb343-2273-4baf-8e9e-cc40c2723c7045c2b744-c7cb-4a35-970a-40765cbd92212978e704-b668-4e12-87db-57a21cb1701fdbf9d9bf-717c-4bb1-9c6b-5b8b96ea4c3098863a7a-8a7c-446c-8eea-1e749a77ae191e5b201f-f400-4d2d-8237-ef4622c2b3604aa4cb2b-6451-4226-82f0-cf74da9c105baf608f2e-d756-4fed-a3d3-e2e12800ab1e852972d0-d521-45b0-acbd-ce4621c4dd353e090d53-86f2-43f7-aae0-de4e521cd3f87914e769-8de6-4c14-91b9-77d0bedb777e70e83546-800c-429d-b28c-6cc1993e36eefa0b7d94-2e4b-4a85-9cb9-8e161698397969234cce-d9de-4357-897c-afeb121746a9825481eb-1000-45b1-bff1-a6e75667c037259e5ce4-4a1b-463b-8b5b-ea247f9cafd03e04a2ca-a408-4480-95cb-3acdcb671b57185e8650-1166-4b1b-94ca-b4b1aac6e502f7d78df6-265f-41d7-a818-480bac6e012fbfee91a1-2176-4056-ad41-6524dda44a371022e5f9-5ced-41db-b44e-a8a0bca92ab87af0cf0e-a470-42e3-8b7c-13c08f34b6a42db228cd-25e8-498c-9be2-72ee979a8771baf2fcf0-f69e-4406-ab8a-ba46a3d4acca6dd31184-7927-4557-9fd6-414698633e6ce5fff139-50dc-4932-bc1d-f51ef3222d4722cc61bb-11f5-419b-96d2-e512212e2fd9c908a725-402e-4515-b4b0-526bf047b5bfc9838447-b63b-40dd-aa29-5caad22671908ffed706-d4fa-4f8f-a258-7aa0a35d19b973a9f97a-e336-41ff-9000-856b91b5abcf8252c43f-5c2e-4c8b-82f8-1298976d64db66c40c65-ec98-46e2-b6d4-c422cd126c96eebcd0cc-9521-46f8-83d4-69af9e27993499e2f744-d553-4b98-8b73-88ec1f05bc7efdbebbbe-c853-4a47-a049-f08c4c8ebda4",
                                                                        "36513e34-1e42-47c6-81f0-f3f1721082c3",
                                                                        "a64fc1cd-7092-47a7-ad19-08a307858425",
                                                                        "c33c67d9-7841-464b-8d5a-c961e5dd3261",
                                                                        "5e2f2160-c986-4b7e-a438-77aab7f6fbb34687d6a1-371b-4f5b-830f-3409e8b291e533db37c6-46ac-4691-be3b-1d0a8f17dd6f4c47cced-3a27-4595-93e7-2e6a35bfb2c5",
                                                                        new Date(1560440635652L),
                                                                        new Date(1560440632952L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1560440630566L), 61,
                                                                      "1c74547a-aab6-4d10-bd7e-a05ab8153c0c",
                                                                      "ffc099c4-d468-49dd-9cc6-877ddb6906ed",
                                                                      "88e6133d-7dd8-4da8-99a2-8ecb70f0bbb6",
                                                                      "252ba9c3-1f08-435b-8a72-87f84dc53d05",
                                                                      "8ea2eb7d-b35f-43c8-9031-73ef6083260c",
                                                                      "12434f54-c51f-4b2c-b98c-8fdc07175b1b",
                                                                      new Date(1560440629092L),
                                                                      new Date(1560440633884L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1560440630566L), 61,
                                                                      "1c74547a-aab6-4d10-bd7e-a05ab8153c0c",
                                                                      "ffc099c4-d468-49dd-9cc6-877ddb6906ed",
                                                                      "88e6133d-7dd8-4da8-99a2-8ecb70f0bbb6",
                                                                      "252ba9c3-1f08-435b-8a72-87f84dc53d05",
                                                                      "8ea2eb7d-b35f-43c8-9031-73ef6083260c",
                                                                      "12434f54-c51f-4b2c-b98c-8fdc07175b1b",
                                                                      new Date(1560440629092L),
                                                                      new Date(1560440633884L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1560440634615L), 43,
                                                                      "31ef3491-a8f6-4031-bf1e-144c0b5cb01d",
                                                                      "2357c8c1-49ed-49d7-9720-e4fa41712e29",
                                                                      "ad95bef9-7789-4ecb-9250-03b760fd3801",
                                                                      "22c55ffe-e905-4949-b901-7ede524f6b88",
                                                                      "8e52e87e-166f-463c-91c9-6ffede8ab2f3",
                                                                      "d0db6bcf-b1fc-4d2d-a5de-d52bc59696cb",
                                                                      new Date(1560440635696L),
                                                                      new Date(1560440626797L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
