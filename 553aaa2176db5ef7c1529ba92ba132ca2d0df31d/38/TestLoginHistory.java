// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1560440632536L),
                                                          "c2163185-9fce-416c-9a1e-4beeb1d427fb", false,
                                                          "7e3390eb-cdf9-4af7-84a5-7e9be2ef8400");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1560440628547L),
                                                          "a209bc44-c9a6-4fb9-8370-644911a7f8bb", false,
                                                          "20df15dd-09d7-4592-bba1-d4f07d19a705");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1560440628547L),
                                                          "a209bc44-c9a6-4fb9-8370-644911a7f8bb", false,
                                                          "20df15dd-09d7-4592-bba1-d4f07d19a705");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1560440628361L), "456bde1c-6a30-4db5-b3ef-97ceda6458a3",
                                                     true, "cb54a682-0f57-4e53-8c60-5020347ce5ec");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1560440631136L),
                                                          "2fd8d0b5-01f8-4899-96f0-0281ad95fb67", true,
                                                          "02c440d4-18d4-49f8-a145-829d01771e70");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1560440631136L),
                                                          "2fd8d0b5-01f8-4899-96f0-0281ad95fb67", true,
                                                          "02c440d4-18d4-49f8-a145-829d01771e70");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1560440631945L),
                                                          "a2950bf3-4037-4544-ad8f-469793e14ae7", true,
                                                          "2997ad26-bd25-4fb2-8edc-682f6b74479e");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
