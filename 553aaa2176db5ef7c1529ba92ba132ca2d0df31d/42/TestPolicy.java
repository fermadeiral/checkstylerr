// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("e9a86d35-7e65-4462-808d-8cb32317ba26", false,
                                        "5e88224b-27fe-459c-abaa-6bf46ab93e87", false,
                                        "4b383078-ff0f-4c1c-bcef-d74e3cc3f287");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("16235bda-85e5-48fe-b470-568e24bd5f15", true,
                                        "d50051ee-aac2-4529-99ac-08a0796d3864", false,
                                        "970fc3ed-f0ee-4e00-9488-52d537344ac1");
            Policy policy2 = new Policy("16235bda-85e5-48fe-b470-568e24bd5f15", true,
                                        "d50051ee-aac2-4529-99ac-08a0796d3864", false,
                                        "970fc3ed-f0ee-4e00-9488-52d537344ac1");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("044c79c6-5c91-4efd-b967-dcccddb04a29", false,
                                   "9e83cc3e-1660-473f-81fa-683199e05330", true,
                                   "37de0163-000f-46e2-ae41-ae11f12cd1b8");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("a6fad1f9-ea3d-4c2d-9c29-8cddb8ceac8c", false,
                                        "a779084c-7468-4614-a3d3-95c9c880f3b4", false,
                                        "02ddbcee-32dd-4713-9b9d-b583713dc9a1");
            Policy policy2 = new Policy("a6fad1f9-ea3d-4c2d-9c29-8cddb8ceac8c", false,
                                        "a779084c-7468-4614-a3d3-95c9c880f3b4", false,
                                        "02ddbcee-32dd-4713-9b9d-b583713dc9a1");
            Policy policy3 = new Policy("8d979496-efc5-4fc3-99fe-6e27eea45d13", false,
                                        "790820b6-efd4-498a-a90e-1d9d7253029f", false,
                                        "c1598eec-bcc1-4570-8e1c-7fe88bf0e9fc");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
