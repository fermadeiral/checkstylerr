// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1560440632946L),
                                                                         "dc5982de-bfe6-4066-97cd-9fd14869ffb3",
                                                                         "3c48e37c-cdd8-46dd-b33e-e9900df07108",
                                                                         "e82a4061-80cc-44aa-a293-3e37e3ba6701");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1560440630914L),
                                                                         "dc6d7f34-9480-40e6-9a85-c0d63c3ca8b1",
                                                                         "ed93d174-6227-40f5-9d2e-63519c574e60",
                                                                         "4f450ba2-09e6-4bbd-9db1-fe4f99fe2c55");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1560440630914L),
                                                                         "dc6d7f34-9480-40e6-9a85-c0d63c3ca8b1",
                                                                         "ed93d174-6227-40f5-9d2e-63519c574e60",
                                                                         "4f450ba2-09e6-4bbd-9db1-fe4f99fe2c55");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1560440632804L),
                                                                    "682db46c-2265-429e-82a1-cf0bbaf0b695",
                                                                    "7eea1f12-32aa-4167-ae44-53dd38a50dde",
                                                                    "c998a072-269e-42a8-bc0f-e05b285e398d");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1560440633549L),
                                                                         "463781e3-686d-4c71-bb78-4b01b5c4e6d5",
                                                                         "e507acaf-4abe-4c38-8429-554b7313f584",
                                                                         "b4010265-280f-435a-a024-3be1b1c3fa91");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1560440633549L),
                                                                         "463781e3-686d-4c71-bb78-4b01b5c4e6d5",
                                                                         "e507acaf-4abe-4c38-8429-554b7313f584",
                                                                         "b4010265-280f-435a-a024-3be1b1c3fa91");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1560440631664L),
                                                                         "49d600b1-e86d-4185-bc4d-b1fe44952423",
                                                                         "5c0cff02-d17e-4044-ae85-4c4317dbafac",
                                                                         "af307a3a-8a8b-48b6-aef0-95f6b2b138f6");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
