// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           new Date(1560440627420L),
                                                                                           "e86b0.6d09d@00645.me",
                                                                                           new Date(1560440626790L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           null,
                                                                                           new Date(1560440631215L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           new Date(1560440628961L),
                                                                                           "03d70.3b974@77b9a.fr",
                                                                                           new Date(1560440632669L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           null,
                                                                                           new Date(1560440630498L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           new Date(1560440628961L),
                                                                                           "03d70.3b974@77b9a.fr",
                                                                                           new Date(1560440632669L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           null,
                                                                                           new Date(1560440630498L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                      new Date(1560440634483L),
                                                                                      "b29d9.a2d82@a1d67.me",
                                                                                      new Date(1560440626091L),
                                                                                      "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                      null, new Date(1560440635682L),
                                                                                      "f45208d7fb27c60aa6f7980ca7e43569");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1560440629140L),
                                                                                             null,
                                                                                             new Date(1560440628188L),
                                                                                             "\u001511IU^Û²è…˜?åˆ±D\u0014'â½ˆ?/\u000eXëªŒ,#â±•í›¶:1à²±Eèº™åˆ?éƒ‚1R\u0006\u001eB1$$1\t1!.111\u001c1'ê€€1\u0006C1O\u0003ç¡š1I@D=1",
                                                                                             null,
                                                                                             new Date(1560440628088L),
                                                                                             "\u001511IU^Û²è…˜?åˆ±D\u0014'â½ˆ?/\u000eXëªŒ,#â±•í›¶:1à²±Eèº™åˆ?éƒ‚1R\u0006\u001eB1$$1\t1!.111\u001c1'ê€€1\u0006C1O\u0003ç¡š1I@D=1");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           new Date(1560440628070L),
                                                                                           "c4e20.1cad3@576f5.fr",
                                                                                           new Date(1560440628298L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           null,
                                                                                           new Date(1560440627392L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           new Date(1560440628070L),
                                                                                           "c4e20.1cad3@576f5.fr",
                                                                                           new Date(1560440628298L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           null,
                                                                                           new Date(1560440627392L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           new Date(1560440629501L),
                                                                                           "4a8e8.4b52a@8a376.fr",
                                                                                           new Date(1560440629280L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569",
                                                                                           null,
                                                                                           new Date(1560440635409L),
                                                                                           "f45208d7fb27c60aa6f7980ca7e43569");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
