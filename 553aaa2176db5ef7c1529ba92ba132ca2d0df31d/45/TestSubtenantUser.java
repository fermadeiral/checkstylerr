// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                             "002ce98f-2558-4dac-9271-b3a5fc2b7207",
                                                             new Date(1560440631411L), -22, null,
                                                             "14bd2.68ad2@885dd.me", true,
                                                             "cfba8037-cf01-4502-9d80-d0b0240a6056",
                                                             "f45208d7fb27c60aa6f7980ca7e43569", false, false, true, 83,
                                                             null, null, "670a2c17-6ae6-4041-9dac-c9050e0ef18b", -8,
                                                             "530c3457-3962-466b-b98a-049e5f88e82b",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1560440635692L), "==y3b");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                             "1f7cd6f7-0868-4762-a4a9-2a57279a74b5",
                                                             new Date(1560440634777L), -2, null, "781c0.44d3b@bbc3e.me",
                                                             false, "6acdff5c-0a4a-49e7-b5e3-0bc9d6743786",
                                                             "f45208d7fb27c60aa6f7980ca7e43569", true, true, false, 125,
                                                             null, null, "834730d8-74c5-4f7f-913d-ca5aef1c7176", 95,
                                                             "9688e2ae-5805-485c-8a68-c9c8453b6416",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1560440631474L), "==y3b");
            SubtenantUser subtenantuser2 = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                             "1f7cd6f7-0868-4762-a4a9-2a57279a74b5",
                                                             new Date(1560440634777L), -2, null, "781c0.44d3b@bbc3e.me",
                                                             false, "6acdff5c-0a4a-49e7-b5e3-0bc9d6743786",
                                                             "f45208d7fb27c60aa6f7980ca7e43569", true, true, false, 125,
                                                             null, null, "834730d8-74c5-4f7f-913d-ca5aef1c7176", 95,
                                                             "9688e2ae-5805-485c-8a68-c9c8453b6416",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1560440631474L), "==y3b");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                        "81afeb74-64fa-422e-af2c-cc6e6f909e85",
                                                        new Date(1560440634791L), 32, null, "d1ef8.71c81@d7b50.fr",
                                                        false, "0f8fc720-20d8-4477-aec6-9d6689e55c77",
                                                        "f45208d7fb27c60aa6f7980ca7e43569", true, false, true, 121,
                                                        null, null, "3e2a7f4f-5d4a-4887-bdcc-a8259ffcb1d3", -76,
                                                        "33f0dd1f-e1e7-41ea-9c0a-fe6e5394f6e3",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1560440631934L), "==y3b");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "6cb777af-3ee4-4711-9002-086c3f35b619",
                                                               new Date(1560440634547L), -89, null, null, true,
                                                               "de3672ce-b3dd-4a33-9043-542989e84b20e1a5f914-fc1a-4c9e-83e9-0a16f1db3e4f5647382c-fde3-425e-b928-0ebad2007d0e",
                                                               "\u001511IU^Û²è…˜?åˆ±D\u0014'â½ˆ?/\u000eXëªŒ,#â±•í›¶:1à²±Eèº™åˆ?éƒ‚1R\u0006\u001eB1$$1\t1!.111\u001c1'ê€€1\u0006C1O\u0003ç¡š1I@D=1",
                                                               false, false, true, -54, null, null,
                                                               "b0671489-1039-46cb-90fd-011282a03876", 54,
                                                               "df0f94c0-f77c-461d-bb8d-94a7b48bc5ebd0b5e6d7-d8e2-452b-a66c-e31a76295e3602fa8b29-4103-44b4-81cd-58edcd28f5c7",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1560440632080L),
                                                               "ï‚¬7à°?\u00185f]H8DuFW:\u0015Eqeä¬?c9&m8Z\u0013dà»Š\u0019?æ·?pì»‰\u0003254FPxE\u001587@Z\u0012A\u0015^gì??-A\u000e0W<6d\u001cDf+");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                             "1579242d-d6d0-47e0-af46-5761a8cd6991",
                                                             new Date(1560440632475L), 115, null,
                                                             "80fe3.73464@eccda.fr", true,
                                                             "0c526031-c5c0-41bf-bc43-b359a2a3701d",
                                                             "f45208d7fb27c60aa6f7980ca7e43569", false, true, true, -11,
                                                             null, null, "dd507988-b1f1-4903-9a19-2fc8d97700d8", 21,
                                                             "d2f37280-8cbd-46b4-8fc2-68332ce6a134",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1560440628507L), "==y3b");
            SubtenantUser subtenantuser2 = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                             "1579242d-d6d0-47e0-af46-5761a8cd6991",
                                                             new Date(1560440632475L), 115, null,
                                                             "80fe3.73464@eccda.fr", true,
                                                             "0c526031-c5c0-41bf-bc43-b359a2a3701d",
                                                             "f45208d7fb27c60aa6f7980ca7e43569", false, true, true, -11,
                                                             null, null, "dd507988-b1f1-4903-9a19-2fc8d97700d8", 21,
                                                             "d2f37280-8cbd-46b4-8fc2-68332ce6a134",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1560440628507L), "==y3b");
            SubtenantUser subtenantuser3 = new SubtenantUser("f45208d7fb27c60aa6f7980ca7e43569", null,
                                                             "e8eb161d-0854-4a91-9b37-3155c3df3135",
                                                             new Date(1560440631527L), -94, null,
                                                             "386c0.97e0f@9666f.fr", true,
                                                             "fa30cf78-2e6a-49eb-a108-f21dfdc2945a",
                                                             "f45208d7fb27c60aa6f7980ca7e43569", false, true, true, 118,
                                                             null, null, "5a2dc6d2-21b8-4c75-a4dc-4e2674e69e89", -95,
                                                             "458350f3-7197-4cb4-b08b-069024cf78e1",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1560440626024L), "==y3b");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
