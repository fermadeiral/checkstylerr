// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("d409b6f4-f58d-4b90-9c56-422a56a549d9",
                                                          "0b59aa94-4c99-4fa2-ab9f-a74b1c7335ef");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("a9e2b4b8-4793-47c9-9a2f-db6a0e6a7afa",
                                                          "4fdb6db2-322e-45cd-8935-7f07254e3ee5");
            LoginProfile loginprofile2 = new LoginProfile("a9e2b4b8-4793-47c9-9a2f-db6a0e6a7afa",
                                                          "4fdb6db2-322e-45cd-8935-7f07254e3ee5");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("a2fbeef1-c6ec-458c-a432-fc23abc81a4d",
                                                     "8ee8bd82-b589-49d2-9db1-b0d329cf218c");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("1aefcda7-aa78-4a04-abab-6e8502a68c56",
                                                          "9af54856-6341-4bf9-8e0b-f9b1986fdbab");
            LoginProfile loginprofile2 = new LoginProfile("1aefcda7-aa78-4a04-abab-6e8502a68c56",
                                                          "9af54856-6341-4bf9-8e0b-f9b1986fdbab");
            LoginProfile loginprofile3 = new LoginProfile("8ad9cf13-99c6-485a-bf37-21cff87fa000",
                                                          "5f368f30-fb3f-4c32-87b7-a94f2c849f0a");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
