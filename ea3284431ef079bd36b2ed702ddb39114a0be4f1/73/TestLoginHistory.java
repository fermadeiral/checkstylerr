// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1552426067646L),
                                                          "9b5474e0-b078-4a96-8824-e25d049444f6", false,
                                                          "451b105e-4164-4d51-8811-0b1ea291be08");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1552426068161L),
                                                          "9359a2a2-ca85-4984-95a6-004985a1be78", true,
                                                          "26bc1057-ccc9-4f31-b981-bbfa3e20d46d");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1552426068161L),
                                                          "9359a2a2-ca85-4984-95a6-004985a1be78", true,
                                                          "26bc1057-ccc9-4f31-b981-bbfa3e20d46d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1552426072164L), "229d27cd-ccdd-4fde-a098-f45042fb555f",
                                                     true, "9111d1d9-fefb-428f-b276-7cad4310cdc3");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1552426067685L),
                                                          "873d72d0-a47a-4fbf-8f57-f740f61d7156", true,
                                                          "7d46f15b-3cc2-412b-a1dd-60c5c29a6c89");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1552426067685L),
                                                          "873d72d0-a47a-4fbf-8f57-f740f61d7156", true,
                                                          "7d46f15b-3cc2-412b-a1dd-60c5c29a6c89");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1552426064336L),
                                                          "5ec36fa9-a5b0-4112-ac45-3e1f1ad825cb", true,
                                                          "eb3fc492-d010-4852-8cac-a5278302a016");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
