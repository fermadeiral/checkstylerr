// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("02f1b7f1-362b-4b5a-b328-caa70015bb9c",
                                                                                           new Date(1552426070030L),
                                                                                           "be6b0990-7d93-4976-84b5-1fa701101717",
                                                                                           new Date(1552426073158L),
                                                                                           "3e3c7f9a-e8d1-4d15-8ae8-5451f300f596",
                                                                                           null,
                                                                                           new Date(1552426066431L),
                                                                                           "423c6c4b-5369-492c-bfb4-c635d225be01");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("0a2ef9ef-924e-42ae-be8f-2b5dc85cb7c2",
                                                                                           new Date(1552426064184L),
                                                                                           "f190f260-a6b5-4b72-ad32-87e072fc5a9a",
                                                                                           new Date(1552426065776L),
                                                                                           "2586c39f-54a1-4bef-84ea-1964bbfc6f48",
                                                                                           null,
                                                                                           new Date(1552426072573L),
                                                                                           "f5973716-a6a4-427a-a216-8335ef653983");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("0a2ef9ef-924e-42ae-be8f-2b5dc85cb7c2",
                                                                                           new Date(1552426064184L),
                                                                                           "f190f260-a6b5-4b72-ad32-87e072fc5a9a",
                                                                                           new Date(1552426065776L),
                                                                                           "2586c39f-54a1-4bef-84ea-1964bbfc6f48",
                                                                                           null,
                                                                                           new Date(1552426072573L),
                                                                                           "f5973716-a6a4-427a-a216-8335ef653983");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("0dd7d7ce-e704-4a9b-87a9-617c7cafd32f",
                                                                                      new Date(1552426069633L),
                                                                                      "c880c0e3-36d5-44ed-8c31-89090dcfe735",
                                                                                      new Date(1552426065556L),
                                                                                      "4ef04cba-083b-49da-bd14-9052733c72cd",
                                                                                      null, new Date(1552426064551L),
                                                                                      "da527bff-f095-4812-b49e-f97ec59062b3");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1552426067554L),
                                                                                             null,
                                                                                             new Date(1552426063570L),
                                                                                             "1d3ea1d9-bffc-44d1-aeba-9eed74be754d",
                                                                                             null,
                                                                                             new Date(1552426063458L),
                                                                                             "0cae20fe-6f90-479d-af1a-91cc22b66efb");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("79c989bb-29b6-4afe-b90f-6d8032a5cad6",
                                                                                           new Date(1552426069921L),
                                                                                           "da267ebb-d488-4e03-a46a-69a56892389d",
                                                                                           new Date(1552426069788L),
                                                                                           "2d94979f-a652-4899-bbee-e07928c3dab4",
                                                                                           null,
                                                                                           new Date(1552426072725L),
                                                                                           "d3eaafd2-751b-433f-94ed-35b636d61797");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("79c989bb-29b6-4afe-b90f-6d8032a5cad6",
                                                                                           new Date(1552426069921L),
                                                                                           "da267ebb-d488-4e03-a46a-69a56892389d",
                                                                                           new Date(1552426069788L),
                                                                                           "2d94979f-a652-4899-bbee-e07928c3dab4",
                                                                                           null,
                                                                                           new Date(1552426072725L),
                                                                                           "d3eaafd2-751b-433f-94ed-35b636d61797");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("0f28d921-8fdb-43a8-8dde-eb3f6e67d497",
                                                                                           new Date(1552426069079L),
                                                                                           "2538f563-c9c4-4ef3-9ecb-e1c24b0ddace",
                                                                                           new Date(1552426070059L),
                                                                                           "b0fa1677-4f76-45d3-8407-352cac45bfec",
                                                                                           null,
                                                                                           new Date(1552426071863L),
                                                                                           "2378d36f-1312-4bc3-9aeb-99a79fd0ac5e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
