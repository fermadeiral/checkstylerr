// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("ee81024e-ef0d-467b-99cf-b1b6299bfc8c",
                                                             "6f1b3255-5052-4f0a-bb1f-00ebca6b751b",
                                                             "219bc071-9fb9-48a0-8848-8195199de1c2");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("647b4367-dc34-4d5f-a57e-aae7780e2195",
                                                             "3b473fa5-0008-4d33-8112-4122b8e26156",
                                                             "faa93e7c-0147-456d-9635-d56298559a65");
            ParentAccount parentaccount2 = new ParentAccount("647b4367-dc34-4d5f-a57e-aae7780e2195",
                                                             "3b473fa5-0008-4d33-8112-4122b8e26156",
                                                             "faa93e7c-0147-456d-9635-d56298559a65");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("0b910224-1d23-45eb-988f-2808e6d372da",
                                                        "283e3a64-4bc5-4961-baf7-69803b2f972b",
                                                        "58ca175e-fe82-493a-bc65-e8f94bee00b0");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("929fdfb9-ddf1-4c77-8952-8e0f95fea7df",
                                                             "32aa7c40-fafd-440e-903f-0de9fd7e32b6",
                                                             "7a6d6ff6-bd0d-47d9-ba9f-a709a3fcd451");
            ParentAccount parentaccount2 = new ParentAccount("929fdfb9-ddf1-4c77-8952-8e0f95fea7df",
                                                             "32aa7c40-fafd-440e-903f-0de9fd7e32b6",
                                                             "7a6d6ff6-bd0d-47d9-ba9f-a709a3fcd451");
            ParentAccount parentaccount3 = new ParentAccount("9fbafbcf-3a34-4a91-8dcc-51e6e40130b2",
                                                             "9d4793f2-307f-4726-88dc-a33a3ac1289b",
                                                             "41883bed-5c94-498a-84ac-1a5a83a16248");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
