// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("cc36ffce92dfffa5a3eeacb0c012dfb4", new Date(1552426065201L), -4,
                                        "41bf56e6-958e-4168-8c91-fa42e821b039", "01d21142-fe52-4714-9453-f46ca65b001f",
                                        -21, "f725e297-69d0-4e72-a0ca-e613702e04a3",
                                        "86741c44-9d92-40c5-bad1-9146edbdcbe9", ApiKeyStatus.getDefault(),
                                        new Date(1552426070004L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("aa2a8b3f8c6d9bc21e3ad68dbb6c3dcb", new Date(1552426069739L), 36,
                                        "977225a9-f7b8-4dec-81f7-5567318935f2", "9e3e9f30-16ad-42cc-b5e5-ffef8a0a55ab",
                                        113, "76d2b1e5-6dca-43e3-a55a-750ab3ddcd77",
                                        "be8bf4b9-7255-497f-909c-9ba077e04627", ApiKeyStatus.getDefault(),
                                        new Date(1552426064198L));
            ApiKey apikey2 = new ApiKey("aa2a8b3f8c6d9bc21e3ad68dbb6c3dcb", new Date(1552426069739L), 36,
                                        "977225a9-f7b8-4dec-81f7-5567318935f2", "9e3e9f30-16ad-42cc-b5e5-ffef8a0a55ab",
                                        113, "76d2b1e5-6dca-43e3-a55a-750ab3ddcd77",
                                        "be8bf4b9-7255-497f-909c-9ba077e04627", ApiKeyStatus.getDefault(),
                                        new Date(1552426064198L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("e7ecdea2bfaa266b1c22f153ae19a7be", new Date(1552426065215L), -5,
                                   "f09b1670-3e9a-4918-a0b6-03a797878879", "f9ed555d-21bb-46fc-ac49-5a2b6086eb3d", -30,
                                   "4e053304-b326-491f-a059-7f9313abc655", "b43208eb-8bee-408b-b918-d4cda511c36f",
                                   ApiKeyStatus.getDefault(), new Date(1552426072136L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("C6[Y63T63 6/63\u00036\bï?µ33å¯–å›?*Jå‰„3\u00176\fä¹ ;6<\u001dY[`é´¼?)*33:3\u001163å‡‰\u001e6IK3è¡¦3E6ì¡ \u001a\b\u000b66",
                                          new Date(1552426071934L), 44, "a9179f68-afb2-444a-a35e-057c24ffc493",
                                          "b3994761-a04b-41a1-914f-704755681d6a", 63, null,
                                          "b580ff81-c56a-4477-9946-930fdc8072a4", ApiKeyStatus.getDefault(),
                                          new Date(1552426071544L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("d883bd50afbc055de185d86efcdb50ef", new Date(1552426067212L), 81,
                                        "9c9cc389-1d7a-4064-a1cc-7532e087a27d", "917039b0-85de-4d7f-b0ce-776acf3aecd0",
                                        -116, "d79f3a18-bb47-4129-9b5c-f19637088c6b",
                                        "4740840c-ec26-4bc0-8e92-e7925fe09f63", ApiKeyStatus.getDefault(),
                                        new Date(1552426069962L));
            ApiKey apikey2 = new ApiKey("d883bd50afbc055de185d86efcdb50ef", new Date(1552426067212L), 81,
                                        "9c9cc389-1d7a-4064-a1cc-7532e087a27d", "917039b0-85de-4d7f-b0ce-776acf3aecd0",
                                        -116, "d79f3a18-bb47-4129-9b5c-f19637088c6b",
                                        "4740840c-ec26-4bc0-8e92-e7925fe09f63", ApiKeyStatus.getDefault(),
                                        new Date(1552426069962L));
            ApiKey apikey3 = new ApiKey("ab9f5c9423e33903fcd1599d7daca3e7", new Date(1552426065716L), -117,
                                        "bf3ad5ac-cfdb-4e2d-ae73-0bf106c2a71e", "af5484f4-c364-4a1d-9166-a1194d13a2c7",
                                        -124, "db862ce4-0cb1-4bf2-8f98-125711dc374e",
                                        "87f8918b-03ce-437e-bae0-09713768af54", ApiKeyStatus.getDefault(),
                                        new Date(1552426071538L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
