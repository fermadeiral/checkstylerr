// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1552426065801L),
                                                                         "d438573b-e192-4bfa-9beb-c0c0b8fb43cc",
                                                                         "e32c2c0b-38c1-4a6f-86b3-55b53737fe69",
                                                                         "e05f466e-faee-4a5b-92b1-168aa64e31d3");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1552426072927L),
                                                                         "c98cf18d-a442-436d-8509-a9c70724f4b8",
                                                                         "4344821b-83b4-4b64-913e-98d45a785bb7",
                                                                         "4f1af1ac-28dd-406d-aa43-0901146003b4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1552426072927L),
                                                                         "c98cf18d-a442-436d-8509-a9c70724f4b8",
                                                                         "4344821b-83b4-4b64-913e-98d45a785bb7",
                                                                         "4f1af1ac-28dd-406d-aa43-0901146003b4");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1552426073221L),
                                                                    "84c6cac6-c0d9-448d-a0b3-872534d6bee8",
                                                                    "6a66793f-b3e4-4c27-823b-a3bd877d54a7",
                                                                    "2ffa86e0-e9c6-4770-9882-828b6e64f0bd");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1552426073262L),
                                                                         "a0339008-39e3-4efe-b4d1-03d5236445f5",
                                                                         "61317494-be81-422a-8dae-dbc1968e7001",
                                                                         "e9ec9de3-f591-48fb-bd3e-eafe4bcde5ee");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1552426073262L),
                                                                         "a0339008-39e3-4efe-b4d1-03d5236445f5",
                                                                         "61317494-be81-422a-8dae-dbc1968e7001",
                                                                         "e9ec9de3-f591-48fb-bd3e-eafe4bcde5ee");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1552426072429L),
                                                                         "9796b5f0-9d02-4458-8aae-d1e359ebbdd3",
                                                                         "e9be56f4-528b-4e03-ba04-bae498ef49a8",
                                                                         "d7785725-6c61-4fa9-8bcc-d02f0ac09459");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
