// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("b6550b3a-db02-45c6-981b-03bcb0f18f8a", null, "0f208c57-9318-488b-bc37-fb71bbeb6a43",
                                  new Date(1552426071376L), -54, null, "0ad1ff49-8bd2-474a-9e22-41fda7ac4733", true,
                                  "407d7a3c-c58b-4484-9429-31832d0adc95", "2e34bdc3-fbe0-4d9b-8453-9c75f08729e0", 42,
                                  null, null, true, "16e7cd01-fc1a-4819-a051-e6a7537f7e72", -60,
                                  "fcb4ea47-b4b5-48f4-846f-6111c2d1cf27", UserStatus.getDefault(), false, null, false,
                                  new Date(1552426073289L), "8ff0ad5d-fca6-4d0a-b69f-e8dc15eb677b");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("7c777a6f-f9f4-4d25-beab-cd726ec7b0af", null, "9ad120c3-44e8-4dbb-a00b-7b76ba539968",
                                  new Date(1552426066787L), -126, null, "cdb5bcc7-c0be-4948-a72d-30a3082c2388", false,
                                  "f50ecb64-ce59-43c5-8a99-26def7843502", "203bd27d-155e-4849-bef2-1a916b2fa7c7", -41,
                                  null, null, false, "3d1ca917-05ba-4a59-816d-72c5de5ed0dd", 89,
                                  "a429b56c-0884-4da0-8f39-e9783015680e", UserStatus.getDefault(), true, null, true,
                                  new Date(1552426070975L), "39e2b537-7bb2-4b9e-b834-1c2d8fd80283");
            User user2 = new User("7c777a6f-f9f4-4d25-beab-cd726ec7b0af", null, "9ad120c3-44e8-4dbb-a00b-7b76ba539968",
                                  new Date(1552426066787L), -126, null, "cdb5bcc7-c0be-4948-a72d-30a3082c2388", false,
                                  "f50ecb64-ce59-43c5-8a99-26def7843502", "203bd27d-155e-4849-bef2-1a916b2fa7c7", -41,
                                  null, null, false, "3d1ca917-05ba-4a59-816d-72c5de5ed0dd", 89,
                                  "a429b56c-0884-4da0-8f39-e9783015680e", UserStatus.getDefault(), true, null, true,
                                  new Date(1552426070975L), "39e2b537-7bb2-4b9e-b834-1c2d8fd80283");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("5e28315d-46f9-4808-bd91-ec5f6ff9f881", null, "9b32c9a4-5125-4c76-8cf6-1a4c29801cf3",
                             new Date(1552426064314L), 27, null, "4eac08ec-73e0-4045-92dc-10c1b6eac8e8", false,
                             "29bedc47-09f4-4581-b90d-df01005197f6", "34cdfcd4-4d8e-4762-89b2-80b48f6e4388", 40, null,
                             null, false, "11331fca-03fb-46d6-bbee-1b93782b205e", 17,
                             "54e5a6e2-4f9c-43f4-8029-a7e5b57ec5eb", UserStatus.getDefault(), false, null, false,
                             new Date(1552426067110L), "8510d080-44ef-4e57-9616-bf980ded2e40");
        assertTrue(user.isValid());
        User userInvalid = new User("69abc2b8-10fd-4b20-95ee-b5885b823fb9", null,
                                    "e65aa5f2-2eb1-477d-840f-ea6a2faf7b0c", new Date(1552426071955L), -72, null, null,
                                    false, "ba08ad11-da1a-4fe7-b6f3-c670e09f8102",
                                    "9fcaeedb-2767-44e0-9aa5-35c66af64af7", 30, null, null, false,
                                    "8b9a5af7-eece-4fe2-8cf6-c08b77ab1ac6", 45, "3e01a49c-c34a-4adb-a941-0a9695f88ec0",
                                    UserStatus.getDefault(), true, null, true, new Date(1552426072165L),
                                    "45fb5075-3987-492a-85ca-5deca748b7f0");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("03e02f1d-1022-4c71-8e55-7c5b72f282bc", null, "a00c9973-08a6-4a17-a77b-8c814ed9a8ea",
                                  new Date(1552426063798L), 28, null, "cd274e45-5805-442c-9e3c-bd035ab46cdf", true,
                                  "7a6c16b1-ee5c-49e5-b8b3-6d777d766ef7", "6ce1af6f-4d7c-4733-8394-61ac8fa136db", 121,
                                  null, null, true, "eefbf1a6-7d05-432d-862a-cb8579ec5578", -58,
                                  "185da522-851a-4aa8-941f-d7d01bb22b0c", UserStatus.getDefault(), false, null, false,
                                  new Date(1552426067427L), "f36d0f7e-86a2-4999-88f8-028e8f51db41");
            User user2 = new User("03e02f1d-1022-4c71-8e55-7c5b72f282bc", null, "a00c9973-08a6-4a17-a77b-8c814ed9a8ea",
                                  new Date(1552426063798L), 28, null, "cd274e45-5805-442c-9e3c-bd035ab46cdf", true,
                                  "7a6c16b1-ee5c-49e5-b8b3-6d777d766ef7", "6ce1af6f-4d7c-4733-8394-61ac8fa136db", 121,
                                  null, null, true, "eefbf1a6-7d05-432d-862a-cb8579ec5578", -58,
                                  "185da522-851a-4aa8-941f-d7d01bb22b0c", UserStatus.getDefault(), false, null, false,
                                  new Date(1552426067427L), "f36d0f7e-86a2-4999-88f8-028e8f51db41");
            User user3 = new User("87ba03b3-3a16-4811-ada8-9395eae3a86c", null, "764e224d-b7cf-44f7-b3cc-d581de6d9e16",
                                  new Date(1552426072348L), 93, null, "f35050e5-97dc-4fbe-a0bb-253ce1ed6569", true,
                                  "fa41c782-1c44-4fb5-8073-28eb0eb7e445", "02191f75-d4cb-47a2-ae1d-ce940704ecbe", 52,
                                  null, null, true, "70762dc8-3840-46ea-8537-0c94086aa0ec", 78,
                                  "92b9624c-e81d-469e-a553-8f02a30ec3a7", UserStatus.getDefault(), false, null, false,
                                  new Date(1552426070636L), "46cbf45c-7047-4313-96c3-28ec1d870e8b");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
