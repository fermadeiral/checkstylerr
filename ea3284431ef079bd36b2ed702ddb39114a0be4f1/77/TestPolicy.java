// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("2154a46e-7724-4cd0-a853-d21c7f5f62b9", true,
                                        "deb33c46-7f4e-4f32-b390-6fc5bdd231f2", true,
                                        "77daed8b-d726-42a5-a1b9-78f1f2087310");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("eec2d636-021a-4382-a8a4-7fd104b7687c", true,
                                        "3535be0e-bc72-41cc-94f1-a1b40bead636", true,
                                        "80bdb442-9ad1-4ac5-baab-ba1718a258bd");
            Policy policy2 = new Policy("eec2d636-021a-4382-a8a4-7fd104b7687c", true,
                                        "3535be0e-bc72-41cc-94f1-a1b40bead636", true,
                                        "80bdb442-9ad1-4ac5-baab-ba1718a258bd");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("1c7947a3-0d6f-4a3a-9144-c7f67a7e9ee8", true, "a22e4eb6-fea0-468e-9ca2-964d3f76692a",
                                   false, "9f96bb3b-e8db-44e7-ac4e-815148b2ec3d");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("2903cb16-67c6-43bf-872b-cd2cc2b3205a", true,
                                        "b6b2b7ac-7178-4950-b46c-01084db08921", false,
                                        "5033e6d6-dd3b-4835-ae21-7f0367eb6cc7");
            Policy policy2 = new Policy("2903cb16-67c6-43bf-872b-cd2cc2b3205a", true,
                                        "b6b2b7ac-7178-4950-b46c-01084db08921", false,
                                        "5033e6d6-dd3b-4835-ae21-7f0367eb6cc7");
            Policy policy3 = new Policy("1d40a3d0-e163-476e-b9c2-9adee31a522b", true,
                                        "0d3467b0-022a-406b-8fbd-abfbadfbb693", false,
                                        "0cec7f01-344e-400e-8c00-5fc78ee0d29d");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
