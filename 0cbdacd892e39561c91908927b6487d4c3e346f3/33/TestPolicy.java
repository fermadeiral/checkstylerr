// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("919efd2e-33d9-46cf-9ed8-dadb70e89eb4", true,
                                        "20a198a8-b18a-4e10-88cf-f1c5d23bdad0", false,
                                        "6d07b14a-5398-40b7-9f9f-0faf0c5436f9");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("26ca7a27-7fef-41f7-8f8c-5e37ab81ed00", true,
                                        "6f0cd9ed-6318-4d94-a498-7186ea3d6468", true,
                                        "c9421982-3953-40fe-9667-5543e56b0abe");
            Policy policy2 = new Policy("26ca7a27-7fef-41f7-8f8c-5e37ab81ed00", true,
                                        "6f0cd9ed-6318-4d94-a498-7186ea3d6468", true,
                                        "c9421982-3953-40fe-9667-5543e56b0abe");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("b9549121-1d27-4df7-a7f0-e32d0814e639", false,
                                   "587004ad-4657-4d72-a1f0-907e00f3fb19", false,
                                   "85241ecc-23d4-48a3-a21b-aad9be3dc275");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("7cebb0bf-22d0-4c17-a01f-d25170a427ca", true,
                                        "beff3fbf-04ce-4237-9833-c737f4def5f9", false,
                                        "fe95b635-db66-40bc-bf11-58296f7de8c8");
            Policy policy2 = new Policy("7cebb0bf-22d0-4c17-a01f-d25170a427ca", true,
                                        "beff3fbf-04ce-4237-9833-c737f4def5f9", false,
                                        "fe95b635-db66-40bc-bf11-58296f7de8c8");
            Policy policy3 = new Policy("c9c5cee6-cb66-4b04-980d-de29e17497ae", true,
                                        "577e7b90-6135-483a-8fc6-c0fad91c7991", false,
                                        "72348253-4445-4c72-a12e-fefa869febb7");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
