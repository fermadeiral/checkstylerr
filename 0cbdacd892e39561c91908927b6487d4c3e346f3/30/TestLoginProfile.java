// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("e7e9e8ee-743d-4cf5-abae-31aa835a2d2d",
                                                          "54e8f8ee-41ad-47e8-8287-2f4186e1e017");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("c2b98d88-f03c-4fb2-99a2-113a7517a992",
                                                          "b0cd4264-bb8c-41e5-a304-03ab9320a2ff");
            LoginProfile loginprofile2 = new LoginProfile("c2b98d88-f03c-4fb2-99a2-113a7517a992",
                                                          "b0cd4264-bb8c-41e5-a304-03ab9320a2ff");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("9a1c3cae-4b1a-4cf9-bc24-b872ea14c74b",
                                                     "a62f1860-f762-4904-b245-a101a5fc3265");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("b6a8b0fe-c5fb-43d9-8c96-eb7df885867b",
                                                          "bfcf1317-0fb7-40ac-ae6e-13f7a53d6fe3");
            LoginProfile loginprofile2 = new LoginProfile("b6a8b0fe-c5fb-43d9-8c96-eb7df885867b",
                                                          "bfcf1317-0fb7-40ac-ae6e-13f7a53d6fe3");
            LoginProfile loginprofile3 = new LoginProfile("9982f6d4-e217-4e27-b25b-895e7e757ab5",
                                                          "75c4fba4-36ee-4f28-ac73-94bd5fa141e3");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
