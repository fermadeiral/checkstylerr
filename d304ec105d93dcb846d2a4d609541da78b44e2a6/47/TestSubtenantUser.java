// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                             "bd44c0b2-ba85-4729-a5dc-9726d16d3399",
                                                             new Date(1561627149931L), 98, null, "9493a.a46bc@c112c.fr",
                                                             true, "fa0f082c-686d-4edb-9baa-ad29258e668f",
                                                             "c9e40e3b45da8196a8db5943d0f9acbd", false, true, false, 62,
                                                             null, null, "5d3e35f9-89bd-49fb-b102-6a1f6ff932f7", -46,
                                                             "8c15d4f5-7638-4c89-8a47-91e1d3ebf9d4",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561627144147L), "13+_3f");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                             "9f416dca-c9bb-498f-92fa-3fdebcfe4c4b",
                                                             new Date(1561627149373L), 12, null, "8b86c.221c4@96bf6.me",
                                                             false, "994401ac-e5ef-4439-a757-a78fe8c829e6",
                                                             "c9e40e3b45da8196a8db5943d0f9acbd", false, true, false,
                                                             -89, null, null, "6b487ed0-9899-4eb5-8c30-5133c447f7fd",
                                                             -34, "14bb87ce-4fe9-4a33-98fd-f55083bba371",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561627142745L), "13+_3f");
            SubtenantUser subtenantuser2 = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                             "9f416dca-c9bb-498f-92fa-3fdebcfe4c4b",
                                                             new Date(1561627149373L), 12, null, "8b86c.221c4@96bf6.me",
                                                             false, "994401ac-e5ef-4439-a757-a78fe8c829e6",
                                                             "c9e40e3b45da8196a8db5943d0f9acbd", false, true, false,
                                                             -89, null, null, "6b487ed0-9899-4eb5-8c30-5133c447f7fd",
                                                             -34, "14bb87ce-4fe9-4a33-98fd-f55083bba371",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561627142745L), "13+_3f");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                        "073bbad7-363a-42bc-8055-bc5852ed9cef",
                                                        new Date(1561627151433L), 33, null, "149ac.72933@ee028.fr",
                                                        true, "7b7cd64b-e4e4-4f31-a28f-9a54ca9837f8",
                                                        "c9e40e3b45da8196a8db5943d0f9acbd", false, false, false, 61,
                                                        null, null, "add604d0-f703-44b5-b11c-834d3728735f", -26,
                                                        "50f889a2-7aa7-45f5-a4ed-5c78a72426b5",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1561627150839L), "13+_3f");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "0799858d-5ee9-4e29-9f3e-c611d9e9bbfa",
                                                               new Date(1561627143381L), 121, null, null, true,
                                                               "886f6367-7ecc-45a9-9d27-81a3db4289868fd0f3f7-fdfa-4a46-ac5a-d33a30ec6cc048fae968-f249-49a8-bf00-f7e8a86f99fc",
                                                               "2K2Uê¸Ÿ777727'_2.ç©„á»›G72\u0011[\u0010Dã­˜Câ?µ\t77ê­ˆë”¡æ„”2'7í??7M\b\u0014ä¡­+2.à­ 72_V7277]à¾·2\u0010\u00032Z\u00157I",
                                                               false, false, true, -53, null, null,
                                                               "72151b8e-b91b-449c-b1de-de595a5994cd", 105,
                                                               "3fb8fa04-e3ed-4410-ada4-c7ebc449d261e3cc2994-d753-427d-ac6c-faffa609075647ec7329-a63f-48b8-94d9-8a6fb1f91079",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1561627144003L),
                                                               "cä“‡2\u001fï®Ÿ2]/'ê??.î£±`\u0006$$b\u0012ä—½ -èƒŽG2be\u001eä ‹db*0daå¨‹#âªµî´?26å‘±02,2Gd..28åœ¿c/22]2H\b2`2W");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                             "ce92e722-39eb-49c7-91d7-c92915543d87",
                                                             new Date(1561627150341L), 58, null, "b60e7.0508d@5bbe7.me",
                                                             false, "899c7e0a-5a80-44f8-997c-5d042e401fa0",
                                                             "c9e40e3b45da8196a8db5943d0f9acbd", false, true, true, -39,
                                                             null, null, "41a3ac2a-c937-407d-aadf-08dd17ac905d", 108,
                                                             "955d06c9-be1b-4866-8776-58f2bba91d56",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561627150241L), "13+_3f");
            SubtenantUser subtenantuser2 = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                             "ce92e722-39eb-49c7-91d7-c92915543d87",
                                                             new Date(1561627150341L), 58, null, "b60e7.0508d@5bbe7.me",
                                                             false, "899c7e0a-5a80-44f8-997c-5d042e401fa0",
                                                             "c9e40e3b45da8196a8db5943d0f9acbd", false, true, true, -39,
                                                             null, null, "41a3ac2a-c937-407d-aadf-08dd17ac905d", 108,
                                                             "955d06c9-be1b-4866-8776-58f2bba91d56",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561627150241L), "13+_3f");
            SubtenantUser subtenantuser3 = new SubtenantUser("c9e40e3b45da8196a8db5943d0f9acbd", null,
                                                             "99e47c91-90e3-45d6-b4b6-3c5aa84b1f49",
                                                             new Date(1561627143367L), 58, null, "44745.486b8@8e6d3.fr",
                                                             false, "76a294f7-c7d3-4dbd-ab29-7e0d64ef3277",
                                                             "c9e40e3b45da8196a8db5943d0f9acbd", false, true, true, -18,
                                                             null, null, "f786deb1-2da5-479e-b219-7cbc99420fd4", 80,
                                                             "0fe90106-5bd6-41e4-9b10-0352962a396e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561627143171L), "13+_3f");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
