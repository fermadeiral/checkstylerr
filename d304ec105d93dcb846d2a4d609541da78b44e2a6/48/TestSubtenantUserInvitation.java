// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           new Date(1561627143040L),
                                                                                           "2a9f7.7b4d7@abb00.me",
                                                                                           new Date(1561627147420L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           null,
                                                                                           new Date(1561627144053L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           new Date(1561627147634L),
                                                                                           "4904d.ca05e@7e28f.me",
                                                                                           new Date(1561627144064L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           null,
                                                                                           new Date(1561627148229L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           new Date(1561627147634L),
                                                                                           "4904d.ca05e@7e28f.me",
                                                                                           new Date(1561627144064L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           null,
                                                                                           new Date(1561627148229L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                      new Date(1561627149707L),
                                                                                      "a7da8.70b1f@00d03.fr",
                                                                                      new Date(1561627147443L),
                                                                                      "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                      null, new Date(1561627150141L),
                                                                                      "c9e40e3b45da8196a8db5943d0f9acbd");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1561627149266L),
                                                                                             null,
                                                                                             new Date(1561627146632L),
                                                                                             "2K2Uê¸Ÿ777727'_2.ç©„á»›G72\u0011[\u0010Dã­˜Câ?µ\t77ê­ˆë”¡æ„”2'7í??7M\b\u0014ä¡­+2.à­ 72_V7277]à¾·2\u0010\u00032Z\u00157I",
                                                                                             null,
                                                                                             new Date(1561627142542L),
                                                                                             "2K2Uê¸Ÿ777727'_2.ç©„á»›G72\u0011[\u0010Dã­˜Câ?µ\t77ê­ˆë”¡æ„”2'7í??7M\b\u0014ä¡­+2.à­ 72_V7277]à¾·2\u0010\u00032Z\u00157I");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           new Date(1561627146037L),
                                                                                           "93cdf.98a82@62581.fr",
                                                                                           new Date(1561627152152L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           null,
                                                                                           new Date(1561627146167L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           new Date(1561627146037L),
                                                                                           "93cdf.98a82@62581.fr",
                                                                                           new Date(1561627152152L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           null,
                                                                                           new Date(1561627146167L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           new Date(1561627143608L),
                                                                                           "977a0.b7598@20d24.me",
                                                                                           new Date(1561627143902L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                           null,
                                                                                           new Date(1561627147560L),
                                                                                           "c9e40e3b45da8196a8db5943d0f9acbd");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
