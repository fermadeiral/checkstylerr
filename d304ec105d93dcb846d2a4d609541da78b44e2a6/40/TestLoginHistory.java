// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561627146535L),
                                                          "16baeb05-cf13-426d-9d38-b6a5df1e2f75", true,
                                                          "e9176ee1-6c5e-4fac-a621-d5e59b6f72cf");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561627148681L),
                                                          "0003d9a2-117f-4c9b-b848-cce3d4386508", false,
                                                          "6cfe91b0-72c3-4e43-b5ce-f326b3df69e2");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561627148681L),
                                                          "0003d9a2-117f-4c9b-b848-cce3d4386508", false,
                                                          "6cfe91b0-72c3-4e43-b5ce-f326b3df69e2");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561627145574L), "f678a70b-0eb7-47c6-b373-9e1a8b0dde97",
                                                     true, "030eec37-ccce-4590-b706-2ef723e8108d");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561627145971L),
                                                          "ed25bd4b-551b-4a4c-8cae-ba7106f7267c", true,
                                                          "51c304f0-37f3-4bb1-a384-af8d5448a300");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561627145971L),
                                                          "ed25bd4b-551b-4a4c-8cae-ba7106f7267c", true,
                                                          "51c304f0-37f3-4bb1-a384-af8d5448a300");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561627148797L),
                                                          "e2d592ab-a0c2-49b1-9e46-10789f07fcbf", true,
                                                          "c3abe853-8d70-4221-96d3-36b9f570c264");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
