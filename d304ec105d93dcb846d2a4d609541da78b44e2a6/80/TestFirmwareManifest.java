// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561627146266L), -11,
                                                                      "863eee33-bb94-407c-9d74-8045f52ec89b",
                                                                      "25437b00-d5cf-49bc-aa34-c86bb6bbb0d6",
                                                                      "d674506a-f40c-431e-b03d-74a3525a8948",
                                                                      "a7ef95dc-5f68-4384-a2fa-8b9b936c7212",
                                                                      "1a9dd5e8-53c7-4e4e-a72a-e67a0bc2ec24",
                                                                      "0142f243-2f8c-4e8c-984c-f6743bd7e0ae",
                                                                      new Date(1561627143155L),
                                                                      new Date(1561627146521L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561627149392L), 122,
                                                                      "c74b040b-08e1-4d51-a357-5769e18c3916",
                                                                      "74cbef49-aced-4e79-b812-b8060104af49",
                                                                      "b434c22d-2c8e-4716-9ebd-c9e0909c3dff",
                                                                      "eb78cccc-9c12-4005-8891-d51c9764ac95",
                                                                      "49ba91fb-1353-4cf1-b95c-2ce86df046bb",
                                                                      "3fd45e83-8867-4597-97d8-9c7fe82f5e6e",
                                                                      new Date(1561627145918L),
                                                                      new Date(1561627145298L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561627149392L), 122,
                                                                      "c74b040b-08e1-4d51-a357-5769e18c3916",
                                                                      "74cbef49-aced-4e79-b812-b8060104af49",
                                                                      "b434c22d-2c8e-4716-9ebd-c9e0909c3dff",
                                                                      "eb78cccc-9c12-4005-8891-d51c9764ac95",
                                                                      "49ba91fb-1353-4cf1-b95c-2ce86df046bb",
                                                                      "3fd45e83-8867-4597-97d8-9c7fe82f5e6e",
                                                                      new Date(1561627145918L),
                                                                      new Date(1561627145298L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561627143811L), 75,
                                                                 "a98b29cd-f2f3-4cde-b449-62cae5cdbeda",
                                                                 "1f016f51-df3c-4d28-badc-f3c554f555cf",
                                                                 "695575a4-f66e-498f-a7b5-d41e3d745683",
                                                                 "7ec7e5ca-97d8-4eac-9cc5-db671dd270ee",
                                                                 "3a54f27c-3e56-4ee8-a681-7117f8522840",
                                                                 "1fb1964f-1d39-4c18-960e-c732154b30b3",
                                                                 new Date(1561627148842L), new Date(1561627148426L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561627150303L), 22,
                                                                        "a84e29b2-1ffb-40c9-8e2e-51fb5641d47d",
                                                                        "eac28df7-cd16-4986-a5d8-787cd71208f9c0204378-e680-4898-b312-f45bb617a0a64be50101-7941-4127-ad96-a08424fbe4a599c9ac1d-a852-42e4-97e9-5194648ef7dc090179cc-e57e-4747-b051-452df07b7c0368fb08eb-c291-4437-a72a-94045ea5702de49ef1db-1578-4fd8-b39e-fc4e951bb0632a45bea9-e66a-4066-a9a7-1b5c149eab5b498e70ca-8b98-4814-8861-49cfc4b04cc55fa60962-0f09-4040-af56-28bde28c7d14895e603f-94ab-4db9-ad5f-a63c9eb59540b0abf588-f37a-4320-bc5b-e46789a2d3d895209eee-9acf-4dcf-926a-94e3bfb4419912d1ba3a-bd7c-49ef-b3fb-ff440c4218102b65a8c2-5527-4395-b95d-3e47ba85fed9baedf940-500e-4698-8ab4-159b4832c9269a3f21b9-743a-4927-8c3f-96d057e2ae37312d73d1-a687-46ba-826f-bdc9c874a71bb4c79937-fe06-4839-aebc-4b50c9ba871b77b4ccaa-c2e7-403a-8004-6a03acbb9e666148c1e8-2a09-43bb-9332-f38c537e223bac7daaac-88a6-4074-ab72-dc8460ac7a4fb2d4f9be-b82c-4a70-9c20-5f90f9c744aa33c37e6b-c8e1-4471-b3b8-f730bdb92a18420cff1f-07e9-421e-a87a-8eec12e007175044647e-d31e-4dd5-994e-e3c37d33406aaea01df9-e7fa-47af-ab4e-ef4fa5ef68487cafd25e-5236-40d4-8f51-035773550cfa9d314ce2-c98f-4c01-a920-38d52a04ea439c8a24ed-8559-4fc1-bdcd-52dc14033540bee44f8d-49f1-4b9f-8785-2506f65a6cd7235ff3a5-a775-4ef7-8824-69462d35653f3d4fdcee-6917-41ae-9079-9ae6fe4852378aa1dae9-eb95-4234-a743-3871fcce6e6c8784c93a-f847-4219-a4e6-63e954f546307d7a241f-eaae-4b1f-9495-5c2160e3679eed67385a-7bfc-4c2f-b16b-b94e67ace5b07c6eaf8c-7592-4c32-8a1f-88558f73affa0ac89aff-ee38-4be3-b3ea-06d227492c8a9cbbb635-9083-4444-8f79-8360d562993c6e5eaf50-ba60-4cf4-8d28-9b0f6de9b43c9e2b4cc0-0665-462c-b640-bf74085a52814fd216d3-b485-4876-8c4c-6670f29fdb1284f3d12d-7478-4305-882d-89e4a3a41a9d3655918f-66cc-4105-bba3-f3694532e17cc030a699-e001-4f25-87a0-47cb296ad8d681e081ef-73a4-456f-91ba-bd6b5c61126ca45334fe-d86d-4ca5-aae5-ff2cafa9c2ea2ed3c87c-9eb5-434b-b1f2-9197e39c4c39868b9546-72e1-4a0f-b50e-a99befa86cdbb7540c03-4064-4562-80ca-fba2395070e3def1999a-3d12-44c7-ba90-c1d1d716c0b0ded5ae97-9484-4c7b-9dd2-aac7b3ffec692b0de5d6-af58-4ef6-87e3-3f3f05f82f4fc90261ae-5c18-43b4-a0aa-ffc2978f9c0b15e45f82-18b5-442a-af5e-8cf0cd0b5f22",
                                                                        "15de0391-37e1-496e-8b47-afb4a490d925",
                                                                        "60b2ab29-d714-4c55-bf54-702f91b9e2ea",
                                                                        "1c39f300-6f32-4319-846a-3903f4028eb6",
                                                                        "59d08e1b-9b04-4cf1-bb5a-79af52adec81f8075034-a1dd-42d3-baa4-f809fb80f6a005592a3a-e012-40c3-98f8-a3aedb91c4a34137c601-f8c0-4af3-a902-0b52eb3e23cb",
                                                                        new Date(1561627148926L),
                                                                        new Date(1561627146697L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561627145377L), 80,
                                                                      "c0709383-720e-4594-81c5-29eac034865a",
                                                                      "964f234d-9ac2-4f45-bc64-bd0217415ab5",
                                                                      "029a97b3-711a-49e4-9e57-c325d7244258",
                                                                      "e592aadd-d3e7-4fe0-8b26-6b55bbd66855",
                                                                      "d46a56a6-eb0b-43ee-85e0-b9ff72aa6d0a",
                                                                      "5f8a84ba-6387-40c5-a6e2-268da217a8db",
                                                                      new Date(1561627150486L),
                                                                      new Date(1561627145991L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561627145377L), 80,
                                                                      "c0709383-720e-4594-81c5-29eac034865a",
                                                                      "964f234d-9ac2-4f45-bc64-bd0217415ab5",
                                                                      "029a97b3-711a-49e4-9e57-c325d7244258",
                                                                      "e592aadd-d3e7-4fe0-8b26-6b55bbd66855",
                                                                      "d46a56a6-eb0b-43ee-85e0-b9ff72aa6d0a",
                                                                      "5f8a84ba-6387-40c5-a6e2-268da217a8db",
                                                                      new Date(1561627150486L),
                                                                      new Date(1561627145991L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561627144174L), -105,
                                                                      "164be3d1-b5a0-437f-9cd2-ca2c7f8433df",
                                                                      "ef186efc-68e9-45cd-99a3-75df88979b00",
                                                                      "ad197b34-f2e2-4b00-b4c9-ed82142249b7",
                                                                      "3a1320b8-20d0-4e7f-a549-26a659188287",
                                                                      "ec18966e-1f0f-43d9-86e6-017be3b1cb35",
                                                                      "7fe79afb-14cf-4f4a-980a-922231c15603",
                                                                      new Date(1561627144235L),
                                                                      new Date(1561627148029L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
