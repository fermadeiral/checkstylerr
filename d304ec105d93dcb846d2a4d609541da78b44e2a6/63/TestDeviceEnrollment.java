// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("a504ac9b-b90e-4b92-b2ad-4cf7b7dec946",
                                                                      new Date(1561627147146L),
                                                                      new Date(1561627144593L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                      "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                      new Date(1561627145385L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("4c45ebbd-f515-446f-afc3-6ce03fb26a12",
                                                                      new Date(1561627149228L),
                                                                      new Date(1561627148848L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                      "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                      new Date(1561627142793L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("4c45ebbd-f515-446f-afc3-6ce03fb26a12",
                                                                      new Date(1561627149228L),
                                                                      new Date(1561627148848L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                      "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                      new Date(1561627142793L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("873c9285-51fd-4895-ad41-962c2fba0779",
                                                                 new Date(1561627147536L), new Date(1561627146589L),
                                                                 "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                 "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                 new Date(1561627144179L),
                                                                 "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("44efabd2-f332-43f5-bc72-59f10dea00b3",
                                                                        new Date(1561627149511L),
                                                                        new Date(1561627146497L),
                                                                        "씉U3DO/詪躿qfnݾ=uI:w뇿I\u00175裔B5u\u000bwqfKnDR5KJi⩠Ko^MuIhwcccMS5XcwcpcnowSCN",
                                                                        null, new Date(1561627145301L),
                                                                        "씉U3DO/詪躿qfnݾ=uI:w뇿I\u00175裔B5u\u000bwqfKnDR5KJi⩠Ko^MuIhwcccMS5XcwcpcnowSCN");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("9dec1587-a61a-434d-9c4a-96e1c91d5d4d",
                                                                      new Date(1561627148741L),
                                                                      new Date(1561627147964L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                      "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                      new Date(1561627143904L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("9dec1587-a61a-434d-9c4a-96e1c91d5d4d",
                                                                      new Date(1561627148741L),
                                                                      new Date(1561627147964L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                      "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                      new Date(1561627143904L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("76c9880a-d5b8-4f7a-815e-4b16487813e2",
                                                                      new Date(1561627149209L),
                                                                      new Date(1561627143782L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd",
                                                                      "A-P:iYmwSkUIrd4KU66Y87aT0xlx06jPi3REy819:iUeq287p:9W662N8qgaHGRz4:Fi1fqE6cER:23al6O72AHq2aObanH22",
                                                                      new Date(1561627148441L),
                                                                      "kx4H916lv8r0b2yge82017ArL1Z8P7jd");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
