// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("32e0fa60-2e2f-4f03-a621-57ed339ab3ab", true,
                                        "8588f96f-5e20-4b91-baa5-9443d4456ad1", false,
                                        "97ffe7ac-73e5-4aac-908b-e8e96b284263");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("2e66b40c-0154-4b86-88b2-63d226544ea9", false,
                                        "3feed882-f38f-47d5-87d9-c34a2dff71e9", true,
                                        "0bf74cff-9524-45cd-a628-c66b84d58f85");
            Policy policy2 = new Policy("2e66b40c-0154-4b86-88b2-63d226544ea9", false,
                                        "3feed882-f38f-47d5-87d9-c34a2dff71e9", true,
                                        "0bf74cff-9524-45cd-a628-c66b84d58f85");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("94ae2db8-c37b-4639-b29a-8641dc36ac55", true, "7ce6886e-4f10-4c8a-8bdb-16a57f90c7ac",
                                   false, "3b1f9fe1-3357-4ae5-a859-88e5c9de7884");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("d2130cb0-93de-406c-b395-3db3344618a4", true,
                                        "79f71706-dffe-4922-9721-d9c52c2476cd", false,
                                        "b193cf5b-a3b0-4d61-82c5-3a9e51217e02");
            Policy policy2 = new Policy("d2130cb0-93de-406c-b395-3db3344618a4", true,
                                        "79f71706-dffe-4922-9721-d9c52c2476cd", false,
                                        "b193cf5b-a3b0-4d61-82c5-3a9e51217e02");
            Policy policy3 = new Policy("162261df-e8e2-4acd-b310-6cfece06b2f4", true,
                                        "5fe12f0d-d45d-4261-b41a-52a82456d777", false,
                                        "1837e0b4-5275-4833-a63a-a9b5ab6ba376");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
