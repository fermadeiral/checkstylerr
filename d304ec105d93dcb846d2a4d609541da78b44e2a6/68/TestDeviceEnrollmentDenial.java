// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        new Date(1561627148701L),
                                                                                        "d7f8e66a-1da6-4c32-b2fe-585de13b1399",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        new Date(1561627148174L),
                                                                                        "35494d08-9fd8-49ce-a1b2-392dd8eee604",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        new Date(1561627148174L),
                                                                                        "35494d08-9fd8-49ce-a1b2-392dd8eee604",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                   new Date(1561627145274L),
                                                                                   "49649d79-31f6-4759-bd77-de42f845b0ce",
                                                                                   "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                   "c9e40e3b45da8196a8db5943d0f9acbd");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("2K2Uê¸Ÿ777727'_2.ç©„á»›G72\u0011[\u0010Dã­˜Câ?µ\t77ê­ˆë”¡æ„”2'7í??7M\b\u0014ä¡­+2.à­ 72_V7277]à¾·2\u0010\u00032Z\u00157I",
                                                                                          new Date(1561627151376L),
                                                                                          "391ab349-2326-46c4-b15b-8944b629fcfd",
                                                                                          "2K2Uê¸Ÿ777727'_2.ç©„á»›G72\u0011[\u0010Dã­˜Câ?µ\t77ê­ˆë”¡æ„”2'7í??7M\b\u0014ä¡­+2.à­ 72_V7277]à¾·2\u0010\u00032Z\u00157I",
                                                                                          "2K2Uê¸Ÿ777727'_2.ç©„á»›G72\u0011[\u0010Dã­˜Câ?µ\t77ê­ˆë”¡æ„”2'7í??7M\b\u0014ä¡­+2.à­ 72_V7277]à¾·2\u0010\u00032Z\u00157I");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        new Date(1561627147873L),
                                                                                        "d26b21b7-d761-4e5b-8f55-71ae5ba700ee",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        new Date(1561627147873L),
                                                                                        "d26b21b7-d761-4e5b-8f55-71ae5ba700ee",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        new Date(1561627142673L),
                                                                                        "6e88b50d-e28d-4695-a4c4-c9048d1d9108",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd",
                                                                                        "c9e40e3b45da8196a8db5943d0f9acbd");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
