// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561627151854L), null,
                                                          new Date(1561627143154L),
                                                          "50376448-31d1-40b1-ba9a-ad4e9bd07881",
                                                          "5adac00f-e812-4830-9cef-343d6af73e15",
                                                          "c194e8a6-121f-477e-a567-c66369625bd7",
                                                          "236748ce-fbef-40c3-95ac-d9bb97fa66ca",
                                                          "5edbde74-7412-4d17-ab41-5452f2d07ab2",
                                                          "1c7f1a6c-fee0-492d-ba15-500209e1c1bf", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561627150115L), null,
                                                          new Date(1561627147627L),
                                                          "8838c011-a6a4-4e6a-8150-f3ac75083c77",
                                                          "6ac918da-6c7a-456b-af47-7e4765e7e099",
                                                          "5feb5b59-3ecf-4adf-8f69-82a62f9e7982",
                                                          "07e7e812-7872-4716-a388-3642e1b5d0ee",
                                                          "bfc24aa6-d319-4b85-b2a7-010e7eb00bc6",
                                                          "6e0a4f57-7816-4d1b-a1ef-8aa2a3eb3527", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1561627150115L), null,
                                                          new Date(1561627147627L),
                                                          "8838c011-a6a4-4e6a-8150-f3ac75083c77",
                                                          "6ac918da-6c7a-456b-af47-7e4765e7e099",
                                                          "5feb5b59-3ecf-4adf-8f69-82a62f9e7982",
                                                          "07e7e812-7872-4716-a388-3642e1b5d0ee",
                                                          "bfc24aa6-d319-4b85-b2a7-010e7eb00bc6",
                                                          "6e0a4f57-7816-4d1b-a1ef-8aa2a3eb3527", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1561627150689L), null, new Date(1561627144996L),
                                                     "ffc4ac25-dc57-4e5e-a4d9-ca4b13284eee",
                                                     "fa1c97e1-5174-495f-a65b-7b7fc601b2d9",
                                                     "743d454b-338c-48b7-a734-825f45f028b0",
                                                     "df2113da-fe2c-454a-af66-aee1fb169906",
                                                     "67914e5c-5a11-42c5-bfec-e2f6b503e17f",
                                                     "c61839f2-6eb2-4900-aee6-33b1befc3220", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1561627144975L), null,
                                                          new Date(1561627145670L),
                                                          "89953600-9b03-4cfc-8c9e-8167493f3766",
                                                          "1d06514f-d32d-4d57-be2e-f540e8181819",
                                                          "89369721-fe84-4d84-85c6-b54998b5466c",
                                                          "e60dd907-d718-4894-9a9b-3c3bbb6989ae",
                                                          "efd25e92-7006-4e27-a896-7e1543aa7d3d",
                                                          "5460f2d9-5b25-4067-81c3-782690651592", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1561627144975L), null,
                                                          new Date(1561627145670L),
                                                          "89953600-9b03-4cfc-8c9e-8167493f3766",
                                                          "1d06514f-d32d-4d57-be2e-f540e8181819",
                                                          "89369721-fe84-4d84-85c6-b54998b5466c",
                                                          "e60dd907-d718-4894-9a9b-3c3bbb6989ae",
                                                          "efd25e92-7006-4e27-a896-7e1543aa7d3d",
                                                          "5460f2d9-5b25-4067-81c3-782690651592", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1561627150426L), null,
                                                          new Date(1561627146263L),
                                                          "1917d0c0-2e52-4a4f-9d28-c3f494e275cd",
                                                          "ef9860a6-9bf7-4143-9311-f4b9cc57331d",
                                                          "b3ddb354-f97a-4a51-97bf-10a8344759ee",
                                                          "91d0ac63-0c48-4d8f-a0f2-67f11d678af9",
                                                          "c4d0117f-19c2-44af-a6f6-13b6fb8fbddd",
                                                          "673c7ed1-df7d-4493-8295-9063ff39919d", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
