// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561627142366L), null,
                                                       "e6e4951b-1678-4295-ac13-f66c128218d5", -105,
                                                       "3bdd7979-11cc-4dd3-a778-375921cabf57",
                                                       "b96276fb-a26f-406f-a029-d95bf36093ca",
                                                       new Date(1561627146765L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561627142340L), null,
                                                       "afe043d7-ab28-4229-8c3d-c79fe5d25183", 85,
                                                       "9ca37f44-2939-4241-8e18-44a9cf41e33a",
                                                       "0fb61f5d-c399-4945-b1b7-19b61ef4ac0c",
                                                       new Date(1561627147135L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561627142340L), null,
                                                       "afe043d7-ab28-4229-8c3d-c79fe5d25183", 85,
                                                       "9ca37f44-2939-4241-8e18-44a9cf41e33a",
                                                       "0fb61f5d-c399-4945-b1b7-19b61ef4ac0c",
                                                       new Date(1561627147135L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1561627148748L), null,
                                                  "d5a74951-854d-4a9d-acde-242823a51e2c", 117,
                                                  "363f58b5-6292-46ad-9f3c-192ed3113517",
                                                  "791bfcfb-f6f9-438c-94a0-fa603041fc96", new Date(1561627144932L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1561627143619L), null,
                                                         "3c0c668b-69b1-4d49-bb9c-3628f9afca9993daae52-269b-4bbc-8b9e-68b857dab198aa7a2cf8-6b04-4138-8e05-7d2bcc05da201e8b209d-11b6-4c71-ad8b-6c5f433de3933c660aff-1e24-4e44-a903-45efc788c6361819c6cf-8d70-45ef-aa50-74ec1b50a2119c789af2-1f65-4548-89dc-a90454b01807c4de8699-4ec6-45cd-89c2-0ec8ac0a11b68c006607-8332-47f3-a874-59a04f2a7efec69bcb95-f4dd-4d84-935f-4a735ce079741eec3ad3-1202-49f4-8857-5d3bb0a01a77f3ada718-caa1-4a38-98db-831cc36e44421259016e-d898-4222-b07c-ce914f1f0ef12aa4c927-ab30-4982-95ba-0365cb02e3e32181654c-42e8-404e-b91e-d0738846e58e9b443fb2-f3db-4262-a4bf-6b42499b959f42d61439-0766-439d-86c6-26d40fb50a7a929779ca-3ef3-4fc7-8b22-74eba29c150cac572620-fc7a-404c-9ab8-329a720b6fc6fae18aec-df92-4de9-bc34-998a464b0753e7580406-ccf7-435e-b36f-fa001a8e7a017d8c160b-ca62-48f4-b717-c6ea21289770e7e5f8e7-5808-487a-9235-039bb7469c40abf013c4-97f2-4ad1-a6c1-6d597485ebf3ff49cfbe-e003-4335-87e1-fc4081ebbf724ad7f3ac-ab16-40da-b7fb-4a63efa7a4be56c5365a-ee60-422d-904c-b306cabcc7acedade90d-4556-4fcd-879b-892e6d7abf61374ccb4f-7be1-4d7d-a83e-0c65c87dc10a64669180-ca7a-4b36-a879-e1e4d6a5231243536da1-ec3f-42c8-b0b3-b2522ce629699a146509-51c7-4477-be0b-aac74cd9fb20ad41f724-a8ed-4925-b4ed-135f0ac77ace2755ada4-e004-415d-aaff-e7d14e2c71d4d4c88850-bea1-4b31-a5c6-706fdc0ac86615f92bd3-4c4b-4e44-908e-4c081ead4140ce5d0f14-097f-486b-be26-36ca47545f4f1fc63139-8646-4c9d-866f-5ebb2c7360bcd0fd70c8-c76c-463c-a73d-8ea120fc71f633fe20b4-a057-4b09-8025-35776308a757de8aec21-144a-4f19-9f3f-3ac737039065f64655b8-1590-4309-bbcd-2cfbb737c4545670e046-e8c1-43b9-b387-1a5d28446f44fb50e98d-d619-4f23-8587-cd1ac2178197e99e0a06-5f78-4e38-8bde-a9902958b5f3484da865-13a3-467a-9d31-61504c384b57322e2c21-b0a0-4f9d-bb09-7ea14f31397ed32cc547-21bb-4469-8798-51e4b89bd3a972b09b18-6c26-4813-bdf5-d1173feffb4b1c1b8dad-333e-4b89-9930-4cd64115d7ce13c9bf4b-5296-4db7-9d32-a9837fe28fe44e79d14a-be53-40c1-a50b-edda2a41ead48ee7eb1c-efbe-4926-b670-e1001beca67e7173aaa0-b218-4f9a-a4a7-371ab8e33be5eb57032f-a18f-49be-aaf9-eaf69dacab0ec5baedc9-bc16-4353-9e0c-6c420f7e3eae",
                                                         -94, "850cc79b-97bf-45bf-908c-717aa540e903",
                                                         "5fef152c-23c2-46fa-a105-e0fc7d5278895a6e367c-4145-41e1-8018-8e790f0d00f2c2e6d44e-1f0f-44ac-88a3-aa89e478177e8b8db007-d6f8-49ef-8658-e008a9c43eea",
                                                         new Date(1561627147207L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561627142300L), null,
                                                       "f5f6163d-2645-42ba-b085-751c6c74a241", -77,
                                                       "7ca0c482-da0a-4fa0-b7e5-7ae633405096",
                                                       "d1f03f60-ebee-4e51-8211-c60b88916824",
                                                       new Date(1561627144070L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561627142300L), null,
                                                       "f5f6163d-2645-42ba-b085-751c6c74a241", -77,
                                                       "7ca0c482-da0a-4fa0-b7e5-7ae633405096",
                                                       "d1f03f60-ebee-4e51-8211-c60b88916824",
                                                       new Date(1561627144070L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1561627149732L), null,
                                                       "c6f762a4-e9b3-4e2e-b1fc-58b2c48a03be", 21,
                                                       "93d76892-102c-4475-b1df-e1e717667c9b",
                                                       "a0e57acd-a27b-41af-a5ec-e5ebde00cfeb",
                                                       new Date(1561627142500L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
