// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("1ec3f4e1-7ae8-4ce6-81c2-b1f4917b8e9d", false,
                                        "2f8d97cd-1d1d-4253-b26a-3a4352e045c4", true,
                                        "6251cd0a-04b3-4494-8820-70bacf6458e2");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("a7e5d574-a4f6-4a9a-94b0-50620b7c34b6", false,
                                        "cc89725e-428c-41ad-ae85-a4ad0dbef786", false,
                                        "bfcc5035-e0eb-4c16-a2f9-0b7a6d71e794");
            Policy policy2 = new Policy("a7e5d574-a4f6-4a9a-94b0-50620b7c34b6", false,
                                        "cc89725e-428c-41ad-ae85-a4ad0dbef786", false,
                                        "bfcc5035-e0eb-4c16-a2f9-0b7a6d71e794");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("00e51cc8-d0b0-4edc-9f07-bace4fadd783", true, "5924ced4-0e7e-46ff-b9b8-47827c0c2406",
                                   true, "bbf81b72-227a-491c-88d5-ccd19934aa18");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("68a5b597-8be5-4935-9bf7-863a9cb81fd7", true,
                                        "5b6ecbc9-78a8-476a-818f-00a9e204e029", false,
                                        "82942bbd-ce1d-48a2-94fe-70fac03516be");
            Policy policy2 = new Policy("68a5b597-8be5-4935-9bf7-863a9cb81fd7", true,
                                        "5b6ecbc9-78a8-476a-818f-00a9e204e029", false,
                                        "82942bbd-ce1d-48a2-94fe-70fac03516be");
            Policy policy3 = new Policy("f50e46fb-3031-440b-b824-dfd8ecab9519", true,
                                        "9f287e02-7ae5-4ec8-8831-a7f719c370c4", false,
                                        "0d09f990-7209-48a4-ae0f-04b227c799a4");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
