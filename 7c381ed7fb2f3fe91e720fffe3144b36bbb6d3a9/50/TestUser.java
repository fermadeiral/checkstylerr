// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "0282ebbd-d052-4231-a3f0-66be2aa81788",
                                  new Date(1561632937003L), -8, null, "f0c54.05c58@4c858.me", true,
                                  "60620e8b-2c2f-4f2d-a47f-370aed48b005", "0ba2bdaa1a27dfa7cabb78466e8ea791", false,
                                  false, true, -103, null, null, "3e4c1267-1319-4e05-810c-8f891e80ba19", 88,
                                  "a2f6e695-6319-43d6-ae10-c6b45a201e4c", UserStatus.getDefault(), null,
                                  new Date(1561632933606L), "--U+");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "a3fb77e7-4b97-495b-a952-bfb14b3b87f4",
                                  new Date(1561632940370L), 62, null, "1020b.50da0@cf586.me", false,
                                  "e9018149-6f16-48c4-8921-4cddfcfc34b7", "0ba2bdaa1a27dfa7cabb78466e8ea791", false,
                                  false, true, 58, null, null, "ad592e34-0c40-428c-b86f-775b7a73389f", 121,
                                  "0dca5cc6-696a-4ce0-842a-c34abc2afed9", UserStatus.getDefault(), null,
                                  new Date(1561632937404L), "--U+");
            User user2 = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "a3fb77e7-4b97-495b-a952-bfb14b3b87f4",
                                  new Date(1561632940370L), 62, null, "1020b.50da0@cf586.me", false,
                                  "e9018149-6f16-48c4-8921-4cddfcfc34b7", "0ba2bdaa1a27dfa7cabb78466e8ea791", false,
                                  false, true, 58, null, null, "ad592e34-0c40-428c-b86f-775b7a73389f", 121,
                                  "0dca5cc6-696a-4ce0-842a-c34abc2afed9", UserStatus.getDefault(), null,
                                  new Date(1561632937404L), "--U+");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "0db9e80b-ec0d-4f25-ae1b-990e498ec1c4",
                             new Date(1561632938517L), 77, null, "a83c9.af2af@eb68f.fr", false,
                             "41807b39-907a-4277-9cdb-08b5e99ea88e", "0ba2bdaa1a27dfa7cabb78466e8ea791", false, false,
                             true, 111, null, null, "e2161517-f31c-496f-969c-ff628f930e45", 33,
                             "78339860-2b8e-460b-a0fa-4f679417bbe5", UserStatus.getDefault(), null,
                             new Date(1561632936738L), "--U+");
        assertTrue(user.isValid());
        User userInvalid = new User("3çµƒ\u001b3535`3!è»µI3 êµ§33BB3ê€€355àº”5çŸ˜5-á°¾55[5í†¤553,\u0017æ—’[3?ç­?35O\u0004:3;\u001d\u0015B3355æ§—5äŠ¨N",
                                    null, "68dddb45-9c6a-4240-80cb-f2f076a5e4b2", new Date(1561632933986L), 124, null,
                                    null, true,
                                    "deddca14-0505-47b5-8686-75cc8cc4a84b394754e0-73ba-441d-9362-6f5b76bb51932080bb6b-ba7e-4885-b6a2-a90fdfa52a04",
                                    "3çµƒ\u001b3535`3!è»µI3 êµ§33BB3ê€€355àº”5çŸ˜5-á°¾55[5í†¤553,\u0017æ—’[3?ç­?35O\u0004:3;\u001d\u0015B3355æ§—5äŠ¨N",
                                    false, false, true, 43, null, null, "5f97b082-b71b-4177-835d-3cf13acb1211", -20,
                                    "fee9e788-c44d-411b-af22-2fff5fb682dc1d9e510a-4bd3-4ed3-8592-25e29004bf93fc2ac6b6-b01d-40bd-8f3f-baf9a7628b0e",
                                    UserStatus.getDefault(), null, new Date(1561632937794L),
                                    "ç?’?\u0007'ëŒ°îŠ§OA,ê´·ê‡·\u000b\u0002Aé‰£â ¶(çª¦\u0000\bç—–Hê¾¬ì”¼ìˆ„\u001aâ»Š\u0006ì¸?\u0000\u0012!åˆ?ë?‘9RGR\tG5è¦?\u0000 ê‡„\u000bê¶ƒJ#ìˆ“Òª=ã€?ç©º\u001f\u00136>H\u000f\u001dë’¶D");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "e89e096b-06e1-425d-8548-e19d4a44b4e9",
                                  new Date(1561632936675L), -32, null, "801a8.fd754@45890.fr", true,
                                  "9cbb4c10-5839-4599-aff2-7bf4ac12be92", "0ba2bdaa1a27dfa7cabb78466e8ea791", false,
                                  true, false, -84, null, null, "58115d91-ec85-4236-a130-d8d952e69382", -32,
                                  "3f272041-200c-479e-9220-68c952cd0645", UserStatus.getDefault(), null,
                                  new Date(1561632937513L), "--U+");
            User user2 = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "e89e096b-06e1-425d-8548-e19d4a44b4e9",
                                  new Date(1561632936675L), -32, null, "801a8.fd754@45890.fr", true,
                                  "9cbb4c10-5839-4599-aff2-7bf4ac12be92", "0ba2bdaa1a27dfa7cabb78466e8ea791", false,
                                  true, false, -84, null, null, "58115d91-ec85-4236-a130-d8d952e69382", -32,
                                  "3f272041-200c-479e-9220-68c952cd0645", UserStatus.getDefault(), null,
                                  new Date(1561632937513L), "--U+");
            User user3 = new User("0ba2bdaa1a27dfa7cabb78466e8ea791", null, "52540954-90f3-4430-87f2-44f9a20f9fae",
                                  new Date(1561632933172L), -50, null, "f3a52.ea2b6@7f02e.me", true,
                                  "24f5f63b-528e-4507-aba5-18b99dbb202b", "0ba2bdaa1a27dfa7cabb78466e8ea791", false,
                                  true, false, 78, null, null, "cfc27519-c029-44e1-905e-8e92084fa887", -117,
                                  "debd8a99-8c06-44e2-8886-652559d3fabb", UserStatus.getDefault(), null,
                                  new Date(1561632933936L), "--U+");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
