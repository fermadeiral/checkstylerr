// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561632939053L),
                                                          "ab3208d1-f08b-4539-9b9d-a7a684cf743c", false,
                                                          "46442ac4-2ff0-4823-a159-47c4c7446c0d");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561632940636L),
                                                          "df222b08-97ce-45be-858d-efbe239deba6", true,
                                                          "242ef803-1955-4344-ac55-0d5ceed0ff00");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561632940636L),
                                                          "df222b08-97ce-45be-858d-efbe239deba6", true,
                                                          "242ef803-1955-4344-ac55-0d5ceed0ff00");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1561632937553L), "b34a5faa-32b4-4ec6-b53c-fd84ed33c731",
                                                     false, "4337532e-6360-4883-bf6d-98eb44424b70");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1561632936644L),
                                                          "857a89a1-cd71-4e47-aca2-0f1e94b5fccd", false,
                                                          "75d2457a-5186-4948-ad6e-6095f47b6947");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1561632936644L),
                                                          "857a89a1-cd71-4e47-aca2-0f1e94b5fccd", false,
                                                          "75d2457a-5186-4948-ad6e-6095f47b6947");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1561632937097L),
                                                          "90eeaeab-1547-40bb-9e51-91278447e7c3", false,
                                                          "bc9e0301-1a98-4229-ab42-1083eff6ed2a");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
