// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(22),
                                                                                        Long.valueOf(-113),
                                                                                        Order.getDefault(),
                                                                                        "d618801f-552b-4132-92c6-6f734ea3c5c4",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1561632938754L),
                                                                                                    new Date(1561632939404L),
                                                                                                    new Date(1561632939685L),
                                                                                                    new Date(1561632943932L),
                                                                                                    new Date(1561632938710L),
                                                                                                    new Date(1561632937067L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1561632943990L),
                                                                                                       new Date(1561632941518L)))
                                                                        .lessThanUpdatedAt(new Date(1561632939111L))
                                                                        .greaterThanUpdatedAt(new Date(1561632938677L))
                                                                        .equalToName("90c5c3bd-06f7-4a95-9eb5-631f19b68ced")
                                                                        .notEqualToName("4094fa7e-eaf7-447a-930b-f3d66c6f2a52")
                                                                        .inNames(Arrays.asList("e652e676-40ed-4934-9c5b-27d94eef3a39"))
                                                                        .notInNames(Arrays.asList("fddad265-f7c4-4f12-93a6-2fa9afae4f51",
                                                                                                  "8cb632b5-72a8-4cb7-9ad7-bbd9d351c32d"))
                                                                        .equalToDevicesCount(Integer.valueOf(-99))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-95))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(71),
                                                                                                       Integer.valueOf(-12),
                                                                                                       Integer.valueOf(-36),
                                                                                                       Integer.valueOf(-100),
                                                                                                       Integer.valueOf(57)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(66),
                                                                                                          Integer.valueOf(-51),
                                                                                                          Integer.valueOf(17),
                                                                                                          Integer.valueOf(45),
                                                                                                          Integer.valueOf(-106),
                                                                                                          Integer.valueOf(-103),
                                                                                                          Integer.valueOf(92),
                                                                                                          Integer.valueOf(-7),
                                                                                                          Integer.valueOf(77)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-3))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-53))
                                                                        .inCreatedAts(Arrays.asList(new Date(1561632938540L),
                                                                                                    new Date(1561632935010L),
                                                                                                    new Date(1561632942871L),
                                                                                                    new Date(1561632936551L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1561632938746L),
                                                                                                       new Date(1561632939073L),
                                                                                                       new Date(1561632938617L),
                                                                                                       new Date(1561632942482L),
                                                                                                       new Date(1561632943566L),
                                                                                                       new Date(1561632944874L)))
                                                                        .lessThanCreatedAt(new Date(1561632939064L))
                                                                        .greaterThanCreatedAt(new Date(1561632942361L))
                                                                        .equalToId("45e9d356-a575-4718-8a54-ffb49ce5e926")
                                                                        .notEqualToId("36292b86-e28f-45ad-9f78-6864f82881c7")
                                                                        .inIds(Arrays.asList("725374e0-c0a7-4705-ab85-3ed8d6009ea2",
                                                                                             "67236cd0-100e-414d-b252-6d0a671229b5",
                                                                                             "e093f478-60b2-4fac-8d61-b3c8f1e6332e",
                                                                                             "cef18dc6-7317-4020-b745-e23fa8088138",
                                                                                             "d89279c1-ea13-4fb2-95b5-99a2be57d296",
                                                                                             "7d2ee8c8-aac1-475c-9b19-4dbef28ea2fa",
                                                                                             "f478644d-19b5-49a9-9991-2a903596f155"))
                                                                        .notInIds(Arrays.asList("c81d646e-56ab-4031-abf6-adb4aada7a67",
                                                                                                "bf85fe7c-3bec-4e14-8a17-dcef975daa95",
                                                                                                "cd6181d9-0c92-42e2-88fa-9656eb628614"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561632938754L), new Date(1561632939404L), new Date(1561632939685L),
                                       new Date(1561632943932L), new Date(1561632938710L), new Date(1561632937067L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561632943990L), new Date(1561632941518L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561632939111L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1561632938677L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("90c5c3bd-06f7-4a95-9eb5-631f19b68ced",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("4094fa7e-eaf7-447a-930b-f3d66c6f2a52",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("e652e676-40ed-4934-9c5b-27d94eef3a39"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("fddad265-f7c4-4f12-93a6-2fa9afae4f51", "8cb632b5-72a8-4cb7-9ad7-bbd9d351c32d"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-99),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-95),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(71), Integer.valueOf(-12), Integer.valueOf(-36),
                                       Integer.valueOf(-100), Integer.valueOf(57)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(66), Integer.valueOf(-51), Integer.valueOf(17),
                                       Integer.valueOf(45), Integer.valueOf(-106), Integer.valueOf(-103),
                                       Integer.valueOf(92), Integer.valueOf(-7), Integer.valueOf(77)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-3),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-53),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561632938540L), new Date(1561632935010L), new Date(1561632942871L),
                                       new Date(1561632936551L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1561632938746L), new Date(1561632939073L), new Date(1561632938617L),
                                       new Date(1561632942482L), new Date(1561632943566L), new Date(1561632944874L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561632939064L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1561632942361L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("45e9d356-a575-4718-8a54-ffb49ce5e926",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("36292b86-e28f-45ad-9f78-6864f82881c7",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("725374e0-c0a7-4705-ab85-3ed8d6009ea2", "67236cd0-100e-414d-b252-6d0a671229b5",
                                       "e093f478-60b2-4fac-8d61-b3c8f1e6332e", "cef18dc6-7317-4020-b745-e23fa8088138",
                                       "d89279c1-ea13-4fb2-95b5-99a2be57d296", "7d2ee8c8-aac1-475c-9b19-4dbef28ea2fa",
                                       "f478644d-19b5-49a9-9991-2a903596f155"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("c81d646e-56ab-4031-abf6-adb4aada7a67", "bf85fe7c-3bec-4e14-8a17-dcef975daa95",
                                       "cd6181d9-0c92-42e2-88fa-9656eb628614"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-9),
                                                                                        Long.valueOf(-110),
                                                                                        Order.getDefault(),
                                                                                        "2da9ab5b-b4ef-42b6-a9d0-25249c0a8ffe",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-9),
                                                                                        Long.valueOf(-110),
                                                                                        Order.getDefault(),
                                                                                        "2da9ab5b-b4ef-42b6-a9d0-25249c0a8ffe",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(25),
                                                                                        Long.valueOf(-79),
                                                                                        Order.getDefault(),
                                                                                        "94d708fc-6100-4b4a-86ea-618ff3a61779",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(25),
                                                                                        Long.valueOf(-79),
                                                                                        Order.getDefault(),
                                                                                        "94d708fc-6100-4b4a-86ea-618ff3a61779",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-113),
                                                                                        Long.valueOf(116),
                                                                                        Order.getDefault(),
                                                                                        "6d035422-3b67-4276-894d-5518b0bfc163",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
