// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561632939694L), -47,
                                                                      "f18cde2a-a575-4f9d-af90-488c2122886d",
                                                                      "ea32b790-b316-4ea2-ad3a-6ed8a2cdf75d",
                                                                      "2f798f4f-608c-4522-815c-dbc777f28a58",
                                                                      "32dd1fa9-b278-4a69-9247-196c099e18e5",
                                                                      "15130a4a-ca96-4281-a14b-21a10bcf419c",
                                                                      "df062b28-078b-4e30-9cf2-759c88a3a124",
                                                                      new Date(1561632941862L),
                                                                      new Date(1561632934883L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561632934601L), -107,
                                                                      "1ff41dc4-23eb-4aac-8d58-6bb25bf7b36b",
                                                                      "9f4d862d-9d36-4ce9-b5c0-6bdd744ee526",
                                                                      "75222aeb-b29f-4a18-9910-42f6ec96e936",
                                                                      "be50b96c-78da-479b-ae61-3f30805dbe1e",
                                                                      "d77c5dbb-df53-42b0-80c7-120f10e4e1e8",
                                                                      "eb87a680-76f9-4ab5-9ff0-8328ba4d7d3a",
                                                                      new Date(1561632942160L),
                                                                      new Date(1561632940878L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561632934601L), -107,
                                                                      "1ff41dc4-23eb-4aac-8d58-6bb25bf7b36b",
                                                                      "9f4d862d-9d36-4ce9-b5c0-6bdd744ee526",
                                                                      "75222aeb-b29f-4a18-9910-42f6ec96e936",
                                                                      "be50b96c-78da-479b-ae61-3f30805dbe1e",
                                                                      "d77c5dbb-df53-42b0-80c7-120f10e4e1e8",
                                                                      "eb87a680-76f9-4ab5-9ff0-8328ba4d7d3a",
                                                                      new Date(1561632942160L),
                                                                      new Date(1561632940878L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1561632934737L), -52,
                                                                 "6920d91f-c7c8-440c-a79a-63c643ccb8de",
                                                                 "29ebebea-3124-4a26-a92c-63de8ab77a6c",
                                                                 "8c2b6763-e824-4e24-a039-d523db30b5fe",
                                                                 "520bce1f-7cf5-4637-b37e-899dbc0741a8",
                                                                 "80291321-44d3-4cdd-975f-575c0af28fad",
                                                                 "bcb7adac-c43b-4b6a-b94c-5a842d2cfb8a",
                                                                 new Date(1561632937354L), new Date(1561632936363L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1561632940583L), 92,
                                                                        "24ed795e-0d65-4538-8f1f-2ca1ba9434b6",
                                                                        "3be0e518-369a-4654-92ef-d3b3218c80a4069795ca-d83e-49c1-933c-60c19de3bd02d876f355-a8ea-4c51-b45c-f98d2d91182c8bed4f75-df92-4f14-bab2-8dcd63325dc3bf9d24c1-85ed-4271-9d42-9b1f1bc4e925d14e644c-fefa-4dd1-bf0f-db8721d67d910b6b3be5-5d8b-4a8b-b494-c84bef77296ec05bbe3e-996c-4930-a41f-69041f4764b09e442eff-65c0-4fee-b7c2-efb8cfaa9766248005e8-d004-489d-b780-a36d4f3423d0afa616de-6a84-408f-a6e8-44c0691fd4646cb93652-7b4c-4653-b6f9-8a1c9ea5aadb2f1aaea2-d59f-4d19-8992-895888c2804b25d536b0-365f-4ee1-ab48-ea1fa55bafc4f951fb12-a48d-4db5-a4e5-d3f6d5ccb967540f0310-9e66-4335-93a6-bba221762b11288514eb-ab6e-4465-93a2-9c83f1736638a8168af0-2680-4f90-aace-c3c8c645b8008960971c-5df2-45dd-9ffd-70bb62d07b6ef82793eb-5c60-4606-9eec-fcab6591d1b3934834fc-d35e-4886-9e4e-92cbf307148a893089ab-4add-433b-87f0-753609e449dc2ece18f5-760e-49e3-a5a1-0f18dde8e7ba4c80f943-cabb-4adf-9bb8-0dccbc1cffedeba95c75-b6d7-451a-8f83-7cc4ad405bc438b5cad3-9710-4766-95ee-c0e61effa3487a5b5f00-6495-46aa-9e75-6b74096ccfcbdc46f1ed-f233-4cf4-9164-4a8ba46cb9797e9b3da6-6d11-4f25-8a35-d9dcaaf492266ca7b9ef-9fdb-438c-a9f6-fd746a2f53416fc89a1c-0c17-4b49-bab0-5c5cacee17b9eb91ccb3-a9b6-4ebd-9da5-949318a7b7ee172f49f8-dca4-4ab9-b4d9-c4fb883c338721b7e2aa-d546-4285-915b-fc2b800eab0720d47702-65e3-43e1-9286-de9812e07252a38763b4-f570-4b06-bf1e-a702096d5ae913c2fa8e-9f15-4fc5-9c95-0f5f160ffd8dd863db51-612e-4e1a-89c1-c0875e57af08e2584b80-3707-41ff-9100-acf0dc7fdb460f9c3df5-830f-4c45-9e68-f3a95ab3f98b8ea11f9f-6a78-4a98-8430-8f90a425d52ef2580088-048f-4924-82fa-0f0e205decd8b2248a55-9b3e-41f9-8e0d-6af395a68daa5fa53df3-d55b-4b69-86a4-21b3c4a088274521172b-619c-4ec8-bfce-afda1a5154f01c1b99ab-fde7-4b1b-8ba7-a349202e0d4de1cf2656-2628-45c4-b37e-6beeb6dc6c099595e27a-f7a5-4a6c-b54f-a94667b2d9a69264293e-d41c-4cc7-8d8c-bef07c1b1a9e047c57f8-8087-445e-a4ae-038e3712a70e2745c195-c29b-49d0-a1b1-65d4efe678ebb3862da9-a201-4107-8518-ca4bfa3a2568c9d2d3c2-1a94-43ee-8853-2341c0d457ce548a1c5a-8d6c-406d-9654-fb6f35f2a9a1ca2e7017-d086-43ef-b80e-c6c3f9bee3d4b465787e-7523-4390-9683-b5ae2f41230a",
                                                                        "c7f258db-b0ba-44a5-b35c-6a5d094e698a",
                                                                        "66289378-7990-4721-abb0-ac0ec76a386c",
                                                                        "92ed5b52-87f3-4404-9a33-e704b643df13",
                                                                        "dc930195-8a4f-435a-a9dd-535ea4a41bfe892fbd64-49eb-492c-880b-af0a9d3b2c3f2a638063-a396-4ff1-a974-34ae925cc30b29fbe24e-866a-4ca2-b9c5-bfee1af1280e",
                                                                        new Date(1561632940391L),
                                                                        new Date(1561632942405L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1561632937151L), -56,
                                                                      "52c48037-2c65-47f4-82e1-bf7f97412603",
                                                                      "b71c5fc0-0eab-4549-9f76-f4121495b7f7",
                                                                      "4a74a092-de83-4fae-9548-fbd5bde91ee2",
                                                                      "33a39b2c-5cd8-4cc4-be83-875f2e6ae716",
                                                                      "0c228bcb-1ba3-42a2-8eb8-b1f6df1106f6",
                                                                      "8daab888-bb37-498d-9cce-8679353171ea",
                                                                      new Date(1561632938074L),
                                                                      new Date(1561632933186L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1561632937151L), -56,
                                                                      "52c48037-2c65-47f4-82e1-bf7f97412603",
                                                                      "b71c5fc0-0eab-4549-9f76-f4121495b7f7",
                                                                      "4a74a092-de83-4fae-9548-fbd5bde91ee2",
                                                                      "33a39b2c-5cd8-4cc4-be83-875f2e6ae716",
                                                                      "0c228bcb-1ba3-42a2-8eb8-b1f6df1106f6",
                                                                      "8daab888-bb37-498d-9cce-8679353171ea",
                                                                      new Date(1561632938074L),
                                                                      new Date(1561632933186L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1561632942542L), 24,
                                                                      "a939c73c-93ef-435a-a0e3-7fe0e543aaca",
                                                                      "8764e4f9-a870-479f-82ad-11baffc6bbde",
                                                                      "c372f93e-fa48-4bf9-a224-0f57baed93ec",
                                                                      "6272b4e4-7138-4e51-883b-0acec8b39ec1",
                                                                      "775382f2-d3b1-4a88-a8dd-d2188a62bd8b",
                                                                      "401cb4ef-5653-4089-b546-eb93c88d504f",
                                                                      new Date(1561632933296L),
                                                                      new Date(1561632936398L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
