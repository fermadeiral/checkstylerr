// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561632939960L), null,
                                                       "8844661b-e554-44a5-ae1b-dc54cdb9efc3", 28,
                                                       "ca9d13ba-6d6b-41db-b686-2232f2bcb412",
                                                       "f3c84d34-2c15-4e80-9cab-a0f90e2214d5",
                                                       new Date(1561632935962L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561632937193L), null,
                                                       "808b6e4c-8e2c-45c2-9654-83a2db176fb0", -25,
                                                       "159313ac-076f-46de-b585-f67b4964ddb4",
                                                       "6c791f8f-88c7-4ff1-b45b-8f44330b978e",
                                                       new Date(1561632935656L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561632937193L), null,
                                                       "808b6e4c-8e2c-45c2-9654-83a2db176fb0", -25,
                                                       "159313ac-076f-46de-b585-f67b4964ddb4",
                                                       "6c791f8f-88c7-4ff1-b45b-8f44330b978e",
                                                       new Date(1561632935656L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1561632935055L), null,
                                                  "524f2808-8e16-4330-9d67-61975ebc81f7", 97,
                                                  "39e56c72-d302-439d-b116-1cefaa3adede",
                                                  "68f9f922-66da-488e-8c95-5b29ee894d99", new Date(1561632940029L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1561632934127L), null,
                                                         "ddc6305b-2c84-4872-85ff-1494f8dd9e1f90b4381e-55fa-484a-a5b2-ac605587d68ec2b9957c-53eb-40bf-8b61-c1dd7077f045ab94239b-65f4-40f2-929d-2c3d5010a8044fb93e31-a732-47c5-a28c-a17e6ab67bb41f552923-c94b-47f2-b6f8-947eb38955c282802bf4-686d-4e7e-9fa1-2414a0a0adf63179dffe-ec25-4d0b-b3c6-f04c79cca211db798420-124b-407a-804f-7718f1581ff6d258f0f7-6269-4a62-aad9-10355583a79e3713a596-0081-4e40-925d-c9380dc389e3a36eef0a-63c5-485f-92ab-7ec129172ff9a1c74a39-a0ab-4ea5-be25-d8740be7d8601fe1063e-d274-4803-a13f-46e72685ddfe75088e27-9111-4892-ba62-2c332519c607a320fcf7-b8c0-4fd7-a281-28eff13397166d09e329-3011-4d3c-b22b-200be0482a1e43446849-7436-4f61-baed-14dded9a6c1f23245128-20fd-4da7-a3b4-2f5d76f7ebf01af3f9c9-b31d-466c-983f-7078b641d2e9924b23d2-d411-43cd-b726-f393659128fe06c3ef72-681d-4937-bae5-12535878f308dd221482-de96-4607-81b0-eafc6c5aa7e271ab38a1-f415-4e00-aa90-6ee6917d04faebac5376-4316-4750-9dc3-52f79bf9e95524827bb3-54ad-43a2-aa2f-d45dd57ce1d3ad57ff2c-fac7-4473-9d07-55c0d8c491c5daea613d-69e2-4afd-bd4d-454d89640fc3105ed54b-3204-4fad-997b-1106f56b4497669f9415-5798-4cd1-bfee-58f1e3a807720a4e8b2b-24d6-43cd-a7ea-e13da5a9a2ff5741e7a7-4ae4-4b11-972a-9633010ae0d4f55b22eb-e5a6-4aaa-abee-9790a64155d093f14e23-e41e-4ffe-9344-e320d36f466573aadca1-0b5e-495f-9cfe-40228f5abec744fe9444-5024-400d-9e8d-28c9bbd7ec31445fd681-35aa-4829-ba81-88428d2068da1d54f133-6708-44e2-aa66-b33e2a441b7a8a840d9d-e6cd-4b58-b5be-0e79f5b3f2e9b97ba41f-5265-4861-9905-3471cc6ffafdcb955337-2a82-46ee-86f4-68849b353866c81d77ea-033b-4d46-840e-53aa7c3e571e3ba51f43-4a29-4023-aa7b-9bf1dbb1bd3eb5dc7a31-cd2c-4c38-816b-6937b5751468a0f44e26-ec9f-4d31-85da-db60769c3f70aa392c6a-e747-4ec3-a39a-e71fc20a73d805bc47a7-190e-43d1-9c9b-b88787a6d28d42874b89-dfc1-4b8d-b8f9-a6ae4a5da3222ff15e15-8971-4a08-96b2-318aa92c775c0ea844c9-9dc2-489e-9428-caf0585c013fd9543320-965e-4f81-a008-7f0fad0a30f1047606a8-c98f-4473-93bb-e61093879cbc8af07ebd-4c5e-484a-a6b3-154139bc4888e7947e5b-b8a7-4187-860f-0c37cce46b79b5807c8d-c380-437b-9f65-ee49fae2644c9f5bb803-775c-45ff-b73d-12750948d73d",
                                                         -30, "f91a14c4-54a2-40c1-b60d-db4948753c35",
                                                         "1319f897-776a-47c6-adef-6d8dc474406202bc4bdb-502e-4b5e-a5e1-366397c8c7a7d09c6c4b-2494-409b-9b68-7d8d2c46de44a4bdd3d4-6301-46ad-907a-512e8690783f",
                                                         new Date(1561632940516L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1561632942542L), null,
                                                       "b35599c0-b11d-4062-b2c9-13d63f598fba", -24,
                                                       "58c31374-e293-495b-8d8d-ef0b7ae05887",
                                                       "50c920e8-fd20-4a85-b935-3f853c84a90e",
                                                       new Date(1561632940006L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1561632942542L), null,
                                                       "b35599c0-b11d-4062-b2c9-13d63f598fba", -24,
                                                       "58c31374-e293-495b-8d8d-ef0b7ae05887",
                                                       "50c920e8-fd20-4a85-b935-3f853c84a90e",
                                                       new Date(1561632940006L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1561632942637L), null,
                                                       "145f4516-4958-43ea-9887-469295b4b1d3", -98,
                                                       "bbf98d89-4de6-4064-a353-d22f2fed4a4b",
                                                       "c9f66d60-1c47-4a50-9ddb-1aa138c1b1b6",
                                                       new Date(1561632938583L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
