// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1561632937338L),
                                                             "1a35df12-1d1d-4c9a-84fd-7b51668e8c0b", 24,
                                                             "79af8612-e566-416c-95d4-0dc15949508b",
                                                             "d2bd17a5-8ba1-4017-9462-3e4c9f92a052",
                                                             "f75fb30e-acf3-4cb3-b433-94f930b95002",
                                                             "716f1a2a-cb98-4e85-b9dd-0bfc2e9e66c4",
                                                             new Date(1561632942556L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1561632937043L),
                                                             "7f33b426-c5c0-422a-9d38-92a4d186c800", 60,
                                                             "8b095303-56f9-4111-8bed-23e293e6dd7f",
                                                             "43ac0013-7a63-4b50-aaa7-e0f2cd005e43",
                                                             "74690650-91a7-4a4b-910b-49bba676a722",
                                                             "167a6d59-0873-460d-94a3-9e239b0e8a52",
                                                             new Date(1561632934946L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1561632937043L),
                                                             "7f33b426-c5c0-422a-9d38-92a4d186c800", 60,
                                                             "8b095303-56f9-4111-8bed-23e293e6dd7f",
                                                             "43ac0013-7a63-4b50-aaa7-e0f2cd005e43",
                                                             "74690650-91a7-4a4b-910b-49bba676a722",
                                                             "167a6d59-0873-460d-94a3-9e239b0e8a52",
                                                             new Date(1561632934946L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1561632941921L),
                                                        "5156814c-a26b-4239-8bc4-95852f49ed56", 43,
                                                        "51cfdc48-defa-4d74-9141-9a425dc6e89a",
                                                        "39220666-cbea-4c49-9b24-d68c7dc2c6d4",
                                                        "82278a39-0daa-4083-a758-fbc15872c6fc",
                                                        "43ddf9df-d63b-447f-ac97-76c59f738aba",
                                                        new Date(1561632940668L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1561632941134L),
                                                               "a57c0b3d-13e3-4b34-b1b5-5fdfc3b375cd", 6,
                                                               "ee512414-3c81-4e59-82a9-4cd682b1771e",
                                                               "f45090fb-0b5e-40d7-8c08-1583bc1dbc4410063f94-724e-4041-affd-2aaec32930191e6a24b7-74f5-4a56-b52f-d61a9ce7fb71caf100fe-78ca-4aa3-9079-72a988be2cc736662872-0837-4a54-bfab-f86a3d2f38b9720b3ffd-0ca8-416b-813f-81c0052cc0578e5c0759-18c5-4d34-b7e8-1f535b7b3cc21f2edc15-ea99-43bb-ab83-6e7155eb342da86c8a5d-ac65-4864-aa7b-5563f456aa832478ef9c-fb6f-4303-99fc-89b6d379675af945afb1-4f3a-4d9c-bc64-d6a23170ccd7bb384e71-6b41-4a16-82a7-7524d178e69f395205f4-e38c-4f42-9ba4-5f39ae9a8ce860c73490-bc15-495a-9a9c-3f2a86fa8c8742318b2d-9c26-45d1-98c1-ebd0a4be4532aba1a274-2c00-4d14-b771-27ce771a5e435ad8b2e9-0a32-44f4-a1de-67a0e7229d0539f93123-e3c4-4220-918a-a0439f6a69c22b79124e-70af-4f65-aca4-a404fe35136256837243-9a31-4615-b0ed-3262da926a97fdaab663-2dca-4ae2-9d2b-4fab8a40a6b8405a08af-7f6d-4ec8-af46-12163420804a9a0bd86e-923c-490d-9b6b-a90de28eb888bb337aa2-cb1d-46a8-aad3-7cad476a6cb6b352eeec-5f28-49f3-9369-3c36398e80245fbae00a-c831-4108-9148-b6d7aa9fe424af1d29cf-ee53-4e4d-8903-c05a0011d496f275af9e-3fc0-4420-b4e3-8af3392f7e817de8173c-4be0-4109-b0db-45a3688dc0f539883019-1061-4599-bd2b-b3948d975a9c0d5f85f3-5010-46a8-bde4-2f80cecd2ca9fb76c551-764c-4a07-aec3-5545d34f60834e577f6e-47f8-46f3-9ef0-f4ce1d54a16221afebbc-2058-4609-8eac-0285549799685dc8ec7f-cc91-437a-a52e-4c5d0e5870df9d8eb732-7dc2-46a1-acb9-c89688ccaecd8acf9ab9-b276-4491-b0ad-609085d6b864a30302bb-176c-47db-9521-15c1433e58fd59724706-9ad8-42cf-a194-e89c5763ac4c1467510e-f432-4cde-b6c4-a748326f7d86ee2cc465-9461-4c80-9492-10ac7c5bfbbc3c0937d9-c6dc-4bdd-b83d-6c1448c71931edd40d95-84eb-45ed-91f8-9de18834823044d2d6fd-2da4-47c9-bf62-1b0bfdad32c3687eefe7-80a8-4a2b-a1a9-42d3cdd5a1e2474cc300-a5d5-4d7c-a429-9ea77269a122cf245590-4c9c-4766-bfa0-ca513f1a643e6c7dbfb3-d886-4c57-89ca-a9eaf31fce95e0898ca1-1161-43ca-8d26-75be769272ccd0323fba-a6c3-4698-be45-308658bd16c1949ff17d-52ab-4a9b-a9c3-447566543e5e1fb0aed1-8b9b-4cc2-9cf4-8953a13a6af8a06c9a52-93f1-4ea1-8f20-dc5cca87790a39875370-a865-4afe-a18e-f95764746cffff9c5f94-35b2-440b-bb37-570bf399dff6275b83e3-fd40-48d3-be1c-2097ef7d3c00",
                                                               "52fb382c-5151-4f2c-9a2b-b3829ded2535",
                                                               "d0dae7f6-169e-42f1-88eb-45dff27591cb4896bfed-0cc6-454d-ab96-4b18fb93cdae536c5c22-4fa9-4e22-bcf9-014c18761d9a03e427a7-3a94-4836-92e3-3721a1561bc1",
                                                               new Date(1561632937682L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1561632933461L),
                                                             "456ee86c-1d37-410a-94cd-e06349a4d091", -32,
                                                             "97bdbe35-f285-4381-9205-206a9bee28f5",
                                                             "8e0f5ae9-c906-4c76-9638-dd1f39c3927f",
                                                             "bba324da-f819-44e1-933d-3badcc60c115",
                                                             "542c8c12-25e9-41b7-af4b-e0998961b003",
                                                             new Date(1561632939319L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1561632933461L),
                                                             "456ee86c-1d37-410a-94cd-e06349a4d091", -32,
                                                             "97bdbe35-f285-4381-9205-206a9bee28f5",
                                                             "8e0f5ae9-c906-4c76-9638-dd1f39c3927f",
                                                             "bba324da-f819-44e1-933d-3badcc60c115",
                                                             "542c8c12-25e9-41b7-af4b-e0998961b003",
                                                             new Date(1561632939319L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1561632934156L),
                                                             "f331885c-03b2-439e-afec-abe1c510851f", -65,
                                                             "6f0f633f-82b9-499f-8651-74b16bbc0e25",
                                                             "b6e0228c-2dd6-4619-a86f-9d12e15be36a",
                                                             "5c612f32-a2d4-4174-8975-8c025c334f8d",
                                                             "7083f382-753b-440b-9326-3b59fbf99784",
                                                             new Date(1561632941054L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
