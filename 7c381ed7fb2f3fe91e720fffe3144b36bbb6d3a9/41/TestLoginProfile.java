// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("18a9781e-4c50-4312-9ca8-83ac354b7394",
                                                          "7d19b355-59b5-4701-8486-54bc31d08db7");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("42638e16-96dd-4deb-9fb4-079f0e714400",
                                                          "b399f720-ab17-41ad-ac80-b07154ed1720");
            LoginProfile loginprofile2 = new LoginProfile("42638e16-96dd-4deb-9fb4-079f0e714400",
                                                          "b399f720-ab17-41ad-ac80-b07154ed1720");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("a27d8975-fe01-4091-afc6-d58a54f680cd",
                                                     "43a67d4f-5c38-4c77-9b82-f5aecaf7817b");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("7e07a9c2-cdaf-468b-971c-05503443ee07",
                                                          "fc9d18b0-0459-4e7f-a20c-6eba75170dfe");
            LoginProfile loginprofile2 = new LoginProfile("7e07a9c2-cdaf-468b-971c-05503443ee07",
                                                          "fc9d18b0-0459-4e7f-a20c-6eba75170dfe");
            LoginProfile loginprofile3 = new LoginProfile("b42b1aff-7a73-4dde-9b3c-34eaecc04d20",
                                                          "efef674a-5632-4484-80a9-4f1e975c144b");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
