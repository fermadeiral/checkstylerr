// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561632941616L),
                                                                         "7d1d4e9b-2f3b-4efc-aaa9-4934aa800605",
                                                                         "f470ed61-4c3a-4801-bb9c-d34c919606ee",
                                                                         "989e9f8e-45ec-454d-bcff-4642b90e4bb1");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561632937359L),
                                                                         "d8bc46ae-f9f5-414f-b7d7-1b5ca9f58ae4",
                                                                         "92eb5b82-3b5a-4969-ad4b-b2403a5b6250",
                                                                         "d4f91a9c-c057-4f09-bad1-a662e095b024");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561632937359L),
                                                                         "d8bc46ae-f9f5-414f-b7d7-1b5ca9f58ae4",
                                                                         "92eb5b82-3b5a-4969-ad4b-b2403a5b6250",
                                                                         "d4f91a9c-c057-4f09-bad1-a662e095b024");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561632933194L),
                                                                    "ebc5a837-ddfb-4216-bfa6-3cb681c9de3b",
                                                                    "66ddb93e-2d44-4fb5-bf8c-5ce6866aa0a2",
                                                                    "ecd2f222-3c3d-42ac-bdd0-be1d11279c93");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561632940995L),
                                                                         "764ab130-e7ff-430c-b4b5-b9f5e073a88c",
                                                                         "93233bf2-cdef-42a2-a0c4-e871e5d5ceb0",
                                                                         "f0ad378c-10b7-4989-a9eb-795760e679b6");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561632940995L),
                                                                         "764ab130-e7ff-430c-b4b5-b9f5e073a88c",
                                                                         "93233bf2-cdef-42a2-a0c4-e871e5d5ceb0",
                                                                         "f0ad378c-10b7-4989-a9eb-795760e679b6");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561632938008L),
                                                                         "4ffe7c80-f5bf-418e-a2ee-176270717f6b",
                                                                         "4afcaa2b-93a8-4301-9631-9128a531dd5e",
                                                                         "4d90d180-bb2f-464f-92f6-9600e1439dbf");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
