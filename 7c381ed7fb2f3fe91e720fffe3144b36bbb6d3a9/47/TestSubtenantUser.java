// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                             "512d4acd-796d-49ba-aa9c-c7e514adcf66",
                                                             new Date(1561632936358L), -41, null,
                                                             "25250.9e9b2@13b6a.fr", true,
                                                             "93687e25-f2e0-4c8d-9b62-665f9d2ae64c",
                                                             "0ba2bdaa1a27dfa7cabb78466e8ea791", true, false, false, 43,
                                                             null, null, "14776efe-559c-409d-aba3-2be882ce6723", -68,
                                                             "e4d45058-7a14-43ed-9c6b-1619c96d5749",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561632936456L), "--U+");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                             "5101a676-dec1-40d8-9e3b-000318cce294",
                                                             new Date(1561632935629L), -24, null,
                                                             "72f5a.6dd2d@a9fef.me", true,
                                                             "26555e19-c6fd-4f73-99b7-b33d793bfc8e",
                                                             "0ba2bdaa1a27dfa7cabb78466e8ea791", false, true, true, 7,
                                                             null, null, "a48d8283-008b-4d02-96f8-0ed4f436f36f", 85,
                                                             "2d6b75c1-79db-4c4a-9556-288c6a9cac4d",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561632936595L), "--U+");
            SubtenantUser subtenantuser2 = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                             "5101a676-dec1-40d8-9e3b-000318cce294",
                                                             new Date(1561632935629L), -24, null,
                                                             "72f5a.6dd2d@a9fef.me", true,
                                                             "26555e19-c6fd-4f73-99b7-b33d793bfc8e",
                                                             "0ba2bdaa1a27dfa7cabb78466e8ea791", false, true, true, 7,
                                                             null, null, "a48d8283-008b-4d02-96f8-0ed4f436f36f", 85,
                                                             "2d6b75c1-79db-4c4a-9556-288c6a9cac4d",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561632936595L), "--U+");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                        "2364eedf-e247-40b3-9fb4-934f11872f20",
                                                        new Date(1561632942688L), 80, null, "2c1fa.692ae@55537.fr",
                                                        true, "90a53e32-467c-4318-8ba1-9c0d2502d341",
                                                        "0ba2bdaa1a27dfa7cabb78466e8ea791", true, false, true, -125,
                                                        null, null, "326862a0-4ff3-42d2-a4c6-a21f2664058a", 109,
                                                        "0004b9db-3992-49ae-9dfb-909b25724f3e",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1561632933454L), "--U+");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "eae2f02d-b358-4e80-9a80-106c66cb4e77",
                                                               new Date(1561632934866L), 42, null, null, true,
                                                               "036d5cae-755d-4871-a675-394184f5490f84dab6e9-2adb-4e7e-8cb7-3cc69db6e1b17c6939ed-3503-4944-8c4f-0cb789de42d6",
                                                               "3çµƒ\u001b3535`3!è»µI3 êµ§33BB3ê€€355àº”5çŸ˜5-á°¾55[5í†¤553,\u0017æ—’[3?ç­?35O\u0004:3;\u001d\u0015B3355æ§—5äŠ¨N",
                                                               false, true, true, -12, null, null,
                                                               "28bcfd63-cf25-4b71-adcf-1377d44ed8fc", 41,
                                                               "b8a3bb71-7649-45b4-a908-b09ccc3f41af261c8618-7c6d-4d72-9b65-ade9c2a77d45ad86215b-fb47-4316-8e8e-d08d4a923f01",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1561632940264L),
                                                               "ç?’?\u0007'ëŒ°îŠ§OA,ê´·ê‡·\u000b\u0002Aé‰£â ¶(çª¦\u0000\bç—–Hê¾¬ì”¼ìˆ„\u001aâ»Š\u0006ì¸?\u0000\u0012!åˆ?ë?‘9RGR\tG5è¦?\u0000 ê‡„\u000bê¶ƒJ#ìˆ“Òª=ã€?ç©º\u001f\u00136>H\u000f\u001dë’¶D");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                             "414cc5bf-0e2d-4c3c-8075-493fa8e08a07",
                                                             new Date(1561632937874L), 3, null, "2cc44.9f707@7a837.fr",
                                                             true, "fd332819-28f2-4277-be45-5ccddf6fa718",
                                                             "0ba2bdaa1a27dfa7cabb78466e8ea791", true, false, true, 94,
                                                             null, null, "dad070a5-9239-4b4a-9854-eadec45f3d5d", -93,
                                                             "6a62c664-c760-423c-992c-30db5172dc16",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561632936778L), "--U+");
            SubtenantUser subtenantuser2 = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                             "414cc5bf-0e2d-4c3c-8075-493fa8e08a07",
                                                             new Date(1561632937874L), 3, null, "2cc44.9f707@7a837.fr",
                                                             true, "fd332819-28f2-4277-be45-5ccddf6fa718",
                                                             "0ba2bdaa1a27dfa7cabb78466e8ea791", true, false, true, 94,
                                                             null, null, "dad070a5-9239-4b4a-9854-eadec45f3d5d", -93,
                                                             "6a62c664-c760-423c-992c-30db5172dc16",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561632936778L), "--U+");
            SubtenantUser subtenantuser3 = new SubtenantUser("0ba2bdaa1a27dfa7cabb78466e8ea791", null,
                                                             "2440d265-4d79-488d-afe3-4db7db968d3d",
                                                             new Date(1561632938620L), -56, null,
                                                             "dbb0a.aa096@ae5d9.me", true,
                                                             "34bbfd69-d4f8-475c-a665-bf7ad4afe154",
                                                             "0ba2bdaa1a27dfa7cabb78466e8ea791", true, false, true, -78,
                                                             null, null, "b64218d1-7ae0-4c72-95d7-2c1a8aa4bf22", 116,
                                                             "45dc375d-8090-4ae6-a255-4e08667e8525",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1561632937363L), "--U+");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
