// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561383442015L),
                                                                         "d60e47bc-569f-4c4f-813f-4bde044178ea",
                                                                         "547bac2b-ef19-4362-83fd-ac6eb73a46cc",
                                                                         "87bfa637-7a58-4236-bf23-5b391e8cee04");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561383444185L),
                                                                         "08d8e374-4200-410a-b5a7-45f5c37f9089",
                                                                         "54de437e-f064-45f9-8d04-659e8f947be6",
                                                                         "6b4eea34-c17a-4367-b51f-c5a84893104f");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561383444185L),
                                                                         "08d8e374-4200-410a-b5a7-45f5c37f9089",
                                                                         "54de437e-f064-45f9-8d04-659e8f947be6",
                                                                         "6b4eea34-c17a-4367-b51f-c5a84893104f");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561383441011L),
                                                                    "649233ca-8961-4b8e-8b55-cd60a8766625",
                                                                    "bfffad48-1050-47db-a520-ecd2742a2051",
                                                                    "3d254cf9-9270-4c8b-b1a2-f5d7eed1a7d1");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561383445468L),
                                                                         "d0bfa063-a038-4390-9906-583db3418f47",
                                                                         "1cae49de-253e-416f-9fe3-07c0e3fb4aa9",
                                                                         "53a4c84c-d928-48c0-bd29-8ab5c638e501");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561383445468L),
                                                                         "d0bfa063-a038-4390-9906-583db3418f47",
                                                                         "1cae49de-253e-416f-9fe3-07c0e3fb4aa9",
                                                                         "53a4c84c-d928-48c0-bd29-8ab5c638e501");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561383448468L),
                                                                         "87c5744c-1da0-439c-aa24-f09b63b5d7ab",
                                                                         "eea6b0ee-7f5d-496b-814b-2c553cf4a211",
                                                                         "d30aaff3-0434-4336-b98f-f21c6ee01112");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
