// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558003276186L),
                                                                         "e6dd42b1-04be-46b5-a254-43efe4ff85ca",
                                                                         "f49b9812-7458-4b10-b492-10821079fd0a",
                                                                         "600af5ae-355e-4f91-9434-70e8c9defc9d");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558003282406L),
                                                                         "4d803a4d-ca06-492f-ba41-2da40c02208f",
                                                                         "4ba183e0-73fc-46cd-967f-858dc17787ec",
                                                                         "570a1bef-b566-4480-ad18-0e57e9e3c552");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558003282406L),
                                                                         "4d803a4d-ca06-492f-ba41-2da40c02208f",
                                                                         "4ba183e0-73fc-46cd-967f-858dc17787ec",
                                                                         "570a1bef-b566-4480-ad18-0e57e9e3c552");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558003275182L),
                                                                    "c8a2a2a7-bba6-4a91-96fc-f3c09ecac121",
                                                                    "36dd646e-dbc2-4be8-96ed-3f85aa4e3abe",
                                                                    "a76d62ed-1a1a-42cd-bbad-c89ab0e1b45c");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558003282122L),
                                                                         "1277939a-cd9c-401f-9b3d-2f3b1cb1c663",
                                                                         "4230f056-dd34-47e4-807a-dd3cb6b358c7",
                                                                         "96d5eb25-d0be-4416-9ba1-82fb78b821f0");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558003282122L),
                                                                         "1277939a-cd9c-401f-9b3d-2f3b1cb1c663",
                                                                         "4230f056-dd34-47e4-807a-dd3cb6b358c7",
                                                                         "96d5eb25-d0be-4416-9ba1-82fb78b821f0");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558003275929L),
                                                                         "67380636-cbd4-4a19-aa2c-4513e02fcd4d",
                                                                         "1f78975a-7d3d-46b1-9060-32ba1565bef1",
                                                                         "91c542e4-e6c7-451b-ad50-0639217be896");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
