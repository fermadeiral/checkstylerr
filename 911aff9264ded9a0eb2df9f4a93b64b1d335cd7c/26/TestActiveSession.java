// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                             "8d67dfe9-5aa6-4472-b916-cd51092a6119",
                                                             new Date(1558003277418L),
                                                             "9481785f-6c3b-47f0-856e-2e4c6043b646",
                                                             "04adc176-99bf-428f-bf58-f51754984581");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                             "44bfcb87-6055-4005-a8bb-f7b0ef0f39e1",
                                                             new Date(1558003273649L),
                                                             "283bbc14-5232-4639-9e52-cc93f31cc106",
                                                             "2f400b0d-5f90-4c37-a2cb-d4d03c83a02c");
            ActiveSession activesession2 = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                             "44bfcb87-6055-4005-a8bb-f7b0ef0f39e1",
                                                             new Date(1558003273649L),
                                                             "283bbc14-5232-4639-9e52-cc93f31cc106",
                                                             "2f400b0d-5f90-4c37-a2cb-d4d03c83a02c");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                        "70e6a050-1aa3-4096-949a-de45b8aee410",
                                                        new Date(1558003275568L),
                                                        "487d19e6-9d0c-4547-9210-5c20864c68db",
                                                        "17becda0-3ad5-46e2-bb89-52e0319ee399");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                             "9a8b68fa-d037-4503-9a96-b05959bdf69c",
                                                             new Date(1558003277086L),
                                                             "bddacefc-e04b-41cb-a502-34d6b272c3ba",
                                                             "285d7360-95c9-4b17-b03b-e2e5d1bcf60a");
            ActiveSession activesession2 = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                             "9a8b68fa-d037-4503-9a96-b05959bdf69c",
                                                             new Date(1558003277086L),
                                                             "bddacefc-e04b-41cb-a502-34d6b272c3ba",
                                                             "285d7360-95c9-4b17-b03b-e2e5d1bcf60a");
            ActiveSession activesession3 = new ActiveSession("ebb6e571ba299e09d8e8859accae6efa",
                                                             "13afaaa2-6584-42da-a225-146b5511aa6b",
                                                             new Date(1558003279604L),
                                                             "30d1b4c9-ef5e-4b5a-b5c6-9e4c754dd80d",
                                                             "8f8f5059-c22f-44b7-ba21-75d20d9dafef");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
