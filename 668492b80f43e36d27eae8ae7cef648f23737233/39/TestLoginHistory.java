// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1562657744533L),
                                                          "2c0b6b4e-3790-4c26-ab6c-4d581179322c", false,
                                                          "eced00ac-d7a0-4539-b9ce-1f9a4efb9536");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1562657747199L),
                                                          "a52a152b-bee9-4c67-9ac7-cccb155fa98d", true,
                                                          "016ffdfc-1ad3-4431-b92b-9c0b3f679ccc");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1562657747199L),
                                                          "a52a152b-bee9-4c67-9ac7-cccb155fa98d", true,
                                                          "016ffdfc-1ad3-4431-b92b-9c0b3f679ccc");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1562657743495L), "543590e7-ef79-4a3c-ad92-331481d217f9",
                                                     true, "ccaf8902-d1db-4c7b-a53e-07a260755eee");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1562657747466L),
                                                          "1ac06536-f5ff-464c-a7fc-d59f28ddd7de", false,
                                                          "399c209d-0026-4787-a21c-403f38e36287");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1562657747466L),
                                                          "1ac06536-f5ff-464c-a7fc-d59f28ddd7de", false,
                                                          "399c209d-0026-4787-a21c-403f38e36287");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1562657746761L),
                                                          "70153963-133c-49d9-85b6-9e6fe230e945", false,
                                                          "84f4beb1-4d48-4148-bdac-63f6b0ca41f7");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
