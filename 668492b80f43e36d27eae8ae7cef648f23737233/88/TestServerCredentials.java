// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1562657748938L),
                                                                         "49a159b0-629c-4cab-8c4f-4385793b2097",
                                                                         "d1105503-cce2-465c-954c-ae6b1b8afb52",
                                                                         "1d5dcab0-48c9-429d-9a16-fad0f43ee65a");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1562657752333L),
                                                                         "942254d3-d690-4f11-9af8-4be77d355e73",
                                                                         "bb1077da-a664-4f4f-a440-768508deb211",
                                                                         "2f4c4764-5982-4359-a4f3-3ee35a0aa686");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1562657752333L),
                                                                         "942254d3-d690-4f11-9af8-4be77d355e73",
                                                                         "bb1077da-a664-4f4f-a440-768508deb211",
                                                                         "2f4c4764-5982-4359-a4f3-3ee35a0aa686");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1562657751465L),
                                                                    "915f8601-e1e1-40bc-af7a-3baed0ec2f17",
                                                                    "8db7c8af-e9d5-4df1-ab61-ccf742b81dcc",
                                                                    "bd32cd18-79d5-4d49-b620-5ec3aecf4477");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1562657751408L),
                                                                         "50676a71-d8e6-4dd1-b295-100505e79f83",
                                                                         "024def49-2009-4373-84e1-3c2b74a9690d",
                                                                         "fe993734-b32b-42f0-8e38-ee95946accc3");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1562657751408L),
                                                                         "50676a71-d8e6-4dd1-b295-100505e79f83",
                                                                         "024def49-2009-4373-84e1-3c2b74a9690d",
                                                                         "fe993734-b32b-42f0-8e38-ee95946accc3");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1562657750942L),
                                                                         "8be0e6e8-1fd2-4dc8-aff7-80d9e37c4263",
                                                                         "41868606-2911-449a-8fa8-3778b0c48992",
                                                                         "17ee7251-6ed7-44ea-9633-2e906a5c8877");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
