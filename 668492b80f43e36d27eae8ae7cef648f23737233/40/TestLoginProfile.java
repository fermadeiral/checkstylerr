// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("89f7bde0-42e4-4bad-a3c5-4a5ac3940914",
                                                          "86bcbef6-cabb-49bd-9e7d-0db296a5f5b0");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("6335d7b0-1c28-4f93-b7e6-1f1f1a577d6c",
                                                          "27bbf134-4fc4-43c7-942a-0df9d8638a71");
            LoginProfile loginprofile2 = new LoginProfile("6335d7b0-1c28-4f93-b7e6-1f1f1a577d6c",
                                                          "27bbf134-4fc4-43c7-942a-0df9d8638a71");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("c345f218-7d68-4260-8a83-3ba6a2269e04",
                                                     "aef378b4-b897-4ac6-926f-165a7e173c83");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("ef9802e5-2bf1-42e3-ada5-1247ac338e7c",
                                                          "e3af338c-fb32-4d2d-8bde-d64f52563dc1");
            LoginProfile loginprofile2 = new LoginProfile("ef9802e5-2bf1-42e3-ada5-1247ac338e7c",
                                                          "e3af338c-fb32-4d2d-8bde-d64f52563dc1");
            LoginProfile loginprofile3 = new LoginProfile("ff8c9b61-5ead-40d6-96eb-f81177e43d6b",
                                                          "924c35e3-cc15-4377-9254-ac898ea6b540");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
