// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("5d1efa72-4582-4373-8e9e-1095437113d0", true,
                                        "812aef22-e9ba-4b2a-a180-4e788abee956", false,
                                        "6b3a8877-7afb-4fcb-b1e6-a8c14a78e6ba");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("2a90e2b0-b56d-4489-87cb-4dc913ad1cf5", false,
                                        "eb8c6bef-8045-4e99-9567-ee6e163dc4e4", true,
                                        "4ddf44b3-6202-4b57-b12e-c31c6b53d18f");
            Policy policy2 = new Policy("2a90e2b0-b56d-4489-87cb-4dc913ad1cf5", false,
                                        "eb8c6bef-8045-4e99-9567-ee6e163dc4e4", true,
                                        "4ddf44b3-6202-4b57-b12e-c31c6b53d18f");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("4f3bd637-f2ba-4235-8111-bd3f2a4c6897", true, "afc3f108-8486-4125-a16c-e241ba257fb6",
                                   true, "318f88bf-ada3-489f-8efc-0d623be56c4d");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("c484d47c-e6d6-4cf6-80a0-dfd762a66162", false,
                                        "9515e27b-8f09-4f54-9c83-a9fa3cf47e8e", false,
                                        "939ce266-4c86-494b-a85f-b69627b0ef39");
            Policy policy2 = new Policy("c484d47c-e6d6-4cf6-80a0-dfd762a66162", false,
                                        "9515e27b-8f09-4f54-9c83-a9fa3cf47e8e", false,
                                        "939ce266-4c86-494b-a85f-b69627b0ef39");
            Policy policy3 = new Policy("5b0f6f03-6b4c-42a3-aaa0-6035a2a04349", false,
                                        "d849938b-b52e-46f5-bd2b-a22c3a322e20", false,
                                        "2c18ac75-c268-450d-8573-fbe8317090c4");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
