// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1562657750426L),
                                                             "df01932e-f59f-44b0-95d4-5ed73610850b", 106,
                                                             "8aef6dfe-4000-4f74-8b12-c5b36bd26342",
                                                             "640a21d2-fea2-4639-aadd-e1c4203c7370",
                                                             "dea81a8d-74a4-46ff-8cb3-ed8c303e9215",
                                                             "df5c51a5-104b-46f3-a948-e51429291501",
                                                             new Date(1562657744526L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1562657749685L),
                                                             "f8bb942f-4d67-4ea8-86d1-39710748b473", -101,
                                                             "634be802-acdf-4263-a2fd-4b733d863639",
                                                             "fec11ebd-8e17-43a4-8413-cc33cd89ebad",
                                                             "4e1ae067-610f-4de9-ac3d-3aae1225edc7",
                                                             "d8bc7e67-6219-4fe2-b583-bb8eb5b3f377",
                                                             new Date(1562657747469L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1562657749685L),
                                                             "f8bb942f-4d67-4ea8-86d1-39710748b473", -101,
                                                             "634be802-acdf-4263-a2fd-4b733d863639",
                                                             "fec11ebd-8e17-43a4-8413-cc33cd89ebad",
                                                             "4e1ae067-610f-4de9-ac3d-3aae1225edc7",
                                                             "d8bc7e67-6219-4fe2-b583-bb8eb5b3f377",
                                                             new Date(1562657747469L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1562657748852L),
                                                        "7ce4411e-9a48-4d9d-85b7-42ca71d89929", 69,
                                                        "0030d622-6b90-44e8-82e2-337419ec39a6",
                                                        "63bd4b4e-5aee-4e6b-ab8d-f638d2e93f50",
                                                        "65882abe-d51a-47af-8bd4-1a88b046fd67",
                                                        "1a09a189-1c77-4e69-9172-1cd798547781",
                                                        new Date(1562657750643L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1562657748606L),
                                                               "abc27ca7-f8ae-4bcd-927e-4cdd59fe15ae", -41,
                                                               "722c9ebc-587c-46f4-9774-4cc76034871c",
                                                               "98943a9c-5519-4d52-bb36-3b43fc9d2680619a31a8-db52-4464-8ba4-07a0c495beea3075dc23-19fa-42d0-9e9a-f697dbb195be49aa4bb3-e333-48b7-adbc-3657bae679334d9db5e9-a435-4c58-86b2-bb53c07bcddd1aca5f0e-8888-468f-a606-7a8fd63ffd76b58e68f0-1646-4264-a5e4-bf099078a13e4747ec04-fbfc-48c7-a024-69088fba61c40aa8fa98-d236-487f-9e04-c6a13e7e4d03fb9a640c-eca3-4915-a9f2-8acd6066a2ee7b4a27ac-9cbe-4caf-86a2-1feb5596508c2052cc85-a97e-4631-bd24-92e6efe444a9301b7ebc-f970-46a0-88bc-c0b08c7ea719514999d8-1e2f-491e-8c6c-92be63a947d96e74e4da-801f-41c0-8ac3-4702a8d7b64f32018dde-9037-4a2e-9328-66c5158e2361860e721e-76b9-4aca-8ed2-beb15bc86f75f6d899ef-3763-4f9f-9be3-3903b631e5300a33344a-b03a-4be6-a5c4-beeae675cee3af599368-7d91-48a0-9a57-32fa6dfaa9aa8eea8cc3-27f7-4055-80c8-9d7c79d71bbcaea1c34d-351d-47c5-9c25-bdb60b66b20fc588a572-009a-4412-ab20-a6aa070494e2eac97728-cd29-4b5b-803e-e4d60ef45503b664d1dd-2c35-4106-b1fb-d5b45a9f7407ebbba2c0-1da8-44ae-8ea3-cb14f422d3bfa62e5a13-f6fc-4ef5-84b4-9e7b73f36b0dbc981f61-b5b1-407c-993b-2ed2bcb710563d5bf812-b82c-4d4c-857d-1c67e9e8d9b29c383fea-ea68-4140-8e5c-7eaa06025bb0214f9aca-1f58-41a6-94e1-0d110e3e37e172885c41-62bb-4580-a538-08f611f1b2d194be6157-d8f4-42ce-9ecc-ab897caeeaab34c55d23-a2a5-4b32-9b13-b293cd03b309d882fc8f-1262-4fd5-b9ed-0c1918a9c39f32445ba9-fc98-44c0-8be6-f0425dbc671fe247f4ef-f40d-417a-8b09-40581193362cad58365b-f23c-4cd6-b5da-2d4001751f1ff778db63-f690-4217-8317-73a962b26e9aa2d4bae0-b16d-4c8f-b0a6-c4d29db25f7d060fcc14-d156-4438-a117-9884ceca8278157f21ff-fe03-48a7-8a0e-690005583c845d55a559-e603-4c27-95d9-5048a43bbee5ed2b1361-7010-455c-a00d-e8488a0a679e598373da-e05d-4d11-96f0-678aef125c80eef28744-eb1a-491b-b57b-1f2281fe9ff4cbea4dea-e87d-46e6-9406-dfcf997d44fd18076b0e-d22c-4c35-93c7-edb3efdc713e72c576c5-ef1f-4b3a-bfc7-b2234a061133daf03f9b-1389-4ce0-84b6-8d11c099e36a11acd2f2-7e9c-4ac3-b07e-7605620a3d3e1d2a1541-6059-4bb6-9131-1588ce2ae9bc40003b26-9d81-4c46-bee2-a15955217469dddb9a29-9e97-4049-a9ff-30d98a85c5f4993d9631-e3f2-42cf-b450-923c6c2fcc3141f0e05c-6c63-40d4-92d1-c636334714a6",
                                                               "da17e16f-43d3-43ee-a579-2908391fdcb2",
                                                               "0e191a6a-8f60-4c22-a167-d8414cb380c98d3cef6a-dc51-465b-a67b-c3906f5fabc60950ce8e-3987-487e-a1ea-e61875008b259b658bf7-62c9-4d35-a3ef-383b8642dc9c",
                                                               new Date(1562657750248L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1562657747151L),
                                                             "9c29507c-bc7b-4368-928c-6b262dd355be", -31,
                                                             "490a9d18-8b92-419a-8348-709f8e7a2c4d",
                                                             "55a0681d-8ab0-49c5-a59e-2f9bc7d67b78",
                                                             "55d2ca51-5c9c-42ae-9e10-c23bc6d6e24a",
                                                             "463d9019-a35c-4e60-8d2a-2c322359d0b9",
                                                             new Date(1562657745993L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1562657747151L),
                                                             "9c29507c-bc7b-4368-928c-6b262dd355be", -31,
                                                             "490a9d18-8b92-419a-8348-709f8e7a2c4d",
                                                             "55a0681d-8ab0-49c5-a59e-2f9bc7d67b78",
                                                             "55d2ca51-5c9c-42ae-9e10-c23bc6d6e24a",
                                                             "463d9019-a35c-4e60-8d2a-2c322359d0b9",
                                                             new Date(1562657745993L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1562657744306L),
                                                             "9ec907a6-439f-433f-a220-6481bf2d5143", -14,
                                                             "8167015e-d64b-49b6-bfb8-ff6959226c54",
                                                             "09eba8c6-2ff9-477b-b911-8d1c11ee35f5",
                                                             "b62585ba-9af4-4251-b881-20e22932d7e3",
                                                             "1ab06598-16ff-4a7b-9332-022b8d3a58f8",
                                                             new Date(1562657743615L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
