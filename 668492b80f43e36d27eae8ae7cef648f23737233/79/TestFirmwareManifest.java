// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1562657750567L), 32,
                                                                      "4502dced-f2a8-4630-903f-0030198d64c6",
                                                                      "1e6b0973-2a6f-491b-a827-846654ddc8b8",
                                                                      "5fdddb2d-5995-4774-9a4b-69d0ba92d2f3",
                                                                      "8662797b-61ed-45c3-9e9f-9d4373549ff3",
                                                                      "3b6a3fe5-e521-4833-b822-10f486751b66",
                                                                      "23d3f302-9f80-473a-aaff-759909cf6686",
                                                                      new Date(1562657749265L),
                                                                      new Date(1562657744855L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1562657747938L), -91,
                                                                      "96b98934-4c73-4a72-8d0f-fcd01f082c7e",
                                                                      "d9b32e81-7b7c-4f1d-a004-949f6c485eb3",
                                                                      "13a3a94d-8401-4afd-bbe8-199c84b8197a",
                                                                      "de197b8d-2cf2-4ddc-a2c5-03c924a21856",
                                                                      "45bded2c-629b-45c5-9cfe-daf935ded083",
                                                                      "a1531f20-d79e-4bf2-8c68-ff0fb12b3778",
                                                                      new Date(1562657750883L),
                                                                      new Date(1562657752227L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1562657747938L), -91,
                                                                      "96b98934-4c73-4a72-8d0f-fcd01f082c7e",
                                                                      "d9b32e81-7b7c-4f1d-a004-949f6c485eb3",
                                                                      "13a3a94d-8401-4afd-bbe8-199c84b8197a",
                                                                      "de197b8d-2cf2-4ddc-a2c5-03c924a21856",
                                                                      "45bded2c-629b-45c5-9cfe-daf935ded083",
                                                                      "a1531f20-d79e-4bf2-8c68-ff0fb12b3778",
                                                                      new Date(1562657750883L),
                                                                      new Date(1562657752227L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1562657746056L), 71,
                                                                 "da6aaeef-24fc-41f6-a602-6279c5015dcb",
                                                                 "1ed7c0a2-0140-486c-ba50-812cba92474f",
                                                                 "5b7fad6c-ff47-4177-b3ee-679ae75e5445",
                                                                 "d0d01fbf-077b-43da-a5cb-b4ae317342c6",
                                                                 "c73fac01-f6d2-442e-9618-6eb1622dee22",
                                                                 "238c4743-6bca-4cd3-8e5a-aebbe68c0464",
                                                                 new Date(1562657748507L), new Date(1562657746691L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1562657750036L), 43,
                                                                        "135abd55-b78a-4481-97e7-b9452fd9f0c4",
                                                                        "e7e1b59a-54f8-44b5-b879-18b299c1c31c8b4d631b-8e08-405e-8401-5f5914565537a1866f85-6548-460f-ae46-6361be5c26386a490bb2-2dd3-484e-abd2-af8332066c57e1fe3a5a-1058-4c6a-9b75-78446dce3f9ac82b5a0e-1fc2-4266-a4e3-0e5258e035b7dba9795c-40e0-41fb-9f82-3cd01bba78730595715d-c23d-47fd-bb7c-4d5c8fd2bdb4430d05c8-ae90-4732-8ec7-6c20ab8394c35115ec2c-4596-49ad-b3cd-ffe8cf7093be55fe01f4-836e-4c56-b752-db91fb9fb499ac2a329c-777e-43f0-adb2-fa469a8ca5b36b6d345f-a522-41df-ac87-f37b99f89f6c45c3cbf3-f144-4391-befb-99cac24a8ea11ed72863-6886-487c-8058-b415816f08484ef6e7d1-b978-4a2b-b0a1-6cb502e4257fdffdffdd-5c14-4cdc-919f-896f19c24021b1539488-769d-485a-96c8-43eeafab3ba3fe096043-001f-4293-ba3c-de3ce8b960123935f30f-5d4f-4054-851d-80843696c9468693e5d2-846e-4ebf-9b2f-03e71d0d402012a39e79-ea7a-4139-a682-dd955c0a493413a75f8b-f6b2-43e9-a3ee-c7e24f92e3b2cf9e0785-9103-41df-a236-d6fa7a5b8b93033bdf03-1d1c-4911-a389-10b3a6e76fe5e1c37242-0572-4680-8815-d344c1be17e98c841ab9-d281-4ebc-90e8-c412e76c995232c1475a-e840-4d8f-a4c3-dab63577ecfbce9d3b2a-7f20-4586-a218-8610ec8fc8cab2d4ff72-e7ff-4967-b648-daec2058c96527cbcea3-0fa0-45e2-97c9-ebfa2002f32734a53aaf-16a4-4430-86aa-88a2565d4412d8e04bf7-c5f3-4cfe-9e76-f4ab4070380332af88db-045e-4f9b-a86c-0492540921fc788fff92-a927-4c92-9ae7-d00d4058dde054d1f4e9-722d-40a5-a36f-c8c864162893dba10502-3993-4a37-be0a-8253fda1df4ee1fcb6b0-ec4d-4ee8-87de-db35d8ab1ce4c4bbcda2-c6f6-4ebe-9b49-af9e1319e32fc14ea68b-8b73-4249-a58a-af7b113f898c7acaeb16-347f-4a90-b5e6-fec9427cc734fc39801b-b10a-489c-ac6b-4b8cfa55827413aa404a-9ad6-42af-9dd2-ed10675b57161b1da4af-f65d-4960-bd63-470c7f0a02daab1a6b3e-571d-403e-be76-3a38dda5ae253a174474-aed7-457b-81c0-6ecdc1458265670fb9c5-03e6-461c-b538-a06061c4a37ee80859c3-0d91-4aff-9f7c-9cf24f7f5df50dd1d8ff-8d50-4bf1-8335-1c60161af057f7a0a99a-eb9a-4972-a5ef-3c5d2c77b95bf5d207da-613f-4bb2-a1d9-f7061fe95ac3c947dbb6-0026-47c6-b3e5-b9c07335888ad1994117-6f7c-47f5-b20b-37346d19112bfa66fb90-c2c8-4082-ae50-8a3b189a294d03867096-4fa7-42a7-8b52-6dd2b6b562fecf3b84fa-60cd-433e-bad0-43d06d1f90ea",
                                                                        "60452a30-3e9c-402c-8c0d-9958527cdc49",
                                                                        "5388fc9f-9aa6-4c1e-a47b-fc4ad1631d3e",
                                                                        "fea416d8-9a33-4ec9-b3db-1e5ec81f18fd",
                                                                        "8a7975c1-81eb-4d85-8323-4bc90c9720cccea55248-df93-459d-adbc-8123eeee8a39990caaaa-6ed1-446d-9b74-10321a20366c8722842d-3753-4f0a-81cc-d25576aa3ca5",
                                                                        new Date(1562657750016L),
                                                                        new Date(1562657751202L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1562657743284L), -89,
                                                                      "25ea455a-9c3a-4e94-9662-56f79f1b00fa",
                                                                      "1a1125c3-11b6-4bab-9a2f-bd8fd002ebfa",
                                                                      "4cc5930e-8d52-40cc-ae27-ff36d29b7b2f",
                                                                      "6ba0b0ee-f663-4513-9463-93c321bae8f4",
                                                                      "aba340b5-8f40-4bd5-83aa-a04107b58923",
                                                                      "48dabb3e-392c-4819-9956-406320fd009f",
                                                                      new Date(1562657744787L),
                                                                      new Date(1562657751097L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1562657743284L), -89,
                                                                      "25ea455a-9c3a-4e94-9662-56f79f1b00fa",
                                                                      "1a1125c3-11b6-4bab-9a2f-bd8fd002ebfa",
                                                                      "4cc5930e-8d52-40cc-ae27-ff36d29b7b2f",
                                                                      "6ba0b0ee-f663-4513-9463-93c321bae8f4",
                                                                      "aba340b5-8f40-4bd5-83aa-a04107b58923",
                                                                      "48dabb3e-392c-4819-9956-406320fd009f",
                                                                      new Date(1562657744787L),
                                                                      new Date(1562657751097L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1562657746751L), -55,
                                                                      "d053824a-6a0c-42ef-b186-3ab5523b0613",
                                                                      "ce689e1c-36c0-45d8-a4f2-278373bc7852",
                                                                      "19754023-edec-4ac0-8525-c573a4a9461f",
                                                                      "5eb422c4-eca7-4050-8a55-5986de089a3a",
                                                                      "99a9748a-c241-405c-8880-88cfdee2abac",
                                                                      "f91c3a1a-ef9d-46d7-9c4a-ebf4e909a851",
                                                                      new Date(1562657746756L),
                                                                      new Date(1562657751990L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
