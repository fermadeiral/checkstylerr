/*
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 */
package org.codice.imaging.nitf.core.tre;

import java.io.BufferedInputStream;
import java.io.InputStream;
import java.util.List;
import org.codice.imaging.nitf.core.common.NitfFormatException;
import org.codice.imaging.nitf.core.common.NitfInputStreamReader;
import org.codice.imaging.nitf.core.common.NitfReader;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class SENSRB_Test {

    // Has 1, 5, 6
    @Test
    public void testSensrbMinimal() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_minimal.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 320, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(45, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("0", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("N", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("00", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(0, sensrb.getEntry("POINT_SETS").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 5, 6, 11
    @Test
    public void testSensrbSinglePointSet() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_single_point_set.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 399, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(45, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("0", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("N", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));

        assertEquals("01", sensrb.getFieldValue("POINT_SET_DATA"));
        TreEntry pointSetEntry = sensrb.getEntry("POINT_SETS");
        List<TreGroup> pointSetGroups = pointSetEntry.getGroups();
        assertNotNull(pointSetGroups);
        assertEquals(1, pointSetGroups.size());
        TreGroup pointSetGroup0 = pointSetGroups.get(0);
        assertNotNull(pointSetGroup0);
        assertEquals("Image Center", pointSetGroup0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", pointSetGroup0.getFieldValue("POINT_COUNT_MM"));

        TreEntry pointEntry = pointSetGroup0.getEntry("POINT");
        List<TreGroup> pointEntryGroups = pointEntry.getGroups();
        assertNotNull(pointEntryGroups);
        assertEquals(1, pointEntryGroups.size());
        TreGroup pointEntryGroup0 = pointEntryGroups.get(0);
        assertNotNull(pointEntryGroup0);
        assertEquals("00000009", pointEntryGroup0.getFieldValue("P_ROW_NNN"));
        assertEquals("00000013", pointEntryGroup0.getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", pointEntryGroup0.getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000124.3003", pointEntryGroup0.getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000234", pointEntryGroup0.getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", pointEntryGroup0.getFieldValue("P_RANGE_NNN"));

        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
    }

    // Has 1, 2, 4, 5, 6
    @Test
    public void testSensrbSituationalAwareness() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_situational_awareness.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 508, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(66, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("2", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Multi-Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("2", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(2, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("00", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(0, sensrb.getEntry("POINT_SETS").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 4, 5, 6, 7
    @Test
    public void testSensrbGeo() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_geo.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 615, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(74, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("4", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Single Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("6", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(6, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000002", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(2).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("-000004.3e-2", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(3).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(4).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(5).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("2", sensrb.getFieldValue("SENSOR_ANGLE_MODEL"));
        assertEquals("0000000004", sensrb.getFieldValue("SENSOR_ANGLE_1"));
        assertEquals("000000005", sensrb.getFieldValue("SENSOR_ANGLE_2"));
        assertEquals("-000000012", sensrb.getFieldValue("SENSOR_ANGLE_3"));
        assertEquals("N", sensrb.getFieldValue("PLATFORM_RELATIVE"));
        assertEquals("---------", sensrb.getFieldValue("PLATFORM_HEADING"));
        assertEquals("---------", sensrb.getFieldValue("PLATFORM_PITCH"));
        assertEquals("----------", sensrb.getFieldValue("PLATFORM_ROLL"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("00", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(0, sensrb.getEntry("POINT_SETS").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 4, 5, 6, 9, 11
    @Test
    public void testSensrbGeoPlus() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_geo_plus.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 808, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(70, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("5", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Multi-Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("2", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(2, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("0.99312919", sensrb.getFieldValue("ATTITUDE_Q1"));
        assertEquals("-0.1028514", sensrb.getFieldValue("ATTITUDE_Q2"));
        assertEquals("-0.0392319", sensrb.getFieldValue("ATTITUDE_Q3"));
        assertEquals("0.03970949", sensrb.getFieldValue("ATTITUDE_Q4"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("02", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(2, sensrb.getEntry("POINT_SETS").getGroups().size());
        TreGroup psg0 = sensrb.getEntry("POINT_SETS").getGroups().get(0);
        assertEquals("Point of Interest", psg0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("003", psg0.getFieldValue("POINT_COUNT_MM"));
        assertEquals(3, psg0.getEntry("POINT").getGroups().size());
        assertEquals("00000004", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000007", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000231", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("00000987", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_ROW_NNN"));
        assertEquals("00000024", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-000034.31", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.4", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000232", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_RANGE_NNN"));
        assertEquals("00000290", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_ROW_NNN"));
        assertEquals("00000020", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-000000035", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("00000129.09", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000023", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_RANGE_NNN"));
        TreGroup psg1 = sensrb.getEntry("POINT_SETS").getGroups().get(1);
        assertEquals("Image Center", psg1.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", psg1.getFieldValue("POINT_COUNT_MM"));
        assertEquals(1, psg1.getEntry("POINT").getGroups().size());
        assertEquals("00001023", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000512", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.4", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.4", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000235", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 3, 4, 5, 6, 8, 10, 11, 14
    @Test
    public void testSensrbAccurate() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_accurate.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 937, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(90, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("BuckEye", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("C-12 King Air", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("8", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("mm", sensrb.getFieldValue("CALIBRATION_UNIT"));
        assertEquals("000000298", sensrb.getFieldValue("PRINCIPAL_POINT_OFFSET_X"));
        assertEquals("0000032.2", sensrb.getFieldValue("PRINCIPAL_POINT_OFFSET_Y"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_1"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_2"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_3"));
        assertEquals("---------", sensrb.getFieldValue("RADIAL_DISTORT_LIMIT"));
        assertEquals("------------", sensrb.getFieldValue("DECENT_DISTORT_1"));
        assertEquals("------------", sensrb.getFieldValue("DECENT_DISTORT_2"));
        assertEquals("000000000005", sensrb.getFieldValue("AFFINITY_DISTORT_1"));
        assertEquals("000000000321", sensrb.getFieldValue("AFFINITY_DISTORT_2"));
        assertEquals("20131001", sensrb.getFieldValue("CALIBRATION_DATE"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Single Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("6", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(6, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000002", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(2).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("-000004.3e-2", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(3).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(4).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(5).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("0000000001", sensrb.getFieldValue("ICX_NORTH_OR_X"));
        assertEquals("0000000000", sensrb.getFieldValue("ICX_EAST_OR_Y"));
        assertEquals("0000000000", sensrb.getFieldValue("ICX_DOWN_OR_Z"));
        assertEquals("0000000000", sensrb.getFieldValue("ICY_NORTH_OR_X"));
        assertEquals("0000000001", sensrb.getFieldValue("ICY_EAST_OR_Y"));
        assertEquals("0000000000", sensrb.getFieldValue("ICY_DOWN_OR_Z"));
        assertEquals("0000000000", sensrb.getFieldValue("ICZ_NORTH_OR_X"));
        assertEquals("0000000000", sensrb.getFieldValue("ICZ_EAST_OR_Y"));
        assertEquals("0000000001", sensrb.getFieldValue("ICZ_DOWN_OR_Z"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("000000012", sensrb.getFieldValue("VELOCITY_NORTH_OR_X"));
        assertEquals("0000134.5", sensrb.getFieldValue("VELOCITY_EAST_OR_Y"));
        assertEquals("-00000002", sensrb.getFieldValue("VELOCITY_DOWN_OR_Z"));
        assertEquals("01", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(1, sensrb.getEntry("POINT_SETS").getGroups().size());
        TreGroup psg0 = sensrb.getEntry("POINT_SETS").getGroups().get(0);
        assertEquals("Image Center", psg0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", psg0.getFieldValue("POINT_COUNT_MM"));
        assertEquals(1, psg0.getEntry("POINT").getGroups().size());
        assertEquals("00000232", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000987", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000123.4", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("------", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("00001349", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("002", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(2, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("02d", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_FIRST_TYPE_NNN").trim());
        assertEquals("-----------", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_SECOND_TYPE_NNN").trim());
        assertEquals("00000454.3", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_VALUE_NNN"));
        assertEquals("02e", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_FIRST_TYPE_NNN").trim());
        assertEquals("02h", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_SECOND_TYPE_NNN").trim());
        assertEquals("00000000.2", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_VALUE_NNN"));
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 3, 4, 5, 6, 8, 10, 11, 12 (for 6), 14
    @Test
    public void testSensrbTimeStamped6() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_timestamped6.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 1152, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(90, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("BuckEye", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("C-12 King Air", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("8", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("mm", sensrb.getFieldValue("CALIBRATION_UNIT"));
        assertEquals("000000298", sensrb.getFieldValue("PRINCIPAL_POINT_OFFSET_X"));
        assertEquals("0000032.2", sensrb.getFieldValue("PRINCIPAL_POINT_OFFSET_Y"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_1"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_2"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_3"));
        assertEquals("---------", sensrb.getFieldValue("RADIAL_DISTORT_LIMIT"));
        assertEquals("------------", sensrb.getFieldValue("DECENT_DISTORT_1"));
        assertEquals("------------", sensrb.getFieldValue("DECENT_DISTORT_2"));
        assertEquals("000000000005", sensrb.getFieldValue("AFFINITY_DISTORT_1"));
        assertEquals("000000000321", sensrb.getFieldValue("AFFINITY_DISTORT_2"));
        assertEquals("20131001", sensrb.getFieldValue("CALIBRATION_DATE"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Single Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("6", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(6, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000002", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(2).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("-000004.3e-2", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(3).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(4).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(5).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("0000000001", sensrb.getFieldValue("ICX_NORTH_OR_X"));
        assertEquals("0000000000", sensrb.getFieldValue("ICX_EAST_OR_Y"));
        assertEquals("0000000000", sensrb.getFieldValue("ICX_DOWN_OR_Z"));
        assertEquals("0000000000", sensrb.getFieldValue("ICY_NORTH_OR_X"));
        assertEquals("0000000001", sensrb.getFieldValue("ICY_EAST_OR_Y"));
        assertEquals("0000000000", sensrb.getFieldValue("ICY_DOWN_OR_Z"));
        assertEquals("0000000000", sensrb.getFieldValue("ICZ_NORTH_OR_X"));
        assertEquals("0000000000", sensrb.getFieldValue("ICZ_EAST_OR_Y"));
        assertEquals("0000000001", sensrb.getFieldValue("ICZ_DOWN_OR_Z"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("000000012", sensrb.getFieldValue("VELOCITY_NORTH_OR_X"));
        assertEquals("0000134.5", sensrb.getFieldValue("VELOCITY_EAST_OR_Y"));
        assertEquals("-00000002", sensrb.getFieldValue("VELOCITY_DOWN_OR_Z"));
        assertEquals("01", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(1, sensrb.getEntry("POINT_SETS").getGroups().size());
        TreGroup psg0 = sensrb.getEntry("POINT_SETS").getGroups().get(0);
        assertEquals("Image Center", psg0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", psg0.getFieldValue("POINT_COUNT_MM"));
        assertEquals(1, psg0.getEntry("POINT").getGroups().size());
        assertEquals("00000232", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000987", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000123.4", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("------", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("00001349", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("06", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(6, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("06a", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0002", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_COUNT_MM"));
        TreEntry tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS");
        assertEquals(2, tsgs.getGroups().size());
        assertEquals("000000001000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-00000034.2", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("000000002004", tsgs.getGroups().get(1).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-00000033.9", tsgs.getGroups().get(1).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("000000001567", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000000000000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("000000000900", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06d", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("000000009876", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06e", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0002", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getEntry("TIME_STAMP_COUNTS");
        assertEquals(2, tsgs.getGroups().size());
        assertEquals("000000001000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000001.2", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("000000001020", tsgs.getGroups().get(1).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000001.1", tsgs.getGroups().get(1).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06f", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("-000000008.3", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("002", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(2, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("02d", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_FIRST_TYPE_NNN").trim());
        assertEquals("-----------", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_SECOND_TYPE_NNN").trim());
        assertEquals("00000454.3", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_VALUE_NNN"));
        assertEquals("02e", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_FIRST_TYPE_NNN").trim());
        assertEquals("02f", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_SECOND_TYPE_NNN").trim());
        assertEquals("00000000.2", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_VALUE_NNN"));
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 4, 5, 6, 9, 11, 12 (for 9), 15
    @Test
    public void testSensrbTimeStamped9() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_timestamped9.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 808, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(70, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("5", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Multi-Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("2", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(2, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("0.99312919", sensrb.getFieldValue("ATTITUDE_Q1"));
        assertEquals("-0.1028514", sensrb.getFieldValue("ATTITUDE_Q2"));
        assertEquals("-0.0392319", sensrb.getFieldValue("ATTITUDE_Q3"));
        assertEquals("0.03970949", sensrb.getFieldValue("ATTITUDE_Q4"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("02", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(2, sensrb.getEntry("POINT_SETS").getGroups().size());
        TreGroup psg0 = sensrb.getEntry("POINT_SETS").getGroups().get(0);
        assertEquals("Point of Interest", psg0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("003", psg0.getFieldValue("POINT_COUNT_MM"));
        assertEquals(3, psg0.getEntry("POINT").getGroups().size());
        assertEquals("00000004", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000007", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000231", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("00000987", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_ROW_NNN"));
        assertEquals("00000024", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-000034.31", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.4", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000232", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_RANGE_NNN"));
        assertEquals("00000290", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_ROW_NNN"));
        assertEquals("00000020", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-000000035", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("00000129.09", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000023", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_RANGE_NNN"));
        TreGroup psg1 = sensrb.getEntry("POINT_SETS").getGroups().get(1);
        assertEquals("Image Center", psg1.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", psg1.getFieldValue("POINT_COUNT_MM"));
        assertEquals(1, psg1.getEntry("POINT").getGroups().size());
        assertEquals("00001023", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000512", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.4", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.4", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000235", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("04", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(4, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("09a", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_COUNT_MM"));
        TreEntry tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("0000000345.9", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-000000001", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("09b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("000000004000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.4", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("09c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("000000003000", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.5", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("09d", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_COUNT_MM"));
        tsgs = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getEntry("TIME_STAMP_COUNTS");
        assertEquals(1, tsgs.getGroups().size());
        assertEquals("000000002987", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.9", tsgs.getGroups().get(0).getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("00", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("001", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(1, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
        TreGroup apdsg = sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().get(0);
        assertEquals("ASSOCIATED_DATA_MODULE   ", apdsg.getFieldValue("PARAMETER_NAME_MMM"));
        assertEquals("002", apdsg.getFieldValue("PARAMETER_SIZE_MMM"));
        assertEquals("0000", apdsg.getFieldValue("PARAMETER_COUNT_MMM"));
    }

    // Has 1, 2, 4, 5, 6, 9, 11, 13 (for 9), 15
    @Test
    public void testSensrbPixel9() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_pixel9.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 808, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(70, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("5", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Multi-Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("2", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(2, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("0.99312919", sensrb.getFieldValue("ATTITUDE_Q1"));
        assertEquals("-0.1028514", sensrb.getFieldValue("ATTITUDE_Q2"));
        assertEquals("-0.0392319", sensrb.getFieldValue("ATTITUDE_Q3"));
        assertEquals("0.03970949", sensrb.getFieldValue("ATTITUDE_Q4"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("02", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(2, sensrb.getEntry("POINT_SETS").getGroups().size());
        TreGroup psg0 = sensrb.getEntry("POINT_SETS").getGroups().get(0);
        assertEquals("Point of Interest", psg0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("003", psg0.getFieldValue("POINT_COUNT_MM"));
        assertEquals(3, psg0.getEntry("POINT").getGroups().size());
        assertEquals("00000004", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000007", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000231", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("00000987", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_ROW_NNN"));
        assertEquals("00000024", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-000034.31", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.4", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000232", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(1).getFieldValue("P_RANGE_NNN"));
        assertEquals("00000290", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_ROW_NNN"));
        assertEquals("00000020", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-000000035", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("00000129.09", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000023", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg0.getEntry("POINT").getGroups().get(2).getFieldValue("P_RANGE_NNN"));
        TreGroup psg1 = sensrb.getEntry("POINT_SETS").getGroups().get(1);
        assertEquals("Image Center", psg1.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", psg1.getFieldValue("POINT_COUNT_MM"));
        assertEquals(1, psg1.getEntry("POINT").getGroups().size());
        assertEquals("00001023", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000512", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.4", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000130.4", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("000235", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("--------", psg1.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("00", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(0, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("04", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(4, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("09a", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        TreGroup prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000020", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000030", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-000000001", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("09b", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0002", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(2, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000040", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000050", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("00000000.5", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(1);
        assertEquals("00000060", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000070", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("00000000.7", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("09c", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000070", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000080", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-0000000.2", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("09d", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000090", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000120", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("00000000.3", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 3, 4, 5, 6, 8, 10, 11, 12 (for 8), 13 (for 6 and 8) 14
    @Test
    public void testSensrbTimePixel8Pixel6() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_timepixel8_pixel6.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 937, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(90, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("BuckEye", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("C-12 King Air", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("8", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000087", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("mm", sensrb.getFieldValue("CALIBRATION_UNIT"));
        assertEquals("000000298", sensrb.getFieldValue("PRINCIPAL_POINT_OFFSET_X"));
        assertEquals("0000032.2", sensrb.getFieldValue("PRINCIPAL_POINT_OFFSET_Y"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_1"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_2"));
        assertEquals("------------", sensrb.getFieldValue("RADIAL_DISTORT_3"));
        assertEquals("---------", sensrb.getFieldValue("RADIAL_DISTORT_LIMIT"));
        assertEquals("------------", sensrb.getFieldValue("DECENT_DISTORT_1"));
        assertEquals("------------", sensrb.getFieldValue("DECENT_DISTORT_2"));
        assertEquals("000000000005", sensrb.getFieldValue("AFFINITY_DISTORT_1"));
        assertEquals("000000000321", sensrb.getFieldValue("AFFINITY_DISTORT_2"));
        assertEquals("20131001", sensrb.getFieldValue("CALIBRATION_DATE"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Single Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("6", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(6, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000002", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(2).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("-000004.3e-2", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(3).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(4).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(5).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("0000000001", sensrb.getFieldValue("ICX_NORTH_OR_X"));
        assertEquals("0000000000", sensrb.getFieldValue("ICX_EAST_OR_Y"));
        assertEquals("0000000000", sensrb.getFieldValue("ICX_DOWN_OR_Z"));
        assertEquals("0000000000", sensrb.getFieldValue("ICY_NORTH_OR_X"));
        assertEquals("0000000001", sensrb.getFieldValue("ICY_EAST_OR_Y"));
        assertEquals("0000000000", sensrb.getFieldValue("ICY_DOWN_OR_Z"));
        assertEquals("0000000000", sensrb.getFieldValue("ICZ_NORTH_OR_X"));
        assertEquals("0000000000", sensrb.getFieldValue("ICZ_EAST_OR_Y"));
        assertEquals("0000000001", sensrb.getFieldValue("ICZ_DOWN_OR_Z"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("000000012", sensrb.getFieldValue("VELOCITY_NORTH_OR_X"));
        assertEquals("0000134.5", sensrb.getFieldValue("VELOCITY_EAST_OR_Y"));
        assertEquals("-00000002", sensrb.getFieldValue("VELOCITY_DOWN_OR_Z"));
        assertEquals("01", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(1, sensrb.getEntry("POINT_SETS").getGroups().size());
        TreGroup psg0 = sensrb.getEntry("POINT_SETS").getGroups().get(0);
        assertEquals("Image Center", psg0.getFieldValue("POINT_SET_TYPE_MM").trim());
        assertEquals("001", psg0.getFieldValue("POINT_COUNT_MM"));
        assertEquals(1, psg0.getEntry("POINT").getGroups().size());
        assertEquals("00000232", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ROW_NNN"));
        assertEquals("00000987", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_COLUMN_NNN"));
        assertEquals("-0000034.3", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LATITUDE_NNN"));
        assertEquals("000000123.4", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_LONGITUDE_NNN"));
        assertEquals("------", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_ELEVATION_NNN"));
        assertEquals("00001349", psg0.getEntry("POINT").getGroups().get(0).getFieldValue("P_RANGE_NNN"));
        assertEquals("15", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(15, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("08a", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0010", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(10, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        TreGroup tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000400", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.1", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(1);
        assertEquals("000000000402", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.2", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(2);
        assertEquals("000000000404", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.3", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(3);
        assertEquals("000000000406", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.4", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(4);
        assertEquals("000000000408", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.6", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(5);
        assertEquals("000000000410", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.8", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(6);
        assertEquals("000000000412", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.7", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(7);
        assertEquals("000000000414", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.5", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(8);
        assertEquals("000000000416", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000000.3", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(9);
        assertEquals("000000000418", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-000000.01", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000500", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000000.2", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000502", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000000.3", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08d", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000504", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000000.4", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08e", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000506", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000000.5", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08f", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000507", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000000.6", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08g", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000509", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000000.7", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08h", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000511", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-000000.09", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("08i", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000513", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-000000001", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06a", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(9).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(9).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(9).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(9).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000600", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-00000034.2", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(10).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(10).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(10).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(10).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000603", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("0000000130.2", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(11).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(11).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(11).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(11).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000606", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000009875", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06d", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(12).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(12).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(12).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(12).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000609", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000004.3", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06e", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(13).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(13).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(13).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(13).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000611", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000.03", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("06f", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(14).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(14).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(14).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(14).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000613", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-00003.3", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("09", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(9, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("08a", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        TreGroup prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08b", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));

        assertEquals("08c", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08d", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08e", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08f", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08g", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08h", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("08i", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000000", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000000000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("002", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(2, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("02d", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_FIRST_TYPE_NNN").trim());
        assertEquals("-----------", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_SECOND_TYPE_NNN").trim());
        assertEquals("00000454.3", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(0).getFieldValue("UNCERTAINTY_VALUE_NNN"));
        assertEquals("02e", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_FIRST_TYPE_NNN").trim());
        assertEquals("02f", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_SECOND_TYPE_NNN").trim());
        assertEquals("00000000.2", sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().get(1).getFieldValue("UNCERTAINTY_VALUE_NNN"));
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    // Has 1, 2, 4, 5, 6, 7, 10, 12 (for 7 and 10), 13 (for 10) and 15
    @Test
    public void testSensrbTime7TimePixel10() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_timestamped7_timepixel10.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 615, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(77, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("4", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Single Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("6", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(6, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000002", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(2).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("-000004.3e-2", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(3).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(4).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(5).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("2", sensrb.getFieldValue("SENSOR_ANGLE_MODEL"));
        assertEquals("0000000004", sensrb.getFieldValue("SENSOR_ANGLE_1"));
        assertEquals("000000005", sensrb.getFieldValue("SENSOR_ANGLE_2"));
        assertEquals("-000000012", sensrb.getFieldValue("SENSOR_ANGLE_3"));
        assertEquals("N", sensrb.getFieldValue("PLATFORM_RELATIVE"));
        assertEquals("---------", sensrb.getFieldValue("PLATFORM_HEADING"));
        assertEquals("---------", sensrb.getFieldValue("PLATFORM_PITCH"));
        assertEquals("----------", sensrb.getFieldValue("PLATFORM_ROLL"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("000000304", sensrb.getFieldValue("VELOCITY_NORTH_OR_X"));
        assertEquals("000000040", sensrb.getFieldValue("VELOCITY_EAST_OR_Y"));
        assertEquals("0000003.8", sensrb.getFieldValue("VELOCITY_DOWN_OR_Z"));
        assertEquals("00", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(0, sensrb.getEntry("POINT_SETS").getGroups().size());
        assertEquals("09", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(9, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("07b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0002", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(2, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        TreGroup tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000200", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000001.3", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(1);
        assertEquals("000000000400", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00000002.5", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("07c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000399", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000000078", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("07d", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000401", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000003.6", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("07f", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(3).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000503", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("0000083.2", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("07g", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(4).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000402", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("0000005.6", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("07h", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(5).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000504", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-0000001.6", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("10a", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(6).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000700", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000000354", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("10b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0002", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(2, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000023", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000000401", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(7).getEntry("TIME_STAMP_COUNTS").getGroups().get(1);
        assertEquals("000000000200", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000000405", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("10c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(8).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000000508", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("-000003.2", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("03", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(3, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("10a", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0003", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(3, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        TreGroup prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000055", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000078", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-00000408", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(1);
        assertEquals("00000087", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00003945", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-00000407", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(2);
        assertEquals("00005734", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00003430", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-00000409", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("10b", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000046", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000079", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-00000034", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("10c", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00004223", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00004222", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("0000455.4", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("002", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(2, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
        TreGroup apdsg = sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().get(0);
        assertEquals("LUNAR_AZIMUTH            ", apdsg.getFieldValue("PARAMETER_NAME_MMM"));
        assertEquals("002", apdsg.getFieldValue("PARAMETER_SIZE_MMM"));
        assertEquals("0003", apdsg.getFieldValue("PARAMETER_COUNT_MMM"));
        assertEquals(3, apdsg.getEntry("ADDITIONAL_PARAMETER_VALUES").getGroups().size());
        assertEquals("43", apdsg.getEntry("ADDITIONAL_PARAMETER_VALUES").getGroups().get(0).getFieldValue("PARAMETER_VALUE_NNNN"));
        assertEquals("01", apdsg.getEntry("ADDITIONAL_PARAMETER_VALUES").getGroups().get(1).getFieldValue("PARAMETER_VALUE_NNNN"));
        assertEquals("AB", apdsg.getEntry("ADDITIONAL_PARAMETER_VALUES").getGroups().get(2).getFieldValue("PARAMETER_VALUE_NNNN"));
        apdsg = sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().get(1);
        assertEquals("MI_LDS_VERSION           ", apdsg.getFieldValue("PARAMETER_NAME_MMM"));
        assertEquals("014", apdsg.getFieldValue("PARAMETER_SIZE_MMM"));
        assertEquals("0001", apdsg.getFieldValue("PARAMETER_COUNT_MMM"));
        assertEquals(1, apdsg.getEntry("ADDITIONAL_PARAMETER_VALUES").getGroups().size());
        assertEquals("4434343FG     ", apdsg.getEntry("ADDITIONAL_PARAMETER_VALUES").getGroups().get(0).getFieldValue("PARAMETER_VALUE_NNNN"));
    }

    // Has 1, 2, 4, 5, 6, 7, 10, 12 (for 5), 13 (for 5 and 7) and 15
    @Test
    public void testSensrbPixel7TimePixel5() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SENSRB_timepixel5_pixel7.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 615, TreSource.ImageExtendedSubheaderData);
        Tre sensrb = parseResult.getTREsWithName("SENSRB").get(0);
        assertNotNull(sensrb);
        assertEquals(74, sensrb.getEntries().size());
        assertEquals("Y", sensrb.getFieldValue("GENERAL_DATA"));
        assertEquals("SYERS2A", sensrb.getFieldValue("SENSOR").trim());
        assertEquals("", sensrb.getFieldValue("SENSOR_URI").trim());
        assertEquals("U-2", sensrb.getFieldValue("PLATFORM").trim());
        assertEquals("", sensrb.getFieldValue("PLATFORM_URI").trim());
        assertEquals("Airborne", sensrb.getFieldValue("OPERATION_DOMAIN").trim());
        assertEquals("4", sensrb.getFieldValue("CONTENT_LEVEL").trim());
        assertEquals("WGS84", sensrb.getFieldValue("GEODETIC_SYSTEM").trim());
        assertEquals("G", sensrb.getFieldValue("GEODETIC_TYPE"));
        assertEquals("HAE", sensrb.getFieldValue("ELEVATION_DATUM"));
        assertEquals("SI", sensrb.getFieldValue("LENGTH_UNIT"));
        assertEquals("DEG", sensrb.getFieldValue("ANGULAR_UNIT"));
        assertEquals("20141012", sensrb.getFieldValue("START_DATE"));
        assertEquals("00000000000300", sensrb.getFieldValue("START_TIME"));
        assertEquals("20141013", sensrb.getFieldValue("END_DATE"));
        assertEquals("00000000000120", sensrb.getFieldValue("END_TIME"));
        assertEquals("00", sensrb.getFieldValue("GENERATION_COUNT"));
        assertEquals("--------", sensrb.getFieldValue("GENERATION_DATE"));
        assertEquals("----------", sensrb.getFieldValue("GENERATION_TIME"));
        assertEquals("Y", sensrb.getFieldValue("SENSOR_ARRAY_DATA"));
        assertEquals("PAN", sensrb.getFieldValue("DETECTION").trim());
        assertEquals("00001024", sensrb.getFieldValue("ROW_DETECTORS"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_DETECTORS"));
        assertEquals("000000.3", sensrb.getFieldValue("ROW_METRIC"));
        assertEquals("000000.1", sensrb.getFieldValue("COLUMN_METRIC"));
        assertEquals("00000876", sensrb.getFieldValue("FOCAL_LENGTH"));
        assertEquals("--------", sensrb.getFieldValue("ROW_FOV"));
        assertEquals("--------", sensrb.getFieldValue("COLUMN_FOV"));
        assertEquals("N", sensrb.getFieldValue("CALIBRATED"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_CALIBRATION_DATA"));
        assertEquals("Y", sensrb.getFieldValue("IMAGE_FORMATION_DATA"));
        assertEquals("Single Frame", sensrb.getFieldValue("METHOD").trim());
        assertEquals("015", sensrb.getFieldValue("MODE"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_COUNT"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_COUNT"));
        assertEquals("00002048", sensrb.getFieldValue("ROW_SET"));
        assertEquals("00000256", sensrb.getFieldValue("COLUMN_SET"));
        assertEquals("000000.002", sensrb.getFieldValue("ROW_RATE"));
        assertEquals("0000000.04", sensrb.getFieldValue("COLUMN_RATE"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_ROW"));
        assertEquals("00000000", sensrb.getFieldValue("FIRST_PIXEL_COLUMN"));
        assertEquals("8", sensrb.getFieldValue("TRANSFORM_PARAMS"));
        assertEquals(8, sensrb.getEntry("TRANSFORM_PARAM").getGroups().size());
        assertEquals("0000000002.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(0).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.3", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(1).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000002", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(2).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("-000004.3e-2", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(3).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000000.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(4).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(5).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("0000000003.4", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(6).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("00000000.001", sensrb.getEntry("TRANSFORM_PARAM").getGroups().get(7).getFieldValue("TRANSFORM_PARAM"));
        assertEquals("000000000000", sensrb.getFieldValue("REFERENCE_TIME"));
        assertEquals("00000001", sensrb.getFieldValue("REFERENCE_ROW"));
        assertEquals("00000002", sensrb.getFieldValue("REFERENCE_COLUMN"));
        assertEquals("-00000034.3", sensrb.getFieldValue("LATITUDE_OR_X"));
        assertEquals("0000000140.2", sensrb.getFieldValue("LONGITUDE_OR_Y"));
        assertEquals("00000020000", sensrb.getFieldValue("ALTITUDE_OR_Z"));
        assertEquals("000003.2", sensrb.getFieldValue("SENSOR_X_OFFSET"));
        assertEquals("-0000001", sensrb.getFieldValue("SENSOR_Y_OFFSET"));
        assertEquals("00000002", sensrb.getFieldValue("SENSOR_Z_OFFSET"));
        assertEquals("Y", sensrb.getFieldValue("ATTITUDE_EULER_ANGLES"));
        assertEquals("2", sensrb.getFieldValue("SENSOR_ANGLE_MODEL"));
        assertEquals("0000000004", sensrb.getFieldValue("SENSOR_ANGLE_1"));
        assertEquals("000000005", sensrb.getFieldValue("SENSOR_ANGLE_2"));
        assertEquals("-000000012", sensrb.getFieldValue("SENSOR_ANGLE_3"));
        assertEquals("N", sensrb.getFieldValue("PLATFORM_RELATIVE"));
        assertEquals("---------", sensrb.getFieldValue("PLATFORM_HEADING"));
        assertEquals("---------", sensrb.getFieldValue("PLATFORM_PITCH"));
        assertEquals("----------", sensrb.getFieldValue("PLATFORM_ROLL"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_UNIT_VECTORS"));
        assertEquals("N", sensrb.getFieldValue("ATTITUDE_QUATERNION"));
        assertEquals("N", sensrb.getFieldValue("SENSOR_VELOCITY_DATA"));
        assertEquals("00", sensrb.getFieldValue("POINT_SET_DATA"));
        assertEquals(0, sensrb.getEntry("POINT_SETS").getGroups().size());
        assertEquals("03", sensrb.getFieldValue("TIME_STAMPED_DATA_SETS"));
        assertEquals(3, sensrb.getEntry("TIME_STAMPED_SET").getGroups().size());
        assertEquals("05a", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        TreGroup tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(0).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000003001", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("000000000010", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("05b", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(1).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000003002", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00010000", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("05c", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getFieldValue("TIME_STAMP_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS").getGroups().size());
        tsg = sensrb.getEntry("TIME_STAMPED_SET").getGroups().get(2).getEntry("TIME_STAMP_COUNTS").getGroups().get(0);
        assertEquals("000000004000", tsg.getFieldValue("TIME_STAMP_TIME_NNNN"));
        assertEquals("00009000", tsg.getFieldValue("TIME_STAMP_VALUE_NNNN"));
        assertEquals("09", sensrb.getFieldValue("PIXEL_REFERENCED_DATA_SETS"));
        assertEquals(9, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().size());
        assertEquals("07b", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        TreGroup prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(0).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000100", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000200", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-0000003.4", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("07c", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(1).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000120", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000220", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("000004.23", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("07d", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(2).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000140", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000240", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-00003.501", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("07f", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(3).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000160", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000270", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("000000279", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("07g", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(4).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000180", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000290", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("-00002.02", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("07h", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(5).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000300", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00003010", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("00000030.1", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("05a", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(6).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000110", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000210", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("000000000900", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("05c", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(7).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000120", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000220", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("00001000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("05b", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getFieldValue("PIXEL_REFERENCE_TYPE_MM"));
        assertEquals("0001", sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getFieldValue("PIXEL_REFERENCE_COUNT_MM"));
        assertEquals(1, sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().size());
        prcg = sensrb.getEntry("PIXEL_REFERENCE_DATA_SET").getGroups().get(8).getEntry("PIXEL_REFERENCE_COUNTS").getGroups().get(0);
        assertEquals("00000130", prcg.getFieldValue("PIXEL_REFERENCE_ROW_NNNN"));
        assertEquals("00000230", prcg.getFieldValue("PIXEL_REFERENCE_COLUMN_NNNN"));
        assertEquals("00002000", prcg.getFieldValue("PIXEL_REFERENCE_VALUE_NNNN"));
        assertEquals("000", sensrb.getFieldValue("UNCERTAINTY_DATA"));
        assertEquals(0, sensrb.getEntry("UNCERTAINTY_DATA_SETS").getGroups().size());
        assertEquals("000", sensrb.getFieldValue("ADDITIONAL_PARAMETER_DATA"));
        assertEquals(0, sensrb.getEntry("ADDITIONAL_PARAMETER_DATA_SETS").getGroups().size());
    }

    @Test
    public void testSensrbSample() throws NitfFormatException {
        InputStream testDataStream = getClass().getResourceAsStream("/SENSRB/SB_Seattle_WithUncertainties.txt");
        BufferedInputStream bufferedStream = new BufferedInputStream(testDataStream);
        NitfReader nitfReader = new NitfInputStreamReader(bufferedStream);
        TreCollectionParser parser = new TreCollectionParser();
        TreCollection parseResult = parser.parse(nitfReader, 1815, TreSource.ImageExtendedSubheaderData);
    }
}
