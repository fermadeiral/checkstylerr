// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1571831494081L),
                                                             "b02600a7-d3a3-4c5a-9e5b-4b0559180773", -16,
                                                             "9c20a14f-baff-4fc0-852b-4c35194f3898",
                                                             "690deec4-1138-4d1b-ac86-c6a0697d6492",
                                                             "f783d3dc-6336-4ec6-a31a-79800ed83e5a",
                                                             "4ede4930-a2e2-4b78-bc13-8ceff623f9fa",
                                                             new Date(1571831493415L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1571831492814L),
                                                             "226bda7c-71d7-45d6-a5c6-52b3196a797b", -68,
                                                             "588093b8-0eb5-4905-9f1a-c64389a29fd7",
                                                             "9574320b-ccff-4238-a8d1-5adf0e8f2b38",
                                                             "f04eb8fa-b0cf-493b-8234-ec641b05d913",
                                                             "076c9108-41e2-4d03-ad10-53c5e7d33c7f",
                                                             new Date(1571831492473L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1571831492814L),
                                                             "226bda7c-71d7-45d6-a5c6-52b3196a797b", -68,
                                                             "588093b8-0eb5-4905-9f1a-c64389a29fd7",
                                                             "9574320b-ccff-4238-a8d1-5adf0e8f2b38",
                                                             "f04eb8fa-b0cf-493b-8234-ec641b05d913",
                                                             "076c9108-41e2-4d03-ad10-53c5e7d33c7f",
                                                             new Date(1571831492473L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1571831495038L),
                                                        "6ea45ded-2f56-416b-b2ab-828dbf164462", -41,
                                                        "6486ab65-77a7-4903-b250-4a6eb5eb9ed0",
                                                        "7b2ebaa5-61fe-4c44-afc5-21bdbfb9ac3e",
                                                        "4d3d11ad-227b-464c-a084-3bfbaa79c66b",
                                                        "65ada2ac-98fc-43df-8e6e-b67235071570",
                                                        new Date(1571831496833L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1571831487480L),
                                                               "0f0b2809-f387-4dbe-a245-ba2557c86b3e", -118,
                                                               "d310ae5a-59b9-4a2a-98a7-a716567b9de4",
                                                               "d6d3fbdf-467b-4d7a-aa1e-c5b2cd1ed4d22eab2d5c-08d7-4110-b8ee-3e3064e510ddc5e1e699-d1c8-4ab2-9be4-ab06831241b3db006846-bae3-463c-9765-6c80c4bc06fe04187659-c5fd-4e35-a0f3-72fe285f247a061e2300-8617-486c-acb5-d2c9a82bb99a8e66ed48-31e3-4249-a58f-f60613e9a6a7ca380a94-5f3e-4edd-87b6-2b74d7330d960a1374ed-340c-496f-acd6-ef207b43d678b8cb1eb2-d55c-43ba-804c-6acf28194726eb1474f7-6964-484d-b04a-6839f80d2647f770bcad-a035-4a2a-8ef5-47eca1d810ce0c466d5c-b657-4f91-a461-59da491caf22ba65fdb4-053e-495a-8a11-84bec6168a55f58f718b-2cf0-4535-9a55-53ee6c54d35a9bca870b-9644-4049-8b3b-639bd89a3073009bd09e-8b32-4716-9af5-ed2c8bf1139a38f855e3-df55-4bbc-b2fc-d2cc5b31ac2921dc2d0b-eb29-4496-afd7-fe278b0dff455e9635f3-5167-4862-90dc-acbe6553338fdb010d7e-9a9f-48a0-97bb-286db28bb4ffb8c558d6-3ee6-4e39-b883-830a64c7068f55c53324-0860-4088-9ea7-26a37836765a09b3d310-e9d2-43c6-ba3f-2d31da881f4efa348f4b-96e8-45d3-b2fd-f3cc22012c7f6e9156b7-4d40-496d-be7b-9b154d2458f6216ab8ad-c58d-437e-a755-58295d2576ee7dcf776a-1df2-44e7-bcfe-0712207abb10e83e467e-bbc4-4d0e-ae19-06df8a75c55757093590-d32f-49ae-945d-e329d1a01bc0c06fdc10-5909-4e20-adbb-3226137a5819b9b15fd6-0306-49f1-8d29-efddeb0b59826193c786-b917-4ce1-aaaf-0d4fc836d0c9b90f4fa0-dd0f-4bd3-bf91-a03292a646b63b99a9fd-0500-47c7-8b3b-593fc332e46004fd1e0d-913e-4152-b851-da1a5e4badf4164e2655-c0f2-4df8-a1a9-0713f6bce3501545dd31-3d04-4b38-9a5d-fabb765ca72552d5cc29-d09e-4160-94ed-e49963be3a3e0aa763e4-f130-4f7c-b49b-e1e4044079950b0290dc-6d05-42e7-9f8e-63ad9fe4d4749adcc324-e68d-4691-a2c1-2bd519c06d4b1830e780-78cb-43bc-98bf-545bdc541b6cbde1b581-6daa-4627-87fb-c540f96ece152fcb2a16-85b3-410c-a887-13490f54994edff70f78-9258-405d-a8ae-251242c4e3705687fd98-0dee-4b67-9997-c3febc0c0c51cb1f3b04-365e-4ea9-9115-ff993ab6c14fcb37dcbf-b64d-4c86-88bd-7d8e08d2140163a28ed5-375f-407a-a8a7-9998d2c74bf99ef3540e-9102-4b16-982d-31aca54dd35e1758e509-7416-48ae-a569-757bbedf2e76b921e4d0-bb09-4459-a041-7ceb968fad58fe9df056-6f00-4a47-9e11-52bf0eb3c9c4fa91cc94-4cf4-480b-a1b6-69479413b1c8dec0c7a7-1fc8-4010-af90-aa59565c3bea",
                                                               "0d6a1ca9-abc2-4331-a3b2-f153a24e8aa7",
                                                               "2fbff453-ca91-4558-aaaf-9a78b9a87e691c8f86d8-1a1c-4808-a4e2-8691f4ef2ab55fcb4967-75aa-499b-8899-d6cb15a72eb1e34f8ca5-a994-457f-b72a-61d34f7185af",
                                                               new Date(1571831492256L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1571831490437L),
                                                             "a414d8c2-c122-4fdc-9bff-074429cdf9fe", -5,
                                                             "7e1d8582-4066-4744-be5d-3891c37d9909",
                                                             "31ae65cd-299f-40bc-90f5-807e7bd9a27a",
                                                             "4ec342a4-a944-4fb3-9fb6-21151c795d2e",
                                                             "3dd06e18-a616-47ce-b7f2-e4f888762b11",
                                                             new Date(1571831494813L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1571831490437L),
                                                             "a414d8c2-c122-4fdc-9bff-074429cdf9fe", -5,
                                                             "7e1d8582-4066-4744-be5d-3891c37d9909",
                                                             "31ae65cd-299f-40bc-90f5-807e7bd9a27a",
                                                             "4ec342a4-a944-4fb3-9fb6-21151c795d2e",
                                                             "3dd06e18-a616-47ce-b7f2-e4f888762b11",
                                                             new Date(1571831494813L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1571831491173L),
                                                             "de3e32b5-5eec-4115-a96a-9ebd6594f2b6", -115,
                                                             "666f6a15-5f29-4af2-a775-72400ec1020b",
                                                             "d35a7bf8-59e2-4e0f-8da8-d9f3fe234654",
                                                             "6f7073c2-5177-4287-a5ec-301ad6bcd384",
                                                             "69a0e821-020c-4b02-940c-49c2388fa6ce",
                                                             new Date(1571831487588L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
