// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1571831496275L), 5,
                                                                      "bfa1d7ce-902e-4bcc-9bcf-b5b1b1cd3426",
                                                                      "702564c6-ec00-45d6-a13a-9b9d0c2b73bf",
                                                                      "1c4fc3d8-dd52-4e3e-a7a3-aca731a20f1d",
                                                                      "24d2d8ea-4c0a-44fc-9d4a-093d362f333d",
                                                                      "c2fec38e-66b6-4722-aa20-39144518c513",
                                                                      "61926336-d3dd-4ed9-b6f5-0877ecc92ec9",
                                                                      new Date(1571831492355L),
                                                                      new Date(1571831490034L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1571831487054L), 58,
                                                                      "a8ea16a4-5505-41a4-b0a4-8aae53e64a06",
                                                                      "8671028b-59d3-45f8-ae18-833b901892a5",
                                                                      "accfef2c-300d-4f95-8d03-ed0c93c4d119",
                                                                      "e4bbde73-67f6-4311-b757-8d21e508d68d",
                                                                      "ce12689b-fe47-4ee4-9c46-ffcd64bf6510",
                                                                      "cb94f6d4-053f-485b-b1b2-65eba803fe8c",
                                                                      new Date(1571831495540L),
                                                                      new Date(1571831493098L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1571831487054L), 58,
                                                                      "a8ea16a4-5505-41a4-b0a4-8aae53e64a06",
                                                                      "8671028b-59d3-45f8-ae18-833b901892a5",
                                                                      "accfef2c-300d-4f95-8d03-ed0c93c4d119",
                                                                      "e4bbde73-67f6-4311-b757-8d21e508d68d",
                                                                      "ce12689b-fe47-4ee4-9c46-ffcd64bf6510",
                                                                      "cb94f6d4-053f-485b-b1b2-65eba803fe8c",
                                                                      new Date(1571831495540L),
                                                                      new Date(1571831493098L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1571831493339L), -75,
                                                                 "aa72f668-2046-49ae-b8c6-bb7f763d2872",
                                                                 "146cba34-7244-423d-9407-edca312b5803",
                                                                 "402641f3-fcd8-4214-9549-bab53ecb32b6",
                                                                 "47e02c2a-559c-4196-8e54-6fd607e5d900",
                                                                 "c4433063-dd7d-4cc3-99fa-29a82edb23bf",
                                                                 "dce3668a-52b5-4de9-af61-7143fb7dd1b0",
                                                                 new Date(1571831493130L), new Date(1571831488916L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1571831489142L), 97,
                                                                        "a6838c44-b004-4b88-a620-9d20a7cdf182",
                                                                        "e302709f-fba3-4c20-8968-3bf97dcac795078cd3d4-e2d9-4a26-bcdd-06ef93c8fe8ea24598ac-b510-46c0-835c-728f2003585bbeaf0ee2-55ac-4562-917d-26963f34a6b344182d34-1f4f-435c-87cc-0ae6ec49e9ef83ce869a-dd05-4006-ae20-89a119e6ce0af07a47be-e570-47a1-8856-6b9d4ef7b3997dc65f5d-562a-4cbd-aec2-9aef5a6f9b09d330af0a-0c4e-4791-ab50-bbcdc4e49389bf2316d0-123a-49d4-8e0a-1dddd299a881cfd2412f-3129-486a-bc8f-66ad121707e4f824d6d8-37f5-4339-aaec-1d03d1389236e5656545-b0a2-46e3-af52-677d116688906c0a1e9b-f44c-4602-8974-a1d0d736809af07c8b55-8e05-46b4-a8cc-9548635aac21ec0d0dad-6200-46f3-be20-0e866fbadbee2b069dc1-c52e-47c7-adaa-14f846ce703c7b89ca61-c061-4810-80ab-873e61fef8309e2da371-8892-46e8-bcac-9c5f6971dc0a7ffb36dc-4e6f-4300-a9c7-a5d9616ccaeb639ddc29-8b06-4fc3-a535-b49e61c44cf12a2eace2-5c09-4611-ac35-82a8be77e0360a44182c-cb37-48f9-a764-e48982db47793420a0c3-1b36-4488-96fe-79610291bfe26fb82ad5-b726-46fe-acb4-f1c17919bce0d5286bd8-db59-4b85-8aea-75d242431bb0e4d5c7e9-ddba-4754-9a90-39f6b96fcfdef383bb57-ae99-4930-b7b4-1f59a66497588107c5fc-e10a-42ae-ac24-6ad09aa227273c9f6ffb-54a6-4fd3-b626-c1c2a9a605fb21031790-2945-4b2b-a7c3-177aabbf2ac19f1fce2e-4739-4a53-92c7-717d1c4e4b155d12bf63-6f6e-425c-9f71-f395ba262e4802986c24-32df-43a5-a616-06e3ee2eddc130c9afdf-8b70-464a-a2ae-11fcc568d7de91840fec-ed2d-40b5-aec0-0c46260bec0a7f6ecf39-ca58-4c7b-9a64-a102ffbbaecff409391e-063a-4fbc-b4b7-79d5b4f5a904a9ce2f70-f2f2-422b-8caa-4392c6ef0c55fb2c3645-74da-4d6f-a102-26f570f78632a4737de4-7000-4176-b413-1dcfed8ea0e812c9558f-7a18-4ad5-93a3-b4f63b856f7415c34830-49d8-4840-83ca-55d944a053118c109031-1b4c-4e3f-9ab4-82db523391f4d3172ba3-701f-45d5-b0ef-b66007776b8360bc0860-214c-480b-ba36-1295116c9ef238a2601c-c8a9-4848-ad8c-c269a8ed58b7df2d8af3-b9dd-4cb7-b7d3-3d9a38e4bb0ca3cc8a70-ed95-4908-8e3a-98fbadcb7acccdd12a85-a39f-486d-b331-976e9d25718cd6ad733c-1038-49ee-90ab-45defea94b7e3b7c2a51-ac61-429b-8fac-9a3e99ebfeed019e49e3-025e-4176-8d98-657e250fe0df562fc11e-737d-454b-8741-fa0ad84e008fcdffa8ef-018c-41ab-8e7d-753fb36dd6eb829f0227-6d98-4b1f-83c8-5006cb253d2e",
                                                                        "accf4b7c-e238-40be-86fa-8e4e3e948cd4",
                                                                        "d5d8b533-5ccb-4c3f-af54-4761c2546b29",
                                                                        "f1b68610-f1e3-4b31-bd67-7dd9fbbaed29",
                                                                        "cd96d6a6-6fbc-4086-9f48-df781dff57b1fc64b18f-faf8-4b3f-b46f-1d378b03e6d0d644d3b3-9e13-49c8-9029-2cbed416708e61ebbb26-869f-4678-a34d-caafdaba1ad4",
                                                                        new Date(1571831491309L),
                                                                        new Date(1571831487763L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1571831496481L), 17,
                                                                      "aa4fdf6f-2d0d-4b4f-831e-1b9fc91de48d",
                                                                      "c768f103-f6d3-4256-82db-46906a2ce024",
                                                                      "b4fd5b4a-087c-47ef-9eb2-3aeac3c5dbf1",
                                                                      "fb793d97-d20c-4c6a-9f07-9aa005c0f81f",
                                                                      "9e52140b-ac96-4fc0-8576-489df0e63bcb",
                                                                      "014907d5-84cc-4a03-bbe0-cd82f809b61a",
                                                                      new Date(1571831487222L),
                                                                      new Date(1571831493839L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1571831496481L), 17,
                                                                      "aa4fdf6f-2d0d-4b4f-831e-1b9fc91de48d",
                                                                      "c768f103-f6d3-4256-82db-46906a2ce024",
                                                                      "b4fd5b4a-087c-47ef-9eb2-3aeac3c5dbf1",
                                                                      "fb793d97-d20c-4c6a-9f07-9aa005c0f81f",
                                                                      "9e52140b-ac96-4fc0-8576-489df0e63bcb",
                                                                      "014907d5-84cc-4a03-bbe0-cd82f809b61a",
                                                                      new Date(1571831487222L),
                                                                      new Date(1571831493839L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1571831489102L), 47,
                                                                      "d1967f78-f1bb-4d83-84b0-29ae5dee522b",
                                                                      "411e190f-69ae-48a9-96cb-65ad51a75ec2",
                                                                      "c208263d-ffc2-4ee6-847b-8ca024c9e7f7",
                                                                      "b94d9968-250f-4b17-a5c1-9a04113f9fec",
                                                                      "91b94524-b96c-418a-85cf-86976f8f8939",
                                                                      "c1546cc1-3ee7-406f-bb67-75a99800ec55",
                                                                      new Date(1571831489465L),
                                                                      new Date(1571831489843L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
