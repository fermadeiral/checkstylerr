// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1574704667537L), 18,
                                                                      "d453b5fc-88ed-4940-91c0-574240b03680",
                                                                      "8fc254b8-8415-433b-8db0-c560f9f54aec",
                                                                      "c938deb1-b4c7-496e-b604-9071c90ed818",
                                                                      "333fbe27-2dc6-443e-abb6-0b70e906cc58",
                                                                      "73947814-18ec-493b-b9f8-03dade49faa8",
                                                                      "c66c0c1c-b3ce-4476-9764-5a49cef89c8a",
                                                                      new Date(1574704662851L),
                                                                      new Date(1574704666832L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1574704661370L), 37,
                                                                      "7d7884d2-ff99-45d5-9ca1-e08cce0c19b9",
                                                                      "83d6e69d-1cd1-4611-b2df-c11102d7f57e",
                                                                      "e127bb34-7c72-4a6f-9e18-8042b54e9336",
                                                                      "24c8c848-3fe2-4ea1-bafe-45064674369d",
                                                                      "37b9c082-6593-445f-a3bc-b71b24243069",
                                                                      "b3952d9f-3bce-454c-b7f9-bdf451860fad",
                                                                      new Date(1574704666256L),
                                                                      new Date(1574704663871L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1574704661370L), 37,
                                                                      "7d7884d2-ff99-45d5-9ca1-e08cce0c19b9",
                                                                      "83d6e69d-1cd1-4611-b2df-c11102d7f57e",
                                                                      "e127bb34-7c72-4a6f-9e18-8042b54e9336",
                                                                      "24c8c848-3fe2-4ea1-bafe-45064674369d",
                                                                      "37b9c082-6593-445f-a3bc-b71b24243069",
                                                                      "b3952d9f-3bce-454c-b7f9-bdf451860fad",
                                                                      new Date(1574704666256L),
                                                                      new Date(1574704663871L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1574704662820L), -36,
                                                                 "29315c45-145d-44fd-a136-b671268019ad",
                                                                 "87e556a5-0ae0-46ca-a12f-096c25147212",
                                                                 "b6446e8d-3d56-4f41-8348-9a3902652e6a",
                                                                 "8094af9c-17b9-4005-aec9-0fb50432616f",
                                                                 "1992369e-4278-4a54-b0b0-c46b5d3222b0",
                                                                 "a2b89234-c175-4c69-a097-3d82c567a59b",
                                                                 new Date(1574704665142L), new Date(1574704665086L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1574704661396L), -74,
                                                                        "10ed6698-b18e-463f-9694-2cbc4766b952",
                                                                        "ee80b8cb-2a27-4e6a-9b77-4aaf52f0e706e8bc7df1-bf7e-43e1-9730-961fcd19ef08247116fa-ffc4-4e53-ad67-58b71e5066fbed0ae127-b962-4c16-b50f-83aeebf21c491ec6a698-b4a2-4a5f-bd17-8a78adcedd4114dd83db-0ec8-4f82-b935-549ebd4a850c112beb90-701b-4e31-9872-77dcde32e39e3a7d5585-9a6c-47bf-a1f9-bdc4a922d0264748eaf5-4f68-408a-a92e-9586fd4710afc3db80b0-c67d-4bcf-9cd4-bbc12bbe0d7037a51f54-9b2b-4f20-9897-ee0fc2e45e29e3a22454-ace9-4600-9b25-9e89e6c082ec8161bc93-6823-4e61-8589-b342df13239ca73e0eab-220f-494b-8265-f790671606736cf76cc7-95bb-4c13-8b45-22ad8bd8ef9a4e4b49d8-1dac-40a7-9a08-6f33f8f2915b6cdd9251-633a-4eb6-8a65-fcf1ebf43fc08a16a6ac-1adf-45a2-afbf-459297316a4336e2fee7-895b-406a-a365-e2526ee20009d1569f15-dc4b-443c-b2d7-3f7ac5e011af931808aa-4424-4815-b1de-03e469de78e1339aee42-8a38-4669-bb45-107a50fba759e744c187-f066-474a-bc56-5c93b400ed8723467ea5-7d55-4ce9-8d8c-2a243a9013b5dade024e-591a-499c-8450-ecd1476a5fe043fba6de-5178-4c72-8a0f-62d06c24a1ad6130a9fb-f3f5-4838-b8b3-81d0c37ef66853bd2a09-869a-4b00-a9fe-7ee7aa645e02624589ee-b115-45f3-b972-8b257d91d22d9082f4ce-e0f9-4a9c-903e-f9184dc8333537667f56-6c95-42f1-9269-0a0ae32eaf49b88063d5-28aa-419a-8c36-2eb9f258709b1f55de97-7f4e-42bd-adb9-46bf93f0ef86f21f0138-0077-4206-bcbd-8686e5c20a0f0721ff38-f783-4ddd-b331-a06a17408a7dd18b8728-ab71-4d75-8969-17f3aa820c3f5bfc8272-a69f-4312-bb5c-ee472732eca2e45a5670-dbc2-48ab-9ace-374319a231f314b2eeb7-6525-432b-8b11-f4a9422387857e12db85-7c52-4acf-a3bc-b65cd78e94beeb96f9e4-fce0-4c0b-87e7-5399368eaed58bdcb502-475d-4f3c-811c-c70453c802922688a1d6-a3ad-49bc-9995-04f5458b887e9588b819-2b3c-4b4e-91aa-dd8f70eb1cd86eba883c-c6be-4323-9051-93bde4394a065194a963-3abe-4cdc-a786-e96b0c90e4fd899b06f0-049c-4e8a-bdac-3f1c6f267cf67f2496c5-d763-452a-8ee5-b3bdc3426f9da18165f5-1736-461e-af08-86b8a81458ee9d685e58-823a-41d4-af98-2dd9dfa0d0b20cd6f96e-c4bc-4d9d-9858-7bfc160b928699c174f8-22cf-43b1-b4af-404bc2fbb123dd4b2dfe-2094-44eb-bee5-8c1ac9e51385d2ddd798-fd83-4b11-b65a-3be00ce0ec44bda93c9f-1469-4d66-af47-7bce7dfb0074b1d8ad51-f889-4f79-b601-68722ba4e8c5",
                                                                        "d6a66f58-ecf9-4cc6-9a84-f5e610036c70",
                                                                        "e0ce0814-1368-4978-ac6c-a130a102488f",
                                                                        "bc3911cc-929e-4171-a1f1-54a1383ffd60",
                                                                        "8411e4d1-4175-41e3-8783-36f83ae65cee970adbb6-241b-4003-82fe-ae78a488bc76c1aad530-4841-449c-ac8a-51df5eb763a0aeced7e5-0b8c-4921-be93-7187e0585335",
                                                                        new Date(1574704663225L),
                                                                        new Date(1574704665223L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1574704664568L), -120,
                                                                      "bb471a51-a8ff-4345-a7f8-6d24f3b4816b",
                                                                      "d2dd5238-d13c-4dd1-b1b3-6c2a46618f16",
                                                                      "74b66b34-09d6-4b2c-9139-2cff4e805e65",
                                                                      "7cc36127-401e-4171-b356-8dfd4e5af936",
                                                                      "7d4670c3-a8fc-4ad9-a1e3-936d729b0ca4",
                                                                      "09c10169-24ca-4714-85bb-2447d2fd9f3c",
                                                                      new Date(1574704670478L),
                                                                      new Date(1574704667189L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1574704664568L), -120,
                                                                      "bb471a51-a8ff-4345-a7f8-6d24f3b4816b",
                                                                      "d2dd5238-d13c-4dd1-b1b3-6c2a46618f16",
                                                                      "74b66b34-09d6-4b2c-9139-2cff4e805e65",
                                                                      "7cc36127-401e-4171-b356-8dfd4e5af936",
                                                                      "7d4670c3-a8fc-4ad9-a1e3-936d729b0ca4",
                                                                      "09c10169-24ca-4714-85bb-2447d2fd9f3c",
                                                                      new Date(1574704670478L),
                                                                      new Date(1574704667189L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1574704660554L), 102,
                                                                      "62b4b837-7779-475d-b79d-224a165cf4e3",
                                                                      "c696925b-7c5b-43f5-bc3d-2bf5b6ae8ba2",
                                                                      "81c218ee-61be-4c0b-adde-97e62c8ebacc",
                                                                      "dab045f4-b37d-46eb-86f8-bcd733445f14",
                                                                      "107fa1ba-1a2e-4af7-92c0-5358490b353e",
                                                                      "89108451-8579-4799-9015-89f921929ce3",
                                                                      new Date(1574704666960L),
                                                                      new Date(1574704662251L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
