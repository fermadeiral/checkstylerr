// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("c580b553-39a6-4564-8327-8d5f88123e4e",
                                                                      new Date(1574704667064L),
                                                                      new Date(1574704666932L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                      "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                      new Date(1574704663147L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("9a7c8a77-a5bd-4e0a-9d15-81f19af5c98c",
                                                                      new Date(1574704666261L),
                                                                      new Date(1574704664811L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                      "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                      new Date(1574704668765L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("9a7c8a77-a5bd-4e0a-9d15-81f19af5c98c",
                                                                      new Date(1574704666261L),
                                                                      new Date(1574704664811L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                      "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                      new Date(1574704668765L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("b476b7bd-6d21-42a1-8599-201fbcb1591e",
                                                                 new Date(1574704665541L), new Date(1574704664012L),
                                                                 "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                 "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                 new Date(1574704669813L),
                                                                 "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("c9977291-fb08-4661-843e-084aeac83e24",
                                                                        new Date(1574704666088L),
                                                                        new Date(1574704666305L),
                                                                        "cn;PwKRGqqℵJT쬶x$$PJRvw`RTJRcꕟGGu鉙J`\u0005C>W\\\\T5N_vNPG5xRcTc\u0007XAiJquWwJP",
                                                                        null, new Date(1574704667798L),
                                                                        "cn;PwKRGqqℵJT쬶x$$PJRvw`RTJRcꕟGGu鉙J`\u0005C>W\\\\T5N_vNPG5xRcTc\u0007XAiJquWwJP");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("97eb1ba8-dd95-4ee4-a928-058b563da3f5",
                                                                      new Date(1574704667156L),
                                                                      new Date(1574704665528L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                      "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                      new Date(1574704669506L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("97eb1ba8-dd95-4ee4-a928-058b563da3f5",
                                                                      new Date(1574704667156L),
                                                                      new Date(1574704665528L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                      "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                      new Date(1574704669506L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("3b79b76a-46c4-41b5-8410-81f8cfcdba13",
                                                                      new Date(1574704660948L),
                                                                      new Date(1574704666557L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI",
                                                                      "A-tE885pqtq42cQE2sSP6b:u:Z5970hU32i9R8Z9J4eyDP4bxdc7SCUn5e30jG0Z5r3JONO7tWuhh1NVcpdd6w5vU1FeP539o",
                                                                      new Date(1574704667225L),
                                                                      "9mbY48OQ22Hrd0H371V1SIDyLElF8pUI");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
