// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantApiKey subtenantapikey1 = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   new Date(1574704667174L), 118, null,
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   "d3327aef-1da3-4499-bcf3-8e63b04cb6f5", -125,
                                                                   "66affdfa-784e-4c17-bd15-ae9dd9843c00",
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1574704661082L));
            SubtenantApiKey subtenantapikey2 = subtenantapikey1.clone();
            assertNotNull(subtenantapikey1);
            assertNotNull(subtenantapikey2);
            assertNotSame(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantApiKey subtenantapikey1 = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   new Date(1574704661913L), -32, null,
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   "ef1cd9b8-3221-4391-aefc-23518f83faa3", -25,
                                                                   "e25f9e8a-ec98-4538-8132-816a43b1d1d2",
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1574704664911L));
            SubtenantApiKey subtenantapikey2 = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   new Date(1574704661913L), -32, null,
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   "ef1cd9b8-3221-4391-aefc-23518f83faa3", -25,
                                                                   "e25f9e8a-ec98-4538-8132-816a43b1d1d2",
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1574704664911L));
            assertNotNull(subtenantapikey1);
            assertNotNull(subtenantapikey2);
            assertNotSame(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2.hashCode(), subtenantapikey1.hashCode());
            int hashCode = subtenantapikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantapikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantApiKey subtenantapikey = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                              new Date(1574704661885L), 85, null,
                                                              "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                              "3eba6c08-a914-4034-a2cd-49e4a779d01d", -113,
                                                              "ac0638a9-9314-4405-a7fc-68ce972c07b1",
                                                              "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                              SubtenantApiKeyStatus.getDefault(),
                                                              new Date(1574704664450L));
        assertTrue(subtenantapikey.isValid());
        SubtenantApiKey subtenantapikeyInvalid = new SubtenantApiKey(null, new Date(1574704669624L), -123, null,
                                                                     "8â?ˆè¡ŒBC8GHç§™%8â­?\u0004R88í?º8å°¸8EUT\\\\+R\u00138è¥¯\u0007B\u001eå—´àµ´;N8î¶¤8ã¹Œ\u000eï’›=á–±88Tî¬·8å¡›8?888ïŽ§å°¼8çŽµ/W?K",
                                                                     "4ea88170-bd72-4d0a-b6c5-06d1615190df", 60, null,
                                                                     "8â?ˆè¡ŒBC8GHç§™%8â­?\u0004R88í?º8å°¸8EUT\\\\+R\u00138è¥¯\u0007B\u001eå—´àµ´;N8î¶¤8ã¹Œ\u000eï’›=á–±88Tî¬·8å¡›8?888ïŽ§å°¼8çŽµ/W?K",
                                                                     SubtenantApiKeyStatus.getDefault(),
                                                                     new Date(1574704667158L));
        assertFalse(subtenantapikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantApiKey subtenantapikey1 = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   new Date(1574704668684L), -105, null,
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   "1a2ce0b9-4007-4d82-a458-bce5d8a2085a", -33,
                                                                   "2f0a11bf-c499-4b20-9b7b-ef16819784f2",
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1574704669541L));
            SubtenantApiKey subtenantapikey2 = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   new Date(1574704668684L), -105, null,
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   "1a2ce0b9-4007-4d82-a458-bce5d8a2085a", -33,
                                                                   "2f0a11bf-c499-4b20-9b7b-ef16819784f2",
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1574704669541L));
            SubtenantApiKey subtenantapikey3 = new SubtenantApiKey("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   new Date(1574704666574L), -105, null,
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   "60d4acbb-208b-4d39-a7e7-0311a4c9d668", -73,
                                                                   "4d2e0a41-68cb-443d-b170-9281ae717cda",
                                                                   "4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1574704667904L));
            assertNotNull(subtenantapikey1);
            assertNotNull(subtenantapikey2);
            assertNotNull(subtenantapikey3);
            assertNotSame(subtenantapikey2, subtenantapikey1);
            assertNotSame(subtenantapikey3, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey1, subtenantapikey2);
            assertEquals(subtenantapikey1, subtenantapikey1);
            assertFalse(subtenantapikey1.equals(null));
            assertNotEquals(subtenantapikey3, subtenantapikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
