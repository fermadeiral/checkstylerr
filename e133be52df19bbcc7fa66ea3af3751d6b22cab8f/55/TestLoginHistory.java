// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1574704667255L),
                                                          "f29bf97d-2793-4039-8346-bcc1684d2549", true,
                                                          "ae1725cf-015b-4c24-8ca0-fc3cc2d31e5a");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1574704667446L),
                                                          "64135e92-9e84-498e-9bb6-e2af728bd245", true,
                                                          "9cfe0485-0630-4b0f-aab0-b3c53db89c37");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1574704667446L),
                                                          "64135e92-9e84-498e-9bb6-e2af728bd245", true,
                                                          "9cfe0485-0630-4b0f-aab0-b3c53db89c37");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1574704667164L), "be132299-2540-42fd-a22c-0a780c7dfdc5",
                                                     false, "6bc6ee8e-9797-4038-9d4f-6182ea06fa5d");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1574704669265L),
                                                          "4a4cc5b1-4511-46d0-a119-ed114cbbb456", false,
                                                          "88319b51-7532-4d00-8f16-cad5ece86613");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1574704669265L),
                                                          "4a4cc5b1-4511-46d0-a119-ed114cbbb456", false,
                                                          "88319b51-7532-4d00-8f16-cad5ece86613");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1574704665356L),
                                                          "61f32415-d6f4-454c-b200-9a8d38710cc4", false,
                                                          "41e50b34-3229-48d5-84fd-22e9cecdc7f9");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
