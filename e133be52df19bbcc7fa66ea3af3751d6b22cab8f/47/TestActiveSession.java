// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                             new Date(1574704667834L),
                                                             "836f16bb-c778-47f8-b818-3ef8a09c41c8",
                                                             new Date(1574704662873L),
                                                             "19e68c56-1a4e-4869-83a6-a1984412dd33",
                                                             "4cad5c80-2aca-4e72-987c-5dde4df99774");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                             new Date(1574704666002L),
                                                             "9bb1a698-7238-4a30-bd12-1e642b32db0a",
                                                             new Date(1574704669440L),
                                                             "8068ce1c-ed01-4489-8224-7c5f46dcd384",
                                                             "9462f14e-1963-4303-8a94-82bd251ba80d");
            ActiveSession activesession2 = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                             new Date(1574704666002L),
                                                             "9bb1a698-7238-4a30-bd12-1e642b32db0a",
                                                             new Date(1574704669440L),
                                                             "8068ce1c-ed01-4489-8224-7c5f46dcd384",
                                                             "9462f14e-1963-4303-8a94-82bd251ba80d");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf", new Date(1574704663318L),
                                                        "ddf8d6e7-304b-4bc9-8f35-541090e9bb4a",
                                                        new Date(1574704663001L),
                                                        "eb11f938-0339-4ecb-826e-18218963162d",
                                                        "ee01993f-bd72-4ca8-8535-4bfaaface96a");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                             new Date(1574704669795L),
                                                             "25b3071d-0b94-4759-8d4b-fe34a2e5753d",
                                                             new Date(1574704661645L),
                                                             "4bf4c2d4-a2a6-4999-ae4f-cdaba81f3f3d",
                                                             "3087c447-0a2f-4903-b64f-1ebca6359edc");
            ActiveSession activesession2 = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                             new Date(1574704669795L),
                                                             "25b3071d-0b94-4759-8d4b-fe34a2e5753d",
                                                             new Date(1574704661645L),
                                                             "4bf4c2d4-a2a6-4999-ae4f-cdaba81f3f3d",
                                                             "3087c447-0a2f-4903-b64f-1ebca6359edc");
            ActiveSession activesession3 = new ActiveSession("4f267f967f7d1f5e3fa0d6abaccdb4bf",
                                                             new Date(1574704668256L),
                                                             "fd0541a8-e6c6-41c0-9771-50447b5c3e00",
                                                             new Date(1574704660211L),
                                                             "4059c42d-2e92-4ac4-ae90-0c1a15e8d0e2",
                                                             "73a00e46-3eb2-418c-9a47-df9505179d3b");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
