// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(29),
                                                                                        Long.valueOf(-50),
                                                                                        Order.getDefault(),
                                                                                        "3cf0757d-ce93-4c08-99fd-6fe2da04647b",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1574704679260L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1574704675408L),
                                                                                                       new Date(1574704681472L),
                                                                                                       new Date(1574704680027L),
                                                                                                       new Date(1574704680091L),
                                                                                                       new Date(1574704679995L)))
                                                                        .lessThanUpdatedAt(new Date(1574704680412L))
                                                                        .greaterThanUpdatedAt(new Date(1574704678821L))
                                                                        .equalToName("839a570c-dceb-4c4f-93a4-6e351ea7dc31")
                                                                        .notEqualToName("bae5415d-dff8-432f-b166-a8cdae6881f5")
                                                                        .inNames(Arrays.asList("bbaa2938-9a30-4b72-8c26-5f05c1dc8a91"))
                                                                        .notInNames(Arrays.asList("18e1c44d-b5b7-41a2-8c2b-6d5c9e9c3ef4",
                                                                                                  "cbd01f96-dc36-4812-97e7-7615f91535d4",
                                                                                                  "77c47ea4-5dcc-4bfd-b60c-315cac4b34db",
                                                                                                  "520e529c-12ec-407d-8aba-03037b8aca59",
                                                                                                  "302e4fd7-6f29-4296-9877-b69b151afa23"))
                                                                        .equalToDevicesCount(Integer.valueOf(75))
                                                                        .notEqualToDevicesCount(Integer.valueOf(43))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(116),
                                                                                                       Integer.valueOf(-11),
                                                                                                       Integer.valueOf(-51),
                                                                                                       Integer.valueOf(-29),
                                                                                                       Integer.valueOf(108),
                                                                                                       Integer.valueOf(-8),
                                                                                                       Integer.valueOf(-16),
                                                                                                       Integer.valueOf(84),
                                                                                                       Integer.valueOf(80)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-85),
                                                                                                          Integer.valueOf(123),
                                                                                                          Integer.valueOf(-3),
                                                                                                          Integer.valueOf(109),
                                                                                                          Integer.valueOf(59),
                                                                                                          Integer.valueOf(-70)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-32))
                                                                        .greaterThanDevicesCount(Integer.valueOf(24))
                                                                        .inCreatedAts(Arrays.asList(new Date(1574704677143L),
                                                                                                    new Date(1574704676605L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1574704676531L),
                                                                                                       new Date(1574704674465L),
                                                                                                       new Date(1574704681867L),
                                                                                                       new Date(1574704680739L)))
                                                                        .lessThanCreatedAt(new Date(1574704675157L))
                                                                        .greaterThanCreatedAt(new Date(1574704673586L))
                                                                        .equalToId("a441b99d-e825-4397-9f2c-09e21f936707")
                                                                        .notEqualToId("b9391ff8-5699-46a9-85ec-0acd4e3f47b3")
                                                                        .inIds(Arrays.asList("f384e172-f8ff-440e-8374-b1f6b15034f7",
                                                                                             "c8102033-1928-43ea-bb7e-bacf0565a147",
                                                                                             "9eb6d611-48b6-46cc-958d-1ae0533d97fd"))
                                                                        .notInIds(Arrays.asList("410f69af-104d-43f4-99c9-eea233f8caaf",
                                                                                                "643eb3a8-18d6-45a7-ad36-5210432278fd",
                                                                                                "a771d770-a202-4f8c-8324-69fa3e89a388",
                                                                                                "1175e6be-3489-4ed0-922b-7266880be4e7",
                                                                                                "646ee4c1-51a2-43c4-aa77-fa2b78ccffc7",
                                                                                                "6a4061a2-34ac-49b0-acab-2cff2b997169",
                                                                                                "464c6243-d66b-4207-b97c-a9ab3c9408d1"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1574704679260L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1574704675408L), new Date(1574704681472L), new Date(1574704680027L),
                                       new Date(1574704680091L), new Date(1574704679995L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1574704680412L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1574704678821L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("839a570c-dceb-4c4f-93a4-6e351ea7dc31",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("bae5415d-dff8-432f-b166-a8cdae6881f5",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("bbaa2938-9a30-4b72-8c26-5f05c1dc8a91"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("18e1c44d-b5b7-41a2-8c2b-6d5c9e9c3ef4", "cbd01f96-dc36-4812-97e7-7615f91535d4",
                                       "77c47ea4-5dcc-4bfd-b60c-315cac4b34db", "520e529c-12ec-407d-8aba-03037b8aca59",
                                       "302e4fd7-6f29-4296-9877-b69b151afa23"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(75),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(43),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(116), Integer.valueOf(-11), Integer.valueOf(-51),
                                       Integer.valueOf(-29), Integer.valueOf(108), Integer.valueOf(-8),
                                       Integer.valueOf(-16), Integer.valueOf(84), Integer.valueOf(80)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-85), Integer.valueOf(123), Integer.valueOf(-3),
                                       Integer.valueOf(109), Integer.valueOf(59), Integer.valueOf(-70)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-32),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(24),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1574704677143L), new Date(1574704676605L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1574704676531L), new Date(1574704674465L), new Date(1574704681867L),
                                       new Date(1574704680739L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1574704675157L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1574704673586L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("a441b99d-e825-4397-9f2c-09e21f936707",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("b9391ff8-5699-46a9-85ec-0acd4e3f47b3",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("f384e172-f8ff-440e-8374-b1f6b15034f7", "c8102033-1928-43ea-bb7e-bacf0565a147",
                                       "9eb6d611-48b6-46cc-958d-1ae0533d97fd"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("410f69af-104d-43f4-99c9-eea233f8caaf", "643eb3a8-18d6-45a7-ad36-5210432278fd",
                                       "a771d770-a202-4f8c-8324-69fa3e89a388", "1175e6be-3489-4ed0-922b-7266880be4e7",
                                       "646ee4c1-51a2-43c4-aa77-fa2b78ccffc7", "6a4061a2-34ac-49b0-acab-2cff2b997169",
                                       "464c6243-d66b-4207-b97c-a9ab3c9408d1"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(43),
                                                                                        Long.valueOf(-48),
                                                                                        Order.getDefault(),
                                                                                        "17ab952d-5e74-43d3-9051-8bf10cbf1b22",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(43),
                                                                                        Long.valueOf(-48),
                                                                                        Order.getDefault(),
                                                                                        "17ab952d-5e74-43d3-9051-8bf10cbf1b22",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-24),
                                                                                        Long.valueOf(-88),
                                                                                        Order.getDefault(),
                                                                                        "1c99a9f9-7700-4b37-8339-52717b44119c",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-24),
                                                                                        Long.valueOf(-88),
                                                                                        Order.getDefault(),
                                                                                        "1c99a9f9-7700-4b37-8339-52717b44119c",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-112),
                                                                                        Long.valueOf(-76),
                                                                                        Order.getDefault(),
                                                                                        "aa441dda-eb77-4ad4-a26c-f900e40f0682",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
