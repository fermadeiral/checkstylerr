// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-104),
                                                                                           Long.valueOf(27),
                                                                                           Order.getDefault(),
                                                                                           "047c8c03-0abb-47ed-aafe-d91535580611",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("02015879-1939-449c-80f6-23679d54e0be")
                                                                          .notEqualToDeviceId("33dabbe3-e829-4ad9-8f03-ec4720a73538")
                                                                          .inDeviceIds(Arrays.asList("e9d7fc40-f1ca-4646-a8c2-05b6e4363704"))
                                                                          .notInDeviceIds(Arrays.asList("4eb534c5-3151-400f-8368-827bab875900",
                                                                                                        "dd30067a-8944-4f21-8c31-6b7d06477097",
                                                                                                        "00ff4f45-2052-4731-a1dc-962f20ef0745",
                                                                                                        "971fafcb-fed1-44a8-ba66-4459d8768ef2",
                                                                                                        "a85e149d-7fe6-4223-a2c1-d062899c689e",
                                                                                                        "29143f5f-3363-4a90-8764-4b48da96c46b"))
                                                                          .equalToDescription("c52384c6-9928-41e5-9373-73de857f659f")
                                                                          .notEqualToDescription("0b9aaee1-246b-4bde-94c9-398fe74d79f9")
                                                                          .inDescriptions(Arrays.asList("7c55f173-eadc-4444-ac01-e79e3760e36c",
                                                                                                        "98113c05-42b2-4c0c-a99c-a06c00646b68",
                                                                                                        "17a72e2c-54a6-4a44-8c3a-eed22e949bc1",
                                                                                                        "5881ba8e-bac5-4086-a754-40eeb8dba411",
                                                                                                        "d2b7bed2-6b50-4395-a461-bbc395ee9b4b",
                                                                                                        "b881ddea-d58a-4073-bb8e-44b214d5c206",
                                                                                                        "ca0add8f-f60a-4889-bd73-a267b675908c"))
                                                                          .notInDescriptions(Arrays.asList("271c88fd-ce13-492e-b46f-987f1c2337bc",
                                                                                                           "b1e782ac-4d2a-403e-a759-3e6ccd9e157a",
                                                                                                           "a1bda5a4-2d2e-4386-8bb2-2043604d080f",
                                                                                                           "308a59fc-f6f2-4883-b32c-f379dffe9e96",
                                                                                                           "cd4f73a5-b816-44d2-b4fb-cef0f05f6cd6",
                                                                                                           "1ae3756a-17b7-44bd-bbd7-409ccde6ebac",
                                                                                                           "676cbaac-6ee0-4799-b00a-d3d59b45bb64"))
                                                                          .inDateTimes(Arrays.asList(new Date(1561477835370L),
                                                                                                     new Date(1561477840890L),
                                                                                                     new Date(1561477843172L),
                                                                                                     new Date(1561477835411L),
                                                                                                     new Date(1561477835468L),
                                                                                                     new Date(1561477834929L),
                                                                                                     new Date(1561477842458L),
                                                                                                     new Date(1561477840323L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1561477840279L)))
                                                                          .lessThanDateTime(new Date(1561477835469L))
                                                                          .greaterThanDateTime(new Date(1561477840692L))
                                                                          .equalToStateChange(Boolean.TRUE)
                                                                          .notEqualToStateChange(Boolean.FALSE)
                                                                          .equalToId("e197da73-1c67-43ef-af52-4f9e3c5dc535")
                                                                          .notEqualToId("82495e91-2e1c-4824-a514-0cfb6e4f599a")
                                                                          .inIds(Arrays.asList("ed317f36-de61-4c83-aa22-a206a3ec7dd1",
                                                                                               "fcc4ba75-fc9a-4480-ae27-0c4186877716",
                                                                                               "06d6622a-0258-4a2c-9d1a-a21214cdd243",
                                                                                               "b0710c7a-e312-459f-9bd1-5ddec77b3cd7",
                                                                                               "65024e7f-66bd-4028-99ab-dbf3a263fb84"))
                                                                          .notInIds(Arrays.asList("ea9b0986-148d-4ae5-9510-c7a2c498dcfb",
                                                                                                  "c0b87921-2b80-4d6a-8832-aa190e6d5b78"))
                                                                          .equalToEventType("aed31f6e-9d14-4d77-a8a7-d263ed75577e")
                                                                          .notEqualToEventType("2214a68b-fc2b-43e8-9776-58147f56aa73")
                                                                          .inEventTypes(Arrays.asList("3fdc7a0f-6da8-44d2-8a47-b8f679324d15",
                                                                                                      "4a056a0a-d7e9-48db-8a20-5651c5a1efc9"))
                                                                          .notInEventTypes(Arrays.asList("62d1da5b-b51f-4ea5-9af2-45de5926dcd5"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("02015879-1939-449c-80f6-23679d54e0be",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("33dabbe3-e829-4ad9-8f03-ec4720a73538",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("e9d7fc40-f1ca-4646-a8c2-05b6e4363704"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("4eb534c5-3151-400f-8368-827bab875900", "dd30067a-8944-4f21-8c31-6b7d06477097",
                                       "00ff4f45-2052-4731-a1dc-962f20ef0745", "971fafcb-fed1-44a8-ba66-4459d8768ef2",
                                       "a85e149d-7fe6-4223-a2c1-d062899c689e", "29143f5f-3363-4a90-8764-4b48da96c46b"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("c52384c6-9928-41e5-9373-73de857f659f",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("0b9aaee1-246b-4bde-94c9-398fe74d79f9",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("7c55f173-eadc-4444-ac01-e79e3760e36c", "98113c05-42b2-4c0c-a99c-a06c00646b68",
                                       "17a72e2c-54a6-4a44-8c3a-eed22e949bc1", "5881ba8e-bac5-4086-a754-40eeb8dba411",
                                       "d2b7bed2-6b50-4395-a461-bbc395ee9b4b", "b881ddea-d58a-4073-bb8e-44b214d5c206",
                                       "ca0add8f-f60a-4889-bd73-a267b675908c"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("271c88fd-ce13-492e-b46f-987f1c2337bc", "b1e782ac-4d2a-403e-a759-3e6ccd9e157a",
                                       "a1bda5a4-2d2e-4386-8bb2-2043604d080f", "308a59fc-f6f2-4883-b32c-f379dffe9e96",
                                       "cd4f73a5-b816-44d2-b4fb-cef0f05f6cd6", "1ae3756a-17b7-44bd-bbd7-409ccde6ebac",
                                       "676cbaac-6ee0-4799-b00a-d3d59b45bb64"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1561477835370L), new Date(1561477840890L), new Date(1561477843172L),
                                       new Date(1561477835411L), new Date(1561477835468L), new Date(1561477834929L),
                                       new Date(1561477842458L), new Date(1561477840323L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1561477840279L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1561477835469L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1561477840692L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("e197da73-1c67-43ef-af52-4f9e3c5dc535",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("82495e91-2e1c-4824-a514-0cfb6e4f599a",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("ed317f36-de61-4c83-aa22-a206a3ec7dd1", "fcc4ba75-fc9a-4480-ae27-0c4186877716",
                                       "06d6622a-0258-4a2c-9d1a-a21214cdd243", "b0710c7a-e312-459f-9bd1-5ddec77b3cd7",
                                       "65024e7f-66bd-4028-99ab-dbf3a263fb84"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("ea9b0986-148d-4ae5-9510-c7a2c498dcfb", "c0b87921-2b80-4d6a-8832-aa190e6d5b78"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("aed31f6e-9d14-4d77-a8a7-d263ed75577e",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("2214a68b-fc2b-43e8-9776-58147f56aa73",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("3fdc7a0f-6da8-44d2-8a47-b8f679324d15", "4a056a0a-d7e9-48db-8a20-5651c5a1efc9"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("62d1da5b-b51f-4ea5-9af2-45de5926dcd5"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-81),
                                                                                           Long.valueOf(-19),
                                                                                           Order.getDefault(),
                                                                                           "06ec0c33-f25e-46f0-a227-5f5947dbbfb2",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-81),
                                                                                           Long.valueOf(-19),
                                                                                           Order.getDefault(),
                                                                                           "06ec0c33-f25e-46f0-a227-5f5947dbbfb2",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-41),
                                                                                           Long.valueOf(-13),
                                                                                           Order.getDefault(),
                                                                                           "9d762652-2290-4e59-bbf1-8176843eba1f",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-41),
                                                                                           Long.valueOf(-13),
                                                                                           Order.getDefault(),
                                                                                           "9d762652-2290-4e59-bbf1-8176843eba1f",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(42),
                                                                                           Long.valueOf(-96),
                                                                                           Order.getDefault(),
                                                                                           "55ddd67b-c9b7-4629-9663-15d3b9ea0c3d",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
