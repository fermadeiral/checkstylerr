// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561477836921L),
                                                                         "b8e8bf26-63c0-4cff-a969-2d250aad5716",
                                                                         "b2290dae-44c1-475b-b331-9bb8deec0d34",
                                                                         "2c51be31-c89a-4c3b-9376-7b48921f0f24");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561477840748L),
                                                                         "94b98b61-b577-4c6b-91ad-e7e19b3e8fcd",
                                                                         "265016a9-f1a3-4d32-8eeb-e00f303ef2bc",
                                                                         "f94f7a8a-e50c-4c81-9af0-b3ec055436c6");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561477840748L),
                                                                         "94b98b61-b577-4c6b-91ad-e7e19b3e8fcd",
                                                                         "265016a9-f1a3-4d32-8eeb-e00f303ef2bc",
                                                                         "f94f7a8a-e50c-4c81-9af0-b3ec055436c6");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561477834064L),
                                                                    "4396943c-f4d7-4e9b-bd49-ad8dbc97b8fe",
                                                                    "fd7ccde2-0259-44b4-a754-986c67ea2bf2",
                                                                    "a5add51a-6221-4fdc-981b-9450a9962662");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561477834343L),
                                                                         "42a24041-73c1-4a9f-9931-5440f34fea34",
                                                                         "83fdc7cb-6ec1-47ef-9ea4-ed06fac6abf6",
                                                                         "025bf3bb-a2e6-474b-b4ec-0c0cc3bd26a5");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561477834343L),
                                                                         "42a24041-73c1-4a9f-9931-5440f34fea34",
                                                                         "83fdc7cb-6ec1-47ef-9ea4-ed06fac6abf6",
                                                                         "025bf3bb-a2e6-474b-b4ec-0c0cc3bd26a5");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561477833237L),
                                                                         "0d360506-1c1a-4cdc-8cd6-0a1594b67547",
                                                                         "668ad49e-bfff-4aac-80c9-51a664c52aee",
                                                                         "f5d00a0f-2517-47c6-bfae-921be5040b6f");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
