// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("8604e442-0ad5-40d2-b7d4-c48bb9aae4d5",
                                                          "e1a1b596-6338-454b-8efb-46890c70bb61");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("1b390551-2123-4842-ac8f-c5d69a215c69",
                                                          "2016d86a-515e-4498-8205-02aa2c6f1043");
            LoginProfile loginprofile2 = new LoginProfile("1b390551-2123-4842-ac8f-c5d69a215c69",
                                                          "2016d86a-515e-4498-8205-02aa2c6f1043");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("05aa3f02-71b8-46c9-93a7-d36cb3265d82",
                                                     "5bf56c03-0e83-4242-8797-eb080a60e4d7");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("01e62b36-895a-4ed9-b14f-ea6df6b34316",
                                                          "101f4b4c-ed36-439f-b30a-ffdfe112eb45");
            LoginProfile loginprofile2 = new LoginProfile("01e62b36-895a-4ed9-b14f-ea6df6b34316",
                                                          "101f4b4c-ed36-439f-b30a-ffdfe112eb45");
            LoginProfile loginprofile3 = new LoginProfile("f81473ea-0baf-45ea-b884-75a1cf52eca3",
                                                          "d2acea4f-cc51-4713-900c-1242a534653c");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
