// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558018686179L), 70,
                                                                      "8dc3019c-d4d6-49e1-b6b7-c32f1afc7a94",
                                                                      "92e624b9-0efe-4e6f-aa5f-223cd3f08088",
                                                                      "9aa629b3-8b57-493a-a465-10c2b897c38b",
                                                                      "ce9a0c67-ab9d-4125-bfb5-8b29d182b64c",
                                                                      "7e8a7334-7f90-41bd-a46d-79a07a1627e9",
                                                                      "ec7e01bd-2856-44e4-b55c-8e17a90cdccb",
                                                                      new Date(1558018692722L),
                                                                      new Date(1558018684549L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558018685389L), -31,
                                                                      "b260cbb6-ede5-4f37-8035-54502c0f8d67",
                                                                      "3c2501c6-0038-483b-958c-02edaa8cf857",
                                                                      "0eda5653-e191-438f-afa1-c631d28fc6df",
                                                                      "18665bf3-2e16-489b-9e1d-105082da56cf",
                                                                      "9cbde2ab-e662-43ec-897d-71a44bc30b21",
                                                                      "a71add04-4fd6-4d8b-9a82-822be0e1af01",
                                                                      new Date(1558018688219L),
                                                                      new Date(1558018691696L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558018685389L), -31,
                                                                      "b260cbb6-ede5-4f37-8035-54502c0f8d67",
                                                                      "3c2501c6-0038-483b-958c-02edaa8cf857",
                                                                      "0eda5653-e191-438f-afa1-c631d28fc6df",
                                                                      "18665bf3-2e16-489b-9e1d-105082da56cf",
                                                                      "9cbde2ab-e662-43ec-897d-71a44bc30b21",
                                                                      "a71add04-4fd6-4d8b-9a82-822be0e1af01",
                                                                      new Date(1558018688219L),
                                                                      new Date(1558018691696L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1558018684810L), 48,
                                                                 "f071d7cb-117d-4872-ab3f-5e6f1a34a622",
                                                                 "8e3a6975-c00a-4b50-b8ab-2e090dd92f17",
                                                                 "0652836b-9ce5-43bb-ac40-9e1a7a617c50",
                                                                 "c13c2c04-bcfb-4701-9b62-00d110d88491",
                                                                 "2ab9d140-3a46-4b9b-995f-dd319387ca40",
                                                                 "c2992835-f7ad-461b-8a73-77447b11712b",
                                                                 new Date(1558018691529L), new Date(1558018687242L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1558018686138L), -53,
                                                                        "0219b7ab-e695-437a-bd0d-0f99f01d673f",
                                                                        "eecb3528-6f46-4ec4-88e2-43c201e69127ac730950-55f3-48ff-8bd4-dbf9bdc6595530e3c3bb-bb0e-474e-87fb-f018782db5472596352b-149b-45ee-8889-0c15cdd92adfab791e5b-3d95-4371-b2c0-c6114437ae90097e93bb-84d6-4209-b11f-cf4a2c49e8c2231e83e7-f884-42e2-8614-bc5a766433107a113ed7-d5ea-4a2c-b922-02f00dbaf7dc72b12234-bf38-40f4-bc5e-155eed3ac78cfa4278e1-1843-42b2-91c8-4feb31c737fbeaaadd17-7822-4cbd-9306-cbaa5a62046bb1c7b081-6123-4072-81d0-44195b6cb0c054530297-dcf8-4645-b000-e100b074fec7b35e6154-1825-4e39-a2e2-fee96a37aa5589063ba9-7050-43e9-aa1f-a15c8fe908c492c64645-28e5-4fcb-9537-4620f6aa92ef2b915195-c82d-4d92-909c-a53cfc72417132cd60e3-9b53-4f37-92b3-2d6a91bfbb8e72f64252-b5df-4f8a-b72a-59b4b6a8592743a24217-835d-4465-8ac1-43a4813927c099739c93-06e1-4a48-890f-715df84288fd3901fcbe-afc5-4fff-9768-8b7d0516b59befacdff5-e4ea-4949-9594-76ccc0a156a428a72f1e-705c-430a-8b71-25b3b0d65047d7315f09-a000-4f00-8da9-16d960f1f4ed1631fc34-7acc-4905-992f-5980636b17cae68246fe-7882-4caf-83e2-329e224c58e0d0dadb05-bfc7-47b4-a640-77ae1ac8b389fa8a4e83-a76a-4ae2-9802-785ab6db2539945094d3-18a7-4b88-af99-87138b385b9db5bc7d2b-64d4-41a1-bdbe-9c21b5bd9a78815a80f5-f212-4174-9528-06d3689b3bace3dd2e95-f91c-4337-9cf8-ac943c49e2f98aa6f255-26eb-4a03-8081-c976b63382254712fa6d-9faa-4945-934b-38a8a374a06b98b3d4f7-572f-44cd-9546-092d8cea57b914a1645e-22a1-4888-959a-bb86a7297c09f36a79d0-1c15-4d2a-be95-a919e789e85fabf23043-6bef-4bdf-8e11-30260705feee011f7da4-ccad-4479-b587-c23a6260a505155285c2-035b-43cb-bda4-830dc838d27ad072a6d7-2d8a-4618-878c-f5fc2fdfbdc3e404ea3a-ded0-40b5-8d42-e7908086ac02e3839abc-e1f6-4dda-9c00-6588a89ca6d46fa56753-6e87-45c1-8eda-7199f97ef868cee634c8-0a40-4ab6-a102-eede29ed511f60a8a270-b986-4621-91ab-1e65b243854043af8f0b-92c3-46f0-ac66-6f47cbf5112e302d57f7-5668-4b96-b811-e04aba8aeb8ed94fe928-361a-4870-a5b0-5966f8370d7e07d72f02-0fb6-4e01-b94f-8a61e5b9002f812e5cf8-301b-454d-a463-f6f960288ad79d3d7382-73da-47bb-8b86-5c7f70df74c72f280003-db94-4c28-b5ca-a95b92ed12db66ad5dae-4903-4aae-bfd5-31a2ff05cd7578c3b365-279b-46fb-80c8-02d080ce8c8f",
                                                                        "f8a27606-6450-44de-92c5-a638d82cdcfb",
                                                                        "6df07f54-6ff6-4ac4-99d6-893694f57581",
                                                                        "7866f9e9-67f6-4d2d-a541-2f2dff4026c1",
                                                                        "6e7350c9-402a-45cd-9617-3cda16d5f949cff33b81-0e0d-42fc-bf44-4d4a5b52b5b4be698eb1-fde4-43ec-9bcd-159534059748dca11fbf-b0d8-4bad-ad95-86a43bab49b3",
                                                                        new Date(1558018693200L),
                                                                        new Date(1558018683834L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1558018691962L), -93,
                                                                      "19f568f4-dc0b-43e4-9a46-bba70fb4d22e",
                                                                      "c6a85cd6-f02d-4e88-aeeb-dc948bd19464",
                                                                      "5d9069df-ed59-43c8-84ea-d3b715ec9901",
                                                                      "6c5142cc-9fa6-407e-8237-72196ecd768a",
                                                                      "877e2595-6245-4514-8a50-a832c8eb6346",
                                                                      "ffa23ebc-cfc3-41fb-9a12-acfbb6e9c52c",
                                                                      new Date(1558018685547L),
                                                                      new Date(1558018692173L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1558018691962L), -93,
                                                                      "19f568f4-dc0b-43e4-9a46-bba70fb4d22e",
                                                                      "c6a85cd6-f02d-4e88-aeeb-dc948bd19464",
                                                                      "5d9069df-ed59-43c8-84ea-d3b715ec9901",
                                                                      "6c5142cc-9fa6-407e-8237-72196ecd768a",
                                                                      "877e2595-6245-4514-8a50-a832c8eb6346",
                                                                      "ffa23ebc-cfc3-41fb-9a12-acfbb6e9c52c",
                                                                      new Date(1558018685547L),
                                                                      new Date(1558018692173L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1558018687352L), -102,
                                                                      "7bdb30f1-c3c7-4fa0-a051-840c03e2a929",
                                                                      "42d9a269-c950-4416-aeb7-f0ea6fa14fa2",
                                                                      "cca25b39-68fa-4db6-b180-423220824db9",
                                                                      "fc6a753e-446e-4c42-af16-fe10f17cce60",
                                                                      "4a68211d-21ab-4a65-ba49-85e4ad760aa8",
                                                                      "c69631b5-f5fe-4bf3-a482-c49913dd3196",
                                                                      new Date(1558018689978L),
                                                                      new Date(1558018687160L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
