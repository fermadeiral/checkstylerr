// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558018690979L),
                                                                         "519c2c64-2f7e-4372-840e-fbee0467598d",
                                                                         "cfb31e2c-4bb6-41f1-9239-270620c96b45",
                                                                         "dc697895-65b3-459b-b8c4-544ec72228da");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558018685979L),
                                                                         "f119530e-2c3f-4a6b-9b67-da9a829fdacc",
                                                                         "95dea610-4465-434f-8525-4819de9ea896",
                                                                         "6ccf3b28-9b95-45a3-8d8b-3f7a81cb2ec7");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558018685979L),
                                                                         "f119530e-2c3f-4a6b-9b67-da9a829fdacc",
                                                                         "95dea610-4465-434f-8525-4819de9ea896",
                                                                         "6ccf3b28-9b95-45a3-8d8b-3f7a81cb2ec7");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1558018684968L),
                                                                    "5c41471a-28c1-4f72-8196-b312fb9467a1",
                                                                    "e5132dc7-2437-425a-b796-f9fb57bd2c6e",
                                                                    "7621c4d2-9f4f-4f79-8191-62cc0dc1200c");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1558018689098L),
                                                                         "7df9c6ec-6204-457b-ae24-0af4bacb65fc",
                                                                         "78e21f63-53f5-4903-9f7c-b17085d88f6f",
                                                                         "9cac12a7-e3d1-4ef5-a9f7-c62630872818");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1558018689098L),
                                                                         "7df9c6ec-6204-457b-ae24-0af4bacb65fc",
                                                                         "78e21f63-53f5-4903-9f7c-b17085d88f6f",
                                                                         "9cac12a7-e3d1-4ef5-a9f7-c62630872818");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1558018692632L),
                                                                         "7f5abd29-a462-4219-9277-fdf4b9d414cc",
                                                                         "d17767d8-65b2-4210-996e-0a739764d95f",
                                                                         "3e5ac291-475f-44b2-b65d-32789843075d");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
