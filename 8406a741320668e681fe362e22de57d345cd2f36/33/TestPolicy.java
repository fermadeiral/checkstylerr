// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("7a08081a-7f20-44b8-8875-4e6ec1d6d130", false,
                                        "ef594159-ab20-4c77-b0b1-04ad540bb45a", true,
                                        "96127ce3-9271-4ebc-9c63-d902ede51d53");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("e1c60c02-ef31-42b5-9529-fe7dd64127e9", false,
                                        "11aeeb11-92b7-46f6-97fe-2c446e44c940", false,
                                        "3b75af80-41d6-4424-80b7-1c3c7d93894c");
            Policy policy2 = new Policy("e1c60c02-ef31-42b5-9529-fe7dd64127e9", false,
                                        "11aeeb11-92b7-46f6-97fe-2c446e44c940", false,
                                        "3b75af80-41d6-4424-80b7-1c3c7d93894c");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("7cd0862b-d886-4024-b0aa-ac84610ef941", true, "172a6010-15e2-45b1-9e0c-20bd70c0b534",
                                   false, "fe0380c0-77e4-4333-ac0f-7b3ba995dfb7");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("1c5ef981-f9be-4760-aa92-c1a8dfe33806", true,
                                        "4b9fffff-42fa-4599-9426-68729041e812", true,
                                        "93eb3c0a-6391-4a0e-aabe-3d91c815cd7b");
            Policy policy2 = new Policy("1c5ef981-f9be-4760-aa92-c1a8dfe33806", true,
                                        "4b9fffff-42fa-4599-9426-68729041e812", true,
                                        "93eb3c0a-6391-4a0e-aabe-3d91c815cd7b");
            Policy policy3 = new Policy("4f210637-639c-4fcb-bdcc-3fa597d050d7", true,
                                        "2ee58980-19e7-4c40-8bf5-9864adc8ae5b", true,
                                        "e08b2441-f69e-4aa6-b58e-a39e4f80d6e5");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
