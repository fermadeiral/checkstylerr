// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           new Date(1558018693258L),
                                                                                           "a0d43.5bbbc@94ac6.me",
                                                                                           new Date(1558018687472L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           null,
                                                                                           new Date(1558018687025L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           new Date(1558018689204L),
                                                                                           "63c8d.620b3@10f89.me",
                                                                                           new Date(1558018691997L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           null,
                                                                                           new Date(1558018693045L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           new Date(1558018689204L),
                                                                                           "63c8d.620b3@10f89.me",
                                                                                           new Date(1558018691997L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           null,
                                                                                           new Date(1558018693045L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                      new Date(1558018683365L),
                                                                                      "a5237.58ea1@42e1b.fr",
                                                                                      new Date(1558018692750L),
                                                                                      "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                      null, new Date(1558018688314L),
                                                                                      "61c6923c18efbbacbd7af9d6fa2e336c");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1558018684402L),
                                                                                             null,
                                                                                             new Date(1558018690716L),
                                                                                             "\u0016\f,â‚Ÿ$$\u001fä‚Š*4L445544]ë‡œä²­4\tJY'\u001d%ä°¢4é­©C;\u0002(B>\u000fì¯«å¿´?\u0016/ç»³55ç©”á?Ÿ4L5?è«³\u0010ë¿¿55?555@ :H",
                                                                                             null,
                                                                                             new Date(1558018688923L),
                                                                                             "\u0016\f,â‚Ÿ$$\u001fä‚Š*4L445544]ë‡œä²­4\tJY'\u001d%ä°¢4é­©C;\u0002(B>\u000fì¯«å¿´?\u0016/ç»³55ç©”á?Ÿ4L5?è«³\u0010ë¿¿55?555@ :H");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           new Date(1558018687354L),
                                                                                           "01069.04c9f@60fda.fr",
                                                                                           new Date(1558018692842L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           null,
                                                                                           new Date(1558018686335L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           new Date(1558018687354L),
                                                                                           "01069.04c9f@60fda.fr",
                                                                                           new Date(1558018692842L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           null,
                                                                                           new Date(1558018686335L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           new Date(1558018690747L),
                                                                                           "76377.401d8@83e2c.fr",
                                                                                           new Date(1558018689245L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c",
                                                                                           null,
                                                                                           new Date(1558018685556L),
                                                                                           "61c6923c18efbbacbd7af9d6fa2e336c");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
