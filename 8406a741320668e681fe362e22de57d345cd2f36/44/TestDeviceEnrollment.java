// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("8b9f300a-e63a-40d8-adca-34a860f8c24c",
                                                                      new Date(1558018689053L),
                                                                      new Date(1558018689199L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                      "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                      new Date(1558018690389L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("d1e65e8c-3e3c-416d-8798-673a9352bd19",
                                                                      new Date(1558018683687L),
                                                                      new Date(1558018687558L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                      "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                      new Date(1558018688713L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("d1e65e8c-3e3c-416d-8798-673a9352bd19",
                                                                      new Date(1558018683687L),
                                                                      new Date(1558018687558L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                      "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                      new Date(1558018688713L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("6bb37d53-1974-4e1d-93c1-758d7f919267",
                                                                 new Date(1558018687196L), new Date(1558018691557L),
                                                                 "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                 "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                 new Date(1558018686282L),
                                                                 "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("12de8d32-5ecd-4e54-8ee4-2a9be6556ce5",
                                                                        new Date(1558018684681L),
                                                                        new Date(1558018686905L),
                                                                        "ql8%8Wisk_K`onnQNUCKi?f3NK8kRs#aMqWঞk>hsN[⢔2G8QGqkin\u0003n3C?ffZGfUW",
                                                                        null, new Date(1558018684875L),
                                                                        "ql8%8Wisk_K`onnQNUCKi?f3NK8kRs#aMqWঞk>hsN[⢔2G8QGqkin\u0003n3C?ffZGfUW");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("dbc88e23-9078-4e4d-bf48-96421b4b1629",
                                                                      new Date(1558018690622L),
                                                                      new Date(1558018688318L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                      "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                      new Date(1558018688205L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("dbc88e23-9078-4e4d-bf48-96421b4b1629",
                                                                      new Date(1558018690622L),
                                                                      new Date(1558018688318L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                      "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                      new Date(1558018688205L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("841ccbfd-cd9e-4393-97e2-a8dafd50153e",
                                                                      new Date(1558018686190L),
                                                                      new Date(1558018687434L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106",
                                                                      "A-ZWo1JGdl4nx7q659nrY11gs17csU9P8odVI4hc257Zfk8dOBb336UAkTTa::3AhCiv8NN7rqa87tEMiRd2P5Qq3aVkK88kC",
                                                                      new Date(1558018685776L),
                                                                      "pXtmI0g417VPL9O5VjFOjS4jmP79e106");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
