// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                             "fcefeeb6-dac8-421c-b1cb-b91368cc3292",
                                                             new Date(1558018683490L), 119, null,
                                                             "07eea.d52d3@21631.fr", false,
                                                             "2add2f52-9abe-4fe2-bd15-0d32d9aeb31f",
                                                             "61c6923c18efbbacbd7af9d6fa2e336c", false, false, true, -9,
                                                             null, null, "9b02f957-de30-422a-8e1d-81ca8b36741f", 79,
                                                             "a3c0ac5c-d9bf-4d64-9287-bd6e7a1c0efc",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558018690797L), "_.5_=");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                             "63f85b1b-74f4-427b-b64f-6c88ace98173",
                                                             new Date(1558018684306L), 87, null, "e11f4.53ae6@c0701.fr",
                                                             false, "f4c6aa56-aa59-4129-97c6-825150790d4c",
                                                             "61c6923c18efbbacbd7af9d6fa2e336c", false, true, true,
                                                             -100, null, null, "7983a15e-c049-4520-85a5-f74044c1696c",
                                                             -41, "80db8790-4c3a-4b68-a6b5-6bfaa901c1b6",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558018687567L), "_.5_=");
            SubtenantUser subtenantuser2 = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                             "63f85b1b-74f4-427b-b64f-6c88ace98173",
                                                             new Date(1558018684306L), 87, null, "e11f4.53ae6@c0701.fr",
                                                             false, "f4c6aa56-aa59-4129-97c6-825150790d4c",
                                                             "61c6923c18efbbacbd7af9d6fa2e336c", false, true, true,
                                                             -100, null, null, "7983a15e-c049-4520-85a5-f74044c1696c",
                                                             -41, "80db8790-4c3a-4b68-a6b5-6bfaa901c1b6",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558018687567L), "_.5_=");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                        "548d6863-8409-42fa-be00-4c8c32c23aca",
                                                        new Date(1558018691042L), -57, null, "ed2b4.ae8c6@7f53e.fr",
                                                        false, "310203bd-3939-4ae4-8df1-434515377414",
                                                        "61c6923c18efbbacbd7af9d6fa2e336c", false, true, false, -102,
                                                        null, null, "ac3ce6f2-c6c8-4c0a-a42c-965406631629", 98,
                                                        "7e4bc08f-6c99-4143-b0df-680350ea1a56",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1558018684900L), "_.5_=");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "21eaac12-671a-4f00-9c5f-9a5c9f38039d",
                                                               new Date(1558018686823L), 53, null, null, false,
                                                               "d03be33f-6bbc-415b-92ea-5e3f6cfba6149144c8a3-0f88-4393-929f-58665c6bf9bf0ce3bb61-a8cd-4255-9946-a314cb0f6603",
                                                               "\u0016\f,â‚Ÿ$$\u001fä‚Š*4L445544]ë‡œä²­4\tJY'\u001d%ä°¢4é­©C;\u0002(B>\u000fì¯«å¿´?\u0016/ç»³55ç©”á?Ÿ4L5?è«³\u0010ë¿¿55?555@ :H",
                                                               false, true, false, -91, null, null,
                                                               "c7336ee4-3d71-4f2b-9352-e71faf368eb0", 109,
                                                               "76c395db-f3fa-407f-88f1-03a7410b9a727b41b88a-7141-41c8-86c0-0b10218b152c871e44af-478a-43f8-b600-8982371c96ee",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1558018687846L),
                                                               "4á°„171Gê©¶!?;ï?²î¸ N? â¤¡é²°Ü¬3áŸ£:!Y<3\u000b<;\u00177#(9/Èºæ‹ƒ8B\u000038:F\u001164<<,?60!ë¥…Hâ³†I83Wæº¾");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                             "425f3e85-7c91-4f9c-8d36-3c8e093a2496",
                                                             new Date(1558018690222L), 87, null, "5261e.d5165@10250.fr",
                                                             true, "b11cbf43-ee5f-47e0-acc5-e3c1690cd52d",
                                                             "61c6923c18efbbacbd7af9d6fa2e336c", false, false, false,
                                                             111, null, null, "030260da-e8b8-4106-aac5-83807c2e6fae",
                                                             -113, "594b6898-ec72-4a1b-a3b8-5218f92c6fdd",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558018684362L), "_.5_=");
            SubtenantUser subtenantuser2 = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                             "425f3e85-7c91-4f9c-8d36-3c8e093a2496",
                                                             new Date(1558018690222L), 87, null, "5261e.d5165@10250.fr",
                                                             true, "b11cbf43-ee5f-47e0-acc5-e3c1690cd52d",
                                                             "61c6923c18efbbacbd7af9d6fa2e336c", false, false, false,
                                                             111, null, null, "030260da-e8b8-4106-aac5-83807c2e6fae",
                                                             -113, "594b6898-ec72-4a1b-a3b8-5218f92c6fdd",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558018684362L), "_.5_=");
            SubtenantUser subtenantuser3 = new SubtenantUser("61c6923c18efbbacbd7af9d6fa2e336c", null,
                                                             "655034d4-a500-4486-ad16-bbd05eec5c15",
                                                             new Date(1558018692507L), -110, null,
                                                             "c578b.31dfc@8992a.me", true,
                                                             "a3512d1e-491a-43e8-9f42-81c409672fb9",
                                                             "61c6923c18efbbacbd7af9d6fa2e336c", false, false, false,
                                                             -120, null, null, "c6d8c919-4915-4d40-ae0b-f35ba22aa1a3",
                                                             5, "748f8c53-a944-4d64-a0a3-fec53ee212ce",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1558018688772L), "_.5_=");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
