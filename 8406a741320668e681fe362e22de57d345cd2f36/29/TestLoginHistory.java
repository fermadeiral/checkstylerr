// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558018692576L),
                                                          "45067b5d-8dd7-46b8-b0f7-f5b36ddf842a", false,
                                                          "7b5189f9-230e-4881-99b3-9d289b70f9b1");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558018688778L),
                                                          "5e3fc82a-e8e4-4388-9e5c-a498187f8826", true,
                                                          "0adc4f88-a645-4e02-8e79-f53bac03be8e");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558018688778L),
                                                          "5e3fc82a-e8e4-4388-9e5c-a498187f8826", true,
                                                          "0adc4f88-a645-4e02-8e79-f53bac03be8e");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1558018690883L), "df96b272-0aee-4f83-a32d-d9b3cb123540",
                                                     true, "42afff17-420d-4aa8-bee6-f738de38905c");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1558018691845L),
                                                          "7d2154cf-8eab-4fcd-b4ff-b837203e16d5", false,
                                                          "f7fb7fad-8ff7-43e1-b282-104caba5c6ee");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1558018691845L),
                                                          "7d2154cf-8eab-4fcd-b4ff-b837203e16d5", false,
                                                          "f7fb7fad-8ff7-43e1-b282-104caba5c6ee");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1558018692955L),
                                                          "7ec0757a-4d3d-4826-bb9e-20442375f285", false,
                                                          "094dfbe0-7338-48ec-99e8-2a61890abf9f");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
