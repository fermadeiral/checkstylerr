// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantApiKey subtenantapikey1 = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   new Date(1559835554454L), -104,
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   "1a9951e5-08e9-4e49-bab9-59d687607e03", -4,
                                                                   "0cf82bf0-f808-4015-9277-d6ea7f22888f",
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1559835552379L));
            SubtenantApiKey subtenantapikey2 = subtenantapikey1.clone();
            assertNotNull(subtenantapikey1);
            assertNotNull(subtenantapikey2);
            assertNotSame(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantApiKey subtenantapikey1 = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   new Date(1559835554894L), 115,
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   "34c6dc5e-6cbd-4395-84bb-90ddb27f3d41", -41,
                                                                   "d6f8d994-d41c-487e-a532-fac46bc6f17d",
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1559835555039L));
            SubtenantApiKey subtenantapikey2 = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   new Date(1559835554894L), 115,
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   "34c6dc5e-6cbd-4395-84bb-90ddb27f3d41", -41,
                                                                   "d6f8d994-d41c-487e-a532-fac46bc6f17d",
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1559835555039L));
            assertNotNull(subtenantapikey1);
            assertNotNull(subtenantapikey2);
            assertNotSame(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2.hashCode(), subtenantapikey1.hashCode());
            int hashCode = subtenantapikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantapikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantApiKey subtenantapikey = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                              new Date(1559835555600L), 76,
                                                              "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                              "44c8071c-b735-4657-af7c-3e3bdbf2f08d", 106,
                                                              "9faa0730-8293-4155-8e8b-44624bb81f84",
                                                              "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                              SubtenantApiKeyStatus.getDefault(),
                                                              new Date(1559835556032L));
        assertTrue(subtenantapikey.isValid());
        SubtenantApiKey subtenantapikeyInvalid = new SubtenantApiKey(null, new Date(1559835555012L), -68,
                                                                     "8\u001aN8<8\u0014%G⠭888O蘔8U\u000f88888C88B\u001b�?I[\u0018W�?\u001c盙꺋鷷M8&\f\u0005)蜽88TGﾎ8A8$$B➠-8�?�8\u0002\u0002.R",
                                                                     "fdfc564b-41eb-41d0-8189-15a67ec4b148", 117, null,
                                                                     "8\u001aN8<8\u0014%G⠭888O蘔8U\u000f88888C88B\u001b�?I[\u0018W�?\u001c盙꺋鷷M8&\f\u0005)蜽88TGﾎ8A8$$B➠-8�?�8\u0002\u0002.R",
                                                                     SubtenantApiKeyStatus.getDefault(),
                                                                     new Date(1559835551464L));
        assertFalse(subtenantapikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantApiKey subtenantapikey1 = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   new Date(1559835559334L), -99,
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   "44e43dec-2b3f-44ae-9319-1b47e9249b86", -94,
                                                                   "a73c8fcc-d51c-4fc6-9453-0d2f35bff80f",
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1559835552486L));
            SubtenantApiKey subtenantapikey2 = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   new Date(1559835559334L), -99,
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   "44e43dec-2b3f-44ae-9319-1b47e9249b86", -94,
                                                                   "a73c8fcc-d51c-4fc6-9453-0d2f35bff80f",
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1559835552486L));
            SubtenantApiKey subtenantapikey3 = new SubtenantApiKey("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   new Date(1559835560512L), -100,
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   "34651e84-cdad-487d-b765-9647cf0caf72", 123,
                                                                   "cc0d5516-8f09-4161-b626-78c45ba8f233",
                                                                   "a2460a11b07ab6ba3b25a51e92b72dc7",
                                                                   SubtenantApiKeyStatus.getDefault(),
                                                                   new Date(1559835557344L));
            assertNotNull(subtenantapikey1);
            assertNotNull(subtenantapikey2);
            assertNotNull(subtenantapikey3);
            assertNotSame(subtenantapikey2, subtenantapikey1);
            assertNotSame(subtenantapikey3, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey2, subtenantapikey1);
            assertEquals(subtenantapikey1, subtenantapikey2);
            assertEquals(subtenantapikey1, subtenantapikey1);
            assertFalse(subtenantapikey1.equals(null));
            assertNotEquals(subtenantapikey3, subtenantapikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
