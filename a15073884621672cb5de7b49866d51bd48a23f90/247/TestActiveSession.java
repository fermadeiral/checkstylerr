// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                             "87939900-e186-484d-ac95-821c1488eb67",
                                                             new Date(1559835552532L),
                                                             "c819cc7f-b231-484d-8342-8ab36129b855",
                                                             "021bfadf-abd1-4e1d-a105-008050f77873");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                             "f6465c20-5595-4e38-9db2-ef7a9de578b9",
                                                             new Date(1559835555239L),
                                                             "0cbaaba7-7c4f-4fbb-b1cf-026a8277f4bb",
                                                             "f2060e95-b669-4799-a856-7340b1b0cffe");
            ActiveSession activesession2 = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                             "f6465c20-5595-4e38-9db2-ef7a9de578b9",
                                                             new Date(1559835555239L),
                                                             "0cbaaba7-7c4f-4fbb-b1cf-026a8277f4bb",
                                                             "f2060e95-b669-4799-a856-7340b1b0cffe");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                        "7ec243f0-59aa-4c2d-9204-911c82720062",
                                                        new Date(1559835552881L),
                                                        "4b9c7358-35e8-4e3d-a648-64bd5f475ce5",
                                                        "8db839a5-a097-45c8-9691-63400b50880c");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                             "003d4ae6-3fcf-4c91-87c7-4583dd248628",
                                                             new Date(1559835555720L),
                                                             "28afd8b2-983a-4aae-abea-e4dc2d779e31",
                                                             "3d12ea0b-e646-474f-844a-9ff0e30f63c0");
            ActiveSession activesession2 = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                             "003d4ae6-3fcf-4c91-87c7-4583dd248628",
                                                             new Date(1559835555720L),
                                                             "28afd8b2-983a-4aae-abea-e4dc2d779e31",
                                                             "3d12ea0b-e646-474f-844a-9ff0e30f63c0");
            ActiveSession activesession3 = new ActiveSession("a2460a11b07ab6ba3b25a51e92b72dc7",
                                                             "bb58d1da-af9e-4a06-acce-8057b110e511",
                                                             new Date(1559835559349L),
                                                             "7a517202-75d3-46f5-8d0c-95b444e8001a",
                                                             "ac895148-a621-40c6-b3b5-c0beac612716");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
