// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559835559044L), null,
                                                          new Date(1559835556430L),
                                                          "9a4879f2-d60b-47fd-88cc-8438d8b35d26",
                                                          "4b9cb094-cc5a-41b5-b647-07a4617cefc2",
                                                          "e5163d71-1194-4887-bbff-2a613e56df4b",
                                                          "498e0017-bf81-48c8-aa54-597fbc103bbf",
                                                          "a5eac7a5-6b19-4baa-ac02-3a7a64c5afa5",
                                                          "95f2cb64-7a61-4efc-8a9e-cec1442f0645", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559835551720L), null,
                                                          new Date(1559835558657L),
                                                          "54d46d7f-eef2-4ebe-ba89-199cc1544c32",
                                                          "5f6453cd-76b6-4b93-9d83-75a3ff83d970",
                                                          "68e4163c-899c-48e5-901e-6139b9c21330",
                                                          "e8b6899d-5422-4167-8ca6-0878d94919d6",
                                                          "439ce0e6-74c7-4e9b-b233-62e3949e348a",
                                                          "6b7b8ff1-0c18-46bf-9a39-71388461fb31", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1559835551720L), null,
                                                          new Date(1559835558657L),
                                                          "54d46d7f-eef2-4ebe-ba89-199cc1544c32",
                                                          "5f6453cd-76b6-4b93-9d83-75a3ff83d970",
                                                          "68e4163c-899c-48e5-901e-6139b9c21330",
                                                          "e8b6899d-5422-4167-8ca6-0878d94919d6",
                                                          "439ce0e6-74c7-4e9b-b233-62e3949e348a",
                                                          "6b7b8ff1-0c18-46bf-9a39-71388461fb31", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1559835552633L), null, new Date(1559835552920L),
                                                     "8e3165f0-24c7-4249-a1db-799887da1881",
                                                     "57cbb97a-4431-4d89-b0c4-09171a618cf8",
                                                     "1584a642-4b67-4a87-ba84-07ec234bfe00",
                                                     "75b7e498-65c7-4b25-94a1-26306069a7c1",
                                                     "15a81a1d-dfa5-4313-a703-8799d1bbe9be",
                                                     "ba33b8c3-d977-4292-bb90-0440ad499fa7", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1559835557645L), null,
                                                          new Date(1559835557255L),
                                                          "627c10fb-b887-4d9c-8d35-a62affad4b3b",
                                                          "b2d64067-c3ef-467a-a8ff-ca69efc75c58",
                                                          "714742ea-e4da-4e3a-be42-0238a619e723",
                                                          "34b0c6d9-a0cb-4bfd-acf8-05ea13782b17",
                                                          "306cedc0-e1f4-40ba-8b42-7dc5191625b9",
                                                          "cacefe43-438e-45ac-9eab-368612270023", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1559835557645L), null,
                                                          new Date(1559835557255L),
                                                          "627c10fb-b887-4d9c-8d35-a62affad4b3b",
                                                          "b2d64067-c3ef-467a-a8ff-ca69efc75c58",
                                                          "714742ea-e4da-4e3a-be42-0238a619e723",
                                                          "34b0c6d9-a0cb-4bfd-acf8-05ea13782b17",
                                                          "306cedc0-e1f4-40ba-8b42-7dc5191625b9",
                                                          "cacefe43-438e-45ac-9eab-368612270023", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1559835559245L), null,
                                                          new Date(1559835551551L),
                                                          "e53ac3e5-2306-47f7-84be-1b1d204a802d",
                                                          "41768842-aca6-4b6d-81f9-6d1ffbc5efe6",
                                                          "c737e85d-6fe7-4839-ac8c-3ef78f1b698f",
                                                          "a506c353-9709-4002-8fcb-cbcaf57da2aa",
                                                          "f97ab394-db05-4be0-861e-02e6d406440c",
                                                          "ca593e8b-8e4f-4a19-b0e8-0b134935f3e3", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
