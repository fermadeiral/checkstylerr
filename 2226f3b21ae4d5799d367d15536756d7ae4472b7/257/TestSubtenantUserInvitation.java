// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           new Date(1559762579854L),
                                                                                           "48295.1ef58@25410.fr",
                                                                                           new Date(1559762582402L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           null,
                                                                                           new Date(1559762578520L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           new Date(1559762573975L),
                                                                                           "b39c3.74546@059d6.fr",
                                                                                           new Date(1559762575525L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           null,
                                                                                           new Date(1559762577578L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           new Date(1559762573975L),
                                                                                           "b39c3.74546@059d6.fr",
                                                                                           new Date(1559762575525L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           null,
                                                                                           new Date(1559762577578L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                      new Date(1559762575858L),
                                                                                      "99b41.edcd0@701f9.me",
                                                                                      new Date(1559762572981L),
                                                                                      "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                      null, new Date(1559762574716L),
                                                                                      "4adee5e374fd8e0cf4a09b2e4c7a53cc");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559762580686L),
                                                                                             null,
                                                                                             new Date(1559762581704L),
                                                                                             "Nᄞ1FS1?1Z6I6ꨲ661P#꘲觊毚J؟1䚑\u000211⹥1NF\u0005<6俈166AX1@G6\u0001K6#+-典6칷\u000566핚1(1_1\t",
                                                                                             null,
                                                                                             new Date(1559762576182L),
                                                                                             "Nᄞ1FS1?1Z6I6ꨲ661P#꘲觊毚J؟1䚑\u000211⹥1NF\u0005<6俈166AX1@G6\u0001K6#+-典6칷\u000566핚1(1_1\t");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           new Date(1559762572828L),
                                                                                           "1c27b.309fc@b45dd.fr",
                                                                                           new Date(1559762577374L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           null,
                                                                                           new Date(1559762581728L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           new Date(1559762572828L),
                                                                                           "1c27b.309fc@b45dd.fr",
                                                                                           new Date(1559762577374L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           null,
                                                                                           new Date(1559762581728L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           new Date(1559762573740L),
                                                                                           "a5b3d.4aadc@19352.fr",
                                                                                           new Date(1559762574360L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                           null,
                                                                                           new Date(1559762574200L),
                                                                                           "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
