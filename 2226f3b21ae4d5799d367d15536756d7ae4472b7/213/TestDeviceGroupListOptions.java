// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(119),
                                                                                        Long.valueOf(-70),
                                                                                        Order.getDefault(),
                                                                                        "991903c3-11e5-479e-9747-634761661bb6",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1559762583955L),
                                                                                                    new Date(1559762576588L),
                                                                                                    new Date(1559762576257L),
                                                                                                    new Date(1559762575673L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1559762581747L),
                                                                                                       new Date(1559762576686L),
                                                                                                       new Date(1559762579606L),
                                                                                                       new Date(1559762578851L),
                                                                                                       new Date(1559762582988L)))
                                                                        .lessThanUpdatedAt(new Date(1559762578545L))
                                                                        .greaterThanUpdatedAt(new Date(1559762574525L))
                                                                        .equalToName("92183e05-841d-4075-b2aa-28fda0c8dae9")
                                                                        .notEqualToName("0090f6ca-b079-47b4-bee4-be342a9f4c52")
                                                                        .inNames(Arrays.asList("66da701a-8176-48be-88f4-0b3b8d1add98",
                                                                                               "5a0ba10f-dd22-4b98-a565-b34849825c2e"))
                                                                        .notInNames(Arrays.asList("e54f32ce-7a9d-4b69-9d2d-a1efb10ff408",
                                                                                                  "26179556-85fa-4fad-8d90-11f72f05d43e",
                                                                                                  "f7d07fdb-5311-4f36-bb0d-c4df14ce36c5",
                                                                                                  "f448c868-ba9c-455b-a5ab-05f928c3047d",
                                                                                                  "329e2c48-3951-45b5-83c0-cb8cabb8c8b3"))
                                                                        .equalToDevicesCount(Integer.valueOf(-67))
                                                                        .notEqualToDevicesCount(Integer.valueOf(-46))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(80),
                                                                                                       Integer.valueOf(-70),
                                                                                                       Integer.valueOf(-38)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(36),
                                                                                                          Integer.valueOf(-73),
                                                                                                          Integer.valueOf(-33),
                                                                                                          Integer.valueOf(-29),
                                                                                                          Integer.valueOf(15),
                                                                                                          Integer.valueOf(-21),
                                                                                                          Integer.valueOf(-105)))
                                                                        .lessThanDevicesCount(Integer.valueOf(122))
                                                                        .greaterThanDevicesCount(Integer.valueOf(36))
                                                                        .inCreatedAts(Arrays.asList(new Date(1559762575071L),
                                                                                                    new Date(1559762582926L),
                                                                                                    new Date(1559762577079L),
                                                                                                    new Date(1559762580809L),
                                                                                                    new Date(1559762580144L),
                                                                                                    new Date(1559762579146L),
                                                                                                    new Date(1559762583297L),
                                                                                                    new Date(1559762579114L),
                                                                                                    new Date(1559762583709L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1559762578493L)))
                                                                        .lessThanCreatedAt(new Date(1559762581801L))
                                                                        .greaterThanCreatedAt(new Date(1559762584194L))
                                                                        .equalToId("07a04d86-21f2-407f-8efd-cd3bcf5bb8e5")
                                                                        .notEqualToId("fbe04432-d02d-4953-992a-6bc1b9ad166c")
                                                                        .inIds(Arrays.asList("2dbc9556-3553-4dfb-b610-ace9829cf6d6",
                                                                                             "3863a3d1-146a-4eb2-92fa-01ec6fd81648",
                                                                                             "7ce87257-c6d3-4f4f-be98-b3cc9bf99b0b",
                                                                                             "7f5a7d0a-675b-4735-9b98-cbf78093c2ab",
                                                                                             "7d14e560-eaee-4523-a46e-1a704a92a7ed",
                                                                                             "f08285a0-80ca-4bfb-916f-0e4b77f364fe",
                                                                                             "995cfbdf-228d-4e32-85fa-253342bf41ba",
                                                                                             "aee0be41-d65c-4657-986a-01cfa3455445",
                                                                                             "290e5b47-159d-4ef3-b841-636b25efcff4"))
                                                                        .notInIds(Arrays.asList("2702171b-1d3b-45c8-8af3-b7901dc3eed1"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559762583955L), new Date(1559762576588L), new Date(1559762576257L),
                                       new Date(1559762575673L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559762581747L), new Date(1559762576686L), new Date(1559762579606L),
                                       new Date(1559762578851L), new Date(1559762582988L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559762578545L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1559762574525L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("92183e05-841d-4075-b2aa-28fda0c8dae9",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("0090f6ca-b079-47b4-bee4-be342a9f4c52",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("66da701a-8176-48be-88f4-0b3b8d1add98", "5a0ba10f-dd22-4b98-a565-b34849825c2e"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("e54f32ce-7a9d-4b69-9d2d-a1efb10ff408", "26179556-85fa-4fad-8d90-11f72f05d43e",
                                       "f7d07fdb-5311-4f36-bb0d-c4df14ce36c5", "f448c868-ba9c-455b-a5ab-05f928c3047d",
                                       "329e2c48-3951-45b5-83c0-cb8cabb8c8b3"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-67),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-46),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(80), Integer.valueOf(-70), Integer.valueOf(-38)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(36), Integer.valueOf(-73), Integer.valueOf(-33),
                                       Integer.valueOf(-29), Integer.valueOf(15), Integer.valueOf(-21),
                                       Integer.valueOf(-105)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(122),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(36),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559762575071L), new Date(1559762582926L), new Date(1559762577079L),
                                       new Date(1559762580809L), new Date(1559762580144L), new Date(1559762579146L),
                                       new Date(1559762583297L), new Date(1559762579114L), new Date(1559762583709L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1559762578493L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559762581801L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1559762584194L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("07a04d86-21f2-407f-8efd-cd3bcf5bb8e5",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("fbe04432-d02d-4953-992a-6bc1b9ad166c",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("2dbc9556-3553-4dfb-b610-ace9829cf6d6", "3863a3d1-146a-4eb2-92fa-01ec6fd81648",
                                       "7ce87257-c6d3-4f4f-be98-b3cc9bf99b0b", "7f5a7d0a-675b-4735-9b98-cbf78093c2ab",
                                       "7d14e560-eaee-4523-a46e-1a704a92a7ed", "f08285a0-80ca-4bfb-916f-0e4b77f364fe",
                                       "995cfbdf-228d-4e32-85fa-253342bf41ba", "aee0be41-d65c-4657-986a-01cfa3455445",
                                       "290e5b47-159d-4ef3-b841-636b25efcff4"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("2702171b-1d3b-45c8-8af3-b7901dc3eed1"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-87),
                                                                                        Long.valueOf(26),
                                                                                        Order.getDefault(),
                                                                                        "875bc0eb-6a3d-471b-9053-856fbae84d88",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-87),
                                                                                        Long.valueOf(26),
                                                                                        Order.getDefault(),
                                                                                        "875bc0eb-6a3d-471b-9053-856fbae84d88",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-119),
                                                                                        Long.valueOf(99),
                                                                                        Order.getDefault(),
                                                                                        "6166ca9a-f1ae-4ad3-9527-7a17650c1d95",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-119),
                                                                                        Long.valueOf(99),
                                                                                        Order.getDefault(),
                                                                                        "6166ca9a-f1ae-4ad3-9527-7a17650c1d95",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(116),
                                                                                        Long.valueOf(-17),
                                                                                        Order.getDefault(),
                                                                                        "7501172c-0dd8-457e-b816-1bd6388b02de",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
