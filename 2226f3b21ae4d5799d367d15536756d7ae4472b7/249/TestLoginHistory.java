// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559762576977L),
                                                          "f7f51238-bdb9-4d6e-b758-7189608e5779", false,
                                                          "082849c7-0733-4a92-9ef6-cf0ecc44a0a4");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559762579356L),
                                                          "b74908b5-c4e7-4dc3-a920-d1ca4cdc9f55", false,
                                                          "f21f7394-bfea-441e-b52a-dff2e9fb8974");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559762579356L),
                                                          "b74908b5-c4e7-4dc3-a920-d1ca4cdc9f55", false,
                                                          "f21f7394-bfea-441e-b52a-dff2e9fb8974");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559762572743L), "0724878e-4a35-4999-b46c-8da4818b6961",
                                                     false, "ec7344db-0988-418b-85a1-b19d6cff2cf0");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559762574712L),
                                                          "3fb9c5bb-7c2f-40f9-ad21-80be485e3098", false,
                                                          "4fb7067f-0997-4262-b9f9-7dd47f9ab5ec");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559762574712L),
                                                          "3fb9c5bb-7c2f-40f9-ad21-80be485e3098", false,
                                                          "4fb7067f-0997-4262-b9f9-7dd47f9ab5ec");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559762574071L),
                                                          "d8a9f933-6029-4dc4-9ee2-42379912c8a1", false,
                                                          "68c12fcb-91af-46e4-b8ef-d75c5c6fbf45");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
