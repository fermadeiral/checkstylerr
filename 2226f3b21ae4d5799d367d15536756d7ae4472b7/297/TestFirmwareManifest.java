// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559762581047L), -33,
                                                                      "256f8ffb-2b01-43dd-ac3b-6ac488024732",
                                                                      "e7609756-3c56-4ef5-8073-1ccb01327a38",
                                                                      "d37a823e-c1fd-4e9d-817d-6ada1125965a",
                                                                      "bbb4f7dd-0ff8-460a-b4ec-21d178e6305a",
                                                                      "0fbf5c67-60d6-41d0-9a9b-e1d36f797b02",
                                                                      "faf2352c-303c-46b2-8c7b-845afe50b560",
                                                                      new Date(1559762574185L),
                                                                      new Date(1559762573294L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559762576012L), -2,
                                                                      "76b864c6-0530-477d-ba92-8eb4246e7307",
                                                                      "c02d6d79-5905-420d-b5c0-6fe2b77a16a0",
                                                                      "8fa89736-a795-43f6-9643-baf148714ae8",
                                                                      "b642848b-fbe7-4d12-8e7f-ae6258f3ca7f",
                                                                      "a5885eef-f698-4773-aae7-26d17b38f1fe",
                                                                      "89b2b78d-03e0-455f-8bbb-639bcbdc4127",
                                                                      new Date(1559762577100L),
                                                                      new Date(1559762581244L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559762576012L), -2,
                                                                      "76b864c6-0530-477d-ba92-8eb4246e7307",
                                                                      "c02d6d79-5905-420d-b5c0-6fe2b77a16a0",
                                                                      "8fa89736-a795-43f6-9643-baf148714ae8",
                                                                      "b642848b-fbe7-4d12-8e7f-ae6258f3ca7f",
                                                                      "a5885eef-f698-4773-aae7-26d17b38f1fe",
                                                                      "89b2b78d-03e0-455f-8bbb-639bcbdc4127",
                                                                      new Date(1559762577100L),
                                                                      new Date(1559762581244L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559762574446L), 37,
                                                                 "5aa9d3be-8c76-4678-98e2-ae94b2c2adaf",
                                                                 "37e16414-d5fc-413c-82bd-ff8c59288fd3",
                                                                 "73164a82-0623-478b-9f26-0057161409e0",
                                                                 "f7919a78-4801-4b80-ba1c-fd0a154c0562",
                                                                 "9876bd5f-b034-4fae-9642-ecba875edee5",
                                                                 "ef61d1bb-57fb-4959-9e6c-7e17e0cebecd",
                                                                 new Date(1559762574321L), new Date(1559762575486L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559762576718L), 44,
                                                                        "ded6e58c-99ac-4839-9b30-09b3cddc08e4",
                                                                        "87616d77-b175-4151-88a9-ddfc871c477d8253f3a1-3549-4097-a721-b3d349e265ebfbe6226d-9dac-4762-bc1e-8d848368302708b6b5da-8f61-41a8-a55a-cc2e4d137c1a023f5d37-bd13-4bd8-8dde-3f84aabf9b8a4119cbdc-d842-4080-b5f5-7c05db83322ab649575c-668b-4832-bba7-95f89ffef535408579c5-a8c0-48c2-b258-4b63972d409460519a28-eed5-42b0-8aab-4ecf92ad1f57cf6382e7-2b2d-424a-b7df-3ebef171ea6768a92588-9044-4d92-9a02-108edf03516d1f76655a-08e6-4d42-a395-905df03a57579595c776-fc6f-4dea-ade5-6dc1f99bfcbca66cb180-e698-4752-87d8-d911d0776771cc120c73-2d70-44dc-b901-a303f42819a62d3bd7fd-0874-425b-a713-d5c0872814061cbf20fd-3fcd-4c83-942e-ad0ebf8e6a88939369d1-4635-4995-af17-2c76f3ef7e91e61ae879-19fc-4190-acfd-a2d8c6af5a6217ea5cfc-6d80-4906-854e-6fc8f61e80b13a230b24-ddc3-4ef8-8306-dda7cdea8251eb72f9b0-4d99-45cf-aa42-872952c38f6799c5566e-00fc-4ff6-8bc9-bd056eea69867ce7d80f-59e9-4301-ba8f-57f5efd855b1e5f4af35-d247-4a1f-ab40-b0f755298b79f8aa8a03-490b-4c34-bf1a-ed7ebced0bbed12b42b5-caac-4267-a96f-e1a1338a857c0b362c20-1101-468d-82ae-0b93c349917c54d9c07b-0112-4fd7-a844-4ea8e7d991382d65402a-fb48-4459-a3d5-0c69958ccf973811186d-bc88-445a-87f8-e6dc713822113589717d-737a-44bf-9bcd-b6bdde8a7aab1ce2ca6c-159b-4d64-8037-2726bd8a922c98162a08-b3d3-45bd-bd19-5f829232d5d91d8ba820-4cc2-464c-9632-5d25f5481acd7f8c8087-abfd-4afd-81bf-1090d2a54aaf7632baf0-8ffc-435a-91d9-947d96c1b1c01dd0ad5c-f64d-41de-9cc5-d17c62f52d2dd085ce9b-7c3b-467f-b5a9-3a69cf73e88d88154c33-10c5-4516-a593-b5f910f0d4a190f688dc-63e5-437d-9118-4450634ad2d26a201fac-fd6c-45a1-9825-792214fd896ef833e907-de78-4428-8272-fa529a16422e5d671591-be52-4363-939c-6a852f138da1282bd4d6-6b8c-4af5-a35b-569694f69b8e6b4d9fd6-35aa-47f4-8cdb-5e14ca533fc0642d42e3-4a10-4d9a-8d5c-5787ba713227e4380da6-afb6-4c46-b694-53a7bc22ad2581fc2f7e-4dee-4f12-b796-657af9f9c0fb4ef6c677-9ff2-453d-8d20-5418ed7addf0c69caa4a-716c-4a95-b6dd-2f468aecd59b00ac5e45-35bc-4bfe-9660-11627d52d73d8f370486-0cc7-44c0-8d97-4ecc2a6e1a98796408ab-8741-40e6-b1d8-60791b5985d5fc2f6140-050f-4f59-91a3-0afe09bfff1f34b012e7-00ed-4b9d-86c7-4ddb6dde4c1d",
                                                                        "3209a5de-41d4-4513-a85e-8313eb03ba87",
                                                                        "5e7e0a5c-20d4-4d11-bfe6-74034d3c32b6",
                                                                        "18a6a771-900d-4a0b-86f5-cbe7756c5f7f",
                                                                        "c5663901-3d50-4d4d-849b-1152eb2da3a0ec27d99d-e06c-4922-b939-5d6bf2f91db257ff0f6f-d444-4c84-8bc9-91dc1b67007a431ec279-0334-4ddd-a1e8-ee5c688af431",
                                                                        new Date(1559762576201L),
                                                                        new Date(1559762581736L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559762573617L), -48,
                                                                      "856c47ca-7bff-438a-b6f8-f66b84f9c963",
                                                                      "5b0d7f34-5b9a-4f3d-b097-a1aa6cd993ef",
                                                                      "4828c997-4cc2-48d5-b2da-aeb49e1834eb",
                                                                      "1e00df0a-a5c5-41db-a3be-2934766eca78",
                                                                      "ebb4808e-b59d-44e1-83e0-1278e3039976",
                                                                      "1be510f7-3d3b-4825-8b92-818aa2cfc4a8",
                                                                      new Date(1559762575928L),
                                                                      new Date(1559762579959L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559762573617L), -48,
                                                                      "856c47ca-7bff-438a-b6f8-f66b84f9c963",
                                                                      "5b0d7f34-5b9a-4f3d-b097-a1aa6cd993ef",
                                                                      "4828c997-4cc2-48d5-b2da-aeb49e1834eb",
                                                                      "1e00df0a-a5c5-41db-a3be-2934766eca78",
                                                                      "ebb4808e-b59d-44e1-83e0-1278e3039976",
                                                                      "1be510f7-3d3b-4825-8b92-818aa2cfc4a8",
                                                                      new Date(1559762575928L),
                                                                      new Date(1559762579959L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559762573470L), 76,
                                                                      "f0270ba7-5079-42ca-a3ae-e393eed470f5",
                                                                      "e43cd5a5-41a7-4576-ba60-df2b7c5fcd80",
                                                                      "ec2254e2-d7a1-4a1e-8520-4750623f990a",
                                                                      "590b816e-a547-489e-982d-441689771dab",
                                                                      "fe2ee425-e7bc-41a8-8137-c5a18bd3ae5f",
                                                                      "79ce77d5-79e4-410d-825d-748cff471d83",
                                                                      new Date(1559762574181L),
                                                                      new Date(1559762573696L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
