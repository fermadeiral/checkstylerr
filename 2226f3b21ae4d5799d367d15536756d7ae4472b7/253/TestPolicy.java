// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("1fe781c2-26d3-48e1-ab41-5f273c96f5cd", false,
                                        "04dee54a-6b99-4711-b1eb-1a01dd5424d9", false,
                                        "bcd549b1-fc4b-42bd-9e3f-0ac7f6c631d4");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("e03acb6e-a6b9-4173-b368-0c5dd9a9533a", false,
                                        "72255071-bb81-43b5-8d37-c11108f1579e", true,
                                        "14840b00-c04f-4616-97b4-28cd962e5232");
            Policy policy2 = new Policy("e03acb6e-a6b9-4173-b368-0c5dd9a9533a", false,
                                        "72255071-bb81-43b5-8d37-c11108f1579e", true,
                                        "14840b00-c04f-4616-97b4-28cd962e5232");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("65ff3c5e-ddc6-41bc-9c18-8bf1ab780c39", false,
                                   "76f4b2b6-51d6-4b05-91e2-b3b6adbc2413", true,
                                   "046fb47a-8a04-4b81-9fbd-0537fca62c0d");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("0d1f8c01-99b3-417a-8e2d-a2e577dcb6f8", true,
                                        "7b2f0cdb-de95-4eee-ae37-291e8188eac4", false,
                                        "bbdda25d-8427-4349-be53-a2e6adea4044");
            Policy policy2 = new Policy("0d1f8c01-99b3-417a-8e2d-a2e577dcb6f8", true,
                                        "7b2f0cdb-de95-4eee-ae37-291e8188eac4", false,
                                        "bbdda25d-8427-4349-be53-a2e6adea4044");
            Policy policy3 = new Policy("20c60dfd-60e3-46c1-b5c4-611aa551e5dd", true,
                                        "0e16b85c-e3fa-4815-bc54-357e95f023fb", false,
                                        "4813211f-9fc8-4ce8-8cd1-c36a6c1d5246");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
