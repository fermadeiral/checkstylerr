// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        new Date(1559762582036L),
                                                                                        "acdf374e-420b-4845-9f24-7b382b9d7e9f",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        new Date(1559762582157L),
                                                                                        "353318c5-bd30-49e0-b418-496b97877eaf",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        new Date(1559762582157L),
                                                                                        "353318c5-bd30-49e0-b418-496b97877eaf",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                   new Date(1559762575223L),
                                                                                   "82197aa1-3b41-4804-9f7c-c7274f3efcc3",
                                                                                   "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                   "4adee5e374fd8e0cf4a09b2e4c7a53cc");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("Nᄞ1FS1?1Z6I6ꨲ661P#꘲觊毚J؟1䚑\u000211⹥1NF\u0005<6俈166AX1@G6\u0001K6#+-典6칷\u000566핚1(1_1\t",
                                                                                          new Date(1559762581029L),
                                                                                          "8c16a321-8bb7-48bf-a85a-eef27693429f",
                                                                                          "Nᄞ1FS1?1Z6I6ꨲ661P#꘲觊毚J؟1䚑\u000211⹥1NF\u0005<6俈166AX1@G6\u0001K6#+-典6칷\u000566핚1(1_1\t",
                                                                                          "Nᄞ1FS1?1Z6I6ꨲ661P#꘲觊毚J؟1䚑\u000211⹥1NF\u0005<6俈166AX1@G6\u0001K6#+-典6칷\u000566핚1(1_1\t");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        new Date(1559762575660L),
                                                                                        "2b68666f-e63a-4595-9510-f3d1655e40a4",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        new Date(1559762575660L),
                                                                                        "2b68666f-e63a-4595-9510-f3d1655e40a4",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        new Date(1559762582139L),
                                                                                        "b009aa80-0e97-41e7-a2fd-5bcbdf77e20d",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc",
                                                                                        "4adee5e374fd8e0cf4a09b2e4c7a53cc");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
