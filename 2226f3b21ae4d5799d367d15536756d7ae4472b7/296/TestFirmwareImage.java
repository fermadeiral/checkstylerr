// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559762580401L),
                                                             "43d5abb8-8687-4306-9662-9025f5e41e6a", -48,
                                                             "32b9c6a1-7a3c-4da0-9e0e-8d636a427cbc",
                                                             "b1664e47-586c-4db1-a5d3-ef81079c6a7d",
                                                             "674404d0-c85e-453b-adf6-f5636c2f6fb7",
                                                             "48814ac6-33e8-487b-981b-803adeedacda",
                                                             new Date(1559762581234L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559762581139L),
                                                             "e01f5c0d-3c8d-4c64-aa34-7e9f02939605", 54,
                                                             "03ad7c20-debb-4a48-bfd3-45ade52aae99",
                                                             "6764f9e0-4c9c-4b54-ba27-f90408d5fc2d",
                                                             "ecf217ab-e1ec-4d99-bd37-f3789dccfdc2",
                                                             "07e31bad-4ffc-4dd1-aeec-6e6e3f0a8b54",
                                                             new Date(1559762582331L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559762581139L),
                                                             "e01f5c0d-3c8d-4c64-aa34-7e9f02939605", 54,
                                                             "03ad7c20-debb-4a48-bfd3-45ade52aae99",
                                                             "6764f9e0-4c9c-4b54-ba27-f90408d5fc2d",
                                                             "ecf217ab-e1ec-4d99-bd37-f3789dccfdc2",
                                                             "07e31bad-4ffc-4dd1-aeec-6e6e3f0a8b54",
                                                             new Date(1559762582331L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1559762574032L),
                                                        "278973ac-98d2-47e3-a5b4-76c1758ff6c8", 52,
                                                        "6841422c-345e-42ca-b63d-801b0fca1bc8",
                                                        "1cc6a906-ef45-4876-b156-b6db1980e858",
                                                        "8c8423f0-5191-45e8-a9f8-e14a4bb1f44c",
                                                        "7528f2f8-3e14-4de3-9d0f-2000fe9eea54",
                                                        new Date(1559762572932L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1559762574351L),
                                                               "cb805160-7d77-4b8e-82bc-744394c23d5a", 39,
                                                               "c1a57c3b-d24c-4647-a2aa-30e23c327186",
                                                               "2283711b-6b0c-4e7d-b36e-496ce673c8c34ccb8172-6d49-4152-93b2-7272eb009e536c22a336-ab26-4254-8dde-7dcac9e65d83b32dcaa2-40a4-48c4-99e0-03616859faa264c5cde9-5925-47a0-80cf-ed7eadb79b673d04d3ef-6e75-4f62-a77b-187eaae71d694ec8c9df-5f16-475c-b065-bc148756dc584c2e38db-c88e-41e5-b8d6-81eeea2d4fdda74c9d11-8ffd-4227-8f06-71ad72f276be802cdfc4-6027-4227-a797-07c6066d56cdbe968a6e-3e7b-47ae-ae65-efb500303c29efb3730b-6d86-4bc0-aab2-00fca1e623548d10ee1c-36bc-4cab-b6a1-ab0c23e45c0af6c457cb-d647-4b9b-850f-966338598357d44e1852-5b3c-43d7-88e7-f614a06de0c12b08692f-5cda-4667-91ce-251b3db90f886e273f01-b7ec-431a-ae6c-adf9b70379697e65f3ab-c669-4d39-a946-9e0e0f182ed43ed40762-499d-40c9-afc3-d74fe561fd532d74183c-19b4-4fbf-b356-d911829967bb547e3061-27b6-4c27-affa-2d67cc9df0fb3017af6c-98cc-4075-99c5-ca29f69f08b30f9f60df-9837-40ec-9b60-2434a914682884357bad-8de4-407d-bec6-4b4938d687afdd21f387-36f2-4385-a975-3ea4456241a5d1349d88-d000-4ac0-ba4a-cd7a13b6cc7dce094462-a3db-4f70-ad90-f914fd41863c02c437bc-01bf-4b50-8617-2932d4e9d2cb6f51cf3f-d77e-41b9-8cb6-740f0d25e6cb145df5a8-80bc-40db-a1f9-3c717584fbe4bad1dddc-777d-4019-b700-96b0558a0beb3e31e278-cf29-4e0f-aaf5-816284e207a6c6a1df0f-1aa6-4763-97d8-01d4a3ffa3e85267c216-3a10-4dbd-bb13-ac03ad416cca86f862c5-1d70-4b0f-954c-4ff17fdfe104259333f1-e2cb-445e-b4be-cdedd5a4f63c8068535d-aadd-4a10-84b6-a2615699fbeb1a025446-11f0-4f30-86d1-4a6103d0aeb298bfa807-5baa-4f69-a636-5c7322769ee23ea265a4-2ce3-41da-95ca-7dd8b4df46fea4c92dc5-9bd4-49e9-808c-6b7f2a475c9de1c79236-e197-4454-bfc4-61ac3287f0e70bf3f148-e3be-4434-9939-a92099e92ec3a19b21d4-8741-479a-9b98-814fbda8126df0123a53-1805-4878-947f-434698c3bbea78f0155d-a61d-4158-977e-223dce08e90f74208767-09c6-4877-a09c-f5daffcb399ba5d0c829-abfb-4cd2-96d9-fd9e6a73624d12e84fe4-f9c5-4a61-aec3-88335864d9b6ecdec333-549c-40e1-be4c-94af369182b317d57804-f0f3-454b-8926-803f47c4284300ada32d-892c-4451-9bbe-945c53afe8a313325cc9-5174-46be-899e-72df4445cf768e05dda4-763a-4476-8001-8c3c47659d6c9dbd29fb-d6d6-4801-a2c3-fed98bedf96251f45111-bf30-4ad7-b235-214f6bd4e600",
                                                               "95a78bb6-a80a-45c9-8725-d03c42602ab7",
                                                               "5bfd1e7c-3eb9-4c82-9410-76613abccac621345e69-8411-497c-be36-7cae72ba99a4475699f3-c8a8-4e8b-a494-a8ed5fce443b0a5e76ea-e3fb-4b44-8025-77a8bf34e360",
                                                               new Date(1559762574041L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1559762574073L),
                                                             "7dc3ee45-9731-4706-9128-6d71769fea65", 37,
                                                             "52719606-8404-45ab-9372-d9e5ef29d328",
                                                             "20972a6f-6349-4960-825d-5e8fe77904a8",
                                                             "2fb30b98-14ac-4c53-a6c8-83454db79466",
                                                             "7620812a-d288-4c18-957b-820cb0e865c9",
                                                             new Date(1559762579488L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1559762574073L),
                                                             "7dc3ee45-9731-4706-9128-6d71769fea65", 37,
                                                             "52719606-8404-45ab-9372-d9e5ef29d328",
                                                             "20972a6f-6349-4960-825d-5e8fe77904a8",
                                                             "2fb30b98-14ac-4c53-a6c8-83454db79466",
                                                             "7620812a-d288-4c18-957b-820cb0e865c9",
                                                             new Date(1559762579488L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1559762579066L),
                                                             "888217d5-fb98-4a81-a89a-e1b8dda6464f", -95,
                                                             "6b9d9aa7-59c7-44ce-ae48-451cad611c09",
                                                             "30c02245-2d1d-4ddc-80d8-73f59cf7058a",
                                                             "b1787c8c-968d-49f4-ae6e-0e7528120c61",
                                                             "25631e64-0150-4393-9c53-8306ca63ed1e",
                                                             new Date(1559762580868L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
