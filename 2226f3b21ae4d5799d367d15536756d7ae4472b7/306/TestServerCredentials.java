// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559762581621L),
                                                                         "54a1eada-26c8-4525-8cf8-f0449fe8539f",
                                                                         "a602967d-cb43-4be6-ab19-aed1f2d8340f",
                                                                         "2be28e1c-e4c9-4dad-b8da-2811e16ac0af");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559762575081L),
                                                                         "7c9d1dd4-5ca0-4e60-9ed5-5e8a21afcca7",
                                                                         "eb10a38b-8b19-44df-998f-3e98c2221a03",
                                                                         "cedaacd2-285d-4727-8fbc-ac67d091bb47");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559762575081L),
                                                                         "7c9d1dd4-5ca0-4e60-9ed5-5e8a21afcca7",
                                                                         "eb10a38b-8b19-44df-998f-3e98c2221a03",
                                                                         "cedaacd2-285d-4727-8fbc-ac67d091bb47");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559762576910L),
                                                                    "12b0d28e-b392-4454-bbd8-256c0de4c58f",
                                                                    "750abd4f-8563-40a3-b64d-a173ac65eafb",
                                                                    "69a2917d-750a-4654-80d9-8d3a7582ada5");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559762582546L),
                                                                         "32ecaf62-5e28-46ab-9c7c-fbd799200c2e",
                                                                         "e013a07f-74d9-4cd8-a799-c92734fcd53e",
                                                                         "ca03d869-3515-4ac5-8b86-16a362ae5d35");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559762582546L),
                                                                         "32ecaf62-5e28-46ab-9c7c-fbd799200c2e",
                                                                         "e013a07f-74d9-4cd8-a799-c92734fcd53e",
                                                                         "ca03d869-3515-4ac5-8b86-16a362ae5d35");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559762582168L),
                                                                         "d29eb3f7-5c18-4632-84c3-798a58667a30",
                                                                         "d24fae2e-fdc6-4d55-93fc-a401984de39c",
                                                                         "ea25e223-50f2-4ad5-9bd5-588deb2adf83");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
