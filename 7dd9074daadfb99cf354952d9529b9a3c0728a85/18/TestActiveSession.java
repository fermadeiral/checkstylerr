// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("bd655f27-19d5-4ed0-8849-ff06efc1c675",
                                                             "8827cb40-54f5-4219-a46d-11f2bc56af06",
                                                             new Date(1553795411977L),
                                                             "104ed6cc-0093-4ae3-9664-bf9d523321b3",
                                                             "f1c57726-1d12-4ce1-b154-5298c35b54dc");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("17a0c067-f6d7-4c1b-a9c7-49da1d50fd65",
                                                             "189eb9bf-5cdc-4805-a6d2-a6fac1479027",
                                                             new Date(1553795415893L),
                                                             "8173edcd-a293-4ccd-b84c-17cb1d7cc0ac",
                                                             "06e4b71e-eee9-48cc-80d3-ff0954e9f74e");
            ActiveSession activesession2 = new ActiveSession("17a0c067-f6d7-4c1b-a9c7-49da1d50fd65",
                                                             "189eb9bf-5cdc-4805-a6d2-a6fac1479027",
                                                             new Date(1553795415893L),
                                                             "8173edcd-a293-4ccd-b84c-17cb1d7cc0ac",
                                                             "06e4b71e-eee9-48cc-80d3-ff0954e9f74e");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("df066ec4-9c51-453c-849c-33f50533c65e",
                                                        "1774f9ad-7c65-4d08-ba64-b5582af33a6f",
                                                        new Date(1553795414589L),
                                                        "3a37484a-1ccf-4dad-9b49-e016d660b0c2",
                                                        "4486aca5-8bc3-40cb-8db0-c8f56436a605");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("811d6e51-7cc7-4948-a2c6-a33572617619",
                                                             "f2a54cb5-4a57-41a0-946f-cede6d3e18f8",
                                                             new Date(1553795410354L),
                                                             "e5a9f284-1090-4767-9299-097a05fc821e",
                                                             "fa0f0648-25d5-418f-8cf4-3a9231179ee2");
            ActiveSession activesession2 = new ActiveSession("811d6e51-7cc7-4948-a2c6-a33572617619",
                                                             "f2a54cb5-4a57-41a0-946f-cede6d3e18f8",
                                                             new Date(1553795410354L),
                                                             "e5a9f284-1090-4767-9299-097a05fc821e",
                                                             "fa0f0648-25d5-418f-8cf4-3a9231179ee2");
            ActiveSession activesession3 = new ActiveSession("c437602f-2660-444e-8405-32d2b7148fe4",
                                                             "1e3f494b-bc2d-49f8-97f6-837fa7c2a2ed",
                                                             new Date(1553795416127L),
                                                             "35aa463b-1154-4753-a0a0-e79dabd73c13",
                                                             "f80a8948-e9b6-44c2-915d-a28cc5983858");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
