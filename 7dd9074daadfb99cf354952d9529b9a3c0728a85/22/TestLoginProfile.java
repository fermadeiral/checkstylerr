// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("6f3bd009-9cc1-4ced-9c32-b4c0283180ef",
                                                          "f24d7e65-7b31-4ed7-aa4c-6842f10c7001");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("ff5fe29b-fb9e-4ec0-a315-3a1b962d97cf",
                                                          "af3b94e5-864c-4a9a-85c0-010da9f3167b");
            LoginProfile loginprofile2 = new LoginProfile("ff5fe29b-fb9e-4ec0-a315-3a1b962d97cf",
                                                          "af3b94e5-864c-4a9a-85c0-010da9f3167b");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("4bc9ecfc-01b4-405c-b808-bc580cf4714c",
                                                     "525f4fa1-5da4-4569-af6c-3ab3d25a6fd8");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("9b0ced5e-cac5-4c46-9100-92440ad77b61",
                                                          "a5b81adc-d99a-481c-a021-28af3cfafc5d");
            LoginProfile loginprofile2 = new LoginProfile("9b0ced5e-cac5-4c46-9100-92440ad77b61",
                                                          "a5b81adc-d99a-481c-a021-28af3cfafc5d");
            LoginProfile loginprofile3 = new LoginProfile("f1d2b004-a411-46a7-881a-978f2dbefea2",
                                                          "9a27d4fd-ac90-4c46-9d37-e9a089bd79dd");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
