// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553795419328L),
                                                          "b4ca453a-7409-4cf3-94a7-27612e1030a6", true,
                                                          "81225a0a-0a0c-4bcb-bc02-cedeae4e1e4c");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553795412173L),
                                                          "7d63e4be-5a49-4990-9817-0f7280a531f2", true,
                                                          "34eea6d1-2f8f-4386-b6a7-ed6616b23897");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553795412173L),
                                                          "7d63e4be-5a49-4990-9817-0f7280a531f2", true,
                                                          "34eea6d1-2f8f-4386-b6a7-ed6616b23897");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553795413480L), "800c42eb-b30c-4878-a203-6ef47664ec05",
                                                     true, "b6f8f8a4-0344-405c-9a89-3d81b33ba9e3");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553795415699L),
                                                          "1927315b-1ae8-4f32-93bd-b427e1d19bb3", false,
                                                          "4df6d5fb-76ba-4252-9cce-7fd45f27c2d9");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553795415699L),
                                                          "1927315b-1ae8-4f32-93bd-b427e1d19bb3", false,
                                                          "4df6d5fb-76ba-4252-9cce-7fd45f27c2d9");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553795414044L),
                                                          "6254c920-1047-4877-bb3a-a41f637e3900", false,
                                                          "b4672adc-6672-4e11-97ea-3d6d05ef95fb");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
