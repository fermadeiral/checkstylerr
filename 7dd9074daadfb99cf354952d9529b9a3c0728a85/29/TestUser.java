// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("d73b242a-9ba5-4f81-9020-6f16fcaa4094", null, "e564f24b-0fa3-4c77-8bc8-e493076ff7f2",
                                  new Date(1553795416500L), 37, null, "3d6c345a-addd-40d6-81bb-d4e1cd40b1f4", true,
                                  "1fb5ad0f-706a-4a46-8c40-4d6f8ddbcdd7", "af59f1e7-cf4d-4b56-8257-fb83e7e3b013", -52,
                                  null, null, true, "1f13bd43-58e7-4f88-a7e5-5608aa3d9b8b", 62,
                                  "d89b314f-acdb-424d-be64-80e49536ee2c", UserStatus.getDefault(), false, null, false,
                                  new Date(1553795416793L), "7c60c3c0-4437-488e-a3d1-40a837efbb52");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("b6bae7b3-2794-4841-bcef-18ff3386de12", null, "a1e59180-5d8a-467a-8735-93dfd941104d",
                                  new Date(1553795418602L), 31, null, "f80e3474-c63d-4fc9-9b5d-ede299f2a42f", false,
                                  "2739c956-1676-4c17-83dd-207184200d23", "a24b88e0-d709-44b8-a69a-4a9f0b241ac0", -99,
                                  null, null, false, "5cfb350a-2fb1-4c96-bc17-aac1951d214c", 89,
                                  "d9417cac-9347-40d1-ad00-fcae87a6b990", UserStatus.getDefault(), false, null, true,
                                  new Date(1553795410889L), "7202c5ba-5d57-48ef-ae31-dba94a609dfb");
            User user2 = new User("b6bae7b3-2794-4841-bcef-18ff3386de12", null, "a1e59180-5d8a-467a-8735-93dfd941104d",
                                  new Date(1553795418602L), 31, null, "f80e3474-c63d-4fc9-9b5d-ede299f2a42f", false,
                                  "2739c956-1676-4c17-83dd-207184200d23", "a24b88e0-d709-44b8-a69a-4a9f0b241ac0", -99,
                                  null, null, false, "5cfb350a-2fb1-4c96-bc17-aac1951d214c", 89,
                                  "d9417cac-9347-40d1-ad00-fcae87a6b990", UserStatus.getDefault(), false, null, true,
                                  new Date(1553795410889L), "7202c5ba-5d57-48ef-ae31-dba94a609dfb");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("604e82ea-db89-4891-8266-1d74ebc4bac5", null, "085fbe1c-d1e9-40a9-9e37-6aa87137ad06",
                             new Date(1553795415449L), -109, null, "582e425a-1c12-4378-b51e-17febbef92f6", false,
                             "d0b7acd9-41b0-42ee-8c6a-ec75cf201824", "cfd395f4-5dc0-465e-b58a-89c349d4eda9", -49, null,
                             null, false, "6c9b4b06-7474-4b82-8ea6-5db55f7c68de", -88,
                             "3bd394c1-72c0-4e85-b72e-ed453a8770f1", UserStatus.getDefault(), false, null, true,
                             new Date(1553795410784L), "1a579782-2ab4-4a76-8ce1-efd421dd77e9");
        assertTrue(user.isValid());
        User userInvalid = new User("73b305bd-b868-4d95-9a01-ede4c82613b7", null,
                                    "5dcb4a15-372f-4d24-b1b4-e1d2f2619237", new Date(1553795414746L), 71, null, null,
                                    true, "0d3adff2-938e-4c34-8462-ae09475c6a94",
                                    "e8b45a79-3595-4293-86ec-8115dbe2dd57", 19, null, null, true,
                                    "64e67063-1d74-4d4b-8b42-178345076be9", -45, "3bd5d101-d812-4ff6-b6eb-c3a10e28e7a2",
                                    UserStatus.getDefault(), false, null, true, new Date(1553795409986L),
                                    "263cd055-7770-4ca3-b476-334dc2f185ee");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("144fa343-13fd-4c6f-b145-8ee5e1e6c8d0", null, "58269096-9ced-438e-9e89-f7a39d90df98",
                                  new Date(1553795411613L), 79, null, "c2f6b30a-b7de-4518-b7d5-d1d015d98ff3", true,
                                  "12124d03-5883-48dc-956d-4d8407b0b8d8", "5a221352-b99b-4110-86d6-47de496824ba", 29,
                                  null, null, true, "68e94306-c2ab-4175-8255-79d80a3e95fd", -7,
                                  "9f54f629-ac5b-4588-88f2-ef6d042e2bcb", UserStatus.getDefault(), false, null, true,
                                  new Date(1553795412621L), "cfd86a4c-a09c-4e95-b4ef-40b5812fa836");
            User user2 = new User("144fa343-13fd-4c6f-b145-8ee5e1e6c8d0", null, "58269096-9ced-438e-9e89-f7a39d90df98",
                                  new Date(1553795411613L), 79, null, "c2f6b30a-b7de-4518-b7d5-d1d015d98ff3", true,
                                  "12124d03-5883-48dc-956d-4d8407b0b8d8", "5a221352-b99b-4110-86d6-47de496824ba", 29,
                                  null, null, true, "68e94306-c2ab-4175-8255-79d80a3e95fd", -7,
                                  "9f54f629-ac5b-4588-88f2-ef6d042e2bcb", UserStatus.getDefault(), false, null, true,
                                  new Date(1553795412621L), "cfd86a4c-a09c-4e95-b4ef-40b5812fa836");
            User user3 = new User("db76c004-e76a-4ecb-8975-33e16874197b", null, "6b1c49c7-de60-486e-bd8d-eccda9f692f3",
                                  new Date(1553795409715L), 26, null, "2b5595d4-eefc-43ed-a11d-1c48b002e8ca", true,
                                  "9893a88e-1a00-420d-8e16-e2724c090064", "9f423a5b-d0a1-4bd9-b79f-f939335190e2", -109,
                                  null, null, true, "fca2e4b6-3775-45aa-8e05-b0ba8d7b3f12", -103,
                                  "49f9145a-c861-4e8a-80c5-3ff0f12b4d8a", UserStatus.getDefault(), false, null, true,
                                  new Date(1553795416678L), "723893b9-c253-4eb2-bb87-7adb860125a6");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
