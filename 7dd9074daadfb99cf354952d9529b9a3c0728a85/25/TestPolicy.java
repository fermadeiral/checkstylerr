// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("a56e0b93-f64e-4909-a1ad-0d181cbdd7a9", false,
                                        "c6e446bd-64be-4f02-8cb7-3aad13e42979", true,
                                        "32d3f363-1c82-4494-949c-e4791da3e78e");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("c87c0379-ea22-44f6-8067-e0643f340429", false,
                                        "8061a2ed-dd91-49af-a68a-1a4747d51bfc", false,
                                        "221c49ef-75c0-4273-a2a0-4fef13d9b89d");
            Policy policy2 = new Policy("c87c0379-ea22-44f6-8067-e0643f340429", false,
                                        "8061a2ed-dd91-49af-a68a-1a4747d51bfc", false,
                                        "221c49ef-75c0-4273-a2a0-4fef13d9b89d");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("10efb7c0-c525-454a-8ca0-d92c6979b9db", true, "335612e9-f0ae-434b-a865-f19485f2cbd7",
                                   false, "1dfbb5d8-c2bc-48cb-9640-1fa44a071ac0");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("1a468e6d-5227-4d46-aeb2-7ab75b16a951", true,
                                        "068c5892-7940-4f7d-a8b5-621fcb3a4115", true,
                                        "568040dc-d9ff-4bca-ac40-5c0004489422");
            Policy policy2 = new Policy("1a468e6d-5227-4d46-aeb2-7ab75b16a951", true,
                                        "068c5892-7940-4f7d-a8b5-621fcb3a4115", true,
                                        "568040dc-d9ff-4bca-ac40-5c0004489422");
            Policy policy3 = new Policy("ea6b82ff-f532-4729-8ac1-6930e1cc1736", true,
                                        "9408f923-3473-4d09-b354-d339b29f7132", true,
                                        "999e4661-075e-46e9-ab20-9fd2c76c90e5");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
