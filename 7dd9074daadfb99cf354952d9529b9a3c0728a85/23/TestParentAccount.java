// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("de625b76-6262-4ac8-aa84-12bdd6425f8a",
                                                             "3465e180-70a2-41a6-afcb-20fee0c69782",
                                                             "32968271-b5c5-489b-a14a-801557a39541");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("d5cd0b17-d117-4876-9f36-bb451f21bee0",
                                                             "e21aec94-8972-4fe9-b310-8b702fc938de",
                                                             "a80db9f0-afed-41e5-92d6-8bfce2f74fc9");
            ParentAccount parentaccount2 = new ParentAccount("d5cd0b17-d117-4876-9f36-bb451f21bee0",
                                                             "e21aec94-8972-4fe9-b310-8b702fc938de",
                                                             "a80db9f0-afed-41e5-92d6-8bfce2f74fc9");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("d065f5a8-64fb-4c78-a438-d989be7d268e",
                                                        "fd9d30a5-170a-4f67-a5a4-d4eba69b08eb",
                                                        "c3f0b0cc-853f-4a34-af52-cc77ddea280f");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("2fdd707a-1852-4fd1-9d8b-a55416f3cc94",
                                                             "020e8981-fc95-4c05-9b78-069a2ded4af7",
                                                             "f4ecf8ca-0b3f-4f42-93e0-b03616916b76");
            ParentAccount parentaccount2 = new ParentAccount("2fdd707a-1852-4fd1-9d8b-a55416f3cc94",
                                                             "020e8981-fc95-4c05-9b78-069a2ded4af7",
                                                             "f4ecf8ca-0b3f-4f42-93e0-b03616916b76");
            ParentAccount parentaccount3 = new ParentAccount("c0434e42-126d-40be-8008-11b960affb72",
                                                             "37ee41e1-c0ae-49c3-8b76-199734e2299d",
                                                             "df311058-94b5-4c55-b19f-87d96be8fe98");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
