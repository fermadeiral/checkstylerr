// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553795409808L),
                                                                         "45c2b86c-6a22-4835-bfde-f806ca54a54b",
                                                                         "7cf8ad6d-c500-4550-af7d-adf6c18489db",
                                                                         "deba576b-d394-4e77-a4dd-504ed68ca335");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553795417904L),
                                                                         "504a7cd6-0a52-41d3-8e66-73537f752e43",
                                                                         "687569e7-3d46-4e9c-a073-e523f1c3b5ea",
                                                                         "c39cb594-86ee-4623-99c2-cfa2bdf4f489");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553795417904L),
                                                                         "504a7cd6-0a52-41d3-8e66-73537f752e43",
                                                                         "687569e7-3d46-4e9c-a073-e523f1c3b5ea",
                                                                         "c39cb594-86ee-4623-99c2-cfa2bdf4f489");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1553795414862L),
                                                                    "41ff30d6-e68c-4ffd-b91e-2404d9d804f3",
                                                                    "6f46f7c0-3b34-4e7f-9abe-308d3f1d8aa6",
                                                                    "8e4795db-6a04-4555-96f8-126cc1cdcb1e");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1553795409806L),
                                                                         "675c9040-0a80-4d3b-9b73-adfac7af723e",
                                                                         "fb4ddcad-2eb3-412d-a3cb-d705fbc73639",
                                                                         "53b44c96-9021-46ed-99f1-10cb60299ee3");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1553795409806L),
                                                                         "675c9040-0a80-4d3b-9b73-adfac7af723e",
                                                                         "fb4ddcad-2eb3-412d-a3cb-d705fbc73639",
                                                                         "53b44c96-9021-46ed-99f1-10cb60299ee3");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1553795412096L),
                                                                         "54bf85d1-3d26-45f4-88de-56488ae34a19",
                                                                         "c126ebd2-b146-48a9-9afc-359ab71a716d",
                                                                         "bb013bcc-4162-4ac4-8e95-7c86fdf16eff");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
