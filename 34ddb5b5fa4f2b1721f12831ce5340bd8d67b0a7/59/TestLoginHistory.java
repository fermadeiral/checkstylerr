// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1562663757882L),
                                                          "40c1fb92-3e54-4064-8638-ae972076b7e6", true,
                                                          "c9c9cc92-0b0b-45b8-bcec-d3c34207e5cf");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1562663762813L),
                                                          "8c51746b-29d0-42bf-b042-e4ccf28a077a", true,
                                                          "1684240f-3eda-44e6-a875-7f57f9b3af6d");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1562663762813L),
                                                          "8c51746b-29d0-42bf-b042-e4ccf28a077a", true,
                                                          "1684240f-3eda-44e6-a875-7f57f9b3af6d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1562663758191L), "05578186-5cdb-4df7-8691-3b4743858fc8",
                                                     false, "918c72aa-d283-490c-8303-58d85d2f3b11");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1562663759882L),
                                                          "4595185d-cc39-40c8-934e-cabd97dc067e", false,
                                                          "def60ebf-9ab0-4234-b2f8-3644e03aafd1");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1562663759882L),
                                                          "4595185d-cc39-40c8-934e-cabd97dc067e", false,
                                                          "def60ebf-9ab0-4234-b2f8-3644e03aafd1");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1562663765237L),
                                                          "75731ead-cb7f-4c38-9de1-5371c29ee119", false,
                                                          "0414f515-58e6-4e9c-bcb3-2c3c3d21c82d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
