// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                             "84438316-ce56-4c6d-9927-676fc08ddcf3",
                                                             new Date(1562663763844L), -122, null,
                                                             "7e8c7.5100a@039f1.fr", true,
                                                             "f3880f16-eaf9-4989-b5f3-155595e8cd31",
                                                             "a5fdd8ccb79ecfcc089719469de69b9b", true, false, false, 65,
                                                             null, null, "1637e454-c5c4-4244-bd5d-a2ee5c1db885", -37,
                                                             "85a63caf-95af-4f24-a317-9761f91c0717",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1562663765882L), "A_9=2");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                             "303c0770-4e61-4451-b805-e71684495247",
                                                             new Date(1562663765374L), -21, null,
                                                             "ace36.c1679@82c2a.fr", true,
                                                             "4bab0285-4b18-428a-b492-71a7a7862d36",
                                                             "a5fdd8ccb79ecfcc089719469de69b9b", true, false, false,
                                                             -66, null, null, "708215d9-4dc7-4c54-bbf7-53dfc260c8d1",
                                                             65, "45d28633-6ea0-4724-895a-efa77572264e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1562663764835L), "A_9=2");
            SubtenantUser subtenantuser2 = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                             "303c0770-4e61-4451-b805-e71684495247",
                                                             new Date(1562663765374L), -21, null,
                                                             "ace36.c1679@82c2a.fr", true,
                                                             "4bab0285-4b18-428a-b492-71a7a7862d36",
                                                             "a5fdd8ccb79ecfcc089719469de69b9b", true, false, false,
                                                             -66, null, null, "708215d9-4dc7-4c54-bbf7-53dfc260c8d1",
                                                             65, "45d28633-6ea0-4724-895a-efa77572264e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1562663764835L), "A_9=2");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                        "8f096875-721d-476e-ba0c-5a7844129fb4",
                                                        new Date(1562663756604L), -92, null, "46fe7.43950@38b36.me",
                                                        true, "62a0ad6a-3132-4366-9083-2dc601d61be2",
                                                        "a5fdd8ccb79ecfcc089719469de69b9b", false, true, true, 5, null,
                                                        null, "c84cd021-84d4-424e-8d36-cdf7d5b6b750", 31,
                                                        "07bcfbaa-e4cd-41ee-a107-66efcb87c328",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1562663758951L), "A_9=2");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "86df9476-a48b-4ba0-a709-3dc238bfd200",
                                                               new Date(1562663763603L), -95, null, null, false,
                                                               "73924404-d13b-4bd7-8708-d6348482b1380c5cd678-2997-459e-82fc-081f8b7f882e5d1631e5-b551-4d3f-aa82-d77d94e2aa85",
                                                               "\u0006Oç¥‰ä©³L\u0007-\u0019$$áŽ¼<#2,%33áŽŸ3U3\bã•§äª¹Sï‚µ$$\u000e?3\u0016é¤‹3\u0015GYêšƒ3R\u0001á£¼`2è½?2\u000eà¨—\u0012è™°á†Š]\u0016[?\u000f!3 @2V",
                                                               true, false, true, -80, null, null,
                                                               "cf12450d-6b33-4db3-be95-6bf9f7caa52c", -126,
                                                               "7ba685e5-059a-4414-90d5-00a68ab968b80f82ee6d-d39c-4261-b44b-95d20927c5eeaccd766a-aea6-47a1-9cd2-242540e72236",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1562663765318L),
                                                               "[;L?/?8\u0011<\u001d*èƒ´&;5E4K4\u001e1<ä‹§;å‡‡@GY;C6;\\\\V65<C\u0007>P4ïž &<%5:å‘²>8\u0002Y:!(ä®†>Jâ’¾T*");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                             "6ac4959b-2150-467b-abba-0b9421af5ebe",
                                                             new Date(1562663764841L), 53, null, "cdf04.56d60@7d8c6.fr",
                                                             false, "3d9006e7-a840-45de-bac8-fc514d0e7401",
                                                             "a5fdd8ccb79ecfcc089719469de69b9b", true, false, true, -63,
                                                             null, null, "7aa12c6f-1fd9-4e07-8751-fda33be7d1e7", 116,
                                                             "755636ae-3040-447f-98a8-7dd59d34d04c",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1562663760417L), "A_9=2");
            SubtenantUser subtenantuser2 = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                             "6ac4959b-2150-467b-abba-0b9421af5ebe",
                                                             new Date(1562663764841L), 53, null, "cdf04.56d60@7d8c6.fr",
                                                             false, "3d9006e7-a840-45de-bac8-fc514d0e7401",
                                                             "a5fdd8ccb79ecfcc089719469de69b9b", true, false, true, -63,
                                                             null, null, "7aa12c6f-1fd9-4e07-8751-fda33be7d1e7", 116,
                                                             "755636ae-3040-447f-98a8-7dd59d34d04c",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1562663760417L), "A_9=2");
            SubtenantUser subtenantuser3 = new SubtenantUser("a5fdd8ccb79ecfcc089719469de69b9b", null,
                                                             "117eeec0-b04b-4740-a69f-73cce675c42e",
                                                             new Date(1562663762503L), -18, null,
                                                             "00e97.7e871@6de47.me", false,
                                                             "05a98a11-4b0e-4257-9783-1df8f8fdd796",
                                                             "a5fdd8ccb79ecfcc089719469de69b9b", true, false, true, 43,
                                                             null, null, "8df4231e-513b-47f3-b70c-420d6a00c149", 95,
                                                             "d706119c-1622-4f14-911d-594ee9f8cb3e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1562663760863L), "A_9=2");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
