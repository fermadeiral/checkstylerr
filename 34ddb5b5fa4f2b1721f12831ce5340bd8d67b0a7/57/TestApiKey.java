// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663758669L), 35,
                                        "a5fdd8ccb79ecfcc089719469de69b9b", "890896ea-6ac0-49ef-a759-7c2ef77c0bc5", -54,
                                        "cac42e3a-c783-477c-9b24-6aa5f7315cf1", "a5fdd8ccb79ecfcc089719469de69b9b",
                                        ApiKeyStatus.getDefault(), new Date(1562663757711L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663756799L), -51,
                                        "a5fdd8ccb79ecfcc089719469de69b9b", "81ce29b5-62c3-4869-a35c-be2ca9e6cf47",
                                        -105, "0da31950-c762-4dfc-a7b4-e245b477d798",
                                        "a5fdd8ccb79ecfcc089719469de69b9b", ApiKeyStatus.getDefault(),
                                        new Date(1562663756881L));
            ApiKey apikey2 = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663756799L), -51,
                                        "a5fdd8ccb79ecfcc089719469de69b9b", "81ce29b5-62c3-4869-a35c-be2ca9e6cf47",
                                        -105, "0da31950-c762-4dfc-a7b4-e245b477d798",
                                        "a5fdd8ccb79ecfcc089719469de69b9b", ApiKeyStatus.getDefault(),
                                        new Date(1562663756881L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663758765L), -32,
                                   "a5fdd8ccb79ecfcc089719469de69b9b", "d0b2f1d1-5728-43a0-94c9-f3cbbd77b870", -87,
                                   "4b80ebb9-d7a5-4e16-8ea5-ae912121751a", "a5fdd8ccb79ecfcc089719469de69b9b",
                                   ApiKeyStatus.getDefault(), new Date(1562663757479L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("\u0006Oç¥‰ä©³L\u0007-\u0019$$áŽ¼<#2,%33áŽŸ3U3\bã•§äª¹Sï‚µ$$\u000e?3\u0016é¤‹3\u0015GYêšƒ3R\u0001á£¼`2è½?2\u000eà¨—\u0012è™°á†Š]\u0016[?\u000f!3 @2V",
                                          new Date(1562663756922L), -61,
                                          "\u0006Oç¥‰ä©³L\u0007-\u0019$$áŽ¼<#2,%33áŽŸ3U3\bã•§äª¹Sï‚µ$$\u000e?3\u0016é¤‹3\u0015GYêšƒ3R\u0001á£¼`2è½?2\u000eà¨—\u0012è™°á†Š]\u0016[?\u000f!3 @2V",
                                          "1bc07884-5b5e-4a0b-855d-cdc3119a3c5f", -39, null,
                                          "\u0006Oç¥‰ä©³L\u0007-\u0019$$áŽ¼<#2,%33áŽŸ3U3\bã•§äª¹Sï‚µ$$\u000e?3\u0016é¤‹3\u0015GYêšƒ3R\u0001á£¼`2è½?2\u000eà¨—\u0012è™°á†Š]\u0016[?\u000f!3 @2V",
                                          ApiKeyStatus.getDefault(), new Date(1562663764712L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663756839L), 65,
                                        "a5fdd8ccb79ecfcc089719469de69b9b", "5c9c0e7c-083c-44be-8067-cc43bf6df0f8", -22,
                                        "d1abda62-7e38-4409-bce1-8835ff3d49e3", "a5fdd8ccb79ecfcc089719469de69b9b",
                                        ApiKeyStatus.getDefault(), new Date(1562663765609L));
            ApiKey apikey2 = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663756839L), 65,
                                        "a5fdd8ccb79ecfcc089719469de69b9b", "5c9c0e7c-083c-44be-8067-cc43bf6df0f8", -22,
                                        "d1abda62-7e38-4409-bce1-8835ff3d49e3", "a5fdd8ccb79ecfcc089719469de69b9b",
                                        ApiKeyStatus.getDefault(), new Date(1562663765609L));
            ApiKey apikey3 = new ApiKey("a5fdd8ccb79ecfcc089719469de69b9b", new Date(1562663765062L), -121,
                                        "a5fdd8ccb79ecfcc089719469de69b9b", "041d298f-a346-438f-add6-95af1d26d4db", -72,
                                        "2928aabc-e8c4-426d-a292-eaaba969aa22", "a5fdd8ccb79ecfcc089719469de69b9b",
                                        ApiKeyStatus.getDefault(), new Date(1562663764568L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
