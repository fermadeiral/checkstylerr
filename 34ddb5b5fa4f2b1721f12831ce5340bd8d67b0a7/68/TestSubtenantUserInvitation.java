// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           new Date(1562663757748L),
                                                                                           "f5e22.b027b@f8b30.me",
                                                                                           new Date(1562663762130L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           null,
                                                                                           new Date(1562663765544L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           new Date(1562663765301L),
                                                                                           "4cc79.a60aa@91398.fr",
                                                                                           new Date(1562663757311L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           null,
                                                                                           new Date(1562663756830L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           new Date(1562663765301L),
                                                                                           "4cc79.a60aa@91398.fr",
                                                                                           new Date(1562663757311L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           null,
                                                                                           new Date(1562663756830L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                      new Date(1562663757028L),
                                                                                      "fa8b8.fbb32@21a50.fr",
                                                                                      new Date(1562663764297L),
                                                                                      "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                      null, new Date(1562663764694L),
                                                                                      "a5fdd8ccb79ecfcc089719469de69b9b");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1562663756019L),
                                                                                             null,
                                                                                             new Date(1562663761644L),
                                                                                             "\u0006Oç¥‰ä©³L\u0007-\u0019$$áŽ¼<#2,%33áŽŸ3U3\bã•§äª¹Sï‚µ$$\u000e?3\u0016é¤‹3\u0015GYêšƒ3R\u0001á£¼`2è½?2\u000eà¨—\u0012è™°á†Š]\u0016[?\u000f!3 @2V",
                                                                                             null,
                                                                                             new Date(1562663756982L),
                                                                                             "\u0006Oç¥‰ä©³L\u0007-\u0019$$áŽ¼<#2,%33áŽŸ3U3\bã•§äª¹Sï‚µ$$\u000e?3\u0016é¤‹3\u0015GYêšƒ3R\u0001á£¼`2è½?2\u000eà¨—\u0012è™°á†Š]\u0016[?\u000f!3 @2V");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           new Date(1562663760443L),
                                                                                           "d781e.5aeee@e040e.me",
                                                                                           new Date(1562663761659L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           null,
                                                                                           new Date(1562663759012L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           new Date(1562663760443L),
                                                                                           "d781e.5aeee@e040e.me",
                                                                                           new Date(1562663761659L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           null,
                                                                                           new Date(1562663759012L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           new Date(1562663764154L),
                                                                                           "c7611.bc549@76fc8.me",
                                                                                           new Date(1562663763585L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b",
                                                                                           null,
                                                                                           new Date(1562663759181L),
                                                                                           "a5fdd8ccb79ecfcc089719469de69b9b");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
