// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1562663759596L), -54,
                                                                      "5da68b3b-614f-43a3-8c51-7ebc08c38a0f",
                                                                      "92f47b28-4c19-474b-88e1-63b1d99c8a3d",
                                                                      "bfaf1b32-21b4-434e-8199-9c03a1b67776",
                                                                      "1cbd7302-5b64-4b39-acb6-ace4c57e93e5",
                                                                      "5361c4d7-2d29-41e9-be58-a8eaea1a665f",
                                                                      "9dd21bc0-9997-4730-84f2-21a34b55f8b5",
                                                                      new Date(1562663757323L),
                                                                      new Date(1562663760256L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1562663756638L), -39,
                                                                      "7adc4496-8369-455a-b1f1-047e12ed762f",
                                                                      "88fd7ad1-85b9-4bd0-82c1-560e4b43c4d6",
                                                                      "889d8f8f-2c0f-4298-87ae-0d5f732f4372",
                                                                      "bded1e65-a422-42a5-87e0-9c260a34accf",
                                                                      "d1631dc8-afe1-4258-845e-25b6b2adea41",
                                                                      "356f8c16-a07e-484d-858a-0b48c6a3bd77",
                                                                      new Date(1562663758737L),
                                                                      new Date(1562663765829L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1562663756638L), -39,
                                                                      "7adc4496-8369-455a-b1f1-047e12ed762f",
                                                                      "88fd7ad1-85b9-4bd0-82c1-560e4b43c4d6",
                                                                      "889d8f8f-2c0f-4298-87ae-0d5f732f4372",
                                                                      "bded1e65-a422-42a5-87e0-9c260a34accf",
                                                                      "d1631dc8-afe1-4258-845e-25b6b2adea41",
                                                                      "356f8c16-a07e-484d-858a-0b48c6a3bd77",
                                                                      new Date(1562663758737L),
                                                                      new Date(1562663765829L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1562663763388L), 79,
                                                                 "87a1ba27-7744-4cf2-ad7d-654ab2d8dad0",
                                                                 "dcde85c1-e9fe-48da-9268-d16b1e4309c3",
                                                                 "fe107f37-b8e1-403f-9b97-12bbe198d23c",
                                                                 "25e8e377-a6a5-4cbe-a673-2fddce2c45ba",
                                                                 "eb5d4c19-7de3-40d9-8a52-9dc082c13a99",
                                                                 "b3a1cff3-6f7f-4421-855d-6e59c31af271",
                                                                 new Date(1562663765401L), new Date(1562663758680L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1562663756510L), 114,
                                                                        "2564ab65-f132-4e29-b2f5-3a59d719ca2d",
                                                                        "0212530f-30fd-419a-9898-6fd85508339afc970d74-9a66-48ed-94be-ee47228450839850a225-9d36-42a5-ade8-8bfadaa2c5ec5171483d-44e6-4aa3-b119-fbc91a38e57eab6b824c-7b99-4d5d-925f-e59ed3de5dc82bb83193-c005-404d-a7bf-0dd9c39c3d99d2b95144-3ade-4394-9d4e-3c56d09818de148b4581-2131-4f6e-a899-c71fdb19ff9c25fdaf4c-14c2-4b6a-ab90-d6e854bd24838b9de041-607d-4a28-be8f-d591f8e614f95a8a63d4-e0c1-4ef2-a0fe-c6bbd51908805a1bed1f-2858-4f9a-9cfa-79061e713917d4f70f58-5839-4219-8892-100e20e9823fa5878039-b7a7-4fff-9436-5bb72ca47f9697d0ce64-470b-411d-8381-b0deb1095c507c88f9cc-e27e-4b56-b58e-62f44919715c697e4379-1948-43cb-997d-b64a02a61b5bae73ce6a-5938-4d3f-9b05-5c98c3e1ee89911038f4-f425-4fc4-a454-a07f3c0f61943481b7d2-38bb-4bcc-95c6-9ffa4b43c937ff6a0795-245e-4c62-b2b7-c0aba7970ec03a00965f-cbf2-4b4a-94d0-1f3cceda0454267447e2-10f6-46ac-b975-2d947b4d660284f6f4ff-bcda-47ef-a8da-5e79eb12585bc6132cc7-9e8d-431e-9b55-ea2356e7288bb0703b05-f916-405c-b012-17a7227c685f93d1d935-3401-4d7e-9dfc-299be56e36327a6fd8f9-b246-4952-a4f2-bf4d70791ccd59105c15-6d12-4fcf-a51a-3e630665204eae0494fc-85cb-455d-9fad-f14f66b672e569ab541e-728d-47a2-9ead-cb3b8be4cb4d65fe154b-31c6-4aa8-b7ff-0227580cb22fc7c40e35-6315-4cac-898a-3156a0d7646613e56876-ed25-4900-b5cc-96afc05eb5c70fd1ee2d-9abe-4d71-af6c-369d5fec38cebd7fdafb-1cad-4246-842a-8d84e1d60830f5114376-d427-497a-b087-792cab23b7d01b689cab-5f43-44e8-b110-66ef005c66b451b1b3cb-98da-4064-8a3b-08972107856256a91a50-22c0-4221-93f7-3fd90879326324fd7a01-2f7e-4041-bfb1-a2c643038f998e2cb832-29fb-4cf5-beb9-93496958172df00b58d3-b447-4e50-b479-c2fb5da2b4c2809f4546-aca4-4c40-8861-fe3b0ae314c353be1fcc-42f3-413e-8e3c-0b6b5a8fb2d2032f8e7e-5121-42c2-8a34-276ff78ca40e2b4d7640-99eb-4183-8e89-02c23030208a940ded45-11d9-40c2-8e70-0f5fba65efc3f0b83fcd-093f-413e-a5da-16d11579c284c71d304f-aac3-469c-9914-01e242e8628bf13a0714-894c-45f5-b911-9111f481feba0e476d5e-ab7f-4fe1-8d19-2e266993ede920ea7fde-863c-471a-94b8-12587c67b35e5f4096fa-99cc-4dc6-bfbc-29240effe9cf6960deed-447c-4320-b521-35f3fbaeda00e5b2c460-dc04-486c-8f7c-d99395e4777a",
                                                                        "1f59fb44-44cf-4a41-997c-163f20752a7a",
                                                                        "cad22ccf-5f6a-49ec-90e9-12be1e2857a4",
                                                                        "48c460b8-adb1-4639-aa3d-ddb7866de036",
                                                                        "9cbdb35c-9c95-4126-8de4-63089861a88b7596966a-9379-43fa-b2ab-799badc5397054454a90-2fa2-4036-8803-c8f21c1714a59cfcbc1e-0fc3-45dd-aba4-77ea369640e1",
                                                                        new Date(1562663756102L),
                                                                        new Date(1562663763196L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1562663756352L), 31,
                                                                      "99542e11-7230-4c19-91e0-f4275e908bf8",
                                                                      "2f4b60f6-4b0d-4189-8548-39a878adeee6",
                                                                      "28756040-23d6-4b6f-8b0c-dae6b1c24f57",
                                                                      "418598fc-5c8a-4688-9f17-9c35c8436a51",
                                                                      "6c787e1a-33e8-4687-ba65-91f1e7ba1552",
                                                                      "6177dde9-98e6-4545-8607-2051a40b13c6",
                                                                      new Date(1562663758155L),
                                                                      new Date(1562663759018L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1562663756352L), 31,
                                                                      "99542e11-7230-4c19-91e0-f4275e908bf8",
                                                                      "2f4b60f6-4b0d-4189-8548-39a878adeee6",
                                                                      "28756040-23d6-4b6f-8b0c-dae6b1c24f57",
                                                                      "418598fc-5c8a-4688-9f17-9c35c8436a51",
                                                                      "6c787e1a-33e8-4687-ba65-91f1e7ba1552",
                                                                      "6177dde9-98e6-4545-8607-2051a40b13c6",
                                                                      new Date(1562663758155L),
                                                                      new Date(1562663759018L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1562663759812L), -7,
                                                                      "38223dca-a2d9-4dab-97c0-07fa90db9be0",
                                                                      "bde931c5-761f-4a44-9676-3a607959c99f",
                                                                      "81897239-fe37-4556-ae4a-900a737177d1",
                                                                      "1ba84853-238e-4729-88ad-826d4919518a",
                                                                      "2d98254a-44f3-435c-a070-f4c71b4b7721",
                                                                      "5c618881-e6e8-4c2e-9337-f7532327d48f",
                                                                      new Date(1562663763130L),
                                                                      new Date(1562663757026L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
