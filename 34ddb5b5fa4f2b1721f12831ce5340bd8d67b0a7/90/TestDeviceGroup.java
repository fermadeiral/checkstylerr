// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1562663764550L), null,
                                                       "6db2773f-c4a9-460f-bde8-a8b6585c7a20", 126,
                                                       "888ba174-1267-406d-acda-2b24ece97bf6",
                                                       "bc586e64-715a-421d-8af2-48eddd2fba34",
                                                       new Date(1562663764495L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1562663763834L), null,
                                                       "a94e4384-e3ec-4b7e-a152-46c092422834", 122,
                                                       "ee2bc1f6-5bcd-46ab-9e40-a3b45d7c1fa3",
                                                       "5f10748a-bcf0-4c27-a309-1656bc019514",
                                                       new Date(1562663764770L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1562663763834L), null,
                                                       "a94e4384-e3ec-4b7e-a152-46c092422834", 122,
                                                       "ee2bc1f6-5bcd-46ab-9e40-a3b45d7c1fa3",
                                                       "5f10748a-bcf0-4c27-a309-1656bc019514",
                                                       new Date(1562663764770L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1562663760892L), null,
                                                  "cb593663-e031-4224-89e6-dbdebdc72af2", -110,
                                                  "dd506b21-ce11-4176-a944-6510c84d0a6e",
                                                  "4b7ae049-d196-4915-a137-cea157d1916f", new Date(1562663760448L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1562663765824L), null,
                                                         "cd245b1f-0245-490a-82d3-de3fd5e976d2e7017889-5d2c-4782-8907-edf86213ab07419350ec-6418-4f0b-a53b-e2f0004b873884c6f236-6c81-4f3d-ba34-3e434d4e2fd9544350e9-c2f6-480a-880c-e363832bd28cd60d28fa-abbf-408f-88ff-2247d7514e1f94331436-80df-4aec-a42a-01b4fcf1e94ca6448ce4-5aff-4817-90c6-a98cfb99374168609e86-26bf-4b75-8a76-b4a313a8aa177f875c71-d20c-481d-b812-73057895c3fabfe09d7c-4a10-4a4a-a5f4-81464af5d4520cddc61a-54a9-4edf-a000-cacf6958e76115b027af-46b7-468d-8ffe-a0d73b5e6f895e3e2102-e2fb-474e-bd0b-c516ce257c67fe522a73-4bd6-426f-ac98-5fe615ed362321e5c187-a3d9-415c-a06b-e668926f0a96a295fc25-9344-428f-8c53-a603a116f725dac46161-c49a-46a3-8c78-ecc7ee006076364cb4d9-4435-4a88-8fc3-421fa98d777b0df2949c-0940-4ec8-b855-21c82a8150800051cf12-bdcb-426e-b4f2-9fccdedb57f75214e1a8-21a9-428a-befe-9f1ab1df988c0e88ff3e-fdb1-4610-b18e-1ed2a3f852097a56abac-8e64-46cd-8053-3452a48a96ddb390f84b-814e-4e2f-9d81-ad2417bdc428769b0e16-f140-4b8c-a13a-0098f4f8152b3ceb2714-7e7e-4b27-8df7-2bb331fd1d8b631a6806-0e1f-4c4d-b7af-fd1e11225aa13474e7bb-7f50-472e-ae3c-0f116452025818a07f63-9812-4ce8-a1e3-70c4003def269093deea-d051-435f-adbf-0f7a7968f0ec65e7a440-511e-4fdf-ab7f-b1320ef83b1fc14dbffc-00be-490c-9ef9-8657067d884fc5fdc509-9f1b-413c-b863-5f14add431054ffad51d-ca4c-4232-a615-0b8921089392d6228075-83b3-4a37-8f76-f9cabf711d47db224f3e-f3de-4ac0-a62e-ba48538ef3fa60820986-65b9-4310-b540-1488a23cb1497f9acbfd-a2ba-43a6-9d5c-f27452e7368b9703f145-7604-4542-b61e-41aa05c57c9b9aecd18d-6bbf-437d-a8d7-1f5f71006297d37e9626-aeba-43dd-811a-11ce17aaa094e56e5945-fc55-4082-bfdd-9264a782ae057f8e676b-b7e5-4a1c-91b1-5dda449f90e2101c0c07-f5f9-4ce5-b8d3-b5e0cf3c85348d734b71-16a3-4100-ab98-f1f45a1fdb09abc93bba-42c3-4604-89d3-2f3447f51f712a2008b2-6490-447a-9d00-91310f51827079674d2e-2062-4aec-bd8d-0e47f8dabfc0c3a149ef-a27e-4430-8c52-f71258592bbbb27f4e80-90c6-4a25-9c1f-e7ac77f28b32b8a76fac-99bb-45cb-b254-f9234fd796a18c91a2a6-f65e-4958-bef3-f1fa1cdeb194994798a6-a689-493f-b280-8369cd2a2d043910bdfd-eddb-4a62-8b5b-a28ce873f41046dd1559-49db-40dd-808c-d1d2c9e9a7f4",
                                                         -28, "c9df4506-25c5-458f-9b3a-a73af663b66d",
                                                         "009949ea-dfb7-4758-86ff-ec95ff6bdd188df73f93-2b94-4cc2-9fb7-7429276d3c5e7cb721c6-e26c-48c6-b2fe-593d24a0acd24a85b218-7e20-43b4-adbf-d28590ea0ad1",
                                                         new Date(1562663758083L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1562663765729L), null,
                                                       "a658d5d3-6a49-44ce-bf1e-a5101494b683", 11,
                                                       "a850ce69-3992-4f0a-bd1e-c86a0513605b",
                                                       "299dbea7-86ce-40e9-820c-0a3f854c54e3",
                                                       new Date(1562663763561L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1562663765729L), null,
                                                       "a658d5d3-6a49-44ce-bf1e-a5101494b683", 11,
                                                       "a850ce69-3992-4f0a-bd1e-c86a0513605b",
                                                       "299dbea7-86ce-40e9-820c-0a3f854c54e3",
                                                       new Date(1562663763561L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1562663762384L), null,
                                                       "9abb56c1-36c9-48b0-be22-74c04f522ca5", -94,
                                                       "29eb566c-54f0-4e8f-a791-a61b8e673420",
                                                       "2bee9f79-15e0-4c7d-880c-41f694f1bb7a",
                                                       new Date(1562663757502L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
