// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model User.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            User user1 = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "e1f13969-8d92-4d6b-bf32-c7a2a1f8cba9",
                                  new Date(1559143712920L), 126, null, "87b98.edfd9@15ffc.fr", false,
                                  "68f7afdc-b178-42db-a5c5-9640f89c58e3", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false,
                                  true, false, 106, null, null, "ac32a6a2-1cc9-48c6-889f-f5ed7897d755", 22,
                                  "0fce5c9f-ea87-466b-99d8-42e04538b3f0", UserStatus.getDefault(), null,
                                  new Date(1559143718379L), "D15v4");
            User user2 = user1.clone();
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            User user1 = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "5a57a8b7-8262-4b1d-b031-8e9e5b8d87e4",
                                  new Date(1559143713999L), 25, null, "2ac91.94039@7404e.fr", false,
                                  "b381c4e8-3209-45fd-85c8-185d9a71940e", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false,
                                  true, true, 19, null, null, "2618f164-09e9-4152-acbb-40df0965b8af", 102,
                                  "0c2ba812-61ae-4a02-b77d-5455020b84fa", UserStatus.getDefault(), null,
                                  new Date(1559143721970L), "D15v4");
            User user2 = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "5a57a8b7-8262-4b1d-b031-8e9e5b8d87e4",
                                  new Date(1559143713999L), 25, null, "2ac91.94039@7404e.fr", false,
                                  "b381c4e8-3209-45fd-85c8-185d9a71940e", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false,
                                  true, true, 19, null, null, "2618f164-09e9-4152-acbb-40df0965b8af", 102,
                                  "0c2ba812-61ae-4a02-b77d-5455020b84fa", UserStatus.getDefault(), null,
                                  new Date(1559143721970L), "D15v4");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotSame(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user2.hashCode(), user1.hashCode());
            int hashCode = user1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, user1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        User user = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "6c57e1bd-1cea-4758-8fde-540d8ec64491",
                             new Date(1559143713691L), 89, null, "4760e.35add@4b050.fr", true,
                             "8732c4ba-c6e1-425b-b06f-57a1fc3a2feb", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false, true,
                             true, 54, null, null, "4bb7c85a-7c5f-4d68-b08a-ad4cf1135a4d", 111,
                             "927b4c1a-d62a-439c-96dd-97e499593e6a", UserStatus.getDefault(), null,
                             new Date(1559143721212L), "D15v4");
        assertTrue(user.isValid());
        User userInvalid = new User("+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)",
                                    null, "640b0851-5364-47eb-9f5b-edd703575955", new Date(1559143717364L), 124, null,
                                    null, false,
                                    "f48c2eab-7b56-4ece-83d9-98d4b59f6c30376545e6-2dcf-4d6b-b74a-f3e9bc6fe3878d30ee71-e43e-4cce-b0c4-7b9d88e546a4",
                                    "+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)",
                                    true, true, true, 74, null, null, "f188b974-0970-4a03-9306-76d80e8a389d", 74,
                                    "537b2257-0a62-4a43-bcf2-06f7c6fba219ed42907e-4ec7-434b-8687-917f041de1492f39ef92-b230-4e2b-a464-8f3f42e3df2f",
                                    UserStatus.getDefault(), null, new Date(1559143717169L),
                                    "@;gèˆ¬2I2Ì¿â»š\u000bGl_\u0014?\u001e<\u001dY3H(3'$$^P3á”“B23+Wá‹—ê‰¼Méƒ­*\u00072ç´Ÿ3Nçµ¾;;\u0010`\u0000[\u001e33a22a2>98âº¯d");
        assertFalse(userInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            User user1 = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "f0b4707c-88e2-4732-8dcc-149260135049",
                                  new Date(1559143717264L), -79, null, "6f323.eb209@97af5.me", true,
                                  "50a1aa18-5d2c-46a4-ac0e-7e213adac425", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false,
                                  true, false, 101, null, null, "7578201d-626f-4247-9896-5521fdd39bb9", -85,
                                  "9e46ce73-1fe8-48b5-9985-b747f405b5b8", UserStatus.getDefault(), null,
                                  new Date(1559143719486L), "D15v4");
            User user2 = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "f0b4707c-88e2-4732-8dcc-149260135049",
                                  new Date(1559143717264L), -79, null, "6f323.eb209@97af5.me", true,
                                  "50a1aa18-5d2c-46a4-ac0e-7e213adac425", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false,
                                  true, false, 101, null, null, "7578201d-626f-4247-9896-5521fdd39bb9", -85,
                                  "9e46ce73-1fe8-48b5-9985-b747f405b5b8", UserStatus.getDefault(), null,
                                  new Date(1559143719486L), "D15v4");
            User user3 = new User("4bf30ac1dc0de7dfb375b7ebbbecdd2e", null, "1280e261-e183-40a3-8360-226b6b98896c",
                                  new Date(1559143713036L), -98, null, "fb791.472c5@4d8c6.fr", true,
                                  "471f9f3a-a91d-427e-9d80-f92a0c943457", "4bf30ac1dc0de7dfb375b7ebbbecdd2e", false,
                                  true, false, -10, null, null, "baaa3781-8a9e-4c8b-bdd4-7339841a1a1d", -5,
                                  "c98673e9-fd6d-48f8-a672-2094c2d69dc0", UserStatus.getDefault(), null,
                                  new Date(1559143717077L), "D15v4");
            assertNotNull(user1);
            assertNotNull(user2);
            assertNotNull(user3);
            assertNotSame(user2, user1);
            assertNotSame(user3, user1);
            assertEquals(user2, user1);
            assertEquals(user2, user1);
            assertEquals(user1, user2);
            assertEquals(user1, user1);
            assertFalse(user1.equals(null));
            assertNotEquals(user3, user1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
