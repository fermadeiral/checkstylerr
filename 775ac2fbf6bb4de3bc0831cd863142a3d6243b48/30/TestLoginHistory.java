// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559143714640L),
                                                          "93ea8248-c8c4-4b39-a8f9-43196b136012", true,
                                                          "498fbc50-3e6c-4818-986b-2be644270aa8");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559143714764L),
                                                          "cc34ae1e-2d68-45e0-a6f2-20db08f95ba0", false,
                                                          "e0d45fc4-bd09-43d0-9ae3-447d34828d00");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559143714764L),
                                                          "cc34ae1e-2d68-45e0-a6f2-20db08f95ba0", false,
                                                          "e0d45fc4-bd09-43d0-9ae3-447d34828d00");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1559143722071L), "b3d7cedc-8fe7-4b26-bb95-5a4b951542da",
                                                     true, "8e80a5b6-1012-410d-aff8-6e9bfb4ca737");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1559143721571L),
                                                          "b3653de3-9bd9-46d2-823d-df437bad0927", true,
                                                          "ca6ffeff-6973-495f-9be6-f826a39a3101");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1559143721571L),
                                                          "b3653de3-9bd9-46d2-823d-df437bad0927", true,
                                                          "ca6ffeff-6973-495f-9be6-f826a39a3101");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1559143720621L),
                                                          "aa5ed5bc-28b6-4523-acd6-1645fddbbcca", true,
                                                          "92634daf-d51e-477b-8770-5f0f7db2f379");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
