// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559143717276L),
                                                                         "bb5c781c-0792-4a92-ab51-11cebecdbf2b",
                                                                         "0f938ef4-d95a-4e79-be82-ce514024b733",
                                                                         "cf8360f3-a374-4ded-b92f-d4035ff5a6e4");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559143719592L),
                                                                         "47a6b2f8-e4d3-4e16-a44c-572a45cbd67e",
                                                                         "5e92c531-a009-4be1-801e-ba79ab90bd5a",
                                                                         "75c89abc-c529-45ac-b5b0-107efcf5b3c8");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559143719592L),
                                                                         "47a6b2f8-e4d3-4e16-a44c-572a45cbd67e",
                                                                         "5e92c531-a009-4be1-801e-ba79ab90bd5a",
                                                                         "75c89abc-c529-45ac-b5b0-107efcf5b3c8");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1559143715880L),
                                                                    "ba2d8781-2879-4e38-a1d4-d79e14bf0332",
                                                                    "26bb217b-2d8e-405a-ab6b-5a89a1a49728",
                                                                    "ad20e778-64be-41b3-89a6-6ee5a85fae5b");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1559143714500L),
                                                                         "01dd8075-1ea9-43e8-b8b0-172405d6e00f",
                                                                         "33e9f4aa-7b5c-4a1d-bcb0-69d63dcaadcb",
                                                                         "1203191e-5ebb-4f42-afda-0bd9cc7faca6");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1559143714500L),
                                                                         "01dd8075-1ea9-43e8-b8b0-172405d6e00f",
                                                                         "33e9f4aa-7b5c-4a1d-bcb0-69d63dcaadcb",
                                                                         "1203191e-5ebb-4f42-afda-0bd9cc7faca6");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1559143722105L),
                                                                         "7c67712b-8edc-4097-aaa4-2f253abd65d7",
                                                                         "fe8a3999-d87a-43a9-9b19-048571048c8b",
                                                                         "906ca14b-c804-4845-86d9-5e43c30da9e5");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
