// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("d98bd16a-efb0-4a86-b954-0edc8f3706b7", true,
                                        "d1f97fa4-6411-4f7b-bb5e-662972fdad54", false,
                                        "add0c4de-efdc-4568-8922-0368b5c2a7d9");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("5313bf22-7fb2-423d-af13-7570aea63ad2", true,
                                        "31640add-c502-4509-ba45-30ab863e722a", true,
                                        "88d783af-e03b-4cd0-acbe-1f72691a66d6");
            Policy policy2 = new Policy("5313bf22-7fb2-423d-af13-7570aea63ad2", true,
                                        "31640add-c502-4509-ba45-30ab863e722a", true,
                                        "88d783af-e03b-4cd0-acbe-1f72691a66d6");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("67bc21e7-c14e-4b73-ae58-884905dd25b4", true, "0a8e3ba5-e262-418a-953e-bc0e7640b982",
                                   true, "50d84383-c530-4eff-b514-88cb4fa5c24a");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("220de9d0-bc7e-49a9-8dde-2ff54b04688a", false,
                                        "f1885436-c411-4c52-8b7c-5f18b9d8eaa2", true,
                                        "d71707b9-22c8-423c-bf3f-8786596bca07");
            Policy policy2 = new Policy("220de9d0-bc7e-49a9-8dde-2ff54b04688a", false,
                                        "f1885436-c411-4c52-8b7c-5f18b9d8eaa2", true,
                                        "d71707b9-22c8-423c-bf3f-8786596bca07");
            Policy policy3 = new Policy("f9af35a4-1622-45b4-abc0-2306874db4a6", false,
                                        "f5db9ade-e090-4147-98d2-7dd594664a05", true,
                                        "496959f3-029e-4ee4-ae58-29d366f131a9");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
