// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143721453L), 92,
                                        "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "c74cb5e4-93c2-4982-a62c-85b4237c6d62", -20,
                                        "1412b561-cb40-4800-8298-d2d40dec1a6a", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                        ApiKeyStatus.getDefault(), new Date(1559143721216L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143716670L), -47,
                                        "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "4616967b-9eeb-4939-b259-8d908068451c", -16,
                                        "861ad422-2c4c-4512-ab7e-9628f09cd63a", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                        ApiKeyStatus.getDefault(), new Date(1559143717649L));
            ApiKey apikey2 = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143716670L), -47,
                                        "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "4616967b-9eeb-4939-b259-8d908068451c", -16,
                                        "861ad422-2c4c-4512-ab7e-9628f09cd63a", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                        ApiKeyStatus.getDefault(), new Date(1559143717649L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143716525L), 1,
                                   "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "6905faab-ee9b-4115-8f7b-70934a469e43", 99,
                                   "a848a712-a39b-41b6-b7ae-4168786545f2", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                   ApiKeyStatus.getDefault(), new Date(1559143717286L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)",
                                          new Date(1559143713541L), -125,
                                          "+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)",
                                          "fe9635f2-a936-419c-b98d-33cbe9d7cf6d", -6, null,
                                          "+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)",
                                          ApiKeyStatus.getDefault(), new Date(1559143716264L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143714163L), -5,
                                        "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "d61d21d6-5008-407c-b7f7-4feb51dac8eb", 61,
                                        "2d18690a-8326-4752-b9f8-ef5476608a21", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                        ApiKeyStatus.getDefault(), new Date(1559143716579L));
            ApiKey apikey2 = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143714163L), -5,
                                        "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "d61d21d6-5008-407c-b7f7-4feb51dac8eb", 61,
                                        "2d18690a-8326-4752-b9f8-ef5476608a21", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                        ApiKeyStatus.getDefault(), new Date(1559143716579L));
            ApiKey apikey3 = new ApiKey("4bf30ac1dc0de7dfb375b7ebbbecdd2e", new Date(1559143712881L), -24,
                                        "4bf30ac1dc0de7dfb375b7ebbbecdd2e", "51608052-dce5-40d9-85fa-3580e2b22093", -27,
                                        "6ca4123e-49b4-440f-9055-79c1e17f1dd3", "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                        ApiKeyStatus.getDefault(), new Date(1559143712808L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
