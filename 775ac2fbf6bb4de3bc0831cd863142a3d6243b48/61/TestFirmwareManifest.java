// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559143713102L), -63,
                                                                      "b09587fd-f822-4192-a042-8853e68073a8",
                                                                      "207e8d0a-f2d3-4baa-a3b4-4c2a05b00926",
                                                                      "d6d8b035-272c-480d-b6ce-e846f380ba75",
                                                                      "760abfb5-cb0a-4bfb-9cdc-f0c26989203d",
                                                                      "f0cdf7d5-2ac5-4754-915f-4118d7c2a85e",
                                                                      "d3349940-bab7-4002-b7d1-b259a9e094a6",
                                                                      new Date(1559143713554L),
                                                                      new Date(1559143715738L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559143717379L), 26,
                                                                      "7ae6048b-dffd-4a09-8483-3e381895651c",
                                                                      "2cc4c608-e50e-4b3e-9bc7-c70e60035a42",
                                                                      "6c2eb0d6-eae1-46fa-9163-f5e0df4d9a20",
                                                                      "cdfeee90-c36e-4ec6-9d9d-bbaa89b54608",
                                                                      "b3dc7709-de9f-414b-ba74-aa7dc2249f2c",
                                                                      "d9bd882c-4996-464d-8755-c088d2b77359",
                                                                      new Date(1559143716394L),
                                                                      new Date(1559143717111L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559143717379L), 26,
                                                                      "7ae6048b-dffd-4a09-8483-3e381895651c",
                                                                      "2cc4c608-e50e-4b3e-9bc7-c70e60035a42",
                                                                      "6c2eb0d6-eae1-46fa-9163-f5e0df4d9a20",
                                                                      "cdfeee90-c36e-4ec6-9d9d-bbaa89b54608",
                                                                      "b3dc7709-de9f-414b-ba74-aa7dc2249f2c",
                                                                      "d9bd882c-4996-464d-8755-c088d2b77359",
                                                                      new Date(1559143716394L),
                                                                      new Date(1559143717111L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1559143713121L), -84,
                                                                 "53a9c45a-4e95-471b-833b-1f887f11c41b",
                                                                 "3d297e3e-4dd4-4500-b03b-d867cdb2cae7",
                                                                 "92735f6e-3b8e-4790-81db-c8ff85592f20",
                                                                 "9ec51027-2f67-4aa6-aa79-574e2410c74f",
                                                                 "89b1f0c8-8029-4d83-b6ec-1ec09ef9997a",
                                                                 "74149528-c621-49cd-bac6-247a8aad0057",
                                                                 new Date(1559143715257L), new Date(1559143713681L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1559143716068L), 37,
                                                                        "d309cc23-2508-4673-9de5-4d93a3bb8f2b",
                                                                        "dbd460a5-1834-497d-bd23-70d5d646a1e7ac87f7d7-bf61-4705-aec3-dd5769734560223219d1-a0c3-423c-be49-dbe3a1575510a6f3bb94-1eac-4724-8a3e-9429693ec0a4247096f8-82c2-4731-b933-f4bc5f72390f8ee058f4-1483-414c-a4ce-d3eda215f3e64d1b4bbf-7e95-4455-a972-402d548efb1ed4a7a6be-d056-4af3-9d14-d0ce2119278d44613ea3-1251-4377-ab88-376a54bf705150915198-e968-4e75-a6b2-d4a6431bb5a98ce5ca20-e704-4569-9a05-e034ce62f93641bf996f-6ab6-4ea3-bbd6-34b9234660b6e33099da-a2c4-4638-bf65-0f1c5729d06e87192bd1-6111-42da-861c-9f0e29a68ecced8adbec-2aba-429a-ac26-97cb9e1c13a6103fa791-c21b-4917-8ef5-857f49a19ce697bc403f-e994-420d-b677-8a0fb40e538de362e2cd-eda4-4fec-b870-805ee8101850f1d49095-2d94-4dfa-a3af-666b0f62348b9718a0c4-648a-4dbf-a3c4-1019dba17b4b003a1bc3-8891-4d2e-9dc0-eac0831a18c82e8233ff-5b5c-4df5-9c85-903cd04e980e9b3e040b-98a5-457f-b809-2e37ce3f2949d70677c6-c21c-4b2a-965b-1e68e3e1f7fd3d605b1d-693c-48e8-a272-251427423fb5b5f1e405-4cd0-4fdd-b9bc-97ee5274fc38479fbc49-7745-4148-9c9f-3789ebc5060656de4e93-dd94-4917-9234-efa964fdee5e04eb6987-dcde-4f19-897d-e0bb0fca624027af91a2-a97f-412b-bf6f-2e69dc879815db80e381-db0c-4be4-a134-cac4e6a269bed1034d76-0e60-4205-b69a-e8f3d154b5a9a6751048-23d0-41c0-94bd-f1ae863c0dc8c5091e5d-b56c-48c1-8150-d081fca0a337d62cc204-dfce-4d9d-9694-28d53328f89670b94627-19e1-4a5d-abec-981b3d2e59fcdfc90a5d-f399-44d0-ad9f-b71d5c58b1f34a881516-7d71-4606-be4a-d9194a51d7ea3fb50537-44aa-4f16-9493-37b2dc58f73e00240f2a-3b7c-4243-b299-cba30e1520e8b7b8f3fc-e553-4a7f-b72e-7a483d7d893e82781154-f00e-4959-aa37-1aa5cc70a7e0815ea323-7a51-4ea9-b2ea-f34890f5701877dd9954-abce-41db-b247-81527e31e25a573b400e-e1cf-404c-bb13-45c6682e2cdc1bf2a0b5-f79e-4cdf-93d2-5768c3296a438cba3cf3-fce3-42d6-a9d4-de35aa82db0c0ff625bd-d1c0-4da7-9181-bc890ad6c5962f8a243a-adcb-4dcb-aaad-ddc43955275f8fd62566-aba7-4075-a876-78876134b8596f2a45e7-6e22-4c0d-8575-fd913ad1c7c771fdbdd0-6741-46ef-b337-4b77c9151de25c39bd48-8d2e-4b27-89d8-01f9048545d7a44f2ac8-185a-48d1-aa16-48c75e88cabd60651d60-883e-479c-8802-dea0bc72011cbbd7c2f4-e57f-4eb6-8001-4760116e657b",
                                                                        "ff112adf-18a0-4c13-b943-de9f9f8e54fd",
                                                                        "e6db8796-7bb2-4a6f-a8b6-541b9603eef2",
                                                                        "2f1c20cd-dea9-4a63-91ff-61d1b921e951",
                                                                        "a2caeeb6-8b58-4740-b96a-7fcea21f8ed6648d2610-dd26-4542-ba4a-8ba7b01641d02764174d-95f0-4905-9d1a-6362584db26bccfc06f0-316e-44db-ac5a-fdd317b21892",
                                                                        new Date(1559143716380L),
                                                                        new Date(1559143718607L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1559143721560L), -26,
                                                                      "527d0302-95cc-4f93-bbaf-7ee30a3fbb06",
                                                                      "8c5fe52f-9f8c-45a0-8524-0da4cad8fbce",
                                                                      "63db3b73-4453-4da8-b5af-1234b8c2760e",
                                                                      "deea6386-d3bc-47f5-8d11-1a632877e41b",
                                                                      "3fa08673-35ab-4361-9b04-05e285347953",
                                                                      "d1685466-3ca7-4549-90d4-1c877939cdb0",
                                                                      new Date(1559143721671L),
                                                                      new Date(1559143716340L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1559143721560L), -26,
                                                                      "527d0302-95cc-4f93-bbaf-7ee30a3fbb06",
                                                                      "8c5fe52f-9f8c-45a0-8524-0da4cad8fbce",
                                                                      "63db3b73-4453-4da8-b5af-1234b8c2760e",
                                                                      "deea6386-d3bc-47f5-8d11-1a632877e41b",
                                                                      "3fa08673-35ab-4361-9b04-05e285347953",
                                                                      "d1685466-3ca7-4549-90d4-1c877939cdb0",
                                                                      new Date(1559143721671L),
                                                                      new Date(1559143716340L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1559143714893L), -22,
                                                                      "4c1af151-c7d1-4f35-8a5d-0a9676a5268b",
                                                                      "a817e9b6-ce41-411f-951e-c57f92c0d8d1",
                                                                      "2bbabd22-5f56-4472-b36a-19c27bc864b0",
                                                                      "d389a36e-20b1-44bc-9ab3-6947e33e2e08",
                                                                      "f944459c-4947-4ed1-8530-ba609b84a760",
                                                                      "a1088920-93c3-4b02-8d66-44598468a946",
                                                                      new Date(1559143714541L),
                                                                      new Date(1559143716862L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
