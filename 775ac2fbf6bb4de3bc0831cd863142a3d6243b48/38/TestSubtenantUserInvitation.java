// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           new Date(1559143720905L),
                                                                                           "d407d.0a63d@e7413.fr",
                                                                                           new Date(1559143712642L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           null,
                                                                                           new Date(1559143713789L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           new Date(1559143715692L),
                                                                                           "02a59.85329@334ee.me",
                                                                                           new Date(1559143714946L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           null,
                                                                                           new Date(1559143715977L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           new Date(1559143715692L),
                                                                                           "02a59.85329@334ee.me",
                                                                                           new Date(1559143714946L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           null,
                                                                                           new Date(1559143715977L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                      new Date(1559143713567L),
                                                                                      "a2f1c.c6c75@cdaf4.fr",
                                                                                      new Date(1559143720387L),
                                                                                      "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                      null, new Date(1559143719801L),
                                                                                      "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1559143722217L),
                                                                                             null,
                                                                                             new Date(1559143714355L),
                                                                                             "+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)",
                                                                                             null,
                                                                                             new Date(1559143720678L),
                                                                                             "+]\u0016%6`îµ„6\u001366ã…°é„š$$?6é®“A@6ã®¾6\u0010å‘«\u0003á¾ªNï†?66QVä¸½@è”£666>ã¸›\b\u001b[W\u001a6\u001c\u001f6+ê»²6F'6\u001669å¡Š\u0015)");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           new Date(1559143721212L),
                                                                                           "5778b.f4e26@af55f.fr",
                                                                                           new Date(1559143720773L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           null,
                                                                                           new Date(1559143716699L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           new Date(1559143721212L),
                                                                                           "5778b.f4e26@af55f.fr",
                                                                                           new Date(1559143720773L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           null,
                                                                                           new Date(1559143716699L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           new Date(1559143721369L),
                                                                                           "4b5a8.3e89b@b3538.me",
                                                                                           new Date(1559143718230L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                                                           null,
                                                                                           new Date(1559143717232L),
                                                                                           "4bf30ac1dc0de7dfb375b7ebbbecdd2e");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
