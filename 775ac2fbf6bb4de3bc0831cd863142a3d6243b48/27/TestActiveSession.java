// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                             "84ecf918-989b-40c3-8c4c-2dddebbaecef",
                                                             new Date(1559143720178L),
                                                             "3852d3aa-7f7a-467c-9dd5-cb08084b141e",
                                                             "85dca364-e5c2-4d77-b585-11feeb22860c");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                             "015027f8-0728-4aa0-bee6-4fe3e495f80a",
                                                             new Date(1559143712543L),
                                                             "6807cdc2-1e21-46fd-9d00-9bbf9d313c8b",
                                                             "4eda21c0-d716-47ab-811b-efb0f467be43");
            ActiveSession activesession2 = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                             "015027f8-0728-4aa0-bee6-4fe3e495f80a",
                                                             new Date(1559143712543L),
                                                             "6807cdc2-1e21-46fd-9d00-9bbf9d313c8b",
                                                             "4eda21c0-d716-47ab-811b-efb0f467be43");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                        "900baed4-7716-4461-8f42-e0684d3a7c6e",
                                                        new Date(1559143719946L),
                                                        "9544beac-3c4c-4acc-bd54-d32d10bdff65",
                                                        "250d8e47-f2be-4f76-8f2b-5d967bdd7623");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                             "f543ed0f-e638-48bf-8ce0-558725f2f7be",
                                                             new Date(1559143722321L),
                                                             "367e6985-054d-403c-b319-7b5fd4af2c0c",
                                                             "9c07295e-1e6f-44ab-a3e0-2a3456ad6153");
            ActiveSession activesession2 = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                             "f543ed0f-e638-48bf-8ce0-558725f2f7be",
                                                             new Date(1559143722321L),
                                                             "367e6985-054d-403c-b319-7b5fd4af2c0c",
                                                             "9c07295e-1e6f-44ab-a3e0-2a3456ad6153");
            ActiveSession activesession3 = new ActiveSession("4bf30ac1dc0de7dfb375b7ebbbecdd2e",
                                                             "c68b9aeb-6a34-4828-8b76-d82fe8f11ef9",
                                                             new Date(1559143720114L),
                                                             "afea66ce-6ce6-4e99-aa63-15188098c3ad",
                                                             "fad55925-b320-4053-a806-7da9595e892d");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
