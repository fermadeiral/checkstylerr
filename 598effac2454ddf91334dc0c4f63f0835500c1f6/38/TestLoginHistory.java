// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1570127619469L),
                                                          "017c082c-4055-46c1-aa53-4e2c9b637820", false,
                                                          "8517a1bc-4409-4837-984a-e0a53c7b65cc");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1570127619216L),
                                                          "e34d085e-bc6a-4303-ad27-59205dc77402", true,
                                                          "4bc6d1c6-d580-4809-9d70-f689d8469db4");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1570127619216L),
                                                          "e34d085e-bc6a-4303-ad27-59205dc77402", true,
                                                          "4bc6d1c6-d580-4809-9d70-f689d8469db4");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1570127625167L), "5b421895-153d-4eb9-af1e-7ee55deb23b3",
                                                     false, "e6385aa6-e5ae-4e82-8fcb-3d325b363b39");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1570127620246L),
                                                          "b0905fb7-e64c-444f-b2f9-b49306d1d4db", true,
                                                          "f7bc9553-dc79-4099-b2ac-7c7efe23fb42");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1570127620246L),
                                                          "b0905fb7-e64c-444f-b2f9-b49306d1d4db", true,
                                                          "f7bc9553-dc79-4099-b2ac-7c7efe23fb42");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1570127624425L),
                                                          "0fd1e943-12bc-4aed-8611-817625bf5a16", true,
                                                          "25e10512-54ee-44e8-a1d2-f987ba4b6c18");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
