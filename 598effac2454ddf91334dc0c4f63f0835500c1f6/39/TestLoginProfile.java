// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("267598aa-1252-4d8f-85f3-e349ddc6df82",
                                                          "f81313a9-bb4c-4498-9b4e-52ae0653f032");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("5ebcdd95-5457-42c9-a9c3-074e314a4761",
                                                          "c64c5e88-9c42-4701-b1d7-81ec29fd3d5d");
            LoginProfile loginprofile2 = new LoginProfile("5ebcdd95-5457-42c9-a9c3-074e314a4761",
                                                          "c64c5e88-9c42-4701-b1d7-81ec29fd3d5d");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("22adbd82-e5ff-4cf5-a7e0-f3fe746c9031",
                                                     "c744857d-e069-409a-b800-0e71c3d6743e");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("cc16e514-0add-4bca-94f6-4a53b3f62f56",
                                                          "ad17a72a-ec43-41d9-9842-fcf5e1b84a1f");
            LoginProfile loginprofile2 = new LoginProfile("cc16e514-0add-4bca-94f6-4a53b3f62f56",
                                                          "ad17a72a-ec43-41d9-9842-fcf5e1b84a1f");
            LoginProfile loginprofile3 = new LoginProfile("a2be4b72-1779-476d-ba6a-6a444d5f613c",
                                                          "9c0ef068-a8a8-4396-b34a-448c99828f86");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
