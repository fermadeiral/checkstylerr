// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1563781715182L),
                                                          "935eefa1-4c09-4936-b43e-ad9e232264aa", true,
                                                          "5a9953b2-2f55-4fd0-87cd-bdc709df06e9");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1563781718405L),
                                                          "fe2f81af-3793-47c2-8957-798236f343bb", false,
                                                          "3e01036c-1c7c-4a86-a632-61a8bbdf83b7");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1563781718405L),
                                                          "fe2f81af-3793-47c2-8957-798236f343bb", false,
                                                          "3e01036c-1c7c-4a86-a632-61a8bbdf83b7");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1563781715456L), "20f2cfb3-5aef-4a00-a193-363d272fcc12",
                                                     false, "4bb2a246-c6c4-4862-a8c2-30fb0aeb3ebe");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1563781715354L),
                                                          "8e68259c-9ca4-4e33-b43a-b34b063adf4a", false,
                                                          "4f2f9bb0-0ffd-468a-a957-70b363f6fbc6");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1563781715354L),
                                                          "8e68259c-9ca4-4e33-b43a-b34b063adf4a", false,
                                                          "4f2f9bb0-0ffd-468a-a957-70b363f6fbc6");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1563781715811L),
                                                          "13e7d999-9751-4ccc-953c-bb7451dde890", false,
                                                          "704666a3-32fe-46ea-8ae7-6e80765bacf3");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
