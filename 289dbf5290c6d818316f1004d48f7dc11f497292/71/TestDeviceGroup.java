// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1563781724215L), null,
                                                       "fc87bae6-5cbb-4695-bca0-21d522383a8e", -4,
                                                       "7aa94b8d-5d9f-45c7-a1a0-095f38e8acfb",
                                                       "219fbe3f-6dd9-422c-b18b-0526eec52ec3",
                                                       new Date(1563781720982L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1563781714580L), null,
                                                       "b7e9d385-f0b2-4152-8d1f-63e62767316d", -71,
                                                       "91aa83ea-e663-40fd-9666-d45b93865871",
                                                       "f5bbdaf4-880e-44c1-8f1b-ccb711396998",
                                                       new Date(1563781724160L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1563781714580L), null,
                                                       "b7e9d385-f0b2-4152-8d1f-63e62767316d", -71,
                                                       "91aa83ea-e663-40fd-9666-d45b93865871",
                                                       "f5bbdaf4-880e-44c1-8f1b-ccb711396998",
                                                       new Date(1563781724160L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1563781715430L), null,
                                                  "283169b5-733f-4117-9dda-0ffccc0cc035", 122,
                                                  "30b708ec-19bd-4beb-97fb-82ed29e760a2",
                                                  "31b47df9-1b31-4fef-b6eb-b7b97f5630df", new Date(1563781716679L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1563781716100L), null,
                                                         "e271d977-a833-4e14-a30e-cf58f11af02780f98a00-7ef2-4e7c-b6a7-d019276f967c93c6254d-168f-427c-bfdf-75f8267720b3700bdb41-f957-4175-9d34-52cad0495b3aca5cf6ee-8b4b-4712-8f63-ff485ca1c951d61365d2-6e5f-4348-bd2e-bc1172f8f2de498c067f-699b-480f-817f-0eb454f2363c542f7301-6f8f-40b2-82e7-1809f1bc48d1b614a71b-b533-43eb-a926-e02ecd9438955c465dda-8118-4eb8-8734-d028748a905681ee2fa0-3160-4138-abfc-921d6b0e7b556f9ed89d-4191-44b7-b51b-d0917c5616926113f100-583f-4323-ac83-8748ff449cd4d2bedbeb-6241-48ac-b63f-4ccd3862d4585a023ffb-8501-40d6-8dbd-0c58ff2f310dca14cdf7-9ed5-4ad5-9065-851c96b058a5ef8d8976-91fc-4bfa-a8c4-2c9c60433c131032f010-8ec9-4696-b171-33c6485e6677b6d19c61-75e4-4e9d-8ca9-a7d4114b6f74a33cbc9b-900d-44c3-92e3-b581a6e2e494864b7453-3c90-449a-960a-555afa4f079926d67df4-3c19-4f0e-8f71-f782ac590c603a6c1fae-f7d7-4f67-a32c-686948d59297ae82c6ab-5d66-4e8c-9588-99a525778b640c22972b-5f94-4509-9aec-451be73f10e9193b56c0-696f-40c5-b694-9239f4f2200cb0c0942f-c8ec-4c7c-b126-e7b8758ebffde957f137-a9a6-4634-a2ae-04e47cae812f392d0773-de80-4f96-b99d-71dd905b3de88268fd31-708e-48bb-b8ca-7980eb81fe4d8a705175-d868-4de7-9590-2dc085cf1310b9d0e629-c084-4329-b299-8bcc867dc9b5ea161623-f9e0-4032-a94f-e24e2e40fc2fe71e1ddf-7e08-44f6-a8a1-384ed54f55f438b9959d-e498-4cb6-affe-6aa28402b8595af3677b-aeb6-4e58-a49c-4ff733301e71b7af2853-0be2-453e-8c98-7a77191596cc63af51d1-5661-4578-a9d4-d0abc298e58e39effc8c-b485-4dbc-86ec-0e301599974ca7a5e6fb-1347-4597-b454-a1d4edad0c02b68a44d2-e4c6-4102-8b25-2e625e597116381e5f94-b7b4-4f86-b2fd-df416c34ab2dba5bcb15-922a-4a7c-9c19-9bd923fa4f86474759e8-bc1c-46a7-a939-fd9332b1b41c0c13c9f4-3ab9-4971-97d4-545b6cedd3c018b573cc-de50-44a0-b59b-5cbf7b7d892adf5a4e03-1a1d-40af-87a3-2cd3f54810a64cf4af17-047a-40b3-87bc-b2485117ec7dab5171a8-9085-4458-aca3-00087065d04683c53117-2a67-4692-bcd2-3d81920a6dcfb442deac-ae89-44b3-8d21-8d146d9771aeee45a1dc-2c11-4247-be25-f03c611d457c99dc8199-c7a0-4d96-90ae-479cc92679233b9bd621-3e96-42f3-8be2-c06b9cca1ad72dcb444e-33d3-4321-a8ea-3ff7559c6c0d85e2d929-5025-43a4-b66d-d47bffcda201",
                                                         28, "d5166d49-678e-4df0-92dc-3024e51d95bf",
                                                         "03f18bc7-c525-4017-bf8c-ef20fe75c4f77707950a-07b2-44a6-93df-d20fb1455c54b1daafe3-f545-4feb-911a-e2580a60d2aea0b3bdd7-8f4c-4637-9d88-406166d96f06",
                                                         new Date(1563781719375L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1563781722360L), null,
                                                       "d8c0b600-b014-4df1-a83b-79b76ba47999", -110,
                                                       "dcbd5175-d476-4a22-ba51-44624a979273",
                                                       "616ce2c4-5515-4521-955f-cbe44dc5dad3",
                                                       new Date(1563781716307L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1563781722360L), null,
                                                       "d8c0b600-b014-4df1-a83b-79b76ba47999", -110,
                                                       "dcbd5175-d476-4a22-ba51-44624a979273",
                                                       "616ce2c4-5515-4521-955f-cbe44dc5dad3",
                                                       new Date(1563781716307L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1563781716318L), null,
                                                       "aa72ca80-280b-49b9-8238-53b2e6b84bbd", -49,
                                                       "23d604b7-705e-4032-b7cf-e7482d425b2a",
                                                       "45f3e715-e259-4ab3-8413-ee161ad27761",
                                                       new Date(1563781717783L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
