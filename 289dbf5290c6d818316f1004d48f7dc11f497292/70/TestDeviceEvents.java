// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1563781718203L), null,
                                                          new Date(1563781718674L),
                                                          "3ecb7d17-3d14-453c-b524-c2cd3977ffe8",
                                                          "07545d9f-a142-4fe2-b745-12cd88b72ca2",
                                                          "d61434df-ab30-4de6-8c6c-8cc97e12d68d",
                                                          "0253d7dd-b4a8-464c-bfbd-b66015642174",
                                                          "399d5a5b-6707-40eb-863f-4dfcf82ba6d7",
                                                          "cfd405e1-402d-416c-81e0-78c307620f91", true);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1563781723078L), null,
                                                          new Date(1563781723833L),
                                                          "d86c5f56-8ef2-4356-9bf3-19dfac7c6775",
                                                          "0047c011-61a5-460c-bd07-50db0578156a",
                                                          "406f2112-9603-43be-bf59-872d69b4e063",
                                                          "90cc633f-d238-41fa-819e-53bce6d7218a",
                                                          "6168cbed-6e6d-4bd4-8f17-a1a3e9651796",
                                                          "4fa393e4-0b41-426e-96c9-bf80cc867b9d", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1563781723078L), null,
                                                          new Date(1563781723833L),
                                                          "d86c5f56-8ef2-4356-9bf3-19dfac7c6775",
                                                          "0047c011-61a5-460c-bd07-50db0578156a",
                                                          "406f2112-9603-43be-bf59-872d69b4e063",
                                                          "90cc633f-d238-41fa-819e-53bce6d7218a",
                                                          "6168cbed-6e6d-4bd4-8f17-a1a3e9651796",
                                                          "4fa393e4-0b41-426e-96c9-bf80cc867b9d", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1563781717389L), null, new Date(1563781714962L),
                                                     "9527b44d-c9f4-4acc-bff0-214fa91ed6a1",
                                                     "3f5373ae-9d25-4bcb-b859-a0082d1cc0e4",
                                                     "b20da020-8fae-4389-acf9-a7dfab816282",
                                                     "309f2ac7-578a-4916-bf8a-82601566f2e9",
                                                     "e225a595-ee80-41f7-88c2-d7be15a0d3ee",
                                                     "98b83f14-8842-4bbb-9541-e871bd8f367f", false);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1563781714619L), null,
                                                          new Date(1563781723777L),
                                                          "85f6e5fc-0bb6-4b1c-8ca4-11328cee508e",
                                                          "5809e3b9-494e-4ff0-877b-9c03f8ea7d9b",
                                                          "21a9171d-0f62-4901-b9dd-247a5beb56c3",
                                                          "db9cff23-b08d-4bb4-a207-aeb904f89d91",
                                                          "10c3bce3-dd0d-4b3c-bc97-9cebc9a27964",
                                                          "ada5d472-cabc-410d-ab88-b125894b821e", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1563781714619L), null,
                                                          new Date(1563781723777L),
                                                          "85f6e5fc-0bb6-4b1c-8ca4-11328cee508e",
                                                          "5809e3b9-494e-4ff0-877b-9c03f8ea7d9b",
                                                          "21a9171d-0f62-4901-b9dd-247a5beb56c3",
                                                          "db9cff23-b08d-4bb4-a207-aeb904f89d91",
                                                          "10c3bce3-dd0d-4b3c-bc97-9cebc9a27964",
                                                          "ada5d472-cabc-410d-ab88-b125894b821e", true);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1563781719377L), null,
                                                          new Date(1563781724244L),
                                                          "90d5537f-231e-4c2f-8fc2-f0c0fc9080fd",
                                                          "fce7e084-2ff1-4fb9-a411-cb24a8508102",
                                                          "42d0f661-7c54-459f-ac54-21f311f516ce",
                                                          "f7053797-d3df-4f3a-a8a0-fe4a32906a43",
                                                          "57c736e6-126a-4d48-a120-d6d8f909cece",
                                                          "8dc0b1f7-f652-4d9e-b1f8-11e85c61615b", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
