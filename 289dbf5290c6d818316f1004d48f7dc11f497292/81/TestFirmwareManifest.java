// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1563781720934L), -1,
                                                                      "0958fa60-68ef-452a-a0f4-82387cd548fe",
                                                                      "19d6627e-cf67-4a8e-8d4f-a8e0841f8711",
                                                                      "cd8d4d9a-070a-484b-9ba5-5b2311a5399b",
                                                                      "79b0564d-85b9-418f-ab23-38322afd9198",
                                                                      "10109600-f277-4e6f-9377-242d96dfa0b8",
                                                                      "3395e7e2-b057-4cb0-a208-99d8b1e60ec7",
                                                                      new Date(1563781715178L),
                                                                      new Date(1563781717529L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1563781720067L), 4,
                                                                      "ef91bc20-2af8-4d27-92a8-3b389d34580c",
                                                                      "2fc8464e-c07a-4a54-ba63-c7ea174c8a0c",
                                                                      "5d3b1109-54e1-42fa-bda1-a6f72b1f5a9b",
                                                                      "7472ff9b-5665-4d1f-9f9b-7ee0ff12d5e1",
                                                                      "143013db-8294-4be9-86be-fa37b108ba93",
                                                                      "7d104159-4fe1-4698-a927-3db6588ffbf7",
                                                                      new Date(1563781724176L),
                                                                      new Date(1563781719435L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1563781720067L), 4,
                                                                      "ef91bc20-2af8-4d27-92a8-3b389d34580c",
                                                                      "2fc8464e-c07a-4a54-ba63-c7ea174c8a0c",
                                                                      "5d3b1109-54e1-42fa-bda1-a6f72b1f5a9b",
                                                                      "7472ff9b-5665-4d1f-9f9b-7ee0ff12d5e1",
                                                                      "143013db-8294-4be9-86be-fa37b108ba93",
                                                                      "7d104159-4fe1-4698-a927-3db6588ffbf7",
                                                                      new Date(1563781724176L),
                                                                      new Date(1563781719435L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1563781722175L), -83,
                                                                 "bbae9424-547b-437a-8058-1f67198763e2",
                                                                 "1d76e608-3828-4aeb-971e-f20d637a4070",
                                                                 "83a2717f-c6c3-48b0-bb06-6b3f551f02f2",
                                                                 "4e73d31b-7277-4d86-8b7a-28ec19f93e12",
                                                                 "d84f9436-0fee-46dc-a77b-bd9c732f5881",
                                                                 "ff33fdec-674d-4566-9620-3b19d81970a9",
                                                                 new Date(1563781722881L), new Date(1563781722959L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1563781714663L), -69,
                                                                        "4cc67218-b724-48cf-ac52-0d74bc12834e",
                                                                        "23549de8-6d5a-4294-9977-a4d9b792a9b693092038-461c-44dd-9e84-64e37f617dc32bae7412-27b7-40c4-9bce-a9abe8d0a7aaec6e44be-9f4d-4fdd-931a-0cc85258ce34a0ba803f-d84d-4831-b73c-af4f16ecb4519c288033-6748-4902-b473-0cb3e28ef5ec3851aa02-c7f6-44fd-acdd-875fee9c45ccc5566073-0378-4124-acf9-7bd975fb2a859ecaa498-2573-447e-ba8f-19cf8dc6c5d76c547f7c-6466-48b9-99a0-01c1edc78d1933a46888-4de3-4e36-9d07-939e0ceaac13162dc96e-8bf6-418b-9fe1-070bd573b01e4f5b436b-aafd-4966-b0b0-5ce0f78cb39d0dd209c4-1eeb-44b9-854d-562634669e5ec8c05a28-f358-486e-8343-cd5d35b12879ccffbc28-c692-44b5-9bf0-38747709f90004e5fb05-0fac-4675-8152-d34f5aae6fea1c6db52e-343f-4796-b18f-4664dbd30e7e250ae0d4-064f-493c-a013-b60a60b785e495e862f0-e732-4882-9af0-6d200c641ea7fbec1e4f-61f3-4445-98d9-46ba1d21830352434638-9c28-4957-979c-aa9aed4a6ef5aa9c7c83-618e-4da8-b530-333051f3741806c6ee2d-1e08-4db8-a81c-d758603e42c766266c90-4866-4be3-bc88-9c07649d38295a5dc89c-c206-4ae5-bb46-c1073b47b0774657e8f2-ff5a-46da-b10e-1ec42b6e079a12bdf1bd-e4bf-4ba1-8a46-0140149bde6a30f70614-51c0-4757-85a3-e13ad675849350029855-5724-4d44-9997-ce3d08efc402ee552ebe-0397-4452-8891-79583a00fbbe476ad94f-2c9e-49cc-93c1-d7674a8b4b11eed7493d-de49-4e52-916a-89992a75e92154511194-97c5-44ae-8310-3a1853b717ef9b035d73-4b1b-4b51-ad96-37e86a63b1d6daab88d2-8257-461d-a982-2547ec2d349483eff97c-fb90-4c22-a4cc-ae1ea8b1d87b67b5548d-f000-4088-9b05-a09e203c2dcd2988966f-3573-48dc-8680-d043760163cacb7feb60-87c9-4363-b3b0-c21f8e30964a94886c48-01c1-40af-8a52-dd4d0c75fc2c0aa04215-2c40-402a-af75-59987e0830e2e2433b22-aff8-4ce0-a01d-1bd728bb931a73005e0b-6f93-4672-becb-1a06c8c84e7092350d30-7eaa-41a1-a5b4-56395b8a83922c761a4d-cf76-44c5-a24d-d24c81453393bc9dfc63-d615-4b73-874d-566dd522553874ffa3e3-4770-4475-a4ce-6ae7bb2843529b6a457d-7f27-4a4b-a81b-1d96fca74d27f7f4fbb9-e3fb-4122-a854-b5faf8e54e17810a195e-81b1-4808-9a7c-3017aebacbf314bddee6-7bef-4db9-a8f6-9143cba492efceeb46c3-1bba-4a58-b442-3d50d4cabd33b4ca379e-0520-4d66-8809-fb67a9bc791576108088-bebe-41e2-8d79-1d47ea5a4fa65b64b730-a29a-4750-8426-e0d85ee1c81d",
                                                                        "ef1d0c81-e34e-4cf6-bb14-57ec92ab5e6c",
                                                                        "15bb700d-90f2-48c5-98fc-e3ea0dc7d9c8",
                                                                        "69f9f9e7-9ebe-4336-b1ba-c3b691740206",
                                                                        "aed2cc35-71a4-42b3-b697-492dfb801cd4f1a151a9-09e0-4242-9848-a795fc824ce7678b858a-135f-42e0-b6aa-fffe2e49a05e946465ea-732d-481d-aa90-551c6c4719aa",
                                                                        new Date(1563781717749L),
                                                                        new Date(1563781714704L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1563781715919L), -11,
                                                                      "7f6ae6ca-f0cf-4314-a228-289620555b9c",
                                                                      "f80bc29e-17a8-4bee-aea3-9ac2cf2376ee",
                                                                      "824692e5-4f25-4fbc-9b2d-da52cb70eda8",
                                                                      "ddb61912-0597-4d57-9d4d-99f9d322dd3c",
                                                                      "4c2c6f89-5158-4ee5-87f1-41633a72d1e1",
                                                                      "e068fb94-7f40-4bb1-9551-69fc2036cc25",
                                                                      new Date(1563781721465L),
                                                                      new Date(1563781715187L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1563781715919L), -11,
                                                                      "7f6ae6ca-f0cf-4314-a228-289620555b9c",
                                                                      "f80bc29e-17a8-4bee-aea3-9ac2cf2376ee",
                                                                      "824692e5-4f25-4fbc-9b2d-da52cb70eda8",
                                                                      "ddb61912-0597-4d57-9d4d-99f9d322dd3c",
                                                                      "4c2c6f89-5158-4ee5-87f1-41633a72d1e1",
                                                                      "e068fb94-7f40-4bb1-9551-69fc2036cc25",
                                                                      new Date(1563781721465L),
                                                                      new Date(1563781715187L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1563781722341L), 75,
                                                                      "8a828d16-9089-436c-a436-2fe365209fbd",
                                                                      "8e6b7543-1608-45a3-ae1f-0e71884b538a",
                                                                      "13379e08-8bb8-473e-bebd-0a24c1d85b16",
                                                                      "33123ba1-21b4-42eb-84ef-0e90e8cc5ed1",
                                                                      "86db5925-b275-43c4-9ef7-6885a8be7eb6",
                                                                      "8286d90b-4ad9-4efd-a311-e2e2aac70b84",
                                                                      new Date(1563781718728L),
                                                                      new Date(1563781717210L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
