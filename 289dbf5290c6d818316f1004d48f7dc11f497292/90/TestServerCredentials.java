// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1563781718567L),
                                                                         "a402f033-edd1-4f81-b715-15df3490f21d",
                                                                         "5de49b26-4fcc-4d1b-bf17-7fe0c7e5f83e",
                                                                         "b27d0509-e158-4bca-b926-d775987fb2b8");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1563781721510L),
                                                                         "75f04625-5487-4ddc-95fe-6bad897844fc",
                                                                         "be3d8dfa-1583-438b-8727-790f4e797c24",
                                                                         "5cab74ef-a387-4807-9bde-48e578c25977");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1563781721510L),
                                                                         "75f04625-5487-4ddc-95fe-6bad897844fc",
                                                                         "be3d8dfa-1583-438b-8727-790f4e797c24",
                                                                         "5cab74ef-a387-4807-9bde-48e578c25977");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1563781719397L),
                                                                    "36cd30aa-ae35-496b-964b-f0f67f78a722",
                                                                    "071a2128-237c-4273-bd01-a7b78cb5392e",
                                                                    "de801ab9-eb9e-45d9-88f8-8468c88c2113");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1563781717892L),
                                                                         "81c94e9e-73b8-48e7-a142-29d473a995d0",
                                                                         "a206f2a6-603a-4273-8df9-59b4a2e0c03f",
                                                                         "8f8c719c-b4c5-4893-b238-33f8f3ed28be");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1563781717892L),
                                                                         "81c94e9e-73b8-48e7-a142-29d473a995d0",
                                                                         "a206f2a6-603a-4273-8df9-59b4a2e0c03f",
                                                                         "8f8c719c-b4c5-4893-b238-33f8f3ed28be");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1563781724017L),
                                                                         "4cefaeb0-d7ac-45cb-a2c5-24d66966258a",
                                                                         "9c88204a-80ac-459b-9313-c961b73e167b",
                                                                         "b2a8a879-ca7a-4415-be40-845b3e78d2f9");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
