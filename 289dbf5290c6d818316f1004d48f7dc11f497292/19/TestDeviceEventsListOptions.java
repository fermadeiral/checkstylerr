// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-44),
                                                                                           Long.valueOf(-53),
                                                                                           Order.getDefault(),
                                                                                           "835e5a44-44dc-4852-97bb-0940e514f59d",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("43680011-1af9-4a4d-a14e-a63caca99e4e")
                                                                          .notEqualToDeviceId("4e4751a5-2539-4ff1-b832-5cba07f25105")
                                                                          .inDeviceIds(Arrays.asList("2dd801dc-6bef-4257-85cb-2242e95f3859",
                                                                                                     "4617e272-2123-4787-b474-f57a4228854f"))
                                                                          .notInDeviceIds(Arrays.asList("af1e37b4-bd5e-4d2b-9b25-3731812ea49e",
                                                                                                        "e347fff5-06ae-4a21-8024-b4ff5682ede5",
                                                                                                        "23573472-f3be-451f-bbc9-dcd06b65a213",
                                                                                                        "e37b56eb-05bb-40a3-8cd7-fe2291787283",
                                                                                                        "1814a51c-cb14-43a2-8522-70b597066d97"))
                                                                          .equalToDescription("fead108d-514a-4d3b-bfa1-ccd86b54f123")
                                                                          .notEqualToDescription("102fdce5-fc3e-4845-a810-8d82e5b6cdf8")
                                                                          .inDescriptions(Arrays.asList("aca3e956-437f-4064-a009-7c99f0ca56c4",
                                                                                                        "dc248429-7dc1-4afd-bcfe-c96d989f3641",
                                                                                                        "6b781892-5519-4023-8384-f76147aa4bd8",
                                                                                                        "204a0a72-b9c8-45f8-94b7-4ec557359d74",
                                                                                                        "94aa8388-6b22-45e3-a005-a6307a3d9d32",
                                                                                                        "261a7170-e1b1-4321-8598-bbb3202ada80",
                                                                                                        "eaa07d7f-5669-458f-ab8c-b849ce22c5b0"))
                                                                          .notInDescriptions(Arrays.asList("7346eaf9-3f31-4057-afe7-853c4f45eb41",
                                                                                                           "35b90613-59e9-4e24-8ec0-f352395ef8c2"))
                                                                          .inDateTimes(Arrays.asList(new Date(1563781722354L),
                                                                                                     new Date(1563781717503L),
                                                                                                     new Date(1563781717915L),
                                                                                                     new Date(1563781721244L),
                                                                                                     new Date(1563781719314L),
                                                                                                     new Date(1563781725818L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1563781724968L),
                                                                                                        new Date(1563781717967L),
                                                                                                        new Date(1563781724629L),
                                                                                                        new Date(1563781725347L)))
                                                                          .lessThanDateTime(new Date(1563781722539L))
                                                                          .greaterThanDateTime(new Date(1563781724922L))
                                                                          .equalToStateChange(Boolean.TRUE)
                                                                          .notEqualToStateChange(Boolean.TRUE)
                                                                          .equalToId("ad572c3d-61b4-40a0-ac67-f3cf9cc814c0")
                                                                          .notEqualToId("327c304b-86e2-4296-8c61-1484d46b27a2")
                                                                          .inIds(Arrays.asList("4aadf35e-2eb9-40ad-8aee-8857602117ce",
                                                                                               "56c0a386-76ef-4152-bad7-2d16a1703f67",
                                                                                               "31f226df-8b94-4bbf-8f65-94559b48a15e",
                                                                                               "89e0f469-fc44-480c-90ac-4c2615d6b654",
                                                                                               "06ed1b4e-1690-4179-992c-80ca6158b5b2",
                                                                                               "0336ccd8-b3ef-4a1a-b8ca-8870e8751ee2"))
                                                                          .notInIds(Arrays.asList("2d757979-38cf-4074-b0f7-388ee2e386e0",
                                                                                                  "8f457e6a-2dc4-4b8c-845d-d117023d5a07",
                                                                                                  "4dda679a-cbf1-45ff-a661-195a3e3d88b2"))
                                                                          .equalToEventType("5179c4b2-8a98-4037-81a9-efbc110f8228")
                                                                          .notEqualToEventType("2b88de0e-a118-4b9a-962f-17c1da074b1a")
                                                                          .inEventTypes(Arrays.asList("59ba8e7a-d5da-4dee-a591-924b8bb32325",
                                                                                                      "42b66c0b-15f5-42b6-b2c0-7eaa75b840b2",
                                                                                                      "f4e52a86-3b49-41eb-a44c-78e2db4401e6",
                                                                                                      "4589829e-fa14-402a-a611-765203c991a3",
                                                                                                      "c799ae8a-8432-45e3-954c-58cb65b6c632",
                                                                                                      "109836e7-50de-4893-83f1-96e568f053df"))
                                                                          .notInEventTypes(Arrays.asList("ae463804-e04a-45d0-aa9e-045c50e4d011"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("43680011-1af9-4a4d-a14e-a63caca99e4e",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("4e4751a5-2539-4ff1-b832-5cba07f25105",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("2dd801dc-6bef-4257-85cb-2242e95f3859", "4617e272-2123-4787-b474-f57a4228854f"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("af1e37b4-bd5e-4d2b-9b25-3731812ea49e", "e347fff5-06ae-4a21-8024-b4ff5682ede5",
                                       "23573472-f3be-451f-bbc9-dcd06b65a213", "e37b56eb-05bb-40a3-8cd7-fe2291787283",
                                       "1814a51c-cb14-43a2-8522-70b597066d97"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("fead108d-514a-4d3b-bfa1-ccd86b54f123",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("102fdce5-fc3e-4845-a810-8d82e5b6cdf8",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("aca3e956-437f-4064-a009-7c99f0ca56c4", "dc248429-7dc1-4afd-bcfe-c96d989f3641",
                                       "6b781892-5519-4023-8384-f76147aa4bd8", "204a0a72-b9c8-45f8-94b7-4ec557359d74",
                                       "94aa8388-6b22-45e3-a005-a6307a3d9d32", "261a7170-e1b1-4321-8598-bbb3202ada80",
                                       "eaa07d7f-5669-458f-ab8c-b849ce22c5b0"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("7346eaf9-3f31-4057-afe7-853c4f45eb41", "35b90613-59e9-4e24-8ec0-f352395ef8c2"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1563781722354L), new Date(1563781717503L), new Date(1563781717915L),
                                       new Date(1563781721244L), new Date(1563781719314L), new Date(1563781725818L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1563781724968L), new Date(1563781717967L), new Date(1563781724629L),
                                       new Date(1563781725347L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1563781722539L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1563781724922L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("ad572c3d-61b4-40a0-ac67-f3cf9cc814c0",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("327c304b-86e2-4296-8c61-1484d46b27a2",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("4aadf35e-2eb9-40ad-8aee-8857602117ce", "56c0a386-76ef-4152-bad7-2d16a1703f67",
                                       "31f226df-8b94-4bbf-8f65-94559b48a15e", "89e0f469-fc44-480c-90ac-4c2615d6b654",
                                       "06ed1b4e-1690-4179-992c-80ca6158b5b2", "0336ccd8-b3ef-4a1a-b8ca-8870e8751ee2"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("2d757979-38cf-4074-b0f7-388ee2e386e0", "8f457e6a-2dc4-4b8c-845d-d117023d5a07",
                                       "4dda679a-cbf1-45ff-a661-195a3e3d88b2"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("5179c4b2-8a98-4037-81a9-efbc110f8228",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("2b88de0e-a118-4b9a-962f-17c1da074b1a",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("59ba8e7a-d5da-4dee-a591-924b8bb32325", "42b66c0b-15f5-42b6-b2c0-7eaa75b840b2",
                                       "f4e52a86-3b49-41eb-a44c-78e2db4401e6", "4589829e-fa14-402a-a611-765203c991a3",
                                       "c799ae8a-8432-45e3-954c-58cb65b6c632", "109836e7-50de-4893-83f1-96e568f053df"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("ae463804-e04a-45d0-aa9e-045c50e4d011"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-112),
                                                                                           Long.valueOf(-112),
                                                                                           Order.getDefault(),
                                                                                           "d3777d36-3462-468c-aa96-479fe4ac35d0",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-112),
                                                                                           Long.valueOf(-112),
                                                                                           Order.getDefault(),
                                                                                           "d3777d36-3462-468c-aa96-479fe4ac35d0",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-67),
                                                                                           Long.valueOf(3),
                                                                                           Order.getDefault(),
                                                                                           "49cf8438-2a6d-4935-b68f-c617896f15b3",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-67),
                                                                                           Long.valueOf(3),
                                                                                           Order.getDefault(),
                                                                                           "49cf8438-2a6d-4935-b68f-c617896f15b3",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(95),
                                                                                           Long.valueOf(99),
                                                                                           Order.getDefault(),
                                                                                           "c2e25b64-a15b-433a-9046-bceb51ac39e3",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
