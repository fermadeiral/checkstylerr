// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(63),
                                                                                        Long.valueOf(-1),
                                                                                        Order.getDefault(),
                                                                                        "9678ef28-a5bc-4f4c-8e4b-acf24c17aca8",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1563781720336L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1563781715889L),
                                                                                                       new Date(1563781720467L),
                                                                                                       new Date(1563781725754L),
                                                                                                       new Date(1563781718552L),
                                                                                                       new Date(1563781719060L),
                                                                                                       new Date(1563781724942L),
                                                                                                       new Date(1563781719923L),
                                                                                                       new Date(1563781720107L),
                                                                                                       new Date(1563781719035L)))
                                                                        .lessThanUpdatedAt(new Date(1563781725412L))
                                                                        .greaterThanUpdatedAt(new Date(1563781721382L))
                                                                        .equalToName("1603498c-d957-49ed-b189-3371a0e249b7")
                                                                        .notEqualToName("b122ae58-295f-469a-bc75-29083cbf7d93")
                                                                        .inNames(Arrays.asList("b1ae59f9-039b-4c09-875f-8742440980d2",
                                                                                               "446f013c-1338-4686-af27-ffa15a5bdada",
                                                                                               "21f879a7-9ac5-4cf0-b816-7f482bac92db",
                                                                                               "891ace2c-0e81-475f-b202-bb61e281cdcc",
                                                                                               "aa129c85-c535-4852-9e83-26ad3394e06d"))
                                                                        .notInNames(Arrays.asList("1c4daa99-0683-4852-b97a-1a146c5b65f1",
                                                                                                  "9e59a595-b393-4ee9-9933-322c9235bb5c",
                                                                                                  "5e3be88d-14cd-46c7-85f4-c7d6835bf84d",
                                                                                                  "d482ac9c-a487-4ab8-85a3-7ec3780eba16",
                                                                                                  "0205abca-4d7e-4735-a9fe-a274eb9e1a3c",
                                                                                                  "6c868070-d507-4ff9-9065-e272edeb1bb0",
                                                                                                  "3e93e604-9bfd-4283-93f4-d6ff516927d5",
                                                                                                  "d3d17475-ed04-459a-a0d6-538993674f20",
                                                                                                  "806a1152-107f-4781-b63a-d89854f63312"))
                                                                        .equalToDevicesCount(Integer.valueOf(63))
                                                                        .notEqualToDevicesCount(Integer.valueOf(8))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(66)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-102),
                                                                                                          Integer.valueOf(-67),
                                                                                                          Integer.valueOf(-127),
                                                                                                          Integer.valueOf(52),
                                                                                                          Integer.valueOf(-11)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-126))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-108))
                                                                        .inCreatedAts(Arrays.asList(new Date(1563781715910L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1563781719448L),
                                                                                                       new Date(1563781719244L)))
                                                                        .lessThanCreatedAt(new Date(1563781715918L))
                                                                        .greaterThanCreatedAt(new Date(1563781724161L))
                                                                        .equalToId("0d18d346-2905-43b6-8769-7e9df313309f")
                                                                        .notEqualToId("60d48000-9a7d-40cd-b096-5fd592bfc949")
                                                                        .inIds(Arrays.asList("85aca611-d61f-4fa6-8257-a01f1d645b3a",
                                                                                             "d0465c3a-f88e-456a-a4de-f16a35e66643",
                                                                                             "ee9857cd-786b-40cb-9822-b90c60bb1d40"))
                                                                        .notInIds(Arrays.asList("264d8e82-132c-4f66-ad32-c561d362c9e7",
                                                                                                "9be1f3c2-8fdc-43d8-befd-13dc4d62511e",
                                                                                                "6c15da88-083d-4a40-af19-eb7b777ee8dc",
                                                                                                "d1339563-7e82-41b0-87e5-98184561c294",
                                                                                                "e94f5a5b-ef52-4d76-9346-606875f3dc8c",
                                                                                                "635d7cd6-4361-46bc-a080-259a9e68003d",
                                                                                                "5629aad6-110b-42a1-ad51-9b45092bcda3",
                                                                                                "9649036c-3d75-45ee-9e48-4c6e4675147e"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563781720336L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563781715889L), new Date(1563781720467L), new Date(1563781725754L),
                                       new Date(1563781718552L), new Date(1563781719060L), new Date(1563781724942L),
                                       new Date(1563781719923L), new Date(1563781720107L), new Date(1563781719035L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1563781725412L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1563781721382L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("1603498c-d957-49ed-b189-3371a0e249b7",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("b122ae58-295f-469a-bc75-29083cbf7d93",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("b1ae59f9-039b-4c09-875f-8742440980d2", "446f013c-1338-4686-af27-ffa15a5bdada",
                                       "21f879a7-9ac5-4cf0-b816-7f482bac92db", "891ace2c-0e81-475f-b202-bb61e281cdcc",
                                       "aa129c85-c535-4852-9e83-26ad3394e06d"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("1c4daa99-0683-4852-b97a-1a146c5b65f1", "9e59a595-b393-4ee9-9933-322c9235bb5c",
                                       "5e3be88d-14cd-46c7-85f4-c7d6835bf84d", "d482ac9c-a487-4ab8-85a3-7ec3780eba16",
                                       "0205abca-4d7e-4735-a9fe-a274eb9e1a3c", "6c868070-d507-4ff9-9065-e272edeb1bb0",
                                       "3e93e604-9bfd-4283-93f4-d6ff516927d5", "d3d17475-ed04-459a-a0d6-538993674f20",
                                       "806a1152-107f-4781-b63a-d89854f63312"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(63),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(8),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(66)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-102), Integer.valueOf(-67), Integer.valueOf(-127),
                                       Integer.valueOf(52), Integer.valueOf(-11)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-126),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-108),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563781715910L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1563781719448L), new Date(1563781719244L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1563781715918L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1563781724161L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("0d18d346-2905-43b6-8769-7e9df313309f",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("60d48000-9a7d-40cd-b096-5fd592bfc949",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("85aca611-d61f-4fa6-8257-a01f1d645b3a", "d0465c3a-f88e-456a-a4de-f16a35e66643",
                                       "ee9857cd-786b-40cb-9822-b90c60bb1d40"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("264d8e82-132c-4f66-ad32-c561d362c9e7", "9be1f3c2-8fdc-43d8-befd-13dc4d62511e",
                                       "6c15da88-083d-4a40-af19-eb7b777ee8dc", "d1339563-7e82-41b0-87e5-98184561c294",
                                       "e94f5a5b-ef52-4d76-9346-606875f3dc8c", "635d7cd6-4361-46bc-a080-259a9e68003d",
                                       "5629aad6-110b-42a1-ad51-9b45092bcda3", "9649036c-3d75-45ee-9e48-4c6e4675147e"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-1),
                                                                                        Long.valueOf(85),
                                                                                        Order.getDefault(),
                                                                                        "2f56564c-2420-457c-a8cf-fd257eef334f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-1),
                                                                                        Long.valueOf(85),
                                                                                        Order.getDefault(),
                                                                                        "2f56564c-2420-457c-a8cf-fd257eef334f",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(40),
                                                                                        Long.valueOf(-50),
                                                                                        Order.getDefault(),
                                                                                        "14cd2d8a-993f-42ac-8bfa-fed9045c696f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(40),
                                                                                        Long.valueOf(-50),
                                                                                        Order.getDefault(),
                                                                                        "14cd2d8a-993f-42ac-8bfa-fed9045c696f",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(-16),
                                                                                        Long.valueOf(59),
                                                                                        Order.getDefault(),
                                                                                        "d9823143-eafe-4645-b9b3-69ecf5f099ab",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
