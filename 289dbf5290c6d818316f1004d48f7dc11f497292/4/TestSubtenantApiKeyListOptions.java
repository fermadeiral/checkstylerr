// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantApiKeyListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantApiKeyListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantApiKeyListOptions subtenantapikeylistoptions1 = new SubtenantApiKeyListOptions(Integer.valueOf(13),
                                                                                                    Long.valueOf(48),
                                                                                                    Order.getDefault(),
                                                                                                    "486fffc6-191d-4020-b025-96d39d48dacb",
                                                                                                    null, null);
            SubtenantApiKeyListOptions subtenantapikeylistoptions2 = subtenantapikeylistoptions1.clone();
            assertNotNull(subtenantapikeylistoptions1);
            assertNotNull(subtenantapikeylistoptions2);
            assertNotSame(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
            assertEquals(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testFilters() {
        try {
            SubtenantApiKeyListOptions option = new SubtenantApiKeyListOptions().equalToOwner("bfcf8b5f-9932-4ee1-bbb1-c9a4bb2aa912")
                                                                                .equalToKey("342853e8-9025-4bca-b30b-e8d975f10dcb");
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(SubtenantApiKeyListOptions.TAG_FILTER_BY_OWNER));
            assertTrue(option.hasFilter(SubtenantApiKeyListOptions.TAG_FILTER_BY_OWNER, FilterOperator.EQUAL));
            assertNotNull(option.getOwnerFilters());
            assertEquals("bfcf8b5f-9932-4ee1-bbb1-c9a4bb2aa912",
                         ListOptionsEncoder.encodeSingleEqualFilter(SubtenantApiKeyListOptions.TAG_FILTER_BY_OWNER,
                                                                    String.class, option));
            assertTrue(option.hasFilters(SubtenantApiKeyListOptions.TAG_FILTER_BY_KEY));
            assertTrue(option.hasFilter(SubtenantApiKeyListOptions.TAG_FILTER_BY_KEY, FilterOperator.EQUAL));
            assertNotNull(option.getKeyFilters());
            assertEquals("342853e8-9025-4bca-b30b-e8d975f10dcb",
                         ListOptionsEncoder.encodeSingleEqualFilter(SubtenantApiKeyListOptions.TAG_FILTER_BY_KEY,
                                                                    String.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantApiKeyListOptions subtenantapikeylistoptions1 = new SubtenantApiKeyListOptions(Integer.valueOf(13),
                                                                                                    Long.valueOf(-86),
                                                                                                    Order.getDefault(),
                                                                                                    "625b4535-eee0-4fdd-aa2e-4c037d0a87b3",
                                                                                                    null, null);
            SubtenantApiKeyListOptions subtenantapikeylistoptions2 = new SubtenantApiKeyListOptions(Integer.valueOf(13),
                                                                                                    Long.valueOf(-86),
                                                                                                    Order.getDefault(),
                                                                                                    "625b4535-eee0-4fdd-aa2e-4c037d0a87b3",
                                                                                                    null, null);
            assertNotNull(subtenantapikeylistoptions1);
            assertNotNull(subtenantapikeylistoptions2);
            assertNotSame(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
            assertEquals(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
            assertEquals(subtenantapikeylistoptions2.hashCode(), subtenantapikeylistoptions1.hashCode());
            int hashCode = subtenantapikeylistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantapikeylistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantApiKeyListOptions subtenantapikeylistoptions1 = new SubtenantApiKeyListOptions(Integer.valueOf(107),
                                                                                                    Long.valueOf(-3),
                                                                                                    Order.getDefault(),
                                                                                                    "4ffd002a-be6b-4d8c-903f-5a0e5366657a",
                                                                                                    null, null);
            SubtenantApiKeyListOptions subtenantapikeylistoptions2 = new SubtenantApiKeyListOptions(Integer.valueOf(107),
                                                                                                    Long.valueOf(-3),
                                                                                                    Order.getDefault(),
                                                                                                    "4ffd002a-be6b-4d8c-903f-5a0e5366657a",
                                                                                                    null, null);
            SubtenantApiKeyListOptions subtenantapikeylistoptions3 = new SubtenantApiKeyListOptions(Integer.valueOf(-24),
                                                                                                    Long.valueOf(-124),
                                                                                                    Order.getDefault(),
                                                                                                    "1a0c8822-ea82-45a3-a3df-8870b117d33e",
                                                                                                    null, null);
            assertNotNull(subtenantapikeylistoptions1);
            assertNotNull(subtenantapikeylistoptions2);
            assertNotNull(subtenantapikeylistoptions3);
            assertNotSame(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
            assertNotSame(subtenantapikeylistoptions3, subtenantapikeylistoptions1);
            assertEquals(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
            assertEquals(subtenantapikeylistoptions2, subtenantapikeylistoptions1);
            assertEquals(subtenantapikeylistoptions1, subtenantapikeylistoptions2);
            assertEquals(subtenantapikeylistoptions1, subtenantapikeylistoptions1);
            assertFalse(subtenantapikeylistoptions1.equals(null));
            assertNotEquals(subtenantapikeylistoptions3, subtenantapikeylistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
