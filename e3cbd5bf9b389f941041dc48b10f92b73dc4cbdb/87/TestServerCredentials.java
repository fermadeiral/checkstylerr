// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561572699840L),
                                                                         "db714f2d-0422-4116-a4ce-9c9c85692840",
                                                                         "20a9ca95-7b9c-468b-8329-78ee2ab9a160",
                                                                         "5fabfd8c-4dc0-4592-a705-f23fb36f4d03");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561572705686L),
                                                                         "605805b4-d57f-43a2-a62c-a712e6b1a73e",
                                                                         "e23e2c8e-35bf-4399-bbc6-06b5f4b4ff40",
                                                                         "b1c47b6c-6dc2-441e-81fb-1c4088de7ece");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561572705686L),
                                                                         "605805b4-d57f-43a2-a62c-a712e6b1a73e",
                                                                         "e23e2c8e-35bf-4399-bbc6-06b5f4b4ff40",
                                                                         "b1c47b6c-6dc2-441e-81fb-1c4088de7ece");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1561572702419L),
                                                                    "db248377-aba5-4b58-8fb7-eec79bd9e5f5",
                                                                    "d64ae367-9104-43ef-a397-0702e6b92a43",
                                                                    "80a31c18-37d0-43b5-84ff-b6696fe55647");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1561572700843L),
                                                                         "d3138acf-0f3a-4c5a-bee7-469ac3837416",
                                                                         "90f1c7a2-0b89-481d-9042-0fc5edb31165",
                                                                         "e096c1e8-23af-4326-80b0-8c19470792c4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1561572700843L),
                                                                         "d3138acf-0f3a-4c5a-bee7-469ac3837416",
                                                                         "90f1c7a2-0b89-481d-9042-0fc5edb31165",
                                                                         "e096c1e8-23af-4326-80b0-8c19470792c4");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1561572702896L),
                                                                         "184dcbb4-d44a-4ea9-8bf2-b744b3604258",
                                                                         "b3eeca46-e629-4337-91cf-9963a68c70dd",
                                                                         "6cbad75b-dfe7-456a-a5cf-8ebbc8d6bc3b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
