// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("eae81dac-1fac-496c-bbb0-c55431a21290", true,
                                        "075c04cb-1808-4241-98d3-164f0694547d", true,
                                        "e625bc10-0fdb-415f-b87d-49b8ff6be959");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("6cd5eb23-f0b2-422f-bab3-bc2b24e28e88", false,
                                        "fb5aa46b-7f8b-48a6-91a3-9105f25d0aba", true,
                                        "fa0c6d31-8e27-4697-9ca2-b980bbce913f");
            Policy policy2 = new Policy("6cd5eb23-f0b2-422f-bab3-bc2b24e28e88", false,
                                        "fb5aa46b-7f8b-48a6-91a3-9105f25d0aba", true,
                                        "fa0c6d31-8e27-4697-9ca2-b980bbce913f");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("88acf6b9-3dda-4283-be9c-19efa9cbf912", false,
                                   "307ac1fa-529f-4ece-a3c8-1ec16ed5b44f", false,
                                   "75427891-fd84-42d5-9074-56f130c412e3");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("184a30a8-e4d7-4200-806b-8afe92a1f9fb", true,
                                        "891dcb17-2f05-4037-9185-fa73d67711fb", true,
                                        "95f55f26-3fd0-414a-89b7-52dfb1c27af1");
            Policy policy2 = new Policy("184a30a8-e4d7-4200-806b-8afe92a1f9fb", true,
                                        "891dcb17-2f05-4037-9185-fa73d67711fb", true,
                                        "95f55f26-3fd0-414a-89b7-52dfb1c27af1");
            Policy policy3 = new Policy("f1ee378c-68d7-4c80-a7c0-4b67f3c4f6c1", true,
                                        "8036a1c4-202c-444b-acd8-063335893ddd", true,
                                        "4240f655-79b4-4de8-8d8f-aef06f6033e1");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
