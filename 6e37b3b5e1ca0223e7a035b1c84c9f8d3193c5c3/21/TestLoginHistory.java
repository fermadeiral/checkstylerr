// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553611834152L),
                                                          "0ccaaf9a-0b51-48df-a9cd-1e5f2cd0848f", true,
                                                          "190332c9-7446-4f8e-b7ee-3a9f1aaaa7e2");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553611829111L),
                                                          "03fe092a-ad7e-4750-85aa-dcc0794316ca", true,
                                                          "9ad3b6f0-35e5-4dcd-bb43-326d34c5dd6f");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553611829111L),
                                                          "03fe092a-ad7e-4750-85aa-dcc0794316ca", true,
                                                          "9ad3b6f0-35e5-4dcd-bb43-326d34c5dd6f");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553611829904L), "7d850846-9433-4e38-8e74-50e9007bc548",
                                                     true, "0a19e637-4200-4166-b7d5-ad3b324ee8cf");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553611831367L),
                                                          "e5fc1e18-cbed-4205-a82e-52ccd19a7563", false,
                                                          "5c0cc44b-3c33-4c88-aa5b-40cd5ea53c40");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553611831367L),
                                                          "e5fc1e18-cbed-4205-a82e-52ccd19a7563", false,
                                                          "5c0cc44b-3c33-4c88-aa5b-40cd5ea53c40");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553611831563L),
                                                          "b08bdcd5-0a64-4495-9e8a-4a7a496045ef", false,
                                                          "12028445-8c8d-4192-9cf0-00994c9be475");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
