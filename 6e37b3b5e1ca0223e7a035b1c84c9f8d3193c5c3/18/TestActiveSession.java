// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("99fcca61-015e-4976-a226-9d7c86a37f13",
                                                             "d11af211-cadd-4d1a-87a6-7e8bb0b1bcea",
                                                             new Date(1553611824828L),
                                                             "a2a19ae2-80fd-4945-a540-8e257c3574df",
                                                             "da200a3f-5822-47bc-823d-656f305069e8");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("56ce3663-c518-4dcb-8cb6-ee2679e974c7",
                                                             "9f6fe4ff-693e-43f0-be1d-4969c61b5a0a",
                                                             new Date(1553611832896L),
                                                             "dd918a09-ee18-4b7b-ab44-de3e15cd080a",
                                                             "be42c036-6a5d-4390-9d6d-7939a88d46b8");
            ActiveSession activesession2 = new ActiveSession("56ce3663-c518-4dcb-8cb6-ee2679e974c7",
                                                             "9f6fe4ff-693e-43f0-be1d-4969c61b5a0a",
                                                             new Date(1553611832896L),
                                                             "dd918a09-ee18-4b7b-ab44-de3e15cd080a",
                                                             "be42c036-6a5d-4390-9d6d-7939a88d46b8");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("def7e545-007a-4a44-aed9-7ec2ea159680",
                                                        "b9d77d86-363c-418f-b923-b6d4eb773a3e",
                                                        new Date(1553611829328L),
                                                        "8004daa8-3b15-4c39-ac2e-1cb994fc11f2",
                                                        "c513d789-ee9d-4e9f-baf2-e4f87a49ea37");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("ac0c6de1-2026-422d-9bd2-2d2969e61e9c",
                                                             "f3f8e711-4f7c-4e42-bbcc-5b4ca9c65ef6",
                                                             new Date(1553611834426L),
                                                             "a9d63bd9-cb19-4b4c-b5c1-0b869d7c7ff7",
                                                             "cf9a6c2e-8817-4558-9d5b-9c21d948ca5f");
            ActiveSession activesession2 = new ActiveSession("ac0c6de1-2026-422d-9bd2-2d2969e61e9c",
                                                             "f3f8e711-4f7c-4e42-bbcc-5b4ca9c65ef6",
                                                             new Date(1553611834426L),
                                                             "a9d63bd9-cb19-4b4c-b5c1-0b869d7c7ff7",
                                                             "cf9a6c2e-8817-4558-9d5b-9c21d948ca5f");
            ActiveSession activesession3 = new ActiveSession("61855e1d-534c-4518-8240-0ca3d729f562",
                                                             "b3b14bc7-e17f-435c-8c72-4d57b10f4bc4",
                                                             new Date(1553611828506L),
                                                             "5a2b4aff-6928-45aa-adaf-fd10e602e6dd",
                                                             "d371787c-6a2f-46d1-b411-b505090cce52");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
