// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("fecf98ac-7afc-47d2-a74a-f911ffde0fb7",
                                                             "a6ac2dbe-72b3-46ff-aca0-0ce2ebfe5067",
                                                             "49bc2ee6-738d-4b4f-9c34-83347850e1a2");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("ff76e398-4742-40d1-b98e-b60fc57d9a80",
                                                             "f092c625-3a65-49e3-b6c6-fea5ce2999ce",
                                                             "287259c5-1fd6-4ae5-99b5-3bdbdf9100e8");
            ParentAccount parentaccount2 = new ParentAccount("ff76e398-4742-40d1-b98e-b60fc57d9a80",
                                                             "f092c625-3a65-49e3-b6c6-fea5ce2999ce",
                                                             "287259c5-1fd6-4ae5-99b5-3bdbdf9100e8");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("9bcaf1bc-0d53-46aa-95fb-77eddaf23f4c",
                                                        "1a5f2da5-0118-40c7-9b59-c909a0af0787",
                                                        "64b21ac5-0239-4d42-93ed-418f0d90ae92");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("ac718671-e966-4a5c-bbe7-57aac4551870",
                                                             "34a55fa2-1f98-49bd-bfc8-ec584b296b55",
                                                             "06abb576-2438-417f-889c-2a7940f47eba");
            ParentAccount parentaccount2 = new ParentAccount("ac718671-e966-4a5c-bbe7-57aac4551870",
                                                             "34a55fa2-1f98-49bd-bfc8-ec584b296b55",
                                                             "06abb576-2438-417f-889c-2a7940f47eba");
            ParentAccount parentaccount3 = new ParentAccount("a7e66ad2-0b7c-4e6d-ad1c-0198b7a441b7",
                                                             "d3dbe03d-6f4b-4678-a1f5-2b83b8678b12",
                                                             "ec73a197-0760-4b01-a734-2b438d865545");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
