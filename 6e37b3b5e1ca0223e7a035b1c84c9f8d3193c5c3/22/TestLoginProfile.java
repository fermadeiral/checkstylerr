// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model LoginProfile.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginProfile {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("2f16bcef-566e-4ec7-9f58-0e8439596fa6",
                                                          "a2f3e658-6f2a-41b6-aa45-d3e4414caf1b");
            LoginProfile loginprofile2 = loginprofile1.clone();
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("427ffbaf-5530-43cb-ae5d-388107c99924",
                                                          "e5caa4d0-cd4a-4397-a9c7-876e193289d0");
            LoginProfile loginprofile2 = new LoginProfile("427ffbaf-5530-43cb-ae5d-388107c99924",
                                                          "e5caa4d0-cd4a-4397-a9c7-876e193289d0");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotSame(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2.hashCode(), loginprofile1.hashCode());
            int hashCode = loginprofile1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginprofile1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginProfile loginprofile = new LoginProfile("6bcb88dd-a8db-4033-a3d0-9ff97a43bd89",
                                                     "9b5106f5-f398-42c0-907b-4fc306a2abae");
        assertTrue(loginprofile.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginProfile loginprofile1 = new LoginProfile("5c3a05b2-be9f-4303-a92c-f53515a4cbd7",
                                                          "4913c9c1-73bb-4876-96f1-f90314926bdb");
            LoginProfile loginprofile2 = new LoginProfile("5c3a05b2-be9f-4303-a92c-f53515a4cbd7",
                                                          "4913c9c1-73bb-4876-96f1-f90314926bdb");
            LoginProfile loginprofile3 = new LoginProfile("07a15830-5a10-4c43-b7d3-bcfd648211fc",
                                                          "d31973cf-c158-43c1-800d-eafc7d3a3522");
            assertNotNull(loginprofile1);
            assertNotNull(loginprofile2);
            assertNotNull(loginprofile3);
            assertNotSame(loginprofile2, loginprofile1);
            assertNotSame(loginprofile3, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile2, loginprofile1);
            assertEquals(loginprofile1, loginprofile2);
            assertEquals(loginprofile1, loginprofile1);
            assertFalse(loginprofile1.equals(null));
            assertNotEquals(loginprofile3, loginprofile1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
