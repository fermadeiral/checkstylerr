// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-52),
                                                                                           Long.valueOf(-100),
                                                                                           Order.getDefault(),
                                                                                           "82213365-3f73-4376-9a13-edce34b79623",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("ae1ebf56-aa9f-476c-b480-4250f74b1c0a")
                                                                          .notEqualToDeviceId("e35fa0fa-2fa9-4f98-9ad8-fa67f66906ed")
                                                                          .inDeviceIds(Arrays.asList("2577bff7-3d72-4ee8-a458-9751986e34c0",
                                                                                                     "cccdd83d-eff9-43b3-8312-8d032dfb08b8",
                                                                                                     "002056b1-c347-45c5-b9a1-e35f4cc6370a",
                                                                                                     "db5b3145-37e7-42db-a86f-7978c5463a06"))
                                                                          .notInDeviceIds(Arrays.asList("2544928c-aa60-4c5b-83ab-994cb2331db4",
                                                                                                        "9c85c97c-44c0-4d0c-bdb7-34f6b8ba2fe6"))
                                                                          .equalToDescription("48d4e760-a747-48bf-bebc-a84f410f7343")
                                                                          .notEqualToDescription("9f85ea8b-ac8d-43f3-b215-8df9dedd6e3a")
                                                                          .inDescriptions(Arrays.asList("1911ab31-81e8-4067-b0d9-e1317c9d8903"))
                                                                          .notInDescriptions(Arrays.asList("9b8b9ab4-8b76-4250-b4e1-e8bd96727d1c"))
                                                                          .inDateTimes(Arrays.asList(new Date(1553611831372L),
                                                                                                     new Date(1553611829926L),
                                                                                                     new Date(1553611833361L),
                                                                                                     new Date(1553611835597L),
                                                                                                     new Date(1553611828775L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1553611829683L)))
                                                                          .lessThanDateTime(new Date(1553611835826L))
                                                                          .greaterThanDateTime(new Date(1553611833183L))
                                                                          .equalToStateChange(Boolean.FALSE)
                                                                          .notEqualToStateChange(Boolean.TRUE)
                                                                          .inStateChanges(Arrays.asList(Boolean.TRUE,
                                                                                                        Boolean.TRUE,
                                                                                                        Boolean.TRUE,
                                                                                                        Boolean.TRUE,
                                                                                                        Boolean.FALSE,
                                                                                                        Boolean.FALSE,
                                                                                                        Boolean.FALSE,
                                                                                                        Boolean.TRUE,
                                                                                                        Boolean.TRUE))
                                                                          .notInStateChanges(Arrays.asList(Boolean.TRUE,
                                                                                                           Boolean.TRUE,
                                                                                                           Boolean.FALSE,
                                                                                                           Boolean.TRUE,
                                                                                                           Boolean.TRUE,
                                                                                                           Boolean.FALSE))
                                                                          .equalToId("9ab3480f-faf7-4892-ac5c-03870bf474bf")
                                                                          .notEqualToId("902a1e05-8f23-4b4d-beea-0b67952d072f")
                                                                          .inIds(Arrays.asList("5ef98954-634f-4bfb-a389-ade4ca2b9de2",
                                                                                               "34f439e2-019b-4376-8e30-784ec38f2369",
                                                                                               "fc23993e-0c3f-4e34-965b-e1b59b3af813",
                                                                                               "1eb02551-acd9-4b7e-b80d-38534f058d68",
                                                                                               "f0d9d71a-7b2a-4638-b7f9-89c71b61c1ba",
                                                                                               "50779f90-1381-47dc-bb74-60c3488172cf",
                                                                                               "abead620-333c-4e97-bc4e-82db3f8ef743"))
                                                                          .notInIds(Arrays.asList("0ae03f4c-8622-4433-bfba-bbbbee2071bf",
                                                                                                  "59ac5c09-f464-47ad-b6d9-a555b63348e2",
                                                                                                  "50429bc8-da65-44c6-9ed2-33aa0c54c6ff",
                                                                                                  "23c77cd7-71ed-4c82-ad66-fba17dd45ff2",
                                                                                                  "1f924112-1e40-46ff-be99-b412a65bd16f"))
                                                                          .equalToEventType("387e10b1-f060-4580-b732-30e8d699510d")
                                                                          .notEqualToEventType("2ad8a3b8-c911-42d6-bb66-167565c76bb8")
                                                                          .inEventTypes(Arrays.asList("1b9c7049-9320-4b19-afac-375cf00d9f2e",
                                                                                                      "4dfc150d-c852-4a48-a700-de028a9e050f",
                                                                                                      "e6808b9c-31b4-4cf2-8fce-2153a94d6378",
                                                                                                      "33cd06ff-1107-4e11-91fd-524438b7b5b0"))
                                                                          .notInEventTypes(Arrays.asList("fe2d1d3c-e1eb-4c49-878d-f882dbc2e53a",
                                                                                                         "f3d4ad33-d1b6-4ba6-a59a-c3757beb0a8b"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("ae1ebf56-aa9f-476c-b480-4250f74b1c0a",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("e35fa0fa-2fa9-4f98-9ad8-fa67f66906ed",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("2577bff7-3d72-4ee8-a458-9751986e34c0", "cccdd83d-eff9-43b3-8312-8d032dfb08b8",
                                       "002056b1-c347-45c5-b9a1-e35f4cc6370a", "db5b3145-37e7-42db-a86f-7978c5463a06"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("2544928c-aa60-4c5b-83ab-994cb2331db4", "9c85c97c-44c0-4d0c-bdb7-34f6b8ba2fe6"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("48d4e760-a747-48bf-bebc-a84f410f7343",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("9f85ea8b-ac8d-43f3-b215-8df9dedd6e3a",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("1911ab31-81e8-4067-b0d9-e1317c9d8903"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("9b8b9ab4-8b76-4250-b4e1-e8bd96727d1c"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1553611831372L), new Date(1553611829926L), new Date(1553611833361L),
                                       new Date(1553611835597L), new Date(1553611828775L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1553611829683L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1553611835826L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1553611833183L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.IN));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Arrays.asList(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE,
                                       Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_IN));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Arrays.asList(Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE,
                                       Boolean.FALSE),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("9ab3480f-faf7-4892-ac5c-03870bf474bf",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("902a1e05-8f23-4b4d-beea-0b67952d072f",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("5ef98954-634f-4bfb-a389-ade4ca2b9de2", "34f439e2-019b-4376-8e30-784ec38f2369",
                                       "fc23993e-0c3f-4e34-965b-e1b59b3af813", "1eb02551-acd9-4b7e-b80d-38534f058d68",
                                       "f0d9d71a-7b2a-4638-b7f9-89c71b61c1ba", "50779f90-1381-47dc-bb74-60c3488172cf",
                                       "abead620-333c-4e97-bc4e-82db3f8ef743"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("0ae03f4c-8622-4433-bfba-bbbbee2071bf", "59ac5c09-f464-47ad-b6d9-a555b63348e2",
                                       "50429bc8-da65-44c6-9ed2-33aa0c54c6ff", "23c77cd7-71ed-4c82-ad66-fba17dd45ff2",
                                       "1f924112-1e40-46ff-be99-b412a65bd16f"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("387e10b1-f060-4580-b732-30e8d699510d",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("2ad8a3b8-c911-42d6-bb66-167565c76bb8",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("1b9c7049-9320-4b19-afac-375cf00d9f2e", "4dfc150d-c852-4a48-a700-de028a9e050f",
                                       "e6808b9c-31b4-4cf2-8fce-2153a94d6378", "33cd06ff-1107-4e11-91fd-524438b7b5b0"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("fe2d1d3c-e1eb-4c49-878d-f882dbc2e53a", "f3d4ad33-d1b6-4ba6-a59a-c3757beb0a8b"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(100),
                                                                                           Long.valueOf(28),
                                                                                           Order.getDefault(),
                                                                                           "9b89721f-589c-4bf6-82ee-9040e1209a0c",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(100),
                                                                                           Long.valueOf(28),
                                                                                           Order.getDefault(),
                                                                                           "9b89721f-589c-4bf6-82ee-9040e1209a0c",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(118),
                                                                                           Long.valueOf(-88),
                                                                                           Order.getDefault(),
                                                                                           "71e1f2ed-b9e7-465c-9363-125a8dfaf991",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(118),
                                                                                           Long.valueOf(-88),
                                                                                           Order.getDefault(),
                                                                                           "71e1f2ed-b9e7-465c-9363-125a8dfaf991",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(-41),
                                                                                           Long.valueOf(-84),
                                                                                           Order.getDefault(),
                                                                                           "0b465564-d33f-48f8-90c5-a8c665d54209",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
