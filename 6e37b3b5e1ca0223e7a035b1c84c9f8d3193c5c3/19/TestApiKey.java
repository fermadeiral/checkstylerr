// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("731f071ec7833bedd096c1d98046bd99", new Date(1553611831749L), 92,
                                        "c87a511c-3661-4c78-864a-c8e15b29cdc1", "5f69b0c0-4ddd-4977-b392-011dbc22ffce",
                                        121, "1df4cdab-2d05-4c60-807e-67cea304c098",
                                        "3e920ac7-4721-4512-87b9-eea7ca6ec46c", ApiKeyStatus.getDefault(),
                                        new Date(1553611825606L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("36fd23797b5259fd7e030c03b3feb675", new Date(1553611827281L), -84,
                                        "9bab9f72-e5ce-490e-8d6f-ea014f3f2cd6", "56d65853-3f82-4fa5-93aa-7420436776b1",
                                        123, "c52a1743-8552-4b0c-8790-e73cc07928f6",
                                        "ca2c3bb5-548f-4629-893b-7bdb1bd06569", ApiKeyStatus.getDefault(),
                                        new Date(1553611825992L));
            ApiKey apikey2 = new ApiKey("36fd23797b5259fd7e030c03b3feb675", new Date(1553611827281L), -84,
                                        "9bab9f72-e5ce-490e-8d6f-ea014f3f2cd6", "56d65853-3f82-4fa5-93aa-7420436776b1",
                                        123, "c52a1743-8552-4b0c-8790-e73cc07928f6",
                                        "ca2c3bb5-548f-4629-893b-7bdb1bd06569", ApiKeyStatus.getDefault(),
                                        new Date(1553611825992L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("f1c0f7b4fb33a98021ca145faed955bc", new Date(1553611832395L), 69,
                                   "6185a46b-c4ff-4edf-b723-665cbe3fe57c", "b469ba8e-4477-4220-8f0c-bfa1517fc18a", 48,
                                   "3cbb8d9f-6ced-48ba-8b5d-587ff1271e12", "ac51b8fe-0537-47e6-b22a-6f6eebb7bae5",
                                   ApiKeyStatus.getDefault(), new Date(1553611826939L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("7੊77\u00147㰷777@7\u001c77M$$ⶴ+\u0005+HUP?乯77銊\u0013᩟%7\f7㱋[#;!줗\u000eU.`㎜煮䔕SY77\u0007\u001a7X7777\u001f7",
                                          new Date(1553611833206L), -63, "e9f16c02-f0aa-4c98-aab9-ba5e8fdb00a8",
                                          "ea06e121-4c93-4a3b-bbf9-c499cc19bbf1", -77, null,
                                          "9a2b9209-1093-46d1-943b-6c8ddcb162a7", ApiKeyStatus.getDefault(),
                                          new Date(1553611833048L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("88f9dcb6e50779adc8c1005c353bd204", new Date(1553611824935L), 70,
                                        "11758eba-09e6-4912-9ca8-c32038d2c192", "dfe95464-dae4-454c-a175-198ec2b62dab",
                                        79, "e52061a3-222c-430c-b0a7-c6ac0752156e",
                                        "a2b9f3e0-5e5b-4817-b67b-57f83ed01801", ApiKeyStatus.getDefault(),
                                        new Date(1553611825636L));
            ApiKey apikey2 = new ApiKey("88f9dcb6e50779adc8c1005c353bd204", new Date(1553611824935L), 70,
                                        "11758eba-09e6-4912-9ca8-c32038d2c192", "dfe95464-dae4-454c-a175-198ec2b62dab",
                                        79, "e52061a3-222c-430c-b0a7-c6ac0752156e",
                                        "a2b9f3e0-5e5b-4817-b67b-57f83ed01801", ApiKeyStatus.getDefault(),
                                        new Date(1553611825636L));
            ApiKey apikey3 = new ApiKey("cadd33d8103b1bf8a1fe06ddded0a838", new Date(1553611831941L), -67,
                                        "df5a6a39-2805-44ad-8b11-e3f78dd0e502", "ecf53d83-e167-4197-982a-86f9d80d8c45",
                                        43, "20f4cf35-54b9-4430-8628-62e762aed92c",
                                        "022bd74e-a756-44a3-9978-b7590c402afd", ApiKeyStatus.getDefault(),
                                        new Date(1553611831104L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
