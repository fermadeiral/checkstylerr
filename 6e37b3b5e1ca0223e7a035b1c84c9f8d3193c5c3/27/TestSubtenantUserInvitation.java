// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("5f18efa5-643f-4a85-b8bb-2190db699b7c",
                                                                                           new Date(1553611826033L),
                                                                                           "46ce7dba-c4c3-4401-bc9c-fe53d8bf91b8",
                                                                                           new Date(1553611828699L),
                                                                                           "f0e58c14-0d30-491c-aa46-b2ad687f9850",
                                                                                           null,
                                                                                           new Date(1553611830611L),
                                                                                           "c025f3ae-20f1-45dd-85a6-d0fc0900c5c9");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("072084d6-22ab-4db5-8e27-89e9d7f52cfe",
                                                                                           new Date(1553611830660L),
                                                                                           "453c3527-52e2-4b57-a05b-6ee2141f5c91",
                                                                                           new Date(1553611835003L),
                                                                                           "816d8e42-2fbb-4e6d-bdb5-f23ef7d44ccf",
                                                                                           null,
                                                                                           new Date(1553611830620L),
                                                                                           "992f768e-b67f-4be9-b407-fa05df2bc3e3");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("072084d6-22ab-4db5-8e27-89e9d7f52cfe",
                                                                                           new Date(1553611830660L),
                                                                                           "453c3527-52e2-4b57-a05b-6ee2141f5c91",
                                                                                           new Date(1553611835003L),
                                                                                           "816d8e42-2fbb-4e6d-bdb5-f23ef7d44ccf",
                                                                                           null,
                                                                                           new Date(1553611830620L),
                                                                                           "992f768e-b67f-4be9-b407-fa05df2bc3e3");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("3b267d60-8cce-4105-aa9f-90d1be64d8cf",
                                                                                      new Date(1553611834892L),
                                                                                      "653f6e0c-4aaf-47d5-962c-e43df1621ed7",
                                                                                      new Date(1553611830613L),
                                                                                      "a148cee6-5216-448e-b1d5-bb12f0d936ab",
                                                                                      null, new Date(1553611834836L),
                                                                                      "6e5dd7ba-8d8f-441b-821a-a9e91f4033e7");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553611828777L),
                                                                                             null,
                                                                                             new Date(1553611832294L),
                                                                                             "61ad43b8-6478-465e-b81a-d5eb98a23e29",
                                                                                             null,
                                                                                             new Date(1553611826882L),
                                                                                             "46634e66-249e-44a3-9bb6-7fd66bcd668e");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("eed5252f-8566-4635-bcd3-0ae4175cb9ba",
                                                                                           new Date(1553611831626L),
                                                                                           "9ea4a0ae-67e8-4358-be0e-0d9a81b1d7f7",
                                                                                           new Date(1553611826189L),
                                                                                           "f7bc74f6-60ce-4e65-a47a-5c71890e090e",
                                                                                           null,
                                                                                           new Date(1553611833361L),
                                                                                           "c13c9c30-83b5-4326-aca0-950cf9a0887f");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("eed5252f-8566-4635-bcd3-0ae4175cb9ba",
                                                                                           new Date(1553611831626L),
                                                                                           "9ea4a0ae-67e8-4358-be0e-0d9a81b1d7f7",
                                                                                           new Date(1553611826189L),
                                                                                           "f7bc74f6-60ce-4e65-a47a-5c71890e090e",
                                                                                           null,
                                                                                           new Date(1553611833361L),
                                                                                           "c13c9c30-83b5-4326-aca0-950cf9a0887f");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("66e0daa0-d754-4912-9fe5-a6bdf6d15e8d",
                                                                                           new Date(1553611827731L),
                                                                                           "15f14ca0-601f-4bdb-b4a3-51e6e4423820",
                                                                                           new Date(1553611828708L),
                                                                                           "e95c153e-dfab-4491-af10-9610d925efd4",
                                                                                           null,
                                                                                           new Date(1553611828381L),
                                                                                           "f42434e9-6b32-4838-b247-dc53bd3755d3");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
