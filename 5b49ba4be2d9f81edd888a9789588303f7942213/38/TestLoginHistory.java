// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1571831487229L),
                                                          "f1337482-e307-44de-95e4-2c5b8263274d", true,
                                                          "11577189-b50d-4c79-b56a-71923ce95f89");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1571831487348L),
                                                          "6f764344-6199-46c0-a278-2b8fc08bac21", true,
                                                          "6c180e0a-3bee-450a-abdb-aa529fa2ac9c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1571831487348L),
                                                          "6f764344-6199-46c0-a278-2b8fc08bac21", true,
                                                          "6c180e0a-3bee-450a-abdb-aa529fa2ac9c");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1571831487561L), "421ef2b0-1883-4ebc-8467-5567e9d52977",
                                                     true, "52a76b90-7de9-44b3-b0c3-64c84ba110c5");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1571831489682L),
                                                          "2f350af3-92eb-4679-99cb-710d4cb623b1", true,
                                                          "2bd26f91-6405-486f-8a52-bf9195ef720a");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1571831489682L),
                                                          "2f350af3-92eb-4679-99cb-710d4cb623b1", true,
                                                          "2bd26f91-6405-486f-8a52-bf9195ef720a");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1571831493773L),
                                                          "3861aac0-733f-40d0-9aaf-3552ef756c57", true,
                                                          "08606a96-94a4-418a-9dba-f239644868a6");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
