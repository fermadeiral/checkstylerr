// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1571831488339L),
                                                                         "192f418b-70b5-4760-beb1-47201df41d91",
                                                                         "ea5acb03-6051-47f1-9358-91f2e851291b",
                                                                         "d0231ce0-d642-4022-bf48-550dcc5f01a1");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1571831489831L),
                                                                         "7a76c85f-bc40-4dc4-9217-e006e91fb9fa",
                                                                         "df10ae1f-9fe0-491c-aad1-e38d0562568c",
                                                                         "af4f6635-b3c0-4877-9b00-4da2e66331b5");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1571831489831L),
                                                                         "7a76c85f-bc40-4dc4-9217-e006e91fb9fa",
                                                                         "df10ae1f-9fe0-491c-aad1-e38d0562568c",
                                                                         "af4f6635-b3c0-4877-9b00-4da2e66331b5");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1571831494383L),
                                                                    "ed2220ee-2c2b-46ed-b761-48b16d3ab67d",
                                                                    "401a7bd1-5fc7-4ded-ad88-164dd0da5853",
                                                                    "67813eed-ad67-47f6-8fb1-25a4a817fe0b");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1571831487995L),
                                                                         "75486fa8-6a3f-4b58-939e-cfd28da12703",
                                                                         "e3a76dae-d982-44e2-97d0-9a7e273e5d70",
                                                                         "7ebd9584-f242-451b-b76c-ce53f4a5ddf6");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1571831487995L),
                                                                         "75486fa8-6a3f-4b58-939e-cfd28da12703",
                                                                         "e3a76dae-d982-44e2-97d0-9a7e273e5d70",
                                                                         "7ebd9584-f242-451b-b76c-ce53f4a5ddf6");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1571831489657L),
                                                                         "0c35b21b-0942-4db2-a573-b3c2e094f75f",
                                                                         "b6499216-dc33-4607-acf9-78175e7efa12",
                                                                         "afaeeeb9-dc43-43e7-8091-256d757551eb");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
