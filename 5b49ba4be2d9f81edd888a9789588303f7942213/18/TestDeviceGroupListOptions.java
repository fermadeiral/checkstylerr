// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroupListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroupListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(8),
                                                                                        Long.valueOf(122),
                                                                                        Order.getDefault(),
                                                                                        "87833c62-3ec5-4b57-b6c7-eac22bec1851",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = devicegrouplistoptions1.clone();
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceGroupListOptions option = new DeviceGroupListOptions().inUpdatedAts(Arrays.asList(new Date(1571831494711L),
                                                                                                    new Date(1571831490177L),
                                                                                                    new Date(1571831489322L),
                                                                                                    new Date(1571831490621L),
                                                                                                    new Date(1571831498338L)))
                                                                        .notInUpdatedAts(Arrays.asList(new Date(1571831492534L),
                                                                                                       new Date(1571831498452L),
                                                                                                       new Date(1571831493750L),
                                                                                                       new Date(1571831496152L),
                                                                                                       new Date(1571831489865L)))
                                                                        .lessThanUpdatedAt(new Date(1571831495487L))
                                                                        .greaterThanUpdatedAt(new Date(1571831490006L))
                                                                        .equalToName("1d7ce0de-2205-454a-a183-a451b62cb680")
                                                                        .notEqualToName("56a02c77-dabf-48ed-9959-a8439b5c35f5")
                                                                        .inNames(Arrays.asList("0c7ba677-5873-4fde-9ff8-4f1df18c4b3f"))
                                                                        .notInNames(Arrays.asList("a3b45df6-44cf-416f-a0dd-a44d440fec27",
                                                                                                  "e656f405-18f1-4f87-8155-533986298647",
                                                                                                  "3654bd98-e920-4416-848f-3ab2d8f3d22c",
                                                                                                  "3a24de5a-4835-435e-ae0b-e3fd465e354a",
                                                                                                  "e4edcb26-c0e7-4218-b28d-b8c3b61c2514",
                                                                                                  "84a15392-dc9d-4405-a39d-b8428d35da26",
                                                                                                  "29feccf2-e2d1-4702-a133-7949bf2ae9f0"))
                                                                        .equalToDevicesCount(Integer.valueOf(0))
                                                                        .notEqualToDevicesCount(Integer.valueOf(58))
                                                                        .inDevicesCounts(Arrays.asList(Integer.valueOf(-87),
                                                                                                       Integer.valueOf(-32),
                                                                                                       Integer.valueOf(52),
                                                                                                       Integer.valueOf(56),
                                                                                                       Integer.valueOf(-57),
                                                                                                       Integer.valueOf(38),
                                                                                                       Integer.valueOf(103),
                                                                                                       Integer.valueOf(104),
                                                                                                       Integer.valueOf(-1)))
                                                                        .notInDevicesCounts(Arrays.asList(Integer.valueOf(-37),
                                                                                                          Integer.valueOf(63),
                                                                                                          Integer.valueOf(-108),
                                                                                                          Integer.valueOf(43),
                                                                                                          Integer.valueOf(122),
                                                                                                          Integer.valueOf(51),
                                                                                                          Integer.valueOf(-20),
                                                                                                          Integer.valueOf(6),
                                                                                                          Integer.valueOf(118)))
                                                                        .lessThanDevicesCount(Integer.valueOf(-62))
                                                                        .greaterThanDevicesCount(Integer.valueOf(-58))
                                                                        .inCreatedAts(Arrays.asList(new Date(1571831496041L),
                                                                                                    new Date(1571831498765L),
                                                                                                    new Date(1571831491137L),
                                                                                                    new Date(1571831493596L),
                                                                                                    new Date(1571831495810L),
                                                                                                    new Date(1571831493352L),
                                                                                                    new Date(1571831499144L),
                                                                                                    new Date(1571831498300L),
                                                                                                    new Date(1571831494668L)))
                                                                        .notInCreatedAts(Arrays.asList(new Date(1571831490325L),
                                                                                                       new Date(1571831497086L),
                                                                                                       new Date(1571831498751L)))
                                                                        .lessThanCreatedAt(new Date(1571831490813L))
                                                                        .greaterThanCreatedAt(new Date(1571831493076L))
                                                                        .equalToId("8e77c2d3-0f6d-4f54-99c8-a686ba16f536")
                                                                        .notEqualToId("a834737b-6c98-4d5d-b10b-1c56d324e308")
                                                                        .inIds(Arrays.asList("b9d5f07c-a5d2-4e23-8a5e-d60b47f75fc2"))
                                                                        .notInIds(Arrays.asList("7582d216-dd14-4d4a-9ff2-16884f8fd6d6"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831494711L), new Date(1571831490177L), new Date(1571831489322L),
                                       new Date(1571831490621L), new Date(1571831498338L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831492534L), new Date(1571831498452L), new Date(1571831493750L),
                                       new Date(1571831496152L), new Date(1571831489865L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1571831495487L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getUpdatedAtFilters());
            assertEquals(new Date(1571831490006L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("1d7ce0de-2205-454a-a183-a451b62cb680",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getNameFilters());
            assertEquals("56a02c77-dabf-48ed-9959-a8439b5c35f5",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("0c7ba677-5873-4fde-9ff8-4f1df18c4b3f"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_NAME));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME, FilterOperator.NOT_IN));
            assertNotNull(option.getNameFilters());
            assertEquals(Arrays.asList("a3b45df6-44cf-416f-a0dd-a44d440fec27", "e656f405-18f1-4f87-8155-533986298647",
                                       "3654bd98-e920-4416-848f-3ab2d8f3d22c", "3a24de5a-4835-435e-ae0b-e3fd465e354a",
                                       "e4edcb26-c0e7-4218-b28d-b8c3b61c2514", "84a15392-dc9d-4405-a39d-b8428d35da26",
                                       "29feccf2-e2d1-4702-a133-7949bf2ae9f0"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_NAME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(0),
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(58),
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-87), Integer.valueOf(-32), Integer.valueOf(52),
                                       Integer.valueOf(56), Integer.valueOf(-57), Integer.valueOf(38),
                                       Integer.valueOf(103), Integer.valueOf(104), Integer.valueOf(-1)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.NOT_IN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Arrays.asList(Integer.valueOf(-37), Integer.valueOf(63), Integer.valueOf(-108),
                                       Integer.valueOf(43), Integer.valueOf(122), Integer.valueOf(51),
                                       Integer.valueOf(-20), Integer.valueOf(6), Integer.valueOf(118)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT, FilterOperator.LESS_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-62),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                       Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                        FilterOperator.GREATER_THAN));
            assertNotNull(option.getDevicesCountFilters());
            assertEquals(Integer.valueOf(-58),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_DEVICES_COUNT,
                                                                          Integer.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831496041L), new Date(1571831498765L), new Date(1571831491137L),
                                       new Date(1571831493596L), new Date(1571831495810L), new Date(1571831493352L),
                                       new Date(1571831499144L), new Date(1571831498300L), new Date(1571831494668L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.NOT_IN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(Arrays.asList(new Date(1571831490325L), new Date(1571831497086L), new Date(1571831498751L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.LESS_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1571831490813L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT, FilterOperator.GREATER_THAN));
            assertNotNull(option.getCreatedAtFilters());
            assertEquals(new Date(1571831493076L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceGroupListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("8e77c2d3-0f6d-4f54-99c8-a686ba16f536",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("a834737b-6c98-4d5d-b10b-1c56d324e308",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("b9d5f07c-a5d2-4e23-8a5e-d60b47f75fc2"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceGroupListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("7582d216-dd14-4d4a-9ff2-16884f8fd6d6"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceGroupListOptions.TAG_FILTER_BY_ID, List.class,
                                                                    option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(79),
                                                                                        Long.valueOf(100),
                                                                                        Order.getDefault(),
                                                                                        "b15e2808-a1aa-41c6-9335-5e27dc8c886d",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(79),
                                                                                        Long.valueOf(100),
                                                                                        Order.getDefault(),
                                                                                        "b15e2808-a1aa-41c6-9335-5e27dc8c886d",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2.hashCode(), devicegrouplistoptions1.hashCode());
            int hashCode = devicegrouplistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegrouplistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroupListOptions devicegrouplistoptions1 = new DeviceGroupListOptions(Integer.valueOf(-55),
                                                                                        Long.valueOf(-51),
                                                                                        Order.getDefault(),
                                                                                        "042e4cb0-6212-4ce6-bee0-5d62f2660cf5",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions2 = new DeviceGroupListOptions(Integer.valueOf(-55),
                                                                                        Long.valueOf(-51),
                                                                                        Order.getDefault(),
                                                                                        "042e4cb0-6212-4ce6-bee0-5d62f2660cf5",
                                                                                        null, null);
            DeviceGroupListOptions devicegrouplistoptions3 = new DeviceGroupListOptions(Integer.valueOf(66),
                                                                                        Long.valueOf(65),
                                                                                        Order.getDefault(),
                                                                                        "84aa376b-1946-418a-988b-8c9815645d36",
                                                                                        null, null);
            assertNotNull(devicegrouplistoptions1);
            assertNotNull(devicegrouplistoptions2);
            assertNotNull(devicegrouplistoptions3);
            assertNotSame(devicegrouplistoptions2, devicegrouplistoptions1);
            assertNotSame(devicegrouplistoptions3, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions2, devicegrouplistoptions1);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions2);
            assertEquals(devicegrouplistoptions1, devicegrouplistoptions1);
            assertFalse(devicegrouplistoptions1.equals(null));
            assertNotEquals(devicegrouplistoptions3, devicegrouplistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
