// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1571831495318L), null,
                                                       "7e4f569b-696c-4910-ae9c-4678adbd05a2", 15,
                                                       "419dbb06-aef5-419a-800a-8684db7e9761",
                                                       "a3fd4b1d-28d2-4fe6-9c83-f40b635c4f06",
                                                       new Date(1571831493671L));
            DeviceGroup devicegroup2 = devicegroup1.clone();
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1571831491659L), null,
                                                       "2e648952-7bd8-4b74-9fcd-21683075cfc8", 57,
                                                       "83aea7f7-6b90-44dd-b772-cadb54d0c023",
                                                       "2fb6b585-423d-4604-8037-3dad3d53e659",
                                                       new Date(1571831496665L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1571831491659L), null,
                                                       "2e648952-7bd8-4b74-9fcd-21683075cfc8", 57,
                                                       "83aea7f7-6b90-44dd-b772-cadb54d0c023",
                                                       "2fb6b585-423d-4604-8037-3dad3d53e659",
                                                       new Date(1571831496665L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotSame(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2.hashCode(), devicegroup1.hashCode());
            int hashCode = devicegroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, devicegroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceGroup devicegroup = new DeviceGroup(new Date(1571831496164L), null,
                                                  "1a06a22e-68f7-467d-8df4-d7c5ec9be79b", 105,
                                                  "a3e6c46c-db7f-455f-8ff2-32e5550717d7",
                                                  "da802483-265c-4382-adb5-b380254d098b", new Date(1571831489813L));
        assertTrue(devicegroup.isValid());
        DeviceGroup devicegroupInvalid = new DeviceGroup(new Date(1571831488572L), null,
                                                         "5a65ce49-5965-426d-9efc-888a2e5495a7fdd081d0-d2e2-455e-ade2-ef994692c247ca3281f6-0a93-4e94-83d9-861d8e9744658d17cc07-1489-4018-8c44-53d1e6747550d760bf36-1ee9-43cc-af2e-24ec1e2e15be9d0aa706-d024-4015-9ddd-e60957541d6c95fe0db4-a0ea-4633-8b6c-0dc431df214d939fa1c0-82cf-4171-a4ef-31489f44470654e062df-fc8b-46a7-af78-6d4297adefb03f9b6dec-81e7-46e6-974d-f9ff52b459f6a9b48df7-3500-4e52-9662-9ae1e19adb1208491107-c10e-4e45-9d65-84f2af8096607a63ef7c-e6c8-4460-b958-e9ccfbccec0ebe5f7aee-9e27-4215-9c7f-7d49ca771c559ee58f4d-bd15-4323-9cbf-7df81ca630f84208fbfc-1974-488c-a519-9576f30d52b3a81a52d5-c3f5-4051-a626-73c91339cfd25344519b-2ae7-45a6-892f-6492b61a0b2e9c92c003-f68a-4de9-8572-c2d9b8fd7b6af7f6732e-d53d-4b06-9698-eb8018d4968dfd246049-6b09-4a05-95c9-085a847ba826ec0b6e5b-f2b5-43ef-b4df-86d8cc18ab78d2756ce8-129a-4556-a557-b1722997ecde10f02ab0-230d-40f1-9df3-413db8299fbedf1f1a07-fdcb-4ba9-8590-9527e12641048c39f3a3-16ef-4435-bda6-3dd33e1950c8a9bc7863-3b51-49a0-b24d-20c04afc839a7a87023d-1630-4f0e-b6c1-15a1b609645ffab30887-9b82-42df-9b7b-072b444c94bc00130f4f-c491-4a26-a1f5-f28aff795d1c469e0042-c8a7-4fd7-b758-72e37f464275943aa4b0-6fd9-4464-9344-bb6cfaf51ec69edc0ae4-ce3c-4230-aba3-694484b1281591767cb8-8db4-46b4-b957-2637ccae67dbf78fdf33-a099-482f-925f-46afcc2461cb6c282bac-0833-4337-8a91-7ea4c230ba779837c320-2f4d-4df5-84df-93d482b1101fcb812a15-d197-4234-891d-947f935e25e3d47215ea-0b3c-4b07-adb4-203967753c4c31941944-4a6b-4053-b8eb-161de5df12d0dfa4bfce-04c8-45b3-bead-13b2f4354fe842a5ea28-83ab-4ba2-b770-623706b22aafe855b91f-cfec-4c66-a85b-55c79dd7e2017999f488-e0c2-4dda-b11b-8aba6fb659d4afa210de-c04d-4dc1-aa7c-93398dfdc7eb00e98b1e-9998-40be-8676-ee396ceba90cc9c537a8-f400-4f3f-a7c8-362229d51f4c9aef778e-da6a-44fc-96d9-c377fe16be1bebbcd9a7-f79a-4f60-a9f1-a73dfc89e6d5de8c241e-7435-47cd-8122-7dc58be82cad369dbe0c-b1f0-4e3b-9466-b135dc22e9ef77a14a72-9f7e-45fb-a669-515105cb1b649b4898fe-f56d-4a96-81eb-ed8db62cedcbfea905d1-1b5f-4e54-a93f-df8a83f6a0f2640f79a6-d39d-4013-82c9-ba012eeeb04fb90f63ef-5393-4147-9fe3-b6d98dd7961f",
                                                         82, "ebf6e2ea-02b4-4c8d-883b-d3efd5337332",
                                                         "57a79b6b-589b-4574-b2f3-5a0ddd2a3a3aa6df506f-7c8f-46e6-ad3c-9d1d736c48994cf525ae-28a2-47b6-b158-79de1a383d05914f54f6-b070-4fef-bfdf-e15d5e144857",
                                                         new Date(1571831492996L));
        assertFalse(devicegroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceGroup devicegroup1 = new DeviceGroup(new Date(1571831489140L), null,
                                                       "479dcc79-986f-4751-8760-b523a9a0dcfc", -122,
                                                       "3115116d-39ec-4eeb-a8a6-7fc4eac4a150",
                                                       "c4aaa5c9-6c57-4545-beeb-d6feb5f1c865",
                                                       new Date(1571831490325L));
            DeviceGroup devicegroup2 = new DeviceGroup(new Date(1571831489140L), null,
                                                       "479dcc79-986f-4751-8760-b523a9a0dcfc", -122,
                                                       "3115116d-39ec-4eeb-a8a6-7fc4eac4a150",
                                                       "c4aaa5c9-6c57-4545-beeb-d6feb5f1c865",
                                                       new Date(1571831490325L));
            DeviceGroup devicegroup3 = new DeviceGroup(new Date(1571831493809L), null,
                                                       "2e5f152b-aca2-4367-bf75-372d92dff1d7", -126,
                                                       "64264d14-1471-44ff-9d3e-fa9b71a1f04c",
                                                       "dc3b48f1-d189-40fc-ab1d-6f1b866c3485",
                                                       new Date(1571831494916L));
            assertNotNull(devicegroup1);
            assertNotNull(devicegroup2);
            assertNotNull(devicegroup3);
            assertNotSame(devicegroup2, devicegroup1);
            assertNotSame(devicegroup3, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup2, devicegroup1);
            assertEquals(devicegroup1, devicegroup2);
            assertEquals(devicegroup1, devicegroup1);
            assertFalse(devicegroup1.equals(null));
            assertNotEquals(devicegroup3, devicegroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
