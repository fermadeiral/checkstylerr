// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUserInvitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUserInvitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("69f29faa-9e7b-4d5c-b8a3-9b44aa22449d",
                                                                                           new Date(1553524610306L),
                                                                                           "c52069af-c61b-429e-96ac-3bd2f62b8f74",
                                                                                           new Date(1553524611589L),
                                                                                           "fc455998-c792-4491-82ce-190db8ef0cac",
                                                                                           null,
                                                                                           new Date(1553524612680L),
                                                                                           "346c3471-13f7-4f7e-bd78-5c0b63ba1128");
            SubtenantUserInvitation subtenantuserinvitation2 = subtenantuserinvitation1.clone();
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("2d042031-1028-4a9c-9841-04b7a29162d4",
                                                                                           new Date(1553524609386L),
                                                                                           "94a7d8a6-f655-414a-84d2-5d205ecc5cc1",
                                                                                           new Date(1553524609496L),
                                                                                           "f7ed1cbb-e52e-4468-a79e-8c9a485268d7",
                                                                                           null,
                                                                                           new Date(1553524606404L),
                                                                                           "aff70628-a3e0-447f-b8f5-3ee514272016");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("2d042031-1028-4a9c-9841-04b7a29162d4",
                                                                                           new Date(1553524609386L),
                                                                                           "94a7d8a6-f655-414a-84d2-5d205ecc5cc1",
                                                                                           new Date(1553524609496L),
                                                                                           "f7ed1cbb-e52e-4468-a79e-8c9a485268d7",
                                                                                           null,
                                                                                           new Date(1553524606404L),
                                                                                           "aff70628-a3e0-447f-b8f5-3ee514272016");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2.hashCode(), subtenantuserinvitation1.hashCode());
            int hashCode = subtenantuserinvitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuserinvitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUserInvitation subtenantuserinvitation = new SubtenantUserInvitation("b8085427-7016-4c42-b52a-fb2b3d2f2a43",
                                                                                      new Date(1553524613113L),
                                                                                      "b547d752-40fe-44ce-8617-11d6faea0fdd",
                                                                                      new Date(1553524611996L),
                                                                                      "21c1b099-6d5c-44cd-9805-af905a5807d1",
                                                                                      null, new Date(1553524604782L),
                                                                                      "b59c691e-7bfd-4dfa-aefb-1bdea21a8f90");
        assertTrue(subtenantuserinvitation.isValid());
        SubtenantUserInvitation subtenantuserinvitationInvalid = new SubtenantUserInvitation(null,
                                                                                             new Date(1553524607251L),
                                                                                             null,
                                                                                             new Date(1553524612010L),
                                                                                             "690fac2e-e672-4a42-bb3d-618928ab1765",
                                                                                             null,
                                                                                             new Date(1553524608715L),
                                                                                             "691b6c17-eeb6-4bd5-85f0-772ab5e391f9");
        assertFalse(subtenantuserinvitationInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUserInvitation subtenantuserinvitation1 = new SubtenantUserInvitation("1ec9d768-c891-4837-b1a5-0f56a1425f9f",
                                                                                           new Date(1553524606311L),
                                                                                           "7ede136a-ce99-4c1b-98a8-4c9037e9535c",
                                                                                           new Date(1553524613060L),
                                                                                           "58a83b3a-5252-48d1-9cdd-c141186f3e65",
                                                                                           null,
                                                                                           new Date(1553524611155L),
                                                                                           "a716ba94-28f7-4127-b7a5-644c5cd0954a");
            SubtenantUserInvitation subtenantuserinvitation2 = new SubtenantUserInvitation("1ec9d768-c891-4837-b1a5-0f56a1425f9f",
                                                                                           new Date(1553524606311L),
                                                                                           "7ede136a-ce99-4c1b-98a8-4c9037e9535c",
                                                                                           new Date(1553524613060L),
                                                                                           "58a83b3a-5252-48d1-9cdd-c141186f3e65",
                                                                                           null,
                                                                                           new Date(1553524611155L),
                                                                                           "a716ba94-28f7-4127-b7a5-644c5cd0954a");
            SubtenantUserInvitation subtenantuserinvitation3 = new SubtenantUserInvitation("5f669b0f-8237-4b75-bff3-904994ef12d9",
                                                                                           new Date(1553524608007L),
                                                                                           "68c1801f-db1d-4751-8684-ce6b63f3ad76",
                                                                                           new Date(1553524608426L),
                                                                                           "194a6286-0e45-4833-b250-5c1ceab3f218",
                                                                                           null,
                                                                                           new Date(1553524608037L),
                                                                                           "14a80c8e-255e-4e19-a4c0-e8f6e75a8b20");
            assertNotNull(subtenantuserinvitation1);
            assertNotNull(subtenantuserinvitation2);
            assertNotNull(subtenantuserinvitation3);
            assertNotSame(subtenantuserinvitation2, subtenantuserinvitation1);
            assertNotSame(subtenantuserinvitation3, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation2, subtenantuserinvitation1);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation2);
            assertEquals(subtenantuserinvitation1, subtenantuserinvitation1);
            assertFalse(subtenantuserinvitation1.equals(null));
            assertNotEquals(subtenantuserinvitation3, subtenantuserinvitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
