// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model Policy.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicy {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            Policy policy1 = new Policy("46bb36b8-4d50-4b55-aa45-f61d6a88a185", false,
                                        "93226864-5de4-429b-aa9b-986370f2d8f9", false,
                                        "eccf6a6d-69b7-449b-bd8e-11cd8e2e88da");
            Policy policy2 = policy1.clone();
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            Policy policy1 = new Policy("9dcc1e0f-779c-4d9a-a483-27feb9305a5c", false,
                                        "7b36dab4-636a-44b0-ab76-465d5f15e33f", false,
                                        "978bd358-5d2c-4fe9-ae66-465e3105ccd0");
            Policy policy2 = new Policy("9dcc1e0f-779c-4d9a-a483-27feb9305a5c", false,
                                        "7b36dab4-636a-44b0-ab76-465d5f15e33f", false,
                                        "978bd358-5d2c-4fe9-ae66-465e3105ccd0");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotSame(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2.hashCode(), policy1.hashCode());
            int hashCode = policy1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policy1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        Policy policy = new Policy("cc3954a8-fec5-4fd2-a519-e0f510b1eaf9", false,
                                   "c172fcf2-514e-44c8-8072-866e3351a92d", false,
                                   "a34d7189-7e86-4b09-8c76-fd299a7c5258");
        assertTrue(policy.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            Policy policy1 = new Policy("f2dd6b3e-940c-476f-a3c2-acbe82566c8a", true,
                                        "ee5d97ea-3b49-4dbf-a4a5-3dbaea5a739c", true,
                                        "a5feb588-1825-4d49-a2ed-e978184aad6a");
            Policy policy2 = new Policy("f2dd6b3e-940c-476f-a3c2-acbe82566c8a", true,
                                        "ee5d97ea-3b49-4dbf-a4a5-3dbaea5a739c", true,
                                        "a5feb588-1825-4d49-a2ed-e978184aad6a");
            Policy policy3 = new Policy("65eab952-0cf3-48d6-a51a-c86828de10cb", true,
                                        "df81adee-cac3-46a3-bb5c-ab19cd8d8846", true,
                                        "a259d150-b53a-4d01-ba55-3f8778cab1fd");
            assertNotNull(policy1);
            assertNotNull(policy2);
            assertNotNull(policy3);
            assertNotSame(policy2, policy1);
            assertNotSame(policy3, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy2, policy1);
            assertEquals(policy1, policy2);
            assertEquals(policy1, policy1);
            assertFalse(policy1.equals(null));
            assertNotEquals(policy3, policy1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
