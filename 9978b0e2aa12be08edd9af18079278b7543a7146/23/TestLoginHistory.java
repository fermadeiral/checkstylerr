// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553524611251L),
                                                          "0692c391-c215-4696-9318-92d701fe62bb", true,
                                                          "539ecb3a-47d1-40a9-8e33-6a6972fab80d");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553524608178L),
                                                          "28625c51-534e-4bc7-a184-056113176cdf", true,
                                                          "7617e0a5-72bd-4016-ab90-e664daffb85c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553524608178L),
                                                          "28625c51-534e-4bc7-a184-056113176cdf", true,
                                                          "7617e0a5-72bd-4016-ab90-e664daffb85c");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1553524608725L), "4e663395-a7e8-494e-ac62-4d18ab3c1942",
                                                     true, "a91e8cde-2b27-454b-b063-afa00979bc89");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1553524609015L),
                                                          "a182e2be-b07b-4126-8126-378097746c4e", true,
                                                          "3f969945-dd66-4265-9a1e-126fc7fac5ac");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1553524609015L),
                                                          "a182e2be-b07b-4126-8126-378097746c4e", true,
                                                          "3f969945-dd66-4265-9a1e-126fc7fac5ac");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1553524613054L),
                                                          "1c0632d3-b5db-4c4e-8b15-ee5ddff7d8e6", true,
                                                          "ac0d67eb-227a-4997-86bc-59c6adf05133");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
