// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import org.junit.Test;

/**
 * Unit tests for Model ParentAccount.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestParentAccount {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("ef99a17c-8363-4c97-9f0d-7d5b531c5465",
                                                             "2a5b4f8c-5104-499a-9298-232f6f9f3081",
                                                             "96937e44-8b44-4d3a-bb9d-2eac9267c738");
            ParentAccount parentaccount2 = parentaccount1.clone();
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("5d05dc80-5d47-495c-a45f-8a946be721be",
                                                             "e8834413-a546-4f30-bf4b-aeaa6628eca7",
                                                             "6191967f-cd0d-4b49-b205-32b250059bc9");
            ParentAccount parentaccount2 = new ParentAccount("5d05dc80-5d47-495c-a45f-8a946be721be",
                                                             "e8834413-a546-4f30-bf4b-aeaa6628eca7",
                                                             "6191967f-cd0d-4b49-b205-32b250059bc9");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotSame(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2.hashCode(), parentaccount1.hashCode());
            int hashCode = parentaccount1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, parentaccount1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ParentAccount parentaccount = new ParentAccount("13e0db6d-7f60-415a-b5de-f3d79e94e082",
                                                        "38bd2b41-3fd2-43c6-9e70-9454909ec5cb",
                                                        "68b1f2da-52fa-42ef-8f65-31c615090bbb");
        assertTrue(parentaccount.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ParentAccount parentaccount1 = new ParentAccount("76101689-ff59-453a-87f2-d1dd8e3512c3",
                                                             "65d3fc3d-8cbd-48eb-94ca-c308a0918b61",
                                                             "4315b55d-9f3e-4946-a6b1-a4dcfb649a96");
            ParentAccount parentaccount2 = new ParentAccount("76101689-ff59-453a-87f2-d1dd8e3512c3",
                                                             "65d3fc3d-8cbd-48eb-94ca-c308a0918b61",
                                                             "4315b55d-9f3e-4946-a6b1-a4dcfb649a96");
            ParentAccount parentaccount3 = new ParentAccount("0ec48e24-4da4-4bde-944d-0703917b2f2a",
                                                             "08443846-0469-468d-aa72-900a7f5205d0",
                                                             "9d319a16-e215-4dff-a357-d22666bd1a8f");
            assertNotNull(parentaccount1);
            assertNotNull(parentaccount2);
            assertNotNull(parentaccount3);
            assertNotSame(parentaccount2, parentaccount1);
            assertNotSame(parentaccount3, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount2, parentaccount1);
            assertEquals(parentaccount1, parentaccount2);
            assertEquals(parentaccount1, parentaccount1);
            assertFalse(parentaccount1.equals(null));
            assertNotEquals(parentaccount3, parentaccount1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
