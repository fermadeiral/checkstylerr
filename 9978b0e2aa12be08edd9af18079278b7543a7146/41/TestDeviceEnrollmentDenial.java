// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("15d8c938c2b04517b1d6f2ac1535f8eb",
                                                                                        new Date(1553524607023L),
                                                                                        "a2468564-9cb6-44f5-9f4a-9efe36fafe6d",
                                                                                        "69ef0e9bdab7707019255e6533ffa5e2",
                                                                                        "edf40cabd766d154e14fbeeb83dfb90c");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("ac6f18abeb229bfeb1ab656bdf272bca",
                                                                                        new Date(1553524609834L),
                                                                                        "c7633e1f-48d7-4e9a-874b-c5b1baedf4b2",
                                                                                        "b2ec6ea4ecd4afd6abb405dd514a6636",
                                                                                        "d2e101d025fc3b208d5723d66c1c59b2");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("ac6f18abeb229bfeb1ab656bdf272bca",
                                                                                        new Date(1553524609834L),
                                                                                        "c7633e1f-48d7-4e9a-874b-c5b1baedf4b2",
                                                                                        "b2ec6ea4ecd4afd6abb405dd514a6636",
                                                                                        "d2e101d025fc3b208d5723d66c1c59b2");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("aaaa7fb50edece49baf0eb9a8b6bbaf7",
                                                                                   new Date(1553524610867L),
                                                                                   "754b7c1b-ad40-46f5-ba27-ddbd9473dac6",
                                                                                   "e29e0f75a3aea93fe77cdf9cc7bae14f",
                                                                                   "94adc561115c7f7fecd8f0a9d74c5d27");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("\u0017VCXë¹µæ‚†!à¯ºJè´®ï˜‡æ°®Å´Pê•·)\u0002åœ­î”§?_F\u0017>IÇŸà¹¥@\u0006EC\u0001Nä¯“æ“¤P\u0015.ß¦\u001eA\u0013JJ;T&â¢?Qé·«,$$))í˜•\t,N(",
                                                                                          new Date(1553524604333L),
                                                                                          "9ff3d738-7edc-4600-98e7-4b55fc44534e",
                                                                                          "66Tê„?66?6\u001e& ä¹ª\u0014\u001c\u001c%6?6\u0012[CJ6I,6\u0000\u001a6\u000e;Y\u001a6Têº–6\u0000ã€”í’˜)íŽ„ì¯©66%I6\u001f6æ‚²î—¿6)â„¿6\u0011ä¢”é–§%6â¼»â¥¶",
                                                                                          "1â›€#1\u00007\u001bBæ¡§1/\u0017ML1@\u0002å§¦\u000f\u000e7&ã®‘D;1.>î©±è±²>KéŠ¨ì‰€ê¬»1\bé?¹11æª»71\u0011\u001f1717!J\fî½¿7ï”•%#)\u001117â¸½ìž›1");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("94ac6f8cbefb5cd18d908352cc5cb38a",
                                                                                        new Date(1553524608486L),
                                                                                        "e2592512-4337-48ca-a749-bbb2a0f50ad1",
                                                                                        "dbeca7aeddaf0ce4fc62b7b7b4ae4c94",
                                                                                        "a4e79d999191127bb7a0f074cc4384a2");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("94ac6f8cbefb5cd18d908352cc5cb38a",
                                                                                        new Date(1553524608486L),
                                                                                        "e2592512-4337-48ca-a749-bbb2a0f50ad1",
                                                                                        "dbeca7aeddaf0ce4fc62b7b7b4ae4c94",
                                                                                        "a4e79d999191127bb7a0f074cc4384a2");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("84ff65fb5e8d65cde2c2cfb0e5e09cd8",
                                                                                        new Date(1553524610790L),
                                                                                        "55c3ee59-f7cd-4221-9c0e-866db844a70f",
                                                                                        "fa4cf2ccf1fa70b85ebac8ff67b3cbe0",
                                                                                        "a6b1fe1d1ddedf516f4c45781ec4247a");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
