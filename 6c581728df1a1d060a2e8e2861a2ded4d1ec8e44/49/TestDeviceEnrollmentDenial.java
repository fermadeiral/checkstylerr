// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        new Date(1557969578312L),
                                                                                        "4c975b68-a0ed-401e-9705-ce4912a184e2",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        new Date(1557969577902L),
                                                                                        "1e5fca3a-039e-401e-81fe-57759b3adc20",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        new Date(1557969577902L),
                                                                                        "1e5fca3a-039e-401e-81fe-57759b3adc20",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                   new Date(1557969576735L),
                                                                                   "9b853376-3bd3-426b-b333-7efd9ce9f152",
                                                                                   "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                   "bc05f908d0c49f1d35eb7cbe17ca2cb5");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("/(6\u001b\u00166Y%N--\t66(-6è?ƒXI R\u000e6ï–‹è³ºè«¸<6-6]66è–¿\u001e6\u0003\u0006@?66;ê„¡P\u0013\u0002ê¢·B6#A6\u0016XMM]\u0018^à³¹",
                                                                                          new Date(1557969579168L),
                                                                                          "32c45d68-81dc-4e1f-aac3-3f4068e84817",
                                                                                          "/(6\u001b\u00166Y%N--\t66(-6è?ƒXI R\u000e6ï–‹è³ºè«¸<6-6]66è–¿\u001e6\u0003\u0006@?66;ê„¡P\u0013\u0002ê¢·B6#A6\u0016XMM]\u0018^à³¹",
                                                                                          "/(6\u001b\u00166Y%N--\t66(-6è?ƒXI R\u000e6ï–‹è³ºè«¸<6-6]66è–¿\u001e6\u0003\u0006@?66;ê„¡P\u0013\u0002ê¢·B6#A6\u0016XMM]\u0018^à³¹");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        new Date(1557969575822L),
                                                                                        "a36790e6-0441-4e61-884c-08d5d8ba7409",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        new Date(1557969575822L),
                                                                                        "a36790e6-0441-4e61-884c-08d5d8ba7409",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        new Date(1557969571908L),
                                                                                        "48d384f7-4668-4385-b889-1990f72e270e",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5",
                                                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
