// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEvents.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEvents {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1557969569867L), null,
                                                          new Date(1557969570805L),
                                                          "0889a696-e401-4199-83f4-e0325420d93c",
                                                          "06273e9f-b8d3-4002-b34c-265257e70b18",
                                                          "3b69c397-2609-4158-8f5b-27abdbca7864",
                                                          "b8363886-799c-42e4-bea3-497dc76b774c",
                                                          "74a76c28-bb70-4f5a-a289-e464e081d9e1",
                                                          "1640b30f-4d02-4012-9dac-b2a52f46d30d", false);
            DeviceEvents deviceevents2 = deviceevents1.clone();
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1557969576471L), null,
                                                          new Date(1557969575197L),
                                                          "e010be9c-266a-4450-9cca-1cbd1d91000f",
                                                          "ef20777e-bdf3-48b5-8638-8abc1b4ad6cd",
                                                          "81a977e8-92d7-48ac-9ebb-b1085fa109f2",
                                                          "d3a6c8f7-491f-4d03-816d-e0371c10d759",
                                                          "6f3a4406-9d07-444a-ba48-30daf354f7b6",
                                                          "a26efd0e-c9ec-4dd5-8088-40f174600812", true);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1557969576471L), null,
                                                          new Date(1557969575197L),
                                                          "e010be9c-266a-4450-9cca-1cbd1d91000f",
                                                          "ef20777e-bdf3-48b5-8638-8abc1b4ad6cd",
                                                          "81a977e8-92d7-48ac-9ebb-b1085fa109f2",
                                                          "d3a6c8f7-491f-4d03-816d-e0371c10d759",
                                                          "6f3a4406-9d07-444a-ba48-30daf354f7b6",
                                                          "a26efd0e-c9ec-4dd5-8088-40f174600812", true);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotSame(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2.hashCode(), deviceevents1.hashCode());
            int hashCode = deviceevents1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceevents1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEvents deviceevents = new DeviceEvents(null, new Date(1557969576146L), null, new Date(1557969577579L),
                                                     "d7e43b93-a9ee-4126-b5d8-ffd7ea5b58be",
                                                     "eb346266-149d-4efe-91ee-a3894d13b44e",
                                                     "982fe412-7dd4-4923-9774-2dc79ebe942a",
                                                     "97b1c9f2-f450-4001-9eec-b9fad28f8fde",
                                                     "6e6a649f-92b2-42f3-a027-79f0fd7ecfb8",
                                                     "39f8b2f7-421f-4e4a-a677-be499440e6ef", true);
        assertTrue(deviceevents.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEvents deviceevents1 = new DeviceEvents(null, new Date(1557969574545L), null,
                                                          new Date(1557969577937L),
                                                          "e763e7e6-8224-445d-92d4-0a139dd5c035",
                                                          "952448af-0663-4792-a3d0-ccc4b52e573a",
                                                          "8ea42dab-0a2b-4508-9fa3-1d63bc381d3c",
                                                          "a2dc92d4-a8d4-467d-975f-1ed44e85288d",
                                                          "3ca39cf2-2b2e-4b1f-85d1-1744b82e3100",
                                                          "199d7575-4f73-44cd-b43f-ecd5941212e1", false);
            DeviceEvents deviceevents2 = new DeviceEvents(null, new Date(1557969574545L), null,
                                                          new Date(1557969577937L),
                                                          "e763e7e6-8224-445d-92d4-0a139dd5c035",
                                                          "952448af-0663-4792-a3d0-ccc4b52e573a",
                                                          "8ea42dab-0a2b-4508-9fa3-1d63bc381d3c",
                                                          "a2dc92d4-a8d4-467d-975f-1ed44e85288d",
                                                          "3ca39cf2-2b2e-4b1f-85d1-1744b82e3100",
                                                          "199d7575-4f73-44cd-b43f-ecd5941212e1", false);
            DeviceEvents deviceevents3 = new DeviceEvents(null, new Date(1557969578317L), null,
                                                          new Date(1557969572077L),
                                                          "bb884843-9a68-4332-ae5b-da7d09664296",
                                                          "8c28987a-4b74-476e-aeb6-c44f70e87139",
                                                          "8218caca-6757-4d56-af10-6b5198624d83",
                                                          "268a621f-3603-4f6d-828a-4c91c998d7b8",
                                                          "ad01924d-84a4-4c3e-9ed8-0ef1723c1ad4",
                                                          "e2c69ffe-4bd5-4881-bb8e-656b2a385a74", false);
            assertNotNull(deviceevents1);
            assertNotNull(deviceevents2);
            assertNotNull(deviceevents3);
            assertNotSame(deviceevents2, deviceevents1);
            assertNotSame(deviceevents3, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents2, deviceevents1);
            assertEquals(deviceevents1, deviceevents2);
            assertEquals(deviceevents1, deviceevents1);
            assertFalse(deviceevents1.equals(null));
            assertNotEquals(deviceevents3, deviceevents1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
