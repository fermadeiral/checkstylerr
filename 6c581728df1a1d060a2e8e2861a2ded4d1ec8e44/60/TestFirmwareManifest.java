// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareManifest.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareManifest {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1557969578894L), 91,
                                                                      "3d591056-2753-4d72-a077-f8bc0514a5c9",
                                                                      "ef0a1b53-c435-4583-99e4-8bf97d1a21a3",
                                                                      "f10b8302-96e8-4113-9225-720e9b76e65c",
                                                                      "343a28f8-48d3-45e1-9b7e-9878993df78a",
                                                                      "fe56bf15-7ec0-4cfc-bd1a-e84dc7316df2",
                                                                      "6ba95015-336e-46e4-97c8-8eab1cab27a7",
                                                                      new Date(1557969575333L),
                                                                      new Date(1557969574731L));
            FirmwareManifest firmwaremanifest2 = firmwaremanifest1.clone();
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1557969578312L), -56,
                                                                      "da9a0b78-0f12-49e6-a57b-1e3990d0a915",
                                                                      "759af172-b11c-454a-b11b-df4be7654641",
                                                                      "866899ba-3ef8-4e4b-afc3-317ce03f159f",
                                                                      "814c9f00-06e9-4f0b-b269-48acdabae741",
                                                                      "df6ccb8a-4b73-4bd5-82b0-953e5a70868a",
                                                                      "cc543205-0527-49ce-b3e5-e2209bc7f9ba",
                                                                      new Date(1557969569597L),
                                                                      new Date(1557969571753L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1557969578312L), -56,
                                                                      "da9a0b78-0f12-49e6-a57b-1e3990d0a915",
                                                                      "759af172-b11c-454a-b11b-df4be7654641",
                                                                      "866899ba-3ef8-4e4b-afc3-317ce03f159f",
                                                                      "814c9f00-06e9-4f0b-b269-48acdabae741",
                                                                      "df6ccb8a-4b73-4bd5-82b0-953e5a70868a",
                                                                      "cc543205-0527-49ce-b3e5-e2209bc7f9ba",
                                                                      new Date(1557969569597L),
                                                                      new Date(1557969571753L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2.hashCode(), firmwaremanifest1.hashCode());
            int hashCode = firmwaremanifest1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwaremanifest1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareManifest firmwaremanifest = new FirmwareManifest(new Date(1557969575807L), 125,
                                                                 "34d38245-74d7-44f1-867a-c5742d0849f8",
                                                                 "1be69050-c533-451c-a2a0-2bb6dd78b68d",
                                                                 "5fb04b02-0ec3-4b44-b79e-3cef276bc805",
                                                                 "185a28d8-12f3-4743-972c-78e4ab5fdb0f",
                                                                 "e8a5d6e5-319c-4455-a7f0-5e8a66196fb8",
                                                                 "a3da116a-521c-43f1-9e47-1e179c94acc5",
                                                                 new Date(1557969577421L), new Date(1557969571427L));
        assertTrue(firmwaremanifest.isValid());
        FirmwareManifest firmwaremanifestInvalid = new FirmwareManifest(new Date(1557969573217L), -73,
                                                                        "016ac5f8-60c7-402f-80e1-aae375f40f5c",
                                                                        "aa592400-7663-4161-9686-81608f4d75665dbdd930-9cb4-4f68-9689-2a9b75c63f78c8cc53f9-0f27-46e8-b8ca-4872220ee3a56feb06d7-35f8-4f3c-96c1-22ad47e013f95f2a137e-c8e4-4356-a3c2-ac3ae1aae1e3be1550d1-601c-4e2d-a348-9c81fef3fe233207b225-2f8d-48f4-8a3f-548006e45eabdc5d6d10-8f8c-4478-9bbd-525978a620aed6b45afd-3163-4f71-9a60-78d48b17b852f6220a14-c980-4738-8659-d79e31c8f1a37dd66184-2704-4ea8-92e7-23b3f5955b370283bedc-9a8a-4eac-ada8-78f26ca3f6a0ceca37e9-91a1-444e-9ab5-c8651dae234c38a8bcb1-fb31-4b06-8ef1-8d8aa2da3838e53ea423-5400-4e1a-95a5-f2695441427f2d82bcd5-b508-4776-ab79-dbbfdddf167794eff5bf-75e3-4abb-871b-34da42e54401abd6fa08-2621-489e-ae95-2963cb884bbe2e8b50c9-53f9-4087-9035-b166b4a433c5d47d6b1e-8275-443c-b973-5a890a4cf39ae37b91d0-4f0e-4977-a97b-de2ef17460721db892a1-ef4e-4c85-8e80-8304daa732c927e04fe4-6405-424b-8d6f-8db0f1231fd4231a12f8-54c0-4dfc-bb34-b44841a90aa602819c00-c570-4bea-9cb4-a5e0d2922f566e0d1bd0-73db-4a3e-9700-0139c03a320963dbc3d4-ce64-47ef-9dd3-aeef098c3ef57bff6540-c25e-4d96-91d8-41eba2bbd0311b72768c-619c-49f2-8555-2c6b45c5c9c76444a485-bb33-407e-bb26-9c7ed1c09620e03a0904-5c4e-474d-ad86-19f0d588ff4adee7e735-80e2-4365-b581-0928fb980d2f4851a210-735c-4cb3-b007-76ccca4d744ffd4dbd24-840e-40bc-8731-374fdb9a5d0371a1e6ea-5bac-43fe-9430-aa759314ee09f4aa13df-edea-47d2-b34e-54a2b0ed279a94098ab4-177b-4e47-aa52-4ee721cdac904c5311a8-a394-4b53-8e24-3e8c9ae0920d076b4e04-f65c-4dbd-a677-8c22b9d2b2cb5d3af51b-b9ad-42cf-8aa0-8e2e13f81b68fb52e763-c946-4806-9ce7-48ecbebcde15828ad8bd-5f0f-4fea-ad43-1b82ad6a83962e743df2-1736-4d1a-843a-02996dea3f957947a1e0-321a-421b-b5fb-099d75bd8ff9a6bf736d-8f29-4e74-b434-3a7242f90e388b06de53-231e-4e53-9e4b-2aeb372372996e3570e2-09c9-4993-8b87-7b36f88dfa04d70ae25d-5b92-4806-b1ec-775c59643df8f8825f28-315f-45b3-968a-8e3207af16ff2797131c-5829-46ef-bd62-28185d260d537973f230-9667-41f6-b719-975386d69a4f460fa1f0-5d76-4a75-b33a-d609d2fee7c9721e0853-9060-4318-bf62-5522a91a5a389d7eb47e-7b9f-4b2e-88f2-84ef55090a3ca756b9f4-8b6f-4b2a-bee8-1c6e894bd1fef0304423-f3fd-49e1-86e2-89361d609c44",
                                                                        "078e852e-6116-45b0-b71d-1e624435dcc3",
                                                                        "496ee954-abbe-4a4a-8c15-fbae075e1905",
                                                                        "50d39023-cf3f-4a76-8d86-0c2740a85c67",
                                                                        "bb16ea0d-381c-4a41-938f-70ff4f665f3ddbcf4d8c-2a13-4aa4-996f-c2b1e7604ab8f1bf94a2-4849-4cfc-8b0f-0c9d620e883c3f6cfed8-914a-416e-be32-89de20daa2e6",
                                                                        new Date(1557969579111L),
                                                                        new Date(1557969574217L));
        assertFalse(firmwaremanifestInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareManifest firmwaremanifest1 = new FirmwareManifest(new Date(1557969571692L), -25,
                                                                      "477b601a-a393-45fc-bfd2-289a3308a959",
                                                                      "ee62281d-0b5e-42bb-8206-b449f794b16d",
                                                                      "f56b4d5f-5452-4f64-a792-93252da3b385",
                                                                      "857105a2-3859-4af7-a1a9-ba0c95558815",
                                                                      "3ce052ce-598d-4d4c-ab26-e50149d42cec",
                                                                      "a2218436-3c8f-462e-8306-aab0ee58bd34",
                                                                      new Date(1557969571035L),
                                                                      new Date(1557969575025L));
            FirmwareManifest firmwaremanifest2 = new FirmwareManifest(new Date(1557969571692L), -25,
                                                                      "477b601a-a393-45fc-bfd2-289a3308a959",
                                                                      "ee62281d-0b5e-42bb-8206-b449f794b16d",
                                                                      "f56b4d5f-5452-4f64-a792-93252da3b385",
                                                                      "857105a2-3859-4af7-a1a9-ba0c95558815",
                                                                      "3ce052ce-598d-4d4c-ab26-e50149d42cec",
                                                                      "a2218436-3c8f-462e-8306-aab0ee58bd34",
                                                                      new Date(1557969571035L),
                                                                      new Date(1557969575025L));
            FirmwareManifest firmwaremanifest3 = new FirmwareManifest(new Date(1557969572890L), 5,
                                                                      "cbf3989e-d1ef-4b22-ba81-852fda5ed56f",
                                                                      "62d661d5-e927-4d41-8da0-18d384c0d3c9",
                                                                      "be2e162a-9fda-41a5-b50c-c15e669bed1f",
                                                                      "e8bdb2a6-6cf5-4f99-a546-d3b78bf09266",
                                                                      "fb9d99d3-31fe-40fa-9992-3b1b65039f01",
                                                                      "4c9bb1cd-6f2e-4ac7-9852-e3931db2c04f",
                                                                      new Date(1557969572613L),
                                                                      new Date(1557969579282L));
            assertNotNull(firmwaremanifest1);
            assertNotNull(firmwaremanifest2);
            assertNotNull(firmwaremanifest3);
            assertNotSame(firmwaremanifest2, firmwaremanifest1);
            assertNotSame(firmwaremanifest3, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest2, firmwaremanifest1);
            assertEquals(firmwaremanifest1, firmwaremanifest2);
            assertEquals(firmwaremanifest1, firmwaremanifest1);
            assertFalse(firmwaremanifest1.equals(null));
            assertNotEquals(firmwaremanifest3, firmwaremanifest1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
