// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1557969578031L),
                                                          "3a34abf9-9e6f-4502-9ea1-ee19d10c12fc", false,
                                                          "9f005ce8-6fd5-4716-949f-0eb72aa6a00f");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1557969576425L),
                                                          "ea0a16bc-cdef-4b05-b35a-55f6390d1f7c", false,
                                                          "eb3b38cf-1078-48ff-a28d-efe62a12ab5d");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1557969576425L),
                                                          "ea0a16bc-cdef-4b05-b35a-55f6390d1f7c", false,
                                                          "eb3b38cf-1078-48ff-a28d-efe62a12ab5d");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1557969575674L), "a0d55c28-b5ed-45e3-8044-a8affdc75259",
                                                     true, "2a177d98-c111-4299-ac5b-662fe86e2eb5");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1557969575615L),
                                                          "e9e5c46c-d4ff-45ae-86db-90ff91f28d1a", false,
                                                          "40aec786-6e37-414c-ad37-cfc6bdeb3a2c");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1557969575615L),
                                                          "e9e5c46c-d4ff-45ae-86db-90ff91f28d1a", false,
                                                          "40aec786-6e37-414c-ad37-cfc6bdeb3a2c");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1557969574879L),
                                                          "850e5ede-86ca-408c-a584-41bfbc1026dc", false,
                                                          "9b96afe6-d7b2-4ca2-b7fc-a3b6a1b91838");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
