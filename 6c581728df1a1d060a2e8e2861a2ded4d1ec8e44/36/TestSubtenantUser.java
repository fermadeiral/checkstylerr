// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantUser.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantUser {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                             "a51b838a-881f-4f29-b753-4a7b06c35551",
                                                             new Date(1557969577327L), -127, null,
                                                             "76b16.d8a7c@c69ff.me", true,
                                                             "b60f7dab-ed09-4b3b-a55e-46ef1c7dad28",
                                                             "bc05f908d0c49f1d35eb7cbe17ca2cb5", false, false, false,
                                                             77, null, null, "55698daa-5c35-48a4-b481-be12ed1fe028", 74,
                                                             "aca9523b-ba5e-49a4-91b1-cafcbcaa4f1e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1557969571138L), "Uw+==");
            SubtenantUser subtenantuser2 = subtenantuser1.clone();
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                             "183b3d9b-f6a5-4244-b596-e3342e9b16ab",
                                                             new Date(1557969576173L), -59, null,
                                                             "e2226.7621f@9cd89.fr", false,
                                                             "8d226aae-e2ef-42ec-8c6e-adcfbcdda4f3",
                                                             "bc05f908d0c49f1d35eb7cbe17ca2cb5", true, true, true, 121,
                                                             null, null, "e2d06943-ae2d-4a3a-9307-8ce705ef7da1", 53,
                                                             "d639ea3d-6cc7-46ae-b761-95da2ce8b962",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1557969574550L), "Uw+==");
            SubtenantUser subtenantuser2 = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                             "183b3d9b-f6a5-4244-b596-e3342e9b16ab",
                                                             new Date(1557969576173L), -59, null,
                                                             "e2226.7621f@9cd89.fr", false,
                                                             "8d226aae-e2ef-42ec-8c6e-adcfbcdda4f3",
                                                             "bc05f908d0c49f1d35eb7cbe17ca2cb5", true, true, true, 121,
                                                             null, null, "e2d06943-ae2d-4a3a-9307-8ce705ef7da1", 53,
                                                             "d639ea3d-6cc7-46ae-b761-95da2ce8b962",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1557969574550L), "Uw+==");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2.hashCode(), subtenantuser1.hashCode());
            int hashCode = subtenantuser1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantuser1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        SubtenantUser subtenantuser = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                        "8ba4b57c-0d11-4713-9111-4c06eb6f7987",
                                                        new Date(1557969573701L), -16, null, "eaf64.f77de@681fe.me",
                                                        true, "1b78b758-5a52-47e1-a8de-aca5b34dfced",
                                                        "bc05f908d0c49f1d35eb7cbe17ca2cb5", true, true, true, -55, null,
                                                        null, "17932bfc-23ac-40a1-a513-5bd838059848", -28,
                                                        "6ad81eaf-e257-4cdb-92b3-6cdd4910909f",
                                                        SubtenantUserStatus.getDefault(), null,
                                                        new Date(1557969577284L), "Uw+==");
        assertTrue(subtenantuser.isValid());
        SubtenantUser subtenantuserInvalid = new SubtenantUser(null, null, "aa2d3843-0dc7-4200-a83c-df674e2a2576",
                                                               new Date(1557969575188L), 14, null, null, true,
                                                               "aeffe5e6-8c9e-4fc6-aa17-9b13fb420b449723f466-5aa7-4313-b546-b145927e296d023f005a-4de0-4157-a698-caf36433e20c",
                                                               "/(6\u001b\u00166Y%N--\t66(-6è?ƒXI R\u000e6ï–‹è³ºè«¸<6-6]66è–¿\u001e6\u0003\u0006@?66;ê„¡P\u0013\u0002ê¢·B6#A6\u0016XMM]\u0018^à³¹",
                                                               false, false, true, 28, null, null,
                                                               "22c0b394-f93f-44aa-a443-3ad5f3330460", 6,
                                                               "8db0008b-9465-4770-b951-c7ceb7c2b736f06288cc-8540-4051-9a63-323929b3e2f937ecb8d0-d360-42b3-84e9-bb4d9a70d9ec",
                                                               SubtenantUserStatus.getDefault(), null,
                                                               new Date(1557969574456L),
                                                               "Eî´’:ì…”jê¾º!aEu?-,K<S[]ç˜…?Sí†?^dL0î‰ºë’Šá«ŸgA\\\\á¼ è€’èª‚ï??\\\\M'Då„‹i\u000e.$$\u000fê»¤dWT#-\u0010E-ã?«î¿‹vp\u00125XS");
        assertFalse(subtenantuserInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantUser subtenantuser1 = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                             "22c7c1b3-1723-4ac8-bbbc-ee6120081003",
                                                             new Date(1557969579129L), 45, null, "c495f.7c4cf@1fc89.me",
                                                             true, "03cb2b57-d9e3-4d9a-884e-98aa2405576f",
                                                             "bc05f908d0c49f1d35eb7cbe17ca2cb5", false, true, true, -88,
                                                             null, null, "25d813cd-fec7-4bab-ad0b-14c7ed0d1b57", -107,
                                                             "3011e76f-429a-4717-9e18-d555565ea06e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1557969576284L), "Uw+==");
            SubtenantUser subtenantuser2 = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                             "22c7c1b3-1723-4ac8-bbbc-ee6120081003",
                                                             new Date(1557969579129L), 45, null, "c495f.7c4cf@1fc89.me",
                                                             true, "03cb2b57-d9e3-4d9a-884e-98aa2405576f",
                                                             "bc05f908d0c49f1d35eb7cbe17ca2cb5", false, true, true, -88,
                                                             null, null, "25d813cd-fec7-4bab-ad0b-14c7ed0d1b57", -107,
                                                             "3011e76f-429a-4717-9e18-d555565ea06e",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1557969576284L), "Uw+==");
            SubtenantUser subtenantuser3 = new SubtenantUser("bc05f908d0c49f1d35eb7cbe17ca2cb5", null,
                                                             "f468ad94-9548-426f-9edd-6960f2f18610",
                                                             new Date(1557969575944L), 92, null, "06dfd.49d2a@b51a2.fr",
                                                             true, "30a11641-0d5d-42d2-aa19-e6c52df24382",
                                                             "bc05f908d0c49f1d35eb7cbe17ca2cb5", false, true, true, -47,
                                                             null, null, "e3b2a90a-fd30-4903-8856-e7e448477fdb", 9,
                                                             "e8145519-e4bc-43a7-9b6c-64c5e7929efb",
                                                             SubtenantUserStatus.getDefault(), null,
                                                             new Date(1557969570893L), "Uw+==");
            assertNotNull(subtenantuser1);
            assertNotNull(subtenantuser2);
            assertNotNull(subtenantuser3);
            assertNotSame(subtenantuser2, subtenantuser1);
            assertNotSame(subtenantuser3, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser2, subtenantuser1);
            assertEquals(subtenantuser1, subtenantuser2);
            assertEquals(subtenantuser1, subtenantuser1);
            assertFalse(subtenantuser1.equals(null));
            assertNotEquals(subtenantuser3, subtenantuser1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
