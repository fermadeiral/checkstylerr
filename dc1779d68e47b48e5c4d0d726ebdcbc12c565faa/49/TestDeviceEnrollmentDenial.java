// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollmentDenial.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollmentDenial {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        new Date(1558096100911L),
                                                                                        "63919c81-71ea-47d4-8ae2-6794ffef0d31",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = deviceenrollmentdenial1.clone();
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        new Date(1558096107576L),
                                                                                        "31e76d55-90ee-40d4-a3f5-405d0097b3ad",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        new Date(1558096107576L),
                                                                                        "31e76d55-90ee-40d4-a3f5-405d0097b3ad",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2.hashCode(), deviceenrollmentdenial1.hashCode());
            int hashCode = deviceenrollmentdenial1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollmentdenial1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollmentDenial deviceenrollmentdenial = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                   new Date(1558096104625L),
                                                                                   "9187445a-0e69-4f65-8204-ece8e2349603",
                                                                                   "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                   "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
        assertTrue(deviceenrollmentdenial.isValid());
        DeviceEnrollmentDenial deviceenrollmentdenialInvalid = new DeviceEnrollmentDenial("2@T^&72V2î‘£\u00112_8ã™?@7Mí›†C7#\u000e728N822?288=7æ‘ž\u0000*E8\u0005\u0014î†‰ì½´TK22Vï’ˆÓŸT@\u0001$$Y+\f87é¾§7å·­",
                                                                                          new Date(1558096103319L),
                                                                                          "ec473a5a-87c5-4559-bcb1-72288d828e97",
                                                                                          "2@T^&72V2î‘£\u00112_8ã™?@7Mí›†C7#\u000e728N822?288=7æ‘ž\u0000*E8\u0005\u0014î†‰ì½´TK22Vï’ˆÓŸT@\u0001$$Y+\f87é¾§7å·­",
                                                                                          "2@T^&72V2î‘£\u00112_8ã™?@7Mí›†C7#\u000e728N822?288=7æ‘ž\u0000*E8\u0005\u0014î†‰ì½´TK22Vï’ˆÓŸT@\u0001$$Y+\f87é¾§7å·­");
        assertFalse(deviceenrollmentdenialInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollmentDenial deviceenrollmentdenial1 = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        new Date(1558096109767L),
                                                                                        "446c5cf0-4a9a-408f-b358-291565a520cb",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
            DeviceEnrollmentDenial deviceenrollmentdenial2 = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        new Date(1558096109767L),
                                                                                        "446c5cf0-4a9a-408f-b358-291565a520cb",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
            DeviceEnrollmentDenial deviceenrollmentdenial3 = new DeviceEnrollmentDenial("bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        new Date(1558096106820L),
                                                                                        "4c6a6650-37a1-40e9-b090-cb42c4ba0422",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9",
                                                                                        "bf46f5afa631cc54fbbfd0f5b5ecdbe9");
            assertNotNull(deviceenrollmentdenial1);
            assertNotNull(deviceenrollmentdenial2);
            assertNotNull(deviceenrollmentdenial3);
            assertNotSame(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertNotSame(deviceenrollmentdenial3, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial2, deviceenrollmentdenial1);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial2);
            assertEquals(deviceenrollmentdenial1, deviceenrollmentdenial1);
            assertFalse(deviceenrollmentdenial1.equals(null));
            assertNotEquals(deviceenrollmentdenial3, deviceenrollmentdenial1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
